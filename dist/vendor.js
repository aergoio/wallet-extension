(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendor"],{

/***/ "./node_modules/@elderapo/typed-event-emitter/dist/index.es5.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@elderapo/typed-event-emitter/dist/index.es5.js ***!
  \**********************************************************************/
/*! exports provided: StrictTypedEventEmitter, InternalEventEmitterEvent, TypedEventEmitter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StrictTypedEventEmitter", function() { return StrictTypedEventEmitter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InternalEventEmitterEvent", function() { return InternalEventEmitterEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TypedEventEmitter", function() { return TypedEventEmitter; });
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */
var _extendStatics = function extendStatics(d, b) {
  _extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) {
      if (b.hasOwnProperty(p)) d[p] = b[p];
    }
  };

  return _extendStatics(d, b);
};

function __extends(d, b) {
  _extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var domain; // This constructor is used to store event handlers. Instantiating this is
// faster than explicitly calling `Object.create(null)` to get a "clean" empty
// object (tested with v8 v4.9).

function EventHandlers() {}

EventHandlers.prototype = Object.create(null);

function EventEmitter() {
  EventEmitter.init.call(this);
} // nodejs oddity
// require('events') === require('events').EventEmitter


EventEmitter.EventEmitter = EventEmitter;
EventEmitter.usingDomains = false;
EventEmitter.prototype.domain = undefined;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.

EventEmitter.defaultMaxListeners = 10;

EventEmitter.init = function () {
  this.domain = null;

  if (EventEmitter.usingDomains) {
    // if there is an active domain, then attach to it.
    if (domain.active && !(this instanceof domain.Domain)) ;
  }

  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
    this._events = new EventHandlers();
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}; // Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.


EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || isNaN(n)) throw new TypeError('"n" argument must be a positive number');
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
}; // These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.


function emitNone(handler, isFn, self) {
  if (isFn) handler.call(self);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) {
      listeners[i].call(self);
    }
  }
}

function emitOne(handler, isFn, self, arg1) {
  if (isFn) handler.call(self, arg1);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) {
      listeners[i].call(self, arg1);
    }
  }
}

function emitTwo(handler, isFn, self, arg1, arg2) {
  if (isFn) handler.call(self, arg1, arg2);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) {
      listeners[i].call(self, arg1, arg2);
    }
  }
}

function emitThree(handler, isFn, self, arg1, arg2, arg3) {
  if (isFn) handler.call(self, arg1, arg2, arg3);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) {
      listeners[i].call(self, arg1, arg2, arg3);
    }
  }
}

function emitMany(handler, isFn, self, args) {
  if (isFn) handler.apply(self, args);else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) {
      listeners[i].apply(self, args);
    }
  }
}

EventEmitter.prototype.emit = function emit(type) {
  var er, handler, len, args, i, events, domain;
  var doError = type === 'error';
  events = this._events;
  if (events) doError = doError && events.error == null;else if (!doError) return false;
  domain = this.domain; // If there is no 'error' event listener then throw.

  if (doError) {
    er = arguments[1];

    if (domain) {
      if (!er) er = new Error('Uncaught, unspecified "error" event');
      er.domainEmitter = this;
      er.domain = domain;
      er.domainThrown = false;
      domain.emit('error', er);
    } else if (er instanceof Error) {
      throw er; // Unhandled 'error' event
    } else {
      // At least give some kind of context to the user
      var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
      err.context = er;
      throw err;
    }

    return false;
  }

  handler = events[type];
  if (!handler) return false;
  var isFn = typeof handler === 'function';
  len = arguments.length;

  switch (len) {
    // fast cases
    case 1:
      emitNone(handler, isFn, this);
      break;

    case 2:
      emitOne(handler, isFn, this, arguments[1]);
      break;

    case 3:
      emitTwo(handler, isFn, this, arguments[1], arguments[2]);
      break;

    case 4:
      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
      break;
    // slower

    default:
      args = new Array(len - 1);

      for (i = 1; i < len; i++) {
        args[i - 1] = arguments[i];
      }

      emitMany(handler, isFn, this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
  events = target._events;

  if (!events) {
    events = target._events = new EventHandlers();
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object

      events = target._events;
    }

    existing = events[type];
  }

  if (!existing) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener];
    } else {
      // If we've already got an array, just append.
      if (prepend) {
        existing.unshift(listener);
      } else {
        existing.push(listener);
      }
    } // Check for listener leak


    if (!existing.warned) {
      m = $getMaxListeners(target);

      if (m && m > 0 && existing.length > m) {
        existing.warned = true;
        var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + type + ' listeners added. ' + 'Use emitter.setMaxListeners() to increase limit');
        w.name = 'MaxListenersExceededWarning';
        w.emitter = target;
        w.type = type;
        w.count = existing.length;
        emitWarning(w);
      }
    }
  }

  return target;
}

function emitWarning(e) {
  typeof console.warn === 'function' ? console.warn(e) : console.log(e);
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};

function _onceWrap(target, type, listener) {
  var fired = false;

  function g() {
    target.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(target, arguments);
    }
  }

  g.listener = listener;
  return g;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
}; // emits a 'removeListener' event iff the listener was removed


EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
  events = this._events;
  if (!events) return this;
  list = events[type];
  if (!list) return this;

  if (list === listener || list.listener && list.listener === listener) {
    if (--this._eventsCount === 0) this._events = new EventHandlers();else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;

    for (i = list.length; i-- > 0;) {
      if (list[i] === listener || list[i].listener && list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }

    if (position < 0) return this;

    if (list.length === 1) {
      list[0] = undefined;

      if (--this._eventsCount === 0) {
        this._events = new EventHandlers();
        return this;
      } else {
        delete events[type];
      }
    } else {
      spliceOne(list, position);
    }

    if (events.removeListener) this.emit('removeListener', type, originalListener || listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events;
  events = this._events;
  if (!events) return this; // not listening for removeListener, no need to emit

  if (!events.removeListener) {
    if (arguments.length === 0) {
      this._events = new EventHandlers();
      this._eventsCount = 0;
    } else if (events[type]) {
      if (--this._eventsCount === 0) this._events = new EventHandlers();else delete events[type];
    }

    return this;
  } // emit removeListener for all listeners on all events


  if (arguments.length === 0) {
    var keys = Object.keys(events);

    for (var i = 0, key; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }

    this.removeAllListeners('removeListener');
    this._events = new EventHandlers();
    this._eventsCount = 0;
    return this;
  }

  listeners = events[type];

  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    do {
      this.removeListener(type, listeners[listeners.length - 1]);
    } while (listeners[0]);
  }

  return this;
};

EventEmitter.prototype.listeners = function listeners(type) {
  var evlistener;
  var ret;
  var events = this._events;
  if (!events) ret = [];else {
    evlistener = events[type];
    if (!evlistener) ret = [];else if (typeof evlistener === 'function') ret = [evlistener.listener || evlistener];else ret = unwrapListeners(evlistener);
  }
  return ret;
};

EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;

function listenerCount(type) {
  var events = this._events;

  if (events) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
}; // About 1.5x faster than the two-arg version of Array#splice().


function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
    list[i] = list[k];
  }

  list.pop();
}

function arrayClone(arr, i) {
  var copy = new Array(i);

  while (i--) {
    copy[i] = arr[i];
  }

  return copy;
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);

  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }

  return ret;
}

var InternalEventEmitterEvent;

(function (InternalEventEmitterEvent) {
  InternalEventEmitterEvent["NewListener"] = "newListener";
  InternalEventEmitterEvent["RemoveListener"] = "removeListener";
})(InternalEventEmitterEvent || (InternalEventEmitterEvent = {}));

var TypedEventEmitter =
/** @class */
function () {
  function TypedEventEmitter(internalEventEmitter) {
    if (internalEventEmitter === void 0) {
      internalEventEmitter = new EventEmitter();
    }

    this.internalEventEmitter = internalEventEmitter;
    this.interceptEmit();
  }

  TypedEventEmitter.fromEventEmitter = function (eventEmitter) {
    return new TypedEventEmitter(eventEmitter);
  };

  TypedEventEmitter.prototype.on = function (event, listener) {
    var _this = this;

    this.internalEventEmitter.on(this.castTypedEventToEvent(event), listener);
    return function () {
      return _this.removeListener(event, listener);
    };
  };

  TypedEventEmitter.prototype.once = function (event, listener) {
    var _this = this;

    this.internalEventEmitter.once(this.castTypedEventToEvent(event), listener);
    return function () {
      return _this.removeListener(event, listener);
    };
  };

  TypedEventEmitter.prototype.prependListener = function (event, listener) {
    var _this = this;

    this.internalEventEmitter.prependListener(this.castTypedEventToEvent(event), listener);
    return function () {
      return _this.removeListener(event, listener);
    };
  };

  TypedEventEmitter.prototype.prependOnceListener = function (event, listener) {
    var _this = this;

    this.internalEventEmitter.prependOnceListener(this.castTypedEventToEvent(event), listener);
    return function () {
      return _this.removeListener(event, listener);
    };
  };

  TypedEventEmitter.prototype.removeListener = function (event, listenerFunc) {
    this.internalEventEmitter.removeListener(this.castTypedEventToEvent(event), listenerFunc);
  };

  TypedEventEmitter.prototype.removeAllListeners = function (event) {
    if (typeof event === "undefined") {
      this.internalEventEmitter.removeAllListeners();
      return;
    }

    this.internalEventEmitter.removeAllListeners(this.castTypedEventToEvent(event));
  };

  TypedEventEmitter.prototype.setMaxListeners = function (n) {
    this.internalEventEmitter.setMaxListeners(n);
  };

  TypedEventEmitter.prototype.getMaxListeners = function () {
    return this.internalEventEmitter.getMaxListeners();
  };

  TypedEventEmitter.prototype.listeners = function (event) {
    return this.internalEventEmitter.listeners(this.castTypedEventToEvent(event));
  };

  TypedEventEmitter.prototype.emit = function (event, payload) {
    this.internalEventEmitter.emit(this.castTypedEventToEvent(event), payload);
  };

  TypedEventEmitter.prototype.eventIdentifiers = function () {
    return this.internalEventEmitter.eventNames().map(function (eventIndetifier) {
      if (_typeof(eventIndetifier) === "symbol") {
        return eventIndetifier;
      }

      var n = parseFloat(eventIndetifier + "");
      return Number.isNaN(n) ? eventIndetifier : n;
    });
  };

  TypedEventEmitter.prototype.listenerCount = function (event) {
    return this.internalEventEmitter.listenerCount(this.castTypedEventToEvent(event));
  };

  TypedEventEmitter.prototype.castTypedEventToEvent = function (event) {
    return event;
  };

  TypedEventEmitter.prototype.interceptEmit = function () {
    var originalFunc = this.internalEventEmitter.emit.bind(this.internalEventEmitter);

    this.internalEventEmitter.emit = function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      if (args[0] === InternalEventEmitterEvent.RemoveListener) {
        return originalFunc(args[0], {
          event: args[1],
          listener: args[2]
        });
      }

      return originalFunc.apply(void 0, args);
    };
  };

  return TypedEventEmitter;
}();

var StrictEventEmitter =
/** @class */
function () {
  function StrictEventEmitter() {
    this.listenersMap = new Map();
    this.onceListeners = [];
    this.maxListeners = EventEmitter.defaultMaxListeners;
  }

  StrictEventEmitter.prototype.addListener = function (event, listener) {
    return this.internalAddListener(event, listener);
  };

  StrictEventEmitter.prototype.on = function (event, listener) {
    this.addListener(event, listener);
    return this;
  };

  StrictEventEmitter.prototype.once = function (event, listener) {
    this.internalAddListener(event, listener, true, "back");
    return this;
  };

  StrictEventEmitter.prototype.prependListener = function (event, listener) {
    this.internalAddListener(event, listener, false, "front");
    return this;
  };

  StrictEventEmitter.prototype.prependOnceListener = function (event, listener) {
    this.internalAddListener(event, listener, true, "front");
    return this;
  };

  StrictEventEmitter.prototype.removeListener = function (event, listener) {
    var listeners = this.getListenrsArray(event);
    var index = listeners.indexOf(listener);

    if (index !== -1) {
      listeners.splice(index, 1);
    }

    var onceIndex = this.onceListeners.indexOf(listener);

    if (onceIndex !== -1) {
      this.onceListeners.splice(onceIndex, 1);
    }

    this.emit("removeListener", event, listener);
    return this;
  };

  StrictEventEmitter.prototype.off = function (event, listener) {
    return this.removeListener(event, listener);
  };

  StrictEventEmitter.prototype.removeAllListeners = function (event) {
    if (typeof event === "undefined") {
      //   this.listenersMap = new Map();
      //   this.onceListeners = [];
      for (var _i = 0, _a = this.eventNames(); _i < _a.length; _i++) {
        var e = _a[_i];
        this.removeAllListeners(e);
      }

      return this;
    }

    var listeners = this.getListenrsArray(event);

    while (listeners.length) {
      var listener = listeners[0];
      this.removeListener(event, listener);
    }

    return this;
  };

  StrictEventEmitter.prototype.setMaxListeners = function (n) {
    this.maxListeners = n;
    return this;
  };

  StrictEventEmitter.prototype.getMaxListeners = function () {
    return this.maxListeners;
  };

  StrictEventEmitter.prototype.listeners = function (event) {
    return this.getListenrsArray(event);
  };

  StrictEventEmitter.prototype.rawListeners = function (event) {
    return this.getListenrsArray(event);
  };

  StrictEventEmitter.prototype.emit = function (event) {
    var payload = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      payload[_i - 1] = arguments[_i];
    }

    var listeners = this.getListenrsArray(event, false);

    if (!listeners) {
      return false;
    }

    if (listeners.length === 0) {
      return false;
    }

    for (var _a = 0, listeners_1 = listeners; _a < listeners_1.length; _a++) {
      var listener = listeners_1[_a];
      listener.apply(void 0, payload);
    }

    for (var _b = 0, listeners_2 = listeners; _b < listeners_2.length; _b++) {
      var listener = listeners_2[_b];

      if (this.onceListeners.includes(listener)) {
        this.removeListener(event, listener);
      }
    }

    return true;
  };

  StrictEventEmitter.prototype.eventNames = function () {
    return Array.from(this.listenersMap.keys());
  };

  StrictEventEmitter.prototype.listenerCount = function (type) {
    return this.listeners(type).length;
  };

  StrictEventEmitter.prototype.getListenrsArray = function (event, createNotExists) {
    if (createNotExists === void 0) {
      createNotExists = true;
    }

    if (!this.listenersMap.has(event)) {
      if (!createNotExists) {
        return null;
      }

      this.listenersMap.set(event, []);
    }

    return this.listenersMap.get(event);
  };

  StrictEventEmitter.prototype.internalAddListener = function (event, listener, once, direction) {
    if (once === void 0) {
      once = false;
    }

    if (direction === void 0) {
      direction = "back";
    }

    var listeners = this.getListenrsArray(event);

    if (direction === "front") {
      listeners.unshift(listener);
    } else if (direction === "back") {
      listeners.push(listener);
    } else {
      throw new TypeError("Invalid direction: " + direction + "!");
    }

    if (once) {
      this.onceListeners.push(listener);
    }

    if (listeners.length > this.maxListeners) {
      console.warn("possible StrictEventEmitter memory leak detected. " + listeners.length + " listeners added. Use emitter.setMaxListeners() to increase limit.");
    }

    this.emit("newListener", listener);
    return this;
  };

  return StrictEventEmitter;
}();

var StrictTypedEventEmitter =
/** @class */
function (_super) {
  __extends(StrictTypedEventEmitter, _super);

  function StrictTypedEventEmitter() {
    return _super.call(this, new StrictEventEmitter()) || this;
  }

  return StrictTypedEventEmitter;
}(TypedEventEmitter);



/***/ }),

/***/ "./node_modules/@herajs/client/dist/herajs.js":
/*!****************************************************!*\
  !*** ./node_modules/@herajs/client/dist/herajs.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, Buffer) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _classCallCheck2(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass2(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _possibleConstructorReturn2(self,call){if(call&&(_typeof2(call)==="object"||typeof call==="function")){return call;}return _assertThisInitialized2(self);}function _assertThisInitialized2(self){if(self===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _inherits2(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf2(subClass,superClass);}function _wrapNativeSuper2(Class){var _cache=typeof Map==="function"?new Map():undefined;_wrapNativeSuper2=function _wrapNativeSuper(Class){if(Class===null||!_isNativeFunction2(Class))return Class;if(typeof Class!=="function"){throw new TypeError("Super expression must either be null or a function");}if(typeof _cache!=="undefined"){if(_cache.has(Class))return _cache.get(Class);_cache.set(Class,Wrapper);}function Wrapper(){return _construct2(Class,arguments,_getPrototypeOf2(this).constructor);}Wrapper.prototype=Object.create(Class.prototype,{constructor:{value:Wrapper,enumerable:false,writable:true,configurable:true}});return _setPrototypeOf2(Wrapper,Class);};return _wrapNativeSuper2(Class);}function isNativeReflectConstruct(){if(typeof Reflect==="undefined"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy==="function")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}function _construct2(Parent,args,Class){if(isNativeReflectConstruct()){_construct2=Reflect.construct;}else{_construct2=function _construct(Parent,args,Class){var a=[null];a.push.apply(a,args);var Constructor=Function.bind.apply(Parent,a);var instance=new Constructor();if(Class)_setPrototypeOf2(instance,Class.prototype);return instance;};}return _construct2.apply(null,arguments);}function _isNativeFunction2(fn){return Function.toString.call(fn).indexOf("[native code]")!==-1;}function _setPrototypeOf2(o,p){_setPrototypeOf2=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf2(o,p);}function _getPrototypeOf2(o){_getPrototypeOf2=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf2(o);}function _typeof2(obj){if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof2=function _typeof2(obj){return typeof obj;};}else{_typeof2=function _typeof2(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj;};}return _typeof2(obj);}/*!
 * herajs v0.8.6
 * (c) 2019 AERGO
 * Released under MIT license.
 */(function(global,factory){( false?undefined:_typeof2(exports))==='object'&&typeof module!=='undefined'?factory(exports): true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):(undefined);})(this,function(exports){'use strict';var commonjsGlobal=typeof window!=='undefined'?window:typeof global!=='undefined'?global:typeof self!=='undefined'?self:{};function unwrapExports(x){return x&&x.__esModule&&Object.prototype.hasOwnProperty.call(x,'default')?x['default']:x;}function createCommonjsModule(fn,module){return module={exports:{}},fn(module,module.exports),module.exports;}var runtime=createCommonjsModule(function(module){/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */var regeneratorRuntime=function(exports){var Op=Object.prototype;var hasOwn=Op.hasOwnProperty;var undefined$1;// More compressible than void 0.
var $Symbol=typeof Symbol==="function"?Symbol:{};var iteratorSymbol=$Symbol.iterator||"@@iterator";var asyncIteratorSymbol=$Symbol.asyncIterator||"@@asyncIterator";var toStringTagSymbol=$Symbol.toStringTag||"@@toStringTag";function wrap(innerFn,outerFn,self,tryLocsList){// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator;var generator=Object.create(protoGenerator.prototype);var context=new Context(tryLocsList||[]);// The ._invoke method unifies the implementations of the .next,
// .throw, and .return methods.
generator._invoke=makeInvokeMethod(innerFn,self,context);return generator;}exports.wrap=wrap;// Try/catch helper to minimize deoptimizations. Returns a completion
// record like context.tryEntries[i].completion. This interface could
// have been (and was previously) designed to take a closure to be
// invoked without arguments, but in all the cases we care about we
// already have an existing method we want to call, so there's no need
// to create a new function object. We can even get away with assuming
// the method takes exactly one argument, since that happens to be true
// in every case, so we don't have to touch the arguments object. The
// only additional allocation required is the completion record, which
// has a stable shape and so hopefully should be cheap to allocate.
function tryCatch(fn,obj,arg){try{return{type:"normal",arg:fn.call(obj,arg)};}catch(err){return{type:"throw",arg:err};}}var GenStateSuspendedStart="suspendedStart";var GenStateSuspendedYield="suspendedYield";var GenStateExecuting="executing";var GenStateCompleted="completed";// Returning this object from the innerFn has the same effect as
// breaking out of the dispatch switch statement.
var ContinueSentinel={};// Dummy constructor functions that we use as the .constructor and
// .constructor.prototype properties for functions that return Generator
// objects. For full spec compliance, you may wish to configure your
// minifier not to mangle the names of these two functions.
function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}// This is a polyfill for %IteratorPrototype% for environments that
// don't natively support it.
var IteratorPrototype={};IteratorPrototype[iteratorSymbol]=function(){return this;};var getProto=Object.getPrototypeOf;var NativeIteratorPrototype=getProto&&getProto(getProto(values([])));if(NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)){// This environment has a native %IteratorPrototype%; use it instead
// of the polyfill.
IteratorPrototype=NativeIteratorPrototype;}var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);GeneratorFunction.prototype=Gp.constructor=GeneratorFunctionPrototype;GeneratorFunctionPrototype.constructor=GeneratorFunction;GeneratorFunctionPrototype[toStringTagSymbol]=GeneratorFunction.displayName="GeneratorFunction";// Helper for defining the .next, .throw, and .return methods of the
// Iterator interface in terms of a single ._invoke method.
function defineIteratorMethods(prototype){["next","throw","return"].forEach(function(method){prototype[method]=function(arg){return this._invoke(method,arg);};});}exports.isGeneratorFunction=function(genFun){var ctor=typeof genFun==="function"&&genFun.constructor;return ctor?ctor===GeneratorFunction||// For the native GeneratorFunction constructor, the best we can
// do is to check its .name property.
(ctor.displayName||ctor.name)==="GeneratorFunction":false;};exports.mark=function(genFun){if(Object.setPrototypeOf){Object.setPrototypeOf(genFun,GeneratorFunctionPrototype);}else{genFun.__proto__=GeneratorFunctionPrototype;if(!(toStringTagSymbol in genFun)){genFun[toStringTagSymbol]="GeneratorFunction";}}genFun.prototype=Object.create(Gp);return genFun;};// Within the body of any async function, `await x` is transformed to
// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
// `hasOwn.call(value, "__await")` to determine if the yielded value is
// meant to be awaited.
exports.awrap=function(arg){return{__await:arg};};function AsyncIterator(generator){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if(record.type==="throw"){reject(record.arg);}else{var result=record.arg;var value=result.value;if(value&&_typeof2(value)==="object"&&hasOwn.call(value,"__await")){return Promise.resolve(value.__await).then(function(value){invoke("next",value,resolve,reject);},function(err){invoke("throw",err,resolve,reject);});}return Promise.resolve(value).then(function(unwrapped){// When a yielded Promise is resolved, its final value becomes
// the .value of the Promise<{value,done}> result for the
// current iteration.
result.value=unwrapped;resolve(result);},function(error){// If a rejected Promise was yielded, throw the rejection back
// into the async generator function so it can be handled there.
return invoke("throw",error,resolve,reject);});}}var previousPromise;function enqueue(method,arg){function callInvokeWithMethodAndArg(){return new Promise(function(resolve,reject){invoke(method,arg,resolve,reject);});}return previousPromise=// If enqueue has been called before, then we want to wait until
// all previous Promises have been resolved before calling invoke,
// so that results are always delivered in the correct order. If
// enqueue has not been called before, then it is important to
// call invoke immediately, without waiting on a callback to fire,
// so that the async generator function has the opportunity to do
// any necessary setup in a predictable way. This predictability
// is why the Promise constructor synchronously invokes its
// executor callback, and why async functions synchronously
// execute code before the first await. Since we implement simple
// async functions in terms of async generators, it is especially
// important to get this right, even though it requires care.
previousPromise?previousPromise.then(callInvokeWithMethodAndArg,// Avoid propagating failures to Promises returned by later
// invocations of the iterator.
callInvokeWithMethodAndArg):callInvokeWithMethodAndArg();}// Define the unified helper method that is used to implement .next,
// .throw, and .return (see defineIteratorMethods).
this._invoke=enqueue;}defineIteratorMethods(AsyncIterator.prototype);AsyncIterator.prototype[asyncIteratorSymbol]=function(){return this;};exports.AsyncIterator=AsyncIterator;// Note that simple async functions are implemented on top of
// AsyncIterator objects; they just return a Promise for the value of
// the final result produced by the iterator.
exports.async=function(innerFn,outerFn,self,tryLocsList){var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList));return exports.isGeneratorFunction(outerFn)?iter// If outerFn is a generator, return the full iterator.
:iter.next().then(function(result){return result.done?result.value:iter.next();});};function makeInvokeMethod(innerFn,self,context){var state=GenStateSuspendedStart;return function invoke(method,arg){if(state===GenStateExecuting){throw new Error("Generator is already running");}if(state===GenStateCompleted){if(method==="throw"){throw arg;}// Be forgiving, per 25.3.3.3.3 of the spec:
// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
return doneResult();}context.method=method;context.arg=arg;while(true){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult;}}if(context.method==="next"){// Setting context._sent for legacy support of Babel's
// function.sent implementation.
context.sent=context._sent=context.arg;}else if(context.method==="throw"){if(state===GenStateSuspendedStart){state=GenStateCompleted;throw context.arg;}context.dispatchException(context.arg);}else if(context.method==="return"){context.abrupt("return",context.arg);}state=GenStateExecuting;var record=tryCatch(innerFn,self,context);if(record.type==="normal"){// If an exception is thrown from innerFn, we leave state ===
// GenStateExecuting and loop back for another invocation.
state=context.done?GenStateCompleted:GenStateSuspendedYield;if(record.arg===ContinueSentinel){continue;}return{value:record.arg,done:context.done};}else if(record.type==="throw"){state=GenStateCompleted;// Dispatch the exception by looping back around to the
// context.dispatchException(context.arg) call above.
context.method="throw";context.arg=record.arg;}}};}// Call delegate.iterator[context.method](context.arg) and handle the
// result, either by returning a { value, done } result from the
// delegate iterator, or by modifying context.method and context.arg,
// setting context.delegate to null, and returning the ContinueSentinel.
function maybeInvokeDelegate(delegate,context){var method=delegate.iterator[context.method];if(method===undefined$1){// A .throw or .return when the delegate iterator has no .throw
// method always terminates the yield* loop.
context.delegate=null;if(context.method==="throw"){// Note: ["return"] must be used for ES3 parsing compatibility.
if(delegate.iterator["return"]){// If the delegate iterator has a return method, give it a
// chance to clean up.
context.method="return";context.arg=undefined$1;maybeInvokeDelegate(delegate,context);if(context.method==="throw"){// If maybeInvokeDelegate(context) changed context.method from
// "return" to "throw", let that override the TypeError below.
return ContinueSentinel;}}context.method="throw";context.arg=new TypeError("The iterator does not provide a 'throw' method");}return ContinueSentinel;}var record=tryCatch(method,delegate.iterator,context.arg);if(record.type==="throw"){context.method="throw";context.arg=record.arg;context.delegate=null;return ContinueSentinel;}var info=record.arg;if(!info){context.method="throw";context.arg=new TypeError("iterator result is not an object");context.delegate=null;return ContinueSentinel;}if(info.done){// Assign the result of the finished delegate to the temporary
// variable specified by delegate.resultName (see delegateYield).
context[delegate.resultName]=info.value;// Resume execution at the desired location (see delegateYield).
context.next=delegate.nextLoc;// If context.method was "throw" but the delegate handled the
// exception, let the outer generator proceed normally. If
// context.method was "next", forget context.arg since it has been
// "consumed" by the delegate iterator. If context.method was
// "return", allow the original .return call to continue in the
// outer generator.
if(context.method!=="return"){context.method="next";context.arg=undefined$1;}}else{// Re-yield the result returned by the delegate method.
return info;}// The delegate iterator is finished, so forget it and continue with
// the outer generator.
context.delegate=null;return ContinueSentinel;}// Define Generator.prototype.{next,throw,return} in terms of the
// unified ._invoke helper method.
defineIteratorMethods(Gp);Gp[toStringTagSymbol]="Generator";// A Generator should always return itself as the iterator object when the
// @@iterator function is called on it. Some browsers' implementations of the
// iterator prototype chain incorrectly implement this, causing the Generator
// object to not be returned from this call. This ensures that doesn't happen.
// See https://github.com/facebook/regenerator/issues/274 for more details.
Gp[iteratorSymbol]=function(){return this;};Gp.toString=function(){return"[object Generator]";};function pushTryEntry(locs){var entry={tryLoc:locs[0]};if(1 in locs){entry.catchLoc=locs[1];}if(2 in locs){entry.finallyLoc=locs[2];entry.afterLoc=locs[3];}this.tryEntries.push(entry);}function resetTryEntry(entry){var record=entry.completion||{};record.type="normal";delete record.arg;entry.completion=record;}function Context(tryLocsList){// The root entry object (effectively a try statement without a catch
// or a finally block) gives us a place to store values thrown from
// locations where there is no enclosing try statement.
this.tryEntries=[{tryLoc:"root"}];tryLocsList.forEach(pushTryEntry,this);this.reset(true);}exports.keys=function(object){var keys=[];for(var key in object){keys.push(key);}keys.reverse();// Rather than returning an object with a next method, we keep
// things simple and return the next function itself.
return function next(){while(keys.length){var key=keys.pop();if(key in object){next.value=key;next.done=false;return next;}}// To avoid creating an additional object, we just hang the .value
// and .done properties off the next function object itself. This
// also ensures that the minifier will not anonymize the function.
next.done=true;return next;};};function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod){return iteratorMethod.call(iterable);}if(typeof iterable.next==="function"){return iterable;}if(!isNaN(iterable.length)){var i=-1,next=function next(){while(++i<iterable.length){if(hasOwn.call(iterable,i)){next.value=iterable[i];next.done=false;return next;}}next.value=undefined$1;next.done=true;return next;};return next.next=next;}}// Return an iterator with no values.
return{next:doneResult};}exports.values=values;function doneResult(){return{value:undefined$1,done:true};}Context.prototype={constructor:Context,reset:function reset(skipTempReset){this.prev=0;this.next=0;// Resetting context._sent for legacy support of Babel's
// function.sent implementation.
this.sent=this._sent=undefined$1;this.done=false;this.delegate=null;this.method="next";this.arg=undefined$1;this.tryEntries.forEach(resetTryEntry);if(!skipTempReset){for(var name in this){// Not sure about the optimal order of these conditions:
if(name.charAt(0)==="t"&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))){this[name]=undefined$1;}}}},stop:function stop(){this.done=true;var rootEntry=this.tryEntries[0];var rootRecord=rootEntry.completion;if(rootRecord.type==="throw"){throw rootRecord.arg;}return this.rval;},dispatchException:function dispatchException(exception){if(this.done){throw exception;}var context=this;function handle(loc,caught){record.type="throw";record.arg=exception;context.next=loc;if(caught){// If the dispatched exception was caught by a catch block,
// then let that catch block handle the exception normally.
context.method="next";context.arg=undefined$1;}return!!caught;}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];var record=entry.completion;if(entry.tryLoc==="root"){// Exception thrown outside of any try block that could handle
// it, so set the completion value of the entire function to
// throw the exception.
return handle("end");}if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,"catchLoc");var hasFinally=hasOwn.call(entry,"finallyLoc");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc){return handle(entry.catchLoc,true);}else if(this.prev<entry.finallyLoc){return handle(entry.finallyLoc);}}else if(hasCatch){if(this.prev<entry.catchLoc){return handle(entry.catchLoc,true);}}else if(hasFinally){if(this.prev<entry.finallyLoc){return handle(entry.finallyLoc);}}else{throw new Error("try statement without catch or finally");}}}},abrupt:function abrupt(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,"finallyLoc")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break;}}if(finallyEntry&&(type==="break"||type==="continue")&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc){// Ignore the finally entry if control is not jumping to a
// location outside the try/catch block.
finallyEntry=null;}var record=finallyEntry?finallyEntry.completion:{};record.type=type;record.arg=arg;if(finallyEntry){this.method="next";this.next=finallyEntry.finallyLoc;return ContinueSentinel;}return this.complete(record);},complete:function complete(record,afterLoc){if(record.type==="throw"){throw record.arg;}if(record.type==="break"||record.type==="continue"){this.next=record.arg;}else if(record.type==="return"){this.rval=this.arg=record.arg;this.method="return";this.next="end";}else if(record.type==="normal"&&afterLoc){this.next=afterLoc;}return ContinueSentinel;},finish:function finish(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc){this.complete(entry.completion,entry.afterLoc);resetTryEntry(entry);return ContinueSentinel;}}},"catch":function _catch(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if(record.type==="throw"){var thrown=record.arg;resetTryEntry(entry);}return thrown;}}// The context.catch method must only be called with a location
// argument that corresponds to a known catch block.
throw new Error("illegal catch attempt");},delegateYield:function delegateYield(iterable,resultName,nextLoc){this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc};if(this.method==="next"){// Deliberately forget the last sent value so that we don't
// accidentally pass it on to the delegate.
this.arg=undefined$1;}return ContinueSentinel;}};// Regardless of whether this script is executing as a CommonJS module
// or not, return the runtime object so that we can declare the variable
// regeneratorRuntime in the outer scope, which allows this module to be
// injected easily by `bin/regenerator --include-runtime script.js`.
return exports;}(// If this script is executing as a CommonJS module, use module.exports
// as the regeneratorRuntime namespace. Otherwise create a new empty
// object. Either way, the resulting object will be used to initialize
// the regeneratorRuntime variable at the top of this file.
module.exports);});function _typeof(obj){if(typeof Symbol==="function"&&_typeof2(Symbol.iterator)==="symbol"){_typeof=function _typeof(obj){return _typeof2(obj);};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":_typeof2(obj);};}return _typeof(obj);}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg);var value=info.value;}catch(error){reject(error);return;}if(info.done){resolve(value);}else{Promise.resolve(value).then(_next,_throw);}}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise(function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value);}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err);}_next(undefined);});};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};var ownKeys=Object.keys(source);if(typeof Object.getOwnPropertySymbols==='function'){ownKeys=ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym){return Object.getOwnPropertyDescriptor(source,sym).enumerable;}));}ownKeys.forEach(function(key){_defineProperty(target,key,source[key]);});}return target;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}function isNativeReflectConstruct(){if(typeof Reflect==="undefined"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy==="function")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}function _construct(Parent,args,Class){if(isNativeReflectConstruct()){_construct=Reflect.construct;}else{_construct=function _construct(Parent,args,Class){var a=[null];a.push.apply(a,args);var Constructor=Function.bind.apply(Parent,a);var instance=new Constructor();if(Class)_setPrototypeOf(instance,Class.prototype);return instance;};}return _construct.apply(null,arguments);}function _isNativeFunction(fn){return Function.toString.call(fn).indexOf("[native code]")!==-1;}function _wrapNativeSuper(Class){var _cache=typeof Map==="function"?new Map():undefined;_wrapNativeSuper=function _wrapNativeSuper(Class){if(Class===null||!_isNativeFunction(Class))return Class;if(typeof Class!=="function"){throw new TypeError("Super expression must either be null or a function");}if(typeof _cache!=="undefined"){if(_cache.has(Class))return _cache.get(Class);_cache.set(Class,Wrapper);}function Wrapper(){return _construct(Class,arguments,_getPrototypeOf(this).constructor);}Wrapper.prototype=Object.create(Class.prototype,{constructor:{value:Wrapper,enumerable:false,writable:true,configurable:true}});return _setPrototypeOf(Wrapper,Class);};return _wrapNativeSuper(Class);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _possibleConstructorReturn(self,call){if(call&&(_typeof2(call)==="object"||typeof call==="function")){return call;}return _assertThisInitialized(self);}function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_nonIterableRest();}function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_nonIterableSpread();}function _arrayWithoutHoles(arr){if(Array.isArray(arr)){for(var i=0,arr2=new Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr;}function _iterableToArray(iter){if(Symbol.iterator in Object(iter)||Object.prototype.toString.call(iter)==="[object Arguments]")return Array.from(iter);}function _iterableToArrayLimit(arr,i){var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break;}}catch(err){_d=true;_e=err;}finally{try{if(!_n&&_i["return"]!=null)_i["return"]();}finally{if(_d)throw _e;}}return _arr;}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance");}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance");}var global$1=typeof global!=="undefined"?global:typeof self!=="undefined"?self:typeof window!=="undefined"?window:{};var lookup=[];var revLookup=[];var Arr=typeof Uint8Array!=='undefined'?Uint8Array:Array;var inited=false;function init(){inited=true;var code='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';for(var i=0,len=code.length;i<len;++i){lookup[i]=code[i];revLookup[code.charCodeAt(i)]=i;}revLookup['-'.charCodeAt(0)]=62;revLookup['_'.charCodeAt(0)]=63;}function toByteArray(b64){if(!inited){init();}var i,j,l,tmp,placeHolders,arr;var len=b64.length;if(len%4>0){throw new Error('Invalid string. Length must be a multiple of 4');}// the number of equal signs (place holders)
// if there are two placeholders, than the two characters before it
// represent one byte
// if there is only one, then the three characters before it represent 2 bytes
// this is just a cheap hack to not do indexOf twice
placeHolders=b64[len-2]==='='?2:b64[len-1]==='='?1:0;// base64 is 4/3 + up to two characters of the original data
arr=new Arr(len*3/4-placeHolders);// if there are placeholders, only get up to the last complete 4 chars
l=placeHolders>0?len-4:len;var L=0;for(i=0,j=0;i<l;i+=4,j+=3){tmp=revLookup[b64.charCodeAt(i)]<<18|revLookup[b64.charCodeAt(i+1)]<<12|revLookup[b64.charCodeAt(i+2)]<<6|revLookup[b64.charCodeAt(i+3)];arr[L++]=tmp>>16&0xFF;arr[L++]=tmp>>8&0xFF;arr[L++]=tmp&0xFF;}if(placeHolders===2){tmp=revLookup[b64.charCodeAt(i)]<<2|revLookup[b64.charCodeAt(i+1)]>>4;arr[L++]=tmp&0xFF;}else if(placeHolders===1){tmp=revLookup[b64.charCodeAt(i)]<<10|revLookup[b64.charCodeAt(i+1)]<<4|revLookup[b64.charCodeAt(i+2)]>>2;arr[L++]=tmp>>8&0xFF;arr[L++]=tmp&0xFF;}return arr;}function tripletToBase64(num){return lookup[num>>18&0x3F]+lookup[num>>12&0x3F]+lookup[num>>6&0x3F]+lookup[num&0x3F];}function encodeChunk(uint8,start,end){var tmp;var output=[];for(var i=start;i<end;i+=3){tmp=(uint8[i]<<16)+(uint8[i+1]<<8)+uint8[i+2];output.push(tripletToBase64(tmp));}return output.join('');}function fromByteArray(uint8){if(!inited){init();}var tmp;var len=uint8.length;var extraBytes=len%3;// if we have 1 byte left, pad 2 bytes
var output='';var parts=[];var maxChunkLength=16383;// must be multiple of 3
// go through the array every three bytes, we'll deal with trailing stuff later
for(var i=0,len2=len-extraBytes;i<len2;i+=maxChunkLength){parts.push(encodeChunk(uint8,i,i+maxChunkLength>len2?len2:i+maxChunkLength));}// pad the end with zeros, but make sure to not forget the extra bytes
if(extraBytes===1){tmp=uint8[len-1];output+=lookup[tmp>>2];output+=lookup[tmp<<4&0x3F];output+='==';}else if(extraBytes===2){tmp=(uint8[len-2]<<8)+uint8[len-1];output+=lookup[tmp>>10];output+=lookup[tmp>>4&0x3F];output+=lookup[tmp<<2&0x3F];output+='=';}parts.push(output);return parts.join('');}function read(buffer,offset,isLE,mLen,nBytes){var e,m;var eLen=nBytes*8-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var nBits=-7;var i=isLE?nBytes-1:0;var d=isLE?-1:1;var s=buffer[offset+i];i+=d;e=s&(1<<-nBits)-1;s>>=-nBits;nBits+=eLen;for(;nBits>0;e=e*256+buffer[offset+i],i+=d,nBits-=8){}m=e&(1<<-nBits)-1;e>>=-nBits;nBits+=mLen;for(;nBits>0;m=m*256+buffer[offset+i],i+=d,nBits-=8){}if(e===0){e=1-eBias;}else if(e===eMax){return m?NaN:(s?-1:1)*Infinity;}else{m=m+Math.pow(2,mLen);e=e-eBias;}return(s?-1:1)*m*Math.pow(2,e-mLen);}function write(buffer,value,offset,isLE,mLen,nBytes){var e,m,c;var eLen=nBytes*8-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var rt=mLen===23?Math.pow(2,-24)-Math.pow(2,-77):0;var i=isLE?0:nBytes-1;var d=isLE?1:-1;var s=value<0||value===0&&1/value<0?1:0;value=Math.abs(value);if(isNaN(value)||value===Infinity){m=isNaN(value)?1:0;e=eMax;}else{e=Math.floor(Math.log(value)/Math.LN2);if(value*(c=Math.pow(2,-e))<1){e--;c*=2;}if(e+eBias>=1){value+=rt/c;}else{value+=rt*Math.pow(2,1-eBias);}if(value*c>=2){e++;c/=2;}if(e+eBias>=eMax){m=0;e=eMax;}else if(e+eBias>=1){m=(value*c-1)*Math.pow(2,mLen);e=e+eBias;}else{m=value*Math.pow(2,eBias-1)*Math.pow(2,mLen);e=0;}}for(;mLen>=8;buffer[offset+i]=m&0xff,i+=d,m/=256,mLen-=8){}e=e<<mLen|m;eLen+=mLen;for(;eLen>0;buffer[offset+i]=e&0xff,i+=d,e/=256,eLen-=8){}buffer[offset+i-d]|=s*128;}var toString={}.toString;var isArray=Array.isArray||function(arr){return toString.call(arr)=='[object Array]';};var INSPECT_MAX_BYTES=50;/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */Buffer$1.TYPED_ARRAY_SUPPORT=global$1.TYPED_ARRAY_SUPPORT!==undefined?global$1.TYPED_ARRAY_SUPPORT:true;/*
	 * Export kMaxLength after typed array support is determined.
	 */var _kMaxLength=kMaxLength();function kMaxLength(){return Buffer$1.TYPED_ARRAY_SUPPORT?0x7fffffff:0x3fffffff;}function createBuffer(that,length){if(kMaxLength()<length){throw new RangeError('Invalid typed array length');}if(Buffer$1.TYPED_ARRAY_SUPPORT){// Return an augmented `Uint8Array` instance, for best performance
that=new Uint8Array(length);that.__proto__=Buffer$1.prototype;}else{// Fallback: Return an object instance of the Buffer class
if(that===null){that=new Buffer$1(length);}that.length=length;}return that;}/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */function Buffer$1(arg,encodingOrOffset,length){if(!Buffer$1.TYPED_ARRAY_SUPPORT&&!(this instanceof Buffer$1)){return new Buffer$1(arg,encodingOrOffset,length);}// Common case.
if(typeof arg==='number'){if(typeof encodingOrOffset==='string'){throw new Error('If encoding is specified then the first argument must be a string');}return allocUnsafe(this,arg);}return from(this,arg,encodingOrOffset,length);}Buffer$1.poolSize=8192;// not used by this implementation
// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer$1._augment=function(arr){arr.__proto__=Buffer$1.prototype;return arr;};function from(that,value,encodingOrOffset,length){if(typeof value==='number'){throw new TypeError('"value" argument must not be a number');}if(typeof ArrayBuffer!=='undefined'&&value instanceof ArrayBuffer){return fromArrayBuffer(that,value,encodingOrOffset,length);}if(typeof value==='string'){return fromString(that,value,encodingOrOffset);}return fromObject(that,value);}/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/Buffer$1.from=function(value,encodingOrOffset,length){return from(null,value,encodingOrOffset,length);};if(Buffer$1.TYPED_ARRAY_SUPPORT){Buffer$1.prototype.__proto__=Uint8Array.prototype;Buffer$1.__proto__=Uint8Array;}function assertSize(size){if(typeof size!=='number'){throw new TypeError('"size" argument must be a number');}else if(size<0){throw new RangeError('"size" argument must not be negative');}}function alloc(that,size,fill,encoding){assertSize(size);if(size<=0){return createBuffer(that,size);}if(fill!==undefined){// Only pay attention to encoding if it's a string. This
// prevents accidentally sending in a number that would
// be interpretted as a start offset.
return typeof encoding==='string'?createBuffer(that,size).fill(fill,encoding):createBuffer(that,size).fill(fill);}return createBuffer(that,size);}/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/Buffer$1.alloc=function(size,fill,encoding){return alloc(null,size,fill,encoding);};function allocUnsafe(that,size){assertSize(size);that=createBuffer(that,size<0?0:checked(size)|0);if(!Buffer$1.TYPED_ARRAY_SUPPORT){for(var i=0;i<size;++i){that[i]=0;}}return that;}/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */Buffer$1.allocUnsafe=function(size){return allocUnsafe(null,size);};/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */Buffer$1.allocUnsafeSlow=function(size){return allocUnsafe(null,size);};function fromString(that,string,encoding){if(typeof encoding!=='string'||encoding===''){encoding='utf8';}if(!Buffer$1.isEncoding(encoding)){throw new TypeError('"encoding" must be a valid string encoding');}var length=byteLength(string,encoding)|0;that=createBuffer(that,length);var actual=that.write(string,encoding);if(actual!==length){// Writing a hex string, for example, that contains invalid characters will
// cause everything after the first invalid character to be ignored. (e.g.
// 'abxxcd' will be treated as 'ab')
that=that.slice(0,actual);}return that;}function fromArrayLike(that,array){var length=array.length<0?0:checked(array.length)|0;that=createBuffer(that,length);for(var i=0;i<length;i+=1){that[i]=array[i]&255;}return that;}function fromArrayBuffer(that,array,byteOffset,length){array.byteLength;// this throws if `array` is not a valid ArrayBuffer
if(byteOffset<0||array.byteLength<byteOffset){throw new RangeError('\'offset\' is out of bounds');}if(array.byteLength<byteOffset+(length||0)){throw new RangeError('\'length\' is out of bounds');}if(byteOffset===undefined&&length===undefined){array=new Uint8Array(array);}else if(length===undefined){array=new Uint8Array(array,byteOffset);}else{array=new Uint8Array(array,byteOffset,length);}if(Buffer$1.TYPED_ARRAY_SUPPORT){// Return an augmented `Uint8Array` instance, for best performance
that=array;that.__proto__=Buffer$1.prototype;}else{// Fallback: Return an object instance of the Buffer class
that=fromArrayLike(that,array);}return that;}function fromObject(that,obj){if(internalIsBuffer(obj)){var len=checked(obj.length)|0;that=createBuffer(that,len);if(that.length===0){return that;}obj.copy(that,0,0,len);return that;}if(obj){if(typeof ArrayBuffer!=='undefined'&&obj.buffer instanceof ArrayBuffer||'length'in obj){if(typeof obj.length!=='number'||isnan(obj.length)){return createBuffer(that,0);}return fromArrayLike(that,obj);}if(obj.type==='Buffer'&&isArray(obj.data)){return fromArrayLike(that,obj.data);}}throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');}function checked(length){// Note: cannot use `length < kMaxLength()` here because that fails when
// length is NaN (which is otherwise coerced to zero.)
if(length>=kMaxLength()){throw new RangeError('Attempt to allocate Buffer larger than maximum '+'size: 0x'+kMaxLength().toString(16)+' bytes');}return length|0;}function SlowBuffer(length){if(+length!=length){// eslint-disable-line eqeqeq
length=0;}return Buffer$1.alloc(+length);}Buffer$1.isBuffer=isBuffer;function internalIsBuffer(b){return!!(b!=null&&b._isBuffer);}Buffer$1.compare=function compare(a,b){if(!internalIsBuffer(a)||!internalIsBuffer(b)){throw new TypeError('Arguments must be Buffers');}if(a===b)return 0;var x=a.length;var y=b.length;for(var i=0,len=Math.min(x,y);i<len;++i){if(a[i]!==b[i]){x=a[i];y=b[i];break;}}if(x<y)return-1;if(y<x)return 1;return 0;};Buffer$1.isEncoding=function isEncoding(encoding){switch(String(encoding).toLowerCase()){case'hex':case'utf8':case'utf-8':case'ascii':case'latin1':case'binary':case'base64':case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return true;default:return false;}};Buffer$1.concat=function concat(list,length){if(!isArray(list)){throw new TypeError('"list" argument must be an Array of Buffers');}if(list.length===0){return Buffer$1.alloc(0);}var i;if(length===undefined){length=0;for(i=0;i<list.length;++i){length+=list[i].length;}}var buffer=Buffer$1.allocUnsafe(length);var pos=0;for(i=0;i<list.length;++i){var buf=list[i];if(!internalIsBuffer(buf)){throw new TypeError('"list" argument must be an Array of Buffers');}buf.copy(buffer,pos);pos+=buf.length;}return buffer;};function byteLength(string,encoding){if(internalIsBuffer(string)){return string.length;}if(typeof ArrayBuffer!=='undefined'&&typeof ArrayBuffer.isView==='function'&&(ArrayBuffer.isView(string)||string instanceof ArrayBuffer)){return string.byteLength;}if(typeof string!=='string'){string=''+string;}var len=string.length;if(len===0)return 0;// Use a for loop to avoid recursion
var loweredCase=false;for(;;){switch(encoding){case'ascii':case'latin1':case'binary':return len;case'utf8':case'utf-8':case undefined:return utf8ToBytes(string).length;case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return len*2;case'hex':return len>>>1;case'base64':return base64ToBytes(string).length;default:if(loweredCase)return utf8ToBytes(string).length;// assume utf8
encoding=(''+encoding).toLowerCase();loweredCase=true;}}}Buffer$1.byteLength=byteLength;function slowToString(encoding,start,end){var loweredCase=false;// No need to verify that "this.length <= MAX_UINT32" since it's a read-only
// property of a typed array.
// This behaves neither like String nor Uint8Array in that we set start/end
// to their upper/lower bounds if the value passed is out of range.
// undefined is handled specially as per ECMA-262 6th Edition,
// Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
if(start===undefined||start<0){start=0;}// Return early if start > this.length. Done here to prevent potential uint32
// coercion fail below.
if(start>this.length){return'';}if(end===undefined||end>this.length){end=this.length;}if(end<=0){return'';}// Force coersion to uint32. This will also coerce falsey/NaN values to 0.
end>>>=0;start>>>=0;if(end<=start){return'';}if(!encoding)encoding='utf8';while(true){switch(encoding){case'hex':return hexSlice(this,start,end);case'utf8':case'utf-8':return utf8Slice(this,start,end);case'ascii':return asciiSlice(this,start,end);case'latin1':case'binary':return latin1Slice(this,start,end);case'base64':return base64Slice(this,start,end);case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return utf16leSlice(this,start,end);default:if(loweredCase)throw new TypeError('Unknown encoding: '+encoding);encoding=(encoding+'').toLowerCase();loweredCase=true;}}}// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer$1.prototype._isBuffer=true;function swap(b,n,m){var i=b[n];b[n]=b[m];b[m]=i;}Buffer$1.prototype.swap16=function swap16(){var len=this.length;if(len%2!==0){throw new RangeError('Buffer size must be a multiple of 16-bits');}for(var i=0;i<len;i+=2){swap(this,i,i+1);}return this;};Buffer$1.prototype.swap32=function swap32(){var len=this.length;if(len%4!==0){throw new RangeError('Buffer size must be a multiple of 32-bits');}for(var i=0;i<len;i+=4){swap(this,i,i+3);swap(this,i+1,i+2);}return this;};Buffer$1.prototype.swap64=function swap64(){var len=this.length;if(len%8!==0){throw new RangeError('Buffer size must be a multiple of 64-bits');}for(var i=0;i<len;i+=8){swap(this,i,i+7);swap(this,i+1,i+6);swap(this,i+2,i+5);swap(this,i+3,i+4);}return this;};Buffer$1.prototype.toString=function toString(){var length=this.length|0;if(length===0)return'';if(arguments.length===0)return utf8Slice(this,0,length);return slowToString.apply(this,arguments);};Buffer$1.prototype.equals=function equals(b){if(!internalIsBuffer(b))throw new TypeError('Argument must be a Buffer');if(this===b)return true;return Buffer$1.compare(this,b)===0;};Buffer$1.prototype.inspect=function inspect(){var str='';var max=INSPECT_MAX_BYTES;if(this.length>0){str=this.toString('hex',0,max).match(/.{2}/g).join(' ');if(this.length>max)str+=' ... ';}return'<Buffer '+str+'>';};Buffer$1.prototype.compare=function compare(target,start,end,thisStart,thisEnd){if(!internalIsBuffer(target)){throw new TypeError('Argument must be a Buffer');}if(start===undefined){start=0;}if(end===undefined){end=target?target.length:0;}if(thisStart===undefined){thisStart=0;}if(thisEnd===undefined){thisEnd=this.length;}if(start<0||end>target.length||thisStart<0||thisEnd>this.length){throw new RangeError('out of range index');}if(thisStart>=thisEnd&&start>=end){return 0;}if(thisStart>=thisEnd){return-1;}if(start>=end){return 1;}start>>>=0;end>>>=0;thisStart>>>=0;thisEnd>>>=0;if(this===target)return 0;var x=thisEnd-thisStart;var y=end-start;var len=Math.min(x,y);var thisCopy=this.slice(thisStart,thisEnd);var targetCopy=target.slice(start,end);for(var i=0;i<len;++i){if(thisCopy[i]!==targetCopy[i]){x=thisCopy[i];y=targetCopy[i];break;}}if(x<y)return-1;if(y<x)return 1;return 0;};// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer,val,byteOffset,encoding,dir){// Empty buffer means no match
if(buffer.length===0)return-1;// Normalize byteOffset
if(typeof byteOffset==='string'){encoding=byteOffset;byteOffset=0;}else if(byteOffset>0x7fffffff){byteOffset=0x7fffffff;}else if(byteOffset<-0x80000000){byteOffset=-0x80000000;}byteOffset=+byteOffset;// Coerce to Number.
if(isNaN(byteOffset)){// byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
byteOffset=dir?0:buffer.length-1;}// Normalize byteOffset: negative offsets start from the end of the buffer
if(byteOffset<0)byteOffset=buffer.length+byteOffset;if(byteOffset>=buffer.length){if(dir)return-1;else byteOffset=buffer.length-1;}else if(byteOffset<0){if(dir)byteOffset=0;else return-1;}// Normalize val
if(typeof val==='string'){val=Buffer$1.from(val,encoding);}// Finally, search either indexOf (if dir is true) or lastIndexOf
if(internalIsBuffer(val)){// Special case: looking for empty string/buffer always fails
if(val.length===0){return-1;}return arrayIndexOf(buffer,val,byteOffset,encoding,dir);}else if(typeof val==='number'){val=val&0xFF;// Search for a byte value [0-255]
if(Buffer$1.TYPED_ARRAY_SUPPORT&&typeof Uint8Array.prototype.indexOf==='function'){if(dir){return Uint8Array.prototype.indexOf.call(buffer,val,byteOffset);}else{return Uint8Array.prototype.lastIndexOf.call(buffer,val,byteOffset);}}return arrayIndexOf(buffer,[val],byteOffset,encoding,dir);}throw new TypeError('val must be string, number or Buffer');}function arrayIndexOf(arr,val,byteOffset,encoding,dir){var indexSize=1;var arrLength=arr.length;var valLength=val.length;if(encoding!==undefined){encoding=String(encoding).toLowerCase();if(encoding==='ucs2'||encoding==='ucs-2'||encoding==='utf16le'||encoding==='utf-16le'){if(arr.length<2||val.length<2){return-1;}indexSize=2;arrLength/=2;valLength/=2;byteOffset/=2;}}function read(buf,i){if(indexSize===1){return buf[i];}else{return buf.readUInt16BE(i*indexSize);}}var i;if(dir){var foundIndex=-1;for(i=byteOffset;i<arrLength;i++){if(read(arr,i)===read(val,foundIndex===-1?0:i-foundIndex)){if(foundIndex===-1)foundIndex=i;if(i-foundIndex+1===valLength)return foundIndex*indexSize;}else{if(foundIndex!==-1)i-=i-foundIndex;foundIndex=-1;}}}else{if(byteOffset+valLength>arrLength)byteOffset=arrLength-valLength;for(i=byteOffset;i>=0;i--){var found=true;for(var j=0;j<valLength;j++){if(read(arr,i+j)!==read(val,j)){found=false;break;}}if(found)return i;}}return-1;}Buffer$1.prototype.includes=function includes(val,byteOffset,encoding){return this.indexOf(val,byteOffset,encoding)!==-1;};Buffer$1.prototype.indexOf=function indexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,true);};Buffer$1.prototype.lastIndexOf=function lastIndexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,false);};function hexWrite(buf,string,offset,length){offset=Number(offset)||0;var remaining=buf.length-offset;if(!length){length=remaining;}else{length=Number(length);if(length>remaining){length=remaining;}}// must be an even number of digits
var strLen=string.length;if(strLen%2!==0)throw new TypeError('Invalid hex string');if(length>strLen/2){length=strLen/2;}for(var i=0;i<length;++i){var parsed=parseInt(string.substr(i*2,2),16);if(isNaN(parsed))return i;buf[offset+i]=parsed;}return i;}function utf8Write(buf,string,offset,length){return blitBuffer(utf8ToBytes(string,buf.length-offset),buf,offset,length);}function asciiWrite(buf,string,offset,length){return blitBuffer(asciiToBytes(string),buf,offset,length);}function latin1Write(buf,string,offset,length){return asciiWrite(buf,string,offset,length);}function base64Write(buf,string,offset,length){return blitBuffer(base64ToBytes(string),buf,offset,length);}function ucs2Write(buf,string,offset,length){return blitBuffer(utf16leToBytes(string,buf.length-offset),buf,offset,length);}Buffer$1.prototype.write=function write(string,offset,length,encoding){// Buffer#write(string)
if(offset===undefined){encoding='utf8';length=this.length;offset=0;// Buffer#write(string, encoding)
}else if(length===undefined&&typeof offset==='string'){encoding=offset;length=this.length;offset=0;// Buffer#write(string, offset[, length][, encoding])
}else if(isFinite(offset)){offset=offset|0;if(isFinite(length)){length=length|0;if(encoding===undefined)encoding='utf8';}else{encoding=length;length=undefined;}// legacy write(string, encoding, offset, length) - remove in v0.13
}else{throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');}var remaining=this.length-offset;if(length===undefined||length>remaining)length=remaining;if(string.length>0&&(length<0||offset<0)||offset>this.length){throw new RangeError('Attempt to write outside buffer bounds');}if(!encoding)encoding='utf8';var loweredCase=false;for(;;){switch(encoding){case'hex':return hexWrite(this,string,offset,length);case'utf8':case'utf-8':return utf8Write(this,string,offset,length);case'ascii':return asciiWrite(this,string,offset,length);case'latin1':case'binary':return latin1Write(this,string,offset,length);case'base64':// Warning: maxLength not taken into account in base64Write
return base64Write(this,string,offset,length);case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':return ucs2Write(this,string,offset,length);default:if(loweredCase)throw new TypeError('Unknown encoding: '+encoding);encoding=(''+encoding).toLowerCase();loweredCase=true;}}};Buffer$1.prototype.toJSON=function toJSON(){return{type:'Buffer',data:Array.prototype.slice.call(this._arr||this,0)};};function base64Slice(buf,start,end){if(start===0&&end===buf.length){return fromByteArray(buf);}else{return fromByteArray(buf.slice(start,end));}}function utf8Slice(buf,start,end){end=Math.min(buf.length,end);var res=[];var i=start;while(i<end){var firstByte=buf[i];var codePoint=null;var bytesPerSequence=firstByte>0xEF?4:firstByte>0xDF?3:firstByte>0xBF?2:1;if(i+bytesPerSequence<=end){var secondByte,thirdByte,fourthByte,tempCodePoint;switch(bytesPerSequence){case 1:if(firstByte<0x80){codePoint=firstByte;}break;case 2:secondByte=buf[i+1];if((secondByte&0xC0)===0x80){tempCodePoint=(firstByte&0x1F)<<0x6|secondByte&0x3F;if(tempCodePoint>0x7F){codePoint=tempCodePoint;}}break;case 3:secondByte=buf[i+1];thirdByte=buf[i+2];if((secondByte&0xC0)===0x80&&(thirdByte&0xC0)===0x80){tempCodePoint=(firstByte&0xF)<<0xC|(secondByte&0x3F)<<0x6|thirdByte&0x3F;if(tempCodePoint>0x7FF&&(tempCodePoint<0xD800||tempCodePoint>0xDFFF)){codePoint=tempCodePoint;}}break;case 4:secondByte=buf[i+1];thirdByte=buf[i+2];fourthByte=buf[i+3];if((secondByte&0xC0)===0x80&&(thirdByte&0xC0)===0x80&&(fourthByte&0xC0)===0x80){tempCodePoint=(firstByte&0xF)<<0x12|(secondByte&0x3F)<<0xC|(thirdByte&0x3F)<<0x6|fourthByte&0x3F;if(tempCodePoint>0xFFFF&&tempCodePoint<0x110000){codePoint=tempCodePoint;}}}}if(codePoint===null){// we did not generate a valid codePoint so insert a
// replacement char (U+FFFD) and advance only 1 byte
codePoint=0xFFFD;bytesPerSequence=1;}else if(codePoint>0xFFFF){// encode to utf16 (surrogate pair dance)
codePoint-=0x10000;res.push(codePoint>>>10&0x3FF|0xD800);codePoint=0xDC00|codePoint&0x3FF;}res.push(codePoint);i+=bytesPerSequence;}return decodeCodePointsArray(res);}// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH=0x1000;function decodeCodePointsArray(codePoints){var len=codePoints.length;if(len<=MAX_ARGUMENTS_LENGTH){return String.fromCharCode.apply(String,codePoints);// avoid extra slice()
}// Decode in chunks to avoid "call stack size exceeded".
var res='';var i=0;while(i<len){res+=String.fromCharCode.apply(String,codePoints.slice(i,i+=MAX_ARGUMENTS_LENGTH));}return res;}function asciiSlice(buf,start,end){var ret='';end=Math.min(buf.length,end);for(var i=start;i<end;++i){ret+=String.fromCharCode(buf[i]&0x7F);}return ret;}function latin1Slice(buf,start,end){var ret='';end=Math.min(buf.length,end);for(var i=start;i<end;++i){ret+=String.fromCharCode(buf[i]);}return ret;}function hexSlice(buf,start,end){var len=buf.length;if(!start||start<0)start=0;if(!end||end<0||end>len)end=len;var out='';for(var i=start;i<end;++i){out+=toHex(buf[i]);}return out;}function utf16leSlice(buf,start,end){var bytes=buf.slice(start,end);var res='';for(var i=0;i<bytes.length;i+=2){res+=String.fromCharCode(bytes[i]+bytes[i+1]*256);}return res;}Buffer$1.prototype.slice=function slice(start,end){var len=this.length;start=~~start;end=end===undefined?len:~~end;if(start<0){start+=len;if(start<0)start=0;}else if(start>len){start=len;}if(end<0){end+=len;if(end<0)end=0;}else if(end>len){end=len;}if(end<start)end=start;var newBuf;if(Buffer$1.TYPED_ARRAY_SUPPORT){newBuf=this.subarray(start,end);newBuf.__proto__=Buffer$1.prototype;}else{var sliceLen=end-start;newBuf=new Buffer$1(sliceLen,undefined);for(var i=0;i<sliceLen;++i){newBuf[i]=this[i+start];}}return newBuf;};/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */function checkOffset(offset,ext,length){if(offset%1!==0||offset<0)throw new RangeError('offset is not uint');if(offset+ext>length)throw new RangeError('Trying to access beyond buffer length');}Buffer$1.prototype.readUIntLE=function readUIntLE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert)checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=1;var i=0;while(++i<byteLength&&(mul*=0x100)){val+=this[offset+i]*mul;}return val;};Buffer$1.prototype.readUIntBE=function readUIntBE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert){checkOffset(offset,byteLength,this.length);}var val=this[offset+--byteLength];var mul=1;while(byteLength>0&&(mul*=0x100)){val+=this[offset+--byteLength]*mul;}return val;};Buffer$1.prototype.readUInt8=function readUInt8(offset,noAssert){if(!noAssert)checkOffset(offset,1,this.length);return this[offset];};Buffer$1.prototype.readUInt16LE=function readUInt16LE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);return this[offset]|this[offset+1]<<8;};Buffer$1.prototype.readUInt16BE=function readUInt16BE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);return this[offset]<<8|this[offset+1];};Buffer$1.prototype.readUInt32LE=function readUInt32LE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return(this[offset]|this[offset+1]<<8|this[offset+2]<<16)+this[offset+3]*0x1000000;};Buffer$1.prototype.readUInt32BE=function readUInt32BE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return this[offset]*0x1000000+(this[offset+1]<<16|this[offset+2]<<8|this[offset+3]);};Buffer$1.prototype.readIntLE=function readIntLE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert)checkOffset(offset,byteLength,this.length);var val=this[offset];var mul=1;var i=0;while(++i<byteLength&&(mul*=0x100)){val+=this[offset+i]*mul;}mul*=0x80;if(val>=mul)val-=Math.pow(2,8*byteLength);return val;};Buffer$1.prototype.readIntBE=function readIntBE(offset,byteLength,noAssert){offset=offset|0;byteLength=byteLength|0;if(!noAssert)checkOffset(offset,byteLength,this.length);var i=byteLength;var mul=1;var val=this[offset+--i];while(i>0&&(mul*=0x100)){val+=this[offset+--i]*mul;}mul*=0x80;if(val>=mul)val-=Math.pow(2,8*byteLength);return val;};Buffer$1.prototype.readInt8=function readInt8(offset,noAssert){if(!noAssert)checkOffset(offset,1,this.length);if(!(this[offset]&0x80))return this[offset];return(0xff-this[offset]+1)*-1;};Buffer$1.prototype.readInt16LE=function readInt16LE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);var val=this[offset]|this[offset+1]<<8;return val&0x8000?val|0xFFFF0000:val;};Buffer$1.prototype.readInt16BE=function readInt16BE(offset,noAssert){if(!noAssert)checkOffset(offset,2,this.length);var val=this[offset+1]|this[offset]<<8;return val&0x8000?val|0xFFFF0000:val;};Buffer$1.prototype.readInt32LE=function readInt32LE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return this[offset]|this[offset+1]<<8|this[offset+2]<<16|this[offset+3]<<24;};Buffer$1.prototype.readInt32BE=function readInt32BE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return this[offset]<<24|this[offset+1]<<16|this[offset+2]<<8|this[offset+3];};Buffer$1.prototype.readFloatLE=function readFloatLE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return read(this,offset,true,23,4);};Buffer$1.prototype.readFloatBE=function readFloatBE(offset,noAssert){if(!noAssert)checkOffset(offset,4,this.length);return read(this,offset,false,23,4);};Buffer$1.prototype.readDoubleLE=function readDoubleLE(offset,noAssert){if(!noAssert)checkOffset(offset,8,this.length);return read(this,offset,true,52,8);};Buffer$1.prototype.readDoubleBE=function readDoubleBE(offset,noAssert){if(!noAssert)checkOffset(offset,8,this.length);return read(this,offset,false,52,8);};function checkInt(buf,value,offset,ext,max,min){if(!internalIsBuffer(buf))throw new TypeError('"buffer" argument must be a Buffer instance');if(value>max||value<min)throw new RangeError('"value" argument is out of bounds');if(offset+ext>buf.length)throw new RangeError('Index out of range');}Buffer$1.prototype.writeUIntLE=function writeUIntLE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;byteLength=byteLength|0;if(!noAssert){var maxBytes=Math.pow(2,8*byteLength)-1;checkInt(this,value,offset,byteLength,maxBytes,0);}var mul=1;var i=0;this[offset]=value&0xFF;while(++i<byteLength&&(mul*=0x100)){this[offset+i]=value/mul&0xFF;}return offset+byteLength;};Buffer$1.prototype.writeUIntBE=function writeUIntBE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;byteLength=byteLength|0;if(!noAssert){var maxBytes=Math.pow(2,8*byteLength)-1;checkInt(this,value,offset,byteLength,maxBytes,0);}var i=byteLength-1;var mul=1;this[offset+i]=value&0xFF;while(--i>=0&&(mul*=0x100)){this[offset+i]=value/mul&0xFF;}return offset+byteLength;};Buffer$1.prototype.writeUInt8=function writeUInt8(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,1,0xff,0);if(!Buffer$1.TYPED_ARRAY_SUPPORT)value=Math.floor(value);this[offset]=value&0xff;return offset+1;};function objectWriteUInt16(buf,value,offset,littleEndian){if(value<0)value=0xffff+value+1;for(var i=0,j=Math.min(buf.length-offset,2);i<j;++i){buf[offset+i]=(value&0xff<<8*(littleEndian?i:1-i))>>>(littleEndian?i:1-i)*8;}}Buffer$1.prototype.writeUInt16LE=function writeUInt16LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,0xffff,0);if(Buffer$1.TYPED_ARRAY_SUPPORT){this[offset]=value&0xff;this[offset+1]=value>>>8;}else{objectWriteUInt16(this,value,offset,true);}return offset+2;};Buffer$1.prototype.writeUInt16BE=function writeUInt16BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,0xffff,0);if(Buffer$1.TYPED_ARRAY_SUPPORT){this[offset]=value>>>8;this[offset+1]=value&0xff;}else{objectWriteUInt16(this,value,offset,false);}return offset+2;};function objectWriteUInt32(buf,value,offset,littleEndian){if(value<0)value=0xffffffff+value+1;for(var i=0,j=Math.min(buf.length-offset,4);i<j;++i){buf[offset+i]=value>>>(littleEndian?i:3-i)*8&0xff;}}Buffer$1.prototype.writeUInt32LE=function writeUInt32LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,0xffffffff,0);if(Buffer$1.TYPED_ARRAY_SUPPORT){this[offset+3]=value>>>24;this[offset+2]=value>>>16;this[offset+1]=value>>>8;this[offset]=value&0xff;}else{objectWriteUInt32(this,value,offset,true);}return offset+4;};Buffer$1.prototype.writeUInt32BE=function writeUInt32BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,0xffffffff,0);if(Buffer$1.TYPED_ARRAY_SUPPORT){this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=value&0xff;}else{objectWriteUInt32(this,value,offset,false);}return offset+4;};Buffer$1.prototype.writeIntLE=function writeIntLE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;if(!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit);}var i=0;var mul=1;var sub=0;this[offset]=value&0xFF;while(++i<byteLength&&(mul*=0x100)){if(value<0&&sub===0&&this[offset+i-1]!==0){sub=1;}this[offset+i]=(value/mul>>0)-sub&0xFF;}return offset+byteLength;};Buffer$1.prototype.writeIntBE=function writeIntBE(value,offset,byteLength,noAssert){value=+value;offset=offset|0;if(!noAssert){var limit=Math.pow(2,8*byteLength-1);checkInt(this,value,offset,byteLength,limit-1,-limit);}var i=byteLength-1;var mul=1;var sub=0;this[offset+i]=value&0xFF;while(--i>=0&&(mul*=0x100)){if(value<0&&sub===0&&this[offset+i+1]!==0){sub=1;}this[offset+i]=(value/mul>>0)-sub&0xFF;}return offset+byteLength;};Buffer$1.prototype.writeInt8=function writeInt8(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,1,0x7f,-0x80);if(!Buffer$1.TYPED_ARRAY_SUPPORT)value=Math.floor(value);if(value<0)value=0xff+value+1;this[offset]=value&0xff;return offset+1;};Buffer$1.prototype.writeInt16LE=function writeInt16LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,0x7fff,-0x8000);if(Buffer$1.TYPED_ARRAY_SUPPORT){this[offset]=value&0xff;this[offset+1]=value>>>8;}else{objectWriteUInt16(this,value,offset,true);}return offset+2;};Buffer$1.prototype.writeInt16BE=function writeInt16BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,2,0x7fff,-0x8000);if(Buffer$1.TYPED_ARRAY_SUPPORT){this[offset]=value>>>8;this[offset+1]=value&0xff;}else{objectWriteUInt16(this,value,offset,false);}return offset+2;};Buffer$1.prototype.writeInt32LE=function writeInt32LE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,0x7fffffff,-0x80000000);if(Buffer$1.TYPED_ARRAY_SUPPORT){this[offset]=value&0xff;this[offset+1]=value>>>8;this[offset+2]=value>>>16;this[offset+3]=value>>>24;}else{objectWriteUInt32(this,value,offset,true);}return offset+4;};Buffer$1.prototype.writeInt32BE=function writeInt32BE(value,offset,noAssert){value=+value;offset=offset|0;if(!noAssert)checkInt(this,value,offset,4,0x7fffffff,-0x80000000);if(value<0)value=0xffffffff+value+1;if(Buffer$1.TYPED_ARRAY_SUPPORT){this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=value&0xff;}else{objectWriteUInt32(this,value,offset,false);}return offset+4;};function checkIEEE754(buf,value,offset,ext,max,min){if(offset+ext>buf.length)throw new RangeError('Index out of range');if(offset<0)throw new RangeError('Index out of range');}function writeFloat(buf,value,offset,littleEndian,noAssert){if(!noAssert){checkIEEE754(buf,value,offset,4,3.4028234663852886e+38,-3.4028234663852886e+38);}write(buf,value,offset,littleEndian,23,4);return offset+4;}Buffer$1.prototype.writeFloatLE=function writeFloatLE(value,offset,noAssert){return writeFloat(this,value,offset,true,noAssert);};Buffer$1.prototype.writeFloatBE=function writeFloatBE(value,offset,noAssert){return writeFloat(this,value,offset,false,noAssert);};function writeDouble(buf,value,offset,littleEndian,noAssert){if(!noAssert){checkIEEE754(buf,value,offset,8,1.7976931348623157E+308,-1.7976931348623157E+308);}write(buf,value,offset,littleEndian,52,8);return offset+8;}Buffer$1.prototype.writeDoubleLE=function writeDoubleLE(value,offset,noAssert){return writeDouble(this,value,offset,true,noAssert);};Buffer$1.prototype.writeDoubleBE=function writeDoubleBE(value,offset,noAssert){return writeDouble(this,value,offset,false,noAssert);};// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer$1.prototype.copy=function copy(target,targetStart,start,end){if(!start)start=0;if(!end&&end!==0)end=this.length;if(targetStart>=target.length)targetStart=target.length;if(!targetStart)targetStart=0;if(end>0&&end<start)end=start;// Copy 0 bytes; we're done
if(end===start)return 0;if(target.length===0||this.length===0)return 0;// Fatal error conditions
if(targetStart<0){throw new RangeError('targetStart out of bounds');}if(start<0||start>=this.length)throw new RangeError('sourceStart out of bounds');if(end<0)throw new RangeError('sourceEnd out of bounds');// Are we oob?
if(end>this.length)end=this.length;if(target.length-targetStart<end-start){end=target.length-targetStart+start;}var len=end-start;var i;if(this===target&&start<targetStart&&targetStart<end){// descending copy from end
for(i=len-1;i>=0;--i){target[i+targetStart]=this[i+start];}}else if(len<1000||!Buffer$1.TYPED_ARRAY_SUPPORT){// ascending copy from start
for(i=0;i<len;++i){target[i+targetStart]=this[i+start];}}else{Uint8Array.prototype.set.call(target,this.subarray(start,start+len),targetStart);}return len;};// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer$1.prototype.fill=function fill(val,start,end,encoding){// Handle string cases:
if(typeof val==='string'){if(typeof start==='string'){encoding=start;start=0;end=this.length;}else if(typeof end==='string'){encoding=end;end=this.length;}if(val.length===1){var code=val.charCodeAt(0);if(code<256){val=code;}}if(encoding!==undefined&&typeof encoding!=='string'){throw new TypeError('encoding must be a string');}if(typeof encoding==='string'&&!Buffer$1.isEncoding(encoding)){throw new TypeError('Unknown encoding: '+encoding);}}else if(typeof val==='number'){val=val&255;}// Invalid ranges are not set to a default, so can range check early.
if(start<0||this.length<start||this.length<end){throw new RangeError('Out of range index');}if(end<=start){return this;}start=start>>>0;end=end===undefined?this.length:end>>>0;if(!val)val=0;var i;if(typeof val==='number'){for(i=start;i<end;++i){this[i]=val;}}else{var bytes=internalIsBuffer(val)?val:utf8ToBytes(new Buffer$1(val,encoding).toString());var len=bytes.length;for(i=0;i<end-start;++i){this[i+start]=bytes[i%len];}}return this;};// HELPER FUNCTIONS
// ================
var INVALID_BASE64_RE=/[^+\/0-9A-Za-z-_]/g;function base64clean(str){// Node strips out invalid characters like \n and \t from the string, base64-js does not
str=stringtrim(str).replace(INVALID_BASE64_RE,'');// Node converts strings with length < 2 to ''
if(str.length<2)return'';// Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
while(str.length%4!==0){str=str+'=';}return str;}function stringtrim(str){if(str.trim)return str.trim();return str.replace(/^\s+|\s+$/g,'');}function toHex(n){if(n<16)return'0'+n.toString(16);return n.toString(16);}function utf8ToBytes(string,units){units=units||Infinity;var codePoint;var length=string.length;var leadSurrogate=null;var bytes=[];for(var i=0;i<length;++i){codePoint=string.charCodeAt(i);// is surrogate component
if(codePoint>0xD7FF&&codePoint<0xE000){// last char was a lead
if(!leadSurrogate){// no lead yet
if(codePoint>0xDBFF){// unexpected trail
if((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);continue;}else if(i+1===length){// unpaired lead
if((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);continue;}// valid lead
leadSurrogate=codePoint;continue;}// 2 leads in a row
if(codePoint<0xDC00){if((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);leadSurrogate=codePoint;continue;}// valid surrogate pair
codePoint=(leadSurrogate-0xD800<<10|codePoint-0xDC00)+0x10000;}else if(leadSurrogate){// valid bmp char, but last char was a lead
if((units-=3)>-1)bytes.push(0xEF,0xBF,0xBD);}leadSurrogate=null;// encode utf8
if(codePoint<0x80){if((units-=1)<0)break;bytes.push(codePoint);}else if(codePoint<0x800){if((units-=2)<0)break;bytes.push(codePoint>>0x6|0xC0,codePoint&0x3F|0x80);}else if(codePoint<0x10000){if((units-=3)<0)break;bytes.push(codePoint>>0xC|0xE0,codePoint>>0x6&0x3F|0x80,codePoint&0x3F|0x80);}else if(codePoint<0x110000){if((units-=4)<0)break;bytes.push(codePoint>>0x12|0xF0,codePoint>>0xC&0x3F|0x80,codePoint>>0x6&0x3F|0x80,codePoint&0x3F|0x80);}else{throw new Error('Invalid code point');}}return bytes;}function asciiToBytes(str){var byteArray=[];for(var i=0;i<str.length;++i){// Node's code seems to be doing this and not & 0x7F..
byteArray.push(str.charCodeAt(i)&0xFF);}return byteArray;}function utf16leToBytes(str,units){var c,hi,lo;var byteArray=[];for(var i=0;i<str.length;++i){if((units-=2)<0)break;c=str.charCodeAt(i);hi=c>>8;lo=c%256;byteArray.push(lo);byteArray.push(hi);}return byteArray;}function base64ToBytes(str){return toByteArray(base64clean(str));}function blitBuffer(src,dst,offset,length){for(var i=0;i<length;++i){if(i+offset>=dst.length||i>=src.length)break;dst[i+offset]=src[i];}return i;}function isnan(val){return val!==val;// eslint-disable-line no-self-compare
}// the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
function isBuffer(obj){return obj!=null&&(!!obj._isBuffer||isFastBuffer(obj)||isSlowBuffer(obj));}function isFastBuffer(obj){return!!obj.constructor&&typeof obj.constructor.isBuffer==='function'&&obj.constructor.isBuffer(obj);}// For Node v0.10 support. Remove this eventually.
function isSlowBuffer(obj){return typeof obj.readFloatLE==='function'&&typeof obj.slice==='function'&&isFastBuffer(obj.slice(0,0));}var bufferEs6=/*#__PURE__*/Object.freeze({INSPECT_MAX_BYTES:INSPECT_MAX_BYTES,kMaxLength:_kMaxLength,Buffer:Buffer$1,SlowBuffer:SlowBuffer,isBuffer:isBuffer});var $jscomp={scope:{},getGlobal:function getGlobal(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof commonjsGlobal?commonjsGlobal:a;}};$jscomp.global=$jscomp.getGlobal(commonjsGlobal);$jscomp.initSymbol=function(){$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol);$jscomp.initSymbol=function(){};};$jscomp.symbolCounter_=0;$jscomp.Symbol=function(a){return"jscomp_symbol_"+a+$jscomp.symbolCounter_++;};$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();$jscomp.global.Symbol.iterator||($jscomp.global.Symbol.iterator=$jscomp.global.Symbol("iterator"));$jscomp.initSymbolIterator=function(){};};$jscomp.makeIterator=function(a){$jscomp.initSymbolIterator();$jscomp.initSymbol();$jscomp.initSymbolIterator();var b=a[Symbol.iterator];if(b)return b.call(a);var c=0;return{next:function next(){return c<a.length?{done:!1,value:a[c++]}:{done:!0};}};};$jscomp.arrayFromIterator=function(a){for(var b,c=[];!(b=a.next()).done;){c.push(b.value);}return c;};$jscomp.arrayFromIterable=function(a){return a instanceof Array?a:$jscomp.arrayFromIterator($jscomp.makeIterator(a));};$jscomp.inherits=function(a,b){function c(){}c.prototype=b.prototype;a.prototype=new c();a.prototype.constructor=a;for(var d in b){if(Object.defineProperties){var e=Object.getOwnPropertyDescriptor(b,d);e&&Object.defineProperty(a,d,e);}else a[d]=b[d];}};$jscomp.array=$jscomp.array||{};$jscomp.iteratorFromArray=function(a,b){$jscomp.initSymbolIterator();a instanceof String&&(a+="");var c=0,d={next:function next(){if(c<a.length){var e=c++;return{value:b(e,a[e]),done:!1};}d.next=function(){return{done:!0,value:void 0};};return d.next();}};$jscomp.initSymbol();$jscomp.initSymbolIterator();d[Symbol.iterator]=function(){return d;};return d;};$jscomp.findInternal=function(a,b,c){a instanceof String&&(a=String(a));for(var d=a.length,e=0;e<d;e++){var f=a[e];if(b.call(c,f,e,a))return{i:e,v:f};}return{i:-1,v:void 0};};$jscomp.array.from=function(a,b,c){$jscomp.initSymbolIterator();b=null!=b?b:function(a){return a;};var d=[];$jscomp.initSymbol();$jscomp.initSymbolIterator();var e=a[Symbol.iterator];"function"==typeof e&&(a=e.call(a));if("function"==typeof a.next)for(;!(e=a.next()).done;){d.push(b.call(c,e.value));}else for(var e=a.length,f=0;f<e;f++){d.push(b.call(c,a[f]));}return d;};$jscomp.array.of=function(a){return $jscomp.array.from(arguments);};$jscomp.array.entries=function(){return $jscomp.iteratorFromArray(this,function(a,b){return[a,b];});};$jscomp.array.installHelper_=function(a,b){!Array.prototype[a]&&Object.defineProperties&&Object.defineProperty&&Object.defineProperty(Array.prototype,a,{configurable:!0,enumerable:!1,writable:!0,value:b});};$jscomp.array.entries$install=function(){$jscomp.array.installHelper_("entries",$jscomp.array.entries);};$jscomp.array.keys=function(){return $jscomp.iteratorFromArray(this,function(a){return a;});};$jscomp.array.keys$install=function(){$jscomp.array.installHelper_("keys",$jscomp.array.keys);};$jscomp.array.values=function(){return $jscomp.iteratorFromArray(this,function(a,b){return b;});};$jscomp.array.values$install=function(){$jscomp.array.installHelper_("values",$jscomp.array.values);};$jscomp.array.copyWithin=function(a,b,c){var d=this.length;a=Number(a);b=Number(b);c=Number(null!=c?c:d);if(a<b)for(c=Math.min(c,d);b<c;){b in this?this[a++]=this[b++]:(delete this[a++],b++);}else for(c=Math.min(c,d+b-a),a+=c-b;c>b;){--c in this?this[--a]=this[c]:delete this[a];}return this;};$jscomp.array.copyWithin$install=function(){$jscomp.array.installHelper_("copyWithin",$jscomp.array.copyWithin);};$jscomp.array.fill=function(a,b,c){var d=this.length||0;0>b&&(b=Math.max(0,d+b));if(null==c||c>d)c=d;c=Number(c);0>c&&(c=Math.max(0,d+c));for(b=Number(b||0);b<c;b++){this[b]=a;}return this;};$jscomp.array.fill$install=function(){$jscomp.array.installHelper_("fill",$jscomp.array.fill);};$jscomp.array.find=function(a,b){return $jscomp.findInternal(this,a,b).v;};$jscomp.array.find$install=function(){$jscomp.array.installHelper_("find",$jscomp.array.find);};$jscomp.array.findIndex=function(a,b){return $jscomp.findInternal(this,a,b).i;};$jscomp.array.findIndex$install=function(){$jscomp.array.installHelper_("findIndex",$jscomp.array.findIndex);};$jscomp.ASSUME_NO_NATIVE_MAP=!1;$jscomp.Map$isConformant=function(){if($jscomp.ASSUME_NO_NATIVE_MAP)return!1;var a=$jscomp.global.Map;if(!a||!a.prototype.entries||"function"!=typeof Object.seal)return!1;try{var b=Object.seal({x:4}),c=new a($jscomp.makeIterator([[b,"s"]]));if("s"!=c.get(b)||1!=c.size||c.get({x:4})||c.set({x:4},"t")!=c||2!=c.size)return!1;var d=c.entries(),e=d.next();if(e.done||e.value[0]!=b||"s"!=e.value[1])return!1;e=d.next();return e.done||4!=e.value[0].x||"t"!=e.value[1]||!d.next().done?!1:!0;}catch(f){return!1;}};$jscomp.Map=function(a){this.data_={};this.head_=$jscomp.Map.createHead();this.size=0;if(a){a=$jscomp.makeIterator(a);for(var b;!(b=a.next()).done;){b=b.value,this.set(b[0],b[1]);}}};$jscomp.Map.prototype.set=function(a,b){var c=$jscomp.Map.maybeGetEntry(this,a);c.list||(c.list=this.data_[c.id]=[]);c.entry?c.entry.value=b:(c.entry={next:this.head_,previous:this.head_.previous,head:this.head_,key:a,value:b},c.list.push(c.entry),this.head_.previous.next=c.entry,this.head_.previous=c.entry,this.size++);return this;};$jscomp.Map.prototype["delete"]=function(a){a=$jscomp.Map.maybeGetEntry(this,a);return a.entry&&a.list?(a.list.splice(a.index,1),a.list.length||delete this.data_[a.id],a.entry.previous.next=a.entry.next,a.entry.next.previous=a.entry.previous,a.entry.head=null,this.size--,!0):!1;};$jscomp.Map.prototype.clear=function(){this.data_={};this.head_=this.head_.previous=$jscomp.Map.createHead();this.size=0;};$jscomp.Map.prototype.has=function(a){return!!$jscomp.Map.maybeGetEntry(this,a).entry;};$jscomp.Map.prototype.get=function(a){return(a=$jscomp.Map.maybeGetEntry(this,a).entry)&&a.value;};$jscomp.Map.prototype.entries=function(){return $jscomp.Map.makeIterator_(this,function(a){return[a.key,a.value];});};$jscomp.Map.prototype.keys=function(){return $jscomp.Map.makeIterator_(this,function(a){return a.key;});};$jscomp.Map.prototype.values=function(){return $jscomp.Map.makeIterator_(this,function(a){return a.value;});};$jscomp.Map.prototype.forEach=function(a,b){for(var c=this.entries(),d;!(d=c.next()).done;){d=d.value,a.call(b,d[1],d[0],this);}};$jscomp.Map.maybeGetEntry=function(a,b){var c=$jscomp.Map.getId(b),d=a.data_[c];if(d&&Object.prototype.hasOwnProperty.call(a.data_,c))for(var e=0;e<d.length;e++){var f=d[e];if(b!==b&&f.key!==f.key||b===f.key)return{id:c,list:d,index:e,entry:f};}return{id:c,list:d,index:-1,entry:void 0};};$jscomp.Map.makeIterator_=function(a,b){var c=a.head_,d={next:function next(){if(c){for(;c.head!=a.head_;){c=c.previous;}for(;c.next!=c.head;){return c=c.next,{done:!1,value:b(c)};}c=null;}return{done:!0,value:void 0};}};$jscomp.initSymbol();$jscomp.initSymbolIterator();d[Symbol.iterator]=function(){return d;};return d;};$jscomp.Map.mapIndex_=0;$jscomp.Map.createHead=function(){var a={};return a.previous=a.next=a.head=a;};$jscomp.Map.getId=function(a){if(!(a instanceof Object))return"p_"+a;if(!($jscomp.Map.idKey in a))try{$jscomp.Map.defineProperty(a,$jscomp.Map.idKey,{value:++$jscomp.Map.mapIndex_});}catch(b){}return $jscomp.Map.idKey in a?a[$jscomp.Map.idKey]:"o_ "+a;};$jscomp.Map.defineProperty=Object.defineProperty?function(a,b,c){Object.defineProperty(a,b,{value:String(c)});}:function(a,b,c){a[b]=String(c);};$jscomp.Map.Entry=function(){};$jscomp.Map$install=function(){$jscomp.initSymbol();$jscomp.initSymbolIterator();$jscomp.Map$isConformant()?$jscomp.Map=$jscomp.global.Map:($jscomp.initSymbol(),$jscomp.initSymbolIterator(),$jscomp.Map.prototype[Symbol.iterator]=$jscomp.Map.prototype.entries,$jscomp.initSymbol(),$jscomp.Map.idKey=Symbol("map-id-key"),$jscomp.Map$install=function(){});};$jscomp.math=$jscomp.math||{};$jscomp.math.clz32=function(a){a=Number(a)>>>0;if(0===a)return 32;var b=0;0===(a&4294901760)&&(a<<=16,b+=16);0===(a&4278190080)&&(a<<=8,b+=8);0===(a&4026531840)&&(a<<=4,b+=4);0===(a&3221225472)&&(a<<=2,b+=2);0===(a&2147483648)&&b++;return b;};$jscomp.math.imul=function(a,b){a=Number(a);b=Number(b);var c=a&65535,d=b&65535;return c*d+((a>>>16&65535)*d+c*(b>>>16&65535)<<16>>>0)|0;};$jscomp.math.sign=function(a){a=Number(a);return 0===a||isNaN(a)?a:0<a?1:-1;};$jscomp.math.log10=function(a){return Math.log(a)/Math.LN10;};$jscomp.math.log2=function(a){return Math.log(a)/Math.LN2;};$jscomp.math.log1p=function(a){a=Number(a);if(.25>a&&-.25<a){for(var b=a,c=1,d=a,e=0,f=1;e!=d;){b*=a,f*=-1,d=(e=d)+f*b/++c;}return d;}return Math.log(1+a);};$jscomp.math.expm1=function(a){a=Number(a);if(.25>a&&-.25<a){for(var b=a,c=1,d=a,e=0;e!=d;){b*=a/++c,d=(e=d)+b;}return d;}return Math.exp(a)-1;};$jscomp.math.cosh=function(a){a=Number(a);return(Math.exp(a)+Math.exp(-a))/2;};$jscomp.math.sinh=function(a){a=Number(a);return 0===a?a:(Math.exp(a)-Math.exp(-a))/2;};$jscomp.math.tanh=function(a){a=Number(a);if(0===a)return a;var b=Math.exp(-2*Math.abs(a)),b=(1-b)/(1+b);return 0>a?-b:b;};$jscomp.math.acosh=function(a){a=Number(a);return Math.log(a+Math.sqrt(a*a-1));};$jscomp.math.asinh=function(a){a=Number(a);if(0===a)return a;var b=Math.log(Math.abs(a)+Math.sqrt(a*a+1));return 0>a?-b:b;};$jscomp.math.atanh=function(a){a=Number(a);return($jscomp.math.log1p(a)-$jscomp.math.log1p(-a))/2;};$jscomp.math.hypot=function(a,b,c){a=Number(a);b=Number(b);var d,e,f,g=Math.max(Math.abs(a),Math.abs(b));for(d=2;d<arguments.length;d++){g=Math.max(g,Math.abs(arguments[d]));}if(1E100<g||1E-100>g){a/=g;b/=g;f=a*a+b*b;for(d=2;d<arguments.length;d++){e=Number(arguments[d])/g,f+=e*e;}return Math.sqrt(f)*g;}f=a*a+b*b;for(d=2;d<arguments.length;d++){e=Number(arguments[d]),f+=e*e;}return Math.sqrt(f);};$jscomp.math.trunc=function(a){a=Number(a);if(isNaN(a)||Infinity===a||-Infinity===a||0===a)return a;var b=Math.floor(Math.abs(a));return 0>a?-b:b;};$jscomp.math.cbrt=function(a){if(0===a)return a;a=Number(a);var b=Math.pow(Math.abs(a),1/3);return 0>a?-b:b;};$jscomp.number=$jscomp.number||{};$jscomp.number.isFinite=function(a){return"number"!==typeof a?!1:!isNaN(a)&&Infinity!==a&&-Infinity!==a;};$jscomp.number.isInteger=function(a){return $jscomp.number.isFinite(a)?a===Math.floor(a):!1;};$jscomp.number.isNaN=function(a){return"number"===typeof a&&isNaN(a);};$jscomp.number.isSafeInteger=function(a){return $jscomp.number.isInteger(a)&&Math.abs(a)<=$jscomp.number.MAX_SAFE_INTEGER;};$jscomp.number.EPSILON=function(){return Math.pow(2,-52);}();$jscomp.number.MAX_SAFE_INTEGER=function(){return 9007199254740991;}();$jscomp.number.MIN_SAFE_INTEGER=function(){return-9007199254740991;}();$jscomp.object=$jscomp.object||{};$jscomp.object.assign=function(a,b){for(var c=1;c<arguments.length;c++){var d=arguments[c];if(d)for(var e in d){Object.prototype.hasOwnProperty.call(d,e)&&(a[e]=d[e]);}}return a;};$jscomp.object.is=function(a,b){return a===b?0!==a||1/a===1/b:a!==a&&b!==b;};$jscomp.ASSUME_NO_NATIVE_SET=!1;$jscomp.Set$isConformant=function(){if($jscomp.ASSUME_NO_NATIVE_SET)return!1;var a=$jscomp.global.Set;if(!a||!a.prototype.entries||"function"!=typeof Object.seal)return!1;try{var b=Object.seal({x:4}),c=new a($jscomp.makeIterator([b]));if(!c.has(b)||1!=c.size||c.add(b)!=c||1!=c.size||c.add({x:4})!=c||2!=c.size)return!1;var d=c.entries(),e=d.next();if(e.done||e.value[0]!=b||e.value[1]!=b)return!1;e=d.next();return e.done||e.value[0]==b||4!=e.value[0].x||e.value[1]!=e.value[0]?!1:d.next().done;}catch(f){return!1;}};$jscomp.Set=function(a){this.map_=new $jscomp.Map();if(a){a=$jscomp.makeIterator(a);for(var b;!(b=a.next()).done;){this.add(b.value);}}this.size=this.map_.size;};$jscomp.Set.prototype.add=function(a){this.map_.set(a,a);this.size=this.map_.size;return this;};$jscomp.Set.prototype["delete"]=function(a){a=this.map_["delete"](a);this.size=this.map_.size;return a;};$jscomp.Set.prototype.clear=function(){this.map_.clear();this.size=0;};$jscomp.Set.prototype.has=function(a){return this.map_.has(a);};$jscomp.Set.prototype.entries=function(){return this.map_.entries();};$jscomp.Set.prototype.values=function(){return this.map_.values();};$jscomp.Set.prototype.forEach=function(a,b){var c=this;this.map_.forEach(function(d){return a.call(b,d,d,c);});};$jscomp.Set$install=function(){$jscomp.Map$install();$jscomp.Set$isConformant()?$jscomp.Set=$jscomp.global.Set:($jscomp.initSymbol(),$jscomp.initSymbolIterator(),$jscomp.Set.prototype[Symbol.iterator]=$jscomp.Set.prototype.values,$jscomp.Set$install=function(){});};$jscomp.string=$jscomp.string||{};$jscomp.checkStringArgs=function(a,b,c){if(null==a)throw new TypeError("The 'this' value for String.prototype."+c+" must not be null or undefined");if(b instanceof RegExp)throw new TypeError("First argument to String.prototype."+c+" must not be a regular expression");return a+"";};$jscomp.string.fromCodePoint=function(a){for(var b="",c=0;c<arguments.length;c++){var d=Number(arguments[c]);if(0>d||1114111<d||d!==Math.floor(d))throw new RangeError("invalid_code_point "+d);65535>=d?b+=String.fromCharCode(d):(d-=65536,b+=String.fromCharCode(d>>>10&1023|55296),b+=String.fromCharCode(d&1023|56320));}return b;};$jscomp.string.repeat=function(a){var b=$jscomp.checkStringArgs(this,null,"repeat");if(0>a||1342177279<a)throw new RangeError("Invalid count value");a|=0;for(var c="";a;){if(a&1&&(c+=b),a>>>=1)b+=b;}return c;};$jscomp.string.repeat$install=function(){String.prototype.repeat||(String.prototype.repeat=$jscomp.string.repeat);};$jscomp.string.codePointAt=function(a){var b=$jscomp.checkStringArgs(this,null,"codePointAt"),c=b.length;a=Number(a)||0;if(0<=a&&a<c){a|=0;var d=b.charCodeAt(a);if(55296>d||56319<d||a+1===c)return d;a=b.charCodeAt(a+1);return 56320>a||57343<a?d:1024*(d-55296)+a+9216;}};$jscomp.string.codePointAt$install=function(){String.prototype.codePointAt||(String.prototype.codePointAt=$jscomp.string.codePointAt);};$jscomp.string.includes=function(a,b){return-1!==$jscomp.checkStringArgs(this,a,"includes").indexOf(a,b||0);};$jscomp.string.includes$install=function(){String.prototype.includes||(String.prototype.includes=$jscomp.string.includes);};$jscomp.string.startsWith=function(a,b){var c=$jscomp.checkStringArgs(this,a,"startsWith");a+="";for(var d=c.length,e=a.length,f=Math.max(0,Math.min(b|0,c.length)),g=0;g<e&&f<d;){if(c[f++]!=a[g++])return!1;}return g>=e;};$jscomp.string.startsWith$install=function(){String.prototype.startsWith||(String.prototype.startsWith=$jscomp.string.startsWith);};$jscomp.string.endsWith=function(a,b){var c=$jscomp.checkStringArgs(this,a,"endsWith");a+="";void 0===b&&(b=c.length);for(var d=Math.max(0,Math.min(b|0,c.length)),e=a.length;0<e&&0<d;){if(c[--d]!=a[--e])return!1;}return 0>=e;};$jscomp.string.endsWith$install=function(){String.prototype.endsWith||(String.prototype.endsWith=$jscomp.string.endsWith);};var COMPILED=!0,goog=goog||{};goog.global=commonjsGlobal;goog.isDef=function(a){return void 0!==a;};goog.exportPath_=function(a,b,c){a=a.split(".");c=c||goog.global;a[0]in c||!c.execScript||c.execScript("var "+a[0]);for(var d;a.length&&(d=a.shift());){!a.length&&goog.isDef(b)?c[d]=b:c=c[d]?c[d]:c[d]={};}};goog.define=function(a,b){var c=b;goog.exportPath_(a,c);};goog.DEBUG=!0;goog.LOCALE="en";goog.TRUSTED_SITE=!0;goog.STRICT_MODE_COMPATIBLE=!1;goog.DISALLOW_TEST_ONLY_CODE=!goog.DEBUG;goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING=!1;goog.provide=function(a){goog.constructNamespace_(a);};goog.constructNamespace_=function(a,b){goog.exportPath_(a,b);};goog.VALID_MODULE_RE_=/^[a-zA-Z_$][a-zA-Z0-9._$]*$/;goog.module=function(a){if(!goog.isString(a)||!a||-1==a.search(goog.VALID_MODULE_RE_))throw Error("Invalid module identifier");if(!goog.isInModuleLoader_())throw Error("Module "+a+" has been loaded incorrectly.");if(goog.moduleLoaderState_.moduleName)throw Error("goog.module may only be called once per module.");goog.moduleLoaderState_.moduleName=a;};goog.module.get=function(a){return goog.module.getInternal_(a);};goog.module.getInternal_=function(a){};goog.moduleLoaderState_=null;goog.isInModuleLoader_=function(){return null!=goog.moduleLoaderState_;};goog.module.declareLegacyNamespace=function(){goog.moduleLoaderState_.declareLegacyNamespace=!0;};goog.setTestOnly=function(a){if(goog.DISALLOW_TEST_ONLY_CODE)throw a=a||"",Error("Importing test-only code into non-debug environment"+(a?": "+a:"."));};goog.forwardDeclare=function(a){};goog.getObjectByName=function(a,b){for(var c=a.split("."),d=b||goog.global,e;e=c.shift();){if(goog.isDefAndNotNull(d[e]))d=d[e];else return null;}return d;};goog.globalize=function(a,b){var c=b||goog.global,d;for(d in a){c[d]=a[d];}};goog.addDependency=function(a,b,c,d){if(goog.DEPENDENCIES_ENABLED){var e;a=a.replace(/\\/g,"/");for(var f=goog.dependencies_,g=0;e=b[g];g++){f.nameToPath[e]=a,f.pathIsModule[a]=!!d;}for(d=0;b=c[d];d++){a in f.requires||(f.requires[a]={}),f.requires[a][b]=!0;}}};goog.ENABLE_DEBUG_LOADER=!0;goog.logToConsole_=function(a){goog.global.console&&goog.global.console.error(a);};goog.require=function(a){};goog.basePath="";goog.nullFunction=function(){};goog.abstractMethod=function(){throw Error("unimplemented abstract method");};goog.addSingletonGetter=function(a){a.getInstance=function(){if(a.instance_)return a.instance_;goog.DEBUG&&(goog.instantiatedSingletons_[goog.instantiatedSingletons_.length]=a);return a.instance_=new a();};};goog.instantiatedSingletons_=[];goog.LOAD_MODULE_USING_EVAL=!0;goog.SEAL_MODULE_EXPORTS=goog.DEBUG;goog.loadedModules_={};goog.DEPENDENCIES_ENABLED=!COMPILED;goog.DEPENDENCIES_ENABLED&&(goog.dependencies_={pathIsModule:{},nameToPath:{},requires:{},visited:{},written:{},deferred:{}},goog.inHtmlDocument_=function(){var a=goog.global.document;return null!=a&&"write"in a;},goog.findBasePath_=function(){if(goog.isDef(goog.global.CLOSURE_BASE_PATH))goog.basePath=goog.global.CLOSURE_BASE_PATH;else if(goog.inHtmlDocument_())for(var a=goog.global.document.getElementsByTagName("SCRIPT"),b=a.length-1;0<=b;--b){var c=a[b].src,d=c.lastIndexOf("?"),d=-1==d?c.length:d;if("base.js"==c.substr(d-7,7)){goog.basePath=c.substr(0,d-7);break;}}},goog.importScript_=function(a,b){(goog.global.CLOSURE_IMPORT_SCRIPT||goog.writeScriptTag_)(a,b)&&(goog.dependencies_.written[a]=!0);},goog.IS_OLD_IE_=!(goog.global.atob||!goog.global.document||!goog.global.document.all),goog.importModule_=function(a){goog.importScript_("",'goog.retrieveAndExecModule_("'+a+'");')&&(goog.dependencies_.written[a]=!0);},goog.queuedModules_=[],goog.wrapModule_=function(a,b){return goog.LOAD_MODULE_USING_EVAL&&goog.isDef(goog.global.JSON)?"goog.loadModule("+goog.global.JSON.stringify(b+"\n//# sourceURL="+a+"\n")+");":'goog.loadModule(function(exports) {"use strict";'+b+"\n;return exports});\n//# sourceURL="+a+"\n";},goog.loadQueuedModules_=function(){var a=goog.queuedModules_.length;if(0<a){var b=goog.queuedModules_;goog.queuedModules_=[];for(var c=0;c<a;c++){goog.maybeProcessDeferredPath_(b[c]);}}},goog.maybeProcessDeferredDep_=function(a){goog.isDeferredModule_(a)&&goog.allDepsAreAvailable_(a)&&(a=goog.getPathFromDeps_(a),goog.maybeProcessDeferredPath_(goog.basePath+a));},goog.isDeferredModule_=function(a){return(a=goog.getPathFromDeps_(a))&&goog.dependencies_.pathIsModule[a]?goog.basePath+a in goog.dependencies_.deferred:!1;},goog.allDepsAreAvailable_=function(a){if((a=goog.getPathFromDeps_(a))&&a in goog.dependencies_.requires)for(var b in goog.dependencies_.requires[a]){if(!goog.isProvided_(b)&&!goog.isDeferredModule_(b))return!1;}return!0;},goog.maybeProcessDeferredPath_=function(a){if(a in goog.dependencies_.deferred){var b=goog.dependencies_.deferred[a];delete goog.dependencies_.deferred[a];goog.globalEval(b);}},goog.loadModuleFromUrl=function(a){goog.retrieveAndExecModule_(a);},goog.loadModule=function(a){var b=goog.moduleLoaderState_;try{goog.moduleLoaderState_={moduleName:void 0,declareLegacyNamespace:!1};var c;if(goog.isFunction(a))c=a.call(goog.global,{});else if(goog.isString(a))c=goog.loadModuleFromSource_.call(goog.global,a);else throw Error("Invalid module definition");var d=goog.moduleLoaderState_.moduleName;if(!goog.isString(d)||!d)throw Error('Invalid module name "'+d+'"');goog.moduleLoaderState_.declareLegacyNamespace?goog.constructNamespace_(d,c):goog.SEAL_MODULE_EXPORTS&&Object.seal&&Object.seal(c);goog.loadedModules_[d]=c;}finally{goog.moduleLoaderState_=b;}},goog.loadModuleFromSource_=function(a){eval(a);return{};},goog.writeScriptSrcNode_=function(a){goog.global.document.write('<script type="text/javascript" src="'+a+'">\x3c/script>');},goog.appendScriptSrcNode_=function(a){var b=goog.global.document,c=b.createElement("script");c.type="text/javascript";c.src=a;c.defer=!1;c.async=!1;b.head.appendChild(c);},goog.writeScriptTag_=function(a,b){if(goog.inHtmlDocument_()){var c=goog.global.document;if(!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING&&"complete"==c.readyState){if(/\bdeps.js$/.test(a))return!1;throw Error('Cannot write "'+a+'" after document load');}var d=goog.IS_OLD_IE_;void 0===b?d?(d=" onreadystatechange='goog.onScriptLoad_(this, "+ ++goog.lastNonModuleScriptIndex_+")' ",c.write('<script type="text/javascript" src="'+a+'"'+d+">\x3c/script>")):goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING?goog.appendScriptSrcNode_(a):goog.writeScriptSrcNode_(a):c.write('<script type="text/javascript">'+b+"\x3c/script>");return!0;}return!1;},goog.lastNonModuleScriptIndex_=0,goog.onScriptLoad_=function(a,b){"complete"==a.readyState&&goog.lastNonModuleScriptIndex_==b&&goog.loadQueuedModules_();return!0;},goog.writeScripts_=function(a){function b(a){if(!(a in e.written||a in e.visited)){e.visited[a]=!0;if(a in e.requires)for(var f in e.requires[a]){if(!goog.isProvided_(f))if(f in e.nameToPath)b(e.nameToPath[f]);else throw Error("Undefined nameToPath for "+f);}a in d||(d[a]=!0,c.push(a));}}var c=[],d={},e=goog.dependencies_;b(a);for(a=0;a<c.length;a++){var f=c[a];goog.dependencies_.written[f]=!0;}var g=goog.moduleLoaderState_;goog.moduleLoaderState_=null;for(a=0;a<c.length;a++){if(f=c[a])e.pathIsModule[f]?goog.importModule_(goog.basePath+f):goog.importScript_(goog.basePath+f);else throw goog.moduleLoaderState_=g,Error("Undefined script input");}goog.moduleLoaderState_=g;},goog.getPathFromDeps_=function(a){return a in goog.dependencies_.nameToPath?goog.dependencies_.nameToPath[a]:null;},goog.findBasePath_(),goog.global.CLOSURE_NO_DEPS||goog.importScript_(goog.basePath+"deps.js"));goog.normalizePath_=function(a){a=a.split("/");for(var b=0;b<a.length;){"."==a[b]?a.splice(b,1):b&&".."==a[b]&&a[b-1]&&".."!=a[b-1]?a.splice(--b,2):b++;}return a.join("/");};goog.loadFileSync_=function(a){if(goog.global.CLOSURE_LOAD_FILE_SYNC)return goog.global.CLOSURE_LOAD_FILE_SYNC(a);var b=new goog.global.XMLHttpRequest();b.open("get",a,!1);b.send();return b.responseText;};goog.retrieveAndExecModule_=function(a){};goog.typeOf=function(a){var b=_typeof2(a);if("object"==b){if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function";}else return"null";}else if("function"==b&&"undefined"==typeof a.call)return"object";return b;};goog.isNull=function(a){return null===a;};goog.isDefAndNotNull=function(a){return null!=a;};goog.isArray=function(a){return"array"==goog.typeOf(a);};goog.isArrayLike=function(a){var b=goog.typeOf(a);return"array"==b||"object"==b&&"number"==typeof a.length;};goog.isDateLike=function(a){return goog.isObject(a)&&"function"==typeof a.getFullYear;};goog.isString=function(a){return"string"==typeof a;};goog.isBoolean=function(a){return"boolean"==typeof a;};goog.isNumber=function(a){return"number"==typeof a;};goog.isFunction=function(a){return"function"==goog.typeOf(a);};goog.isObject=function(a){var b=_typeof2(a);return"object"==b&&null!=a||"function"==b;};goog.getUid=function(a){return a[goog.UID_PROPERTY_]||(a[goog.UID_PROPERTY_]=++goog.uidCounter_);};goog.hasUid=function(a){return!!a[goog.UID_PROPERTY_];};goog.removeUid=function(a){null!==a&&"removeAttribute"in a&&a.removeAttribute(goog.UID_PROPERTY_);try{delete a[goog.UID_PROPERTY_];}catch(b){}};goog.UID_PROPERTY_="closure_uid_"+(1E9*Math.random()>>>0);goog.uidCounter_=0;goog.getHashCode=goog.getUid;goog.removeHashCode=goog.removeUid;goog.cloneObject=function(a){var b=goog.typeOf(a);if("object"==b||"array"==b){if(a.clone)return a.clone();var b="array"==b?[]:{},c;for(c in a){b[c]=goog.cloneObject(a[c]);}return b;}return a;};goog.bindNative_=function(a,b,c){return a.call.apply(a.bind,arguments);};goog.bindJs_=function(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c);};}return function(){return a.apply(b,arguments);};};goog.bind=function(a,b,c){Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?goog.bind=goog.bindNative_:goog.bind=goog.bindJs_;return goog.bind.apply(null,arguments);};goog.partial=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b);};};goog.mixin=function(a,b){for(var c in b){a[c]=b[c];}};goog.now=goog.TRUSTED_SITE&&Date.now||function(){return+new Date();};goog.globalEval=function(a){if(goog.global.execScript)goog.global.execScript(a,"JavaScript");else if(goog.global.eval){if(null==goog.evalWorksForGlobals_)if(goog.global.eval("var _evalTest_ = 1;"),"undefined"!=typeof goog.global._evalTest_){try{delete goog.global._evalTest_;}catch(d){}goog.evalWorksForGlobals_=!0;}else goog.evalWorksForGlobals_=!1;if(goog.evalWorksForGlobals_)goog.global.eval(a);else{var b=goog.global.document,c=b.createElement("SCRIPT");c.type="text/javascript";c.defer=!1;c.appendChild(b.createTextNode(a));b.body.appendChild(c);b.body.removeChild(c);}}else throw Error("goog.globalEval not available");};goog.evalWorksForGlobals_=null;goog.getCssName=function(a,b){var c=function c(a){return goog.cssNameMapping_[a]||a;},d=function d(a){a=a.split("-");for(var b=[],d=0;d<a.length;d++){b.push(c(a[d]));}return b.join("-");},d=goog.cssNameMapping_?"BY_WHOLE"==goog.cssNameMappingStyle_?c:d:function(a){return a;};return b?a+"-"+d(b):d(a);};goog.setCssNameMapping=function(a,b){goog.cssNameMapping_=a;goog.cssNameMappingStyle_=b;};goog.getMsg=function(a,b){b&&(a=a.replace(/\{\$([^}]+)}/g,function(a,d){return null!=b&&d in b?b[d]:a;}));return a;};goog.getMsgWithFallback=function(a,b){return a;};goog.exportSymbol=function(a,b,c){goog.exportPath_(a,b,c);};goog.exportProperty=function(a,b,c){a[b]=c;};goog.inherits=function(a,b){function c(){}c.prototype=b.prototype;a.superClass_=b.prototype;a.prototype=new c();a.prototype.constructor=a;a.base=function(a,c,f){for(var g=Array(arguments.length-2),h=2;h<arguments.length;h++){g[h-2]=arguments[h];}return b.prototype[c].apply(a,g);};};goog.base=function(a,b,c){var d=arguments.callee.caller;if(goog.STRICT_MODE_COMPATIBLE||goog.DEBUG&&!d)throw Error("arguments.caller not defined.  goog.base() cannot be used with strict mode code. See http://www.ecma-international.org/ecma-262/5.1/#sec-C");if(d.superClass_){for(var e=Array(arguments.length-1),f=1;f<arguments.length;f++){e[f-1]=arguments[f];}return d.superClass_.constructor.apply(a,e);}e=Array(arguments.length-2);for(f=2;f<arguments.length;f++){e[f-2]=arguments[f];}for(var f=!1,g=a.constructor;g;g=g.superClass_&&g.superClass_.constructor){if(g.prototype[b]===d)f=!0;else if(f)return g.prototype[b].apply(a,e);}if(a[b]===d)return a.constructor.prototype[b].apply(a,e);throw Error("goog.base called from a method of one name to a method of a different name");};goog.scope=function(a){a.call(goog.global);};goog.defineClass=function(a,b){var c=b.constructor,d=b.statics;c&&c!=Object.prototype.constructor||(c=function c(){throw Error("cannot instantiate an interface (no constructor defined).");});c=goog.defineClass.createSealingConstructor_(c,a);a&&goog.inherits(c,a);delete b.constructor;delete b.statics;goog.defineClass.applyProperties_(c.prototype,b);null!=d&&(d instanceof Function?d(c):goog.defineClass.applyProperties_(c,d));return c;};goog.defineClass.SEAL_CLASS_INSTANCES=goog.DEBUG;goog.defineClass.createSealingConstructor_=function(a,b){if(goog.defineClass.SEAL_CLASS_INSTANCES&&Object.seal instanceof Function){if(b&&b.prototype&&b.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_])return a;var c=function c(){var b=a.apply(this,arguments)||this;b[goog.UID_PROPERTY_]=b[goog.UID_PROPERTY_];this.constructor===c&&Object.seal(b);return b;};return c;}return a;};goog.defineClass.OBJECT_PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");goog.defineClass.applyProperties_=function(a,b){for(var c in b){Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c]);}for(var d=0;d<goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;d++){c=goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[d],Object.prototype.hasOwnProperty.call(b,c)&&(a[c]=b[c]);}};goog.tagUnsealableClass=function(a){};goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_="goog_defineClass_legacy_unsealable";goog.dom={};goog.dom.NodeType={ELEMENT:1,ATTRIBUTE:2,TEXT:3,CDATA_SECTION:4,ENTITY_REFERENCE:5,ENTITY:6,PROCESSING_INSTRUCTION:7,COMMENT:8,DOCUMENT:9,DOCUMENT_TYPE:10,DOCUMENT_FRAGMENT:11,NOTATION:12};goog.debug={};goog.debug.Error=function(a){if(Error.captureStackTrace)Error.captureStackTrace(this,goog.debug.Error);else{var b=Error().stack;b&&(this.stack=b);}a&&(this.message=String(a));this.reportErrorToServer=!0;};goog.inherits(goog.debug.Error,Error);goog.debug.Error.prototype.name="CustomError";goog.string={};goog.string.DETECT_DOUBLE_ESCAPING=!1;goog.string.FORCE_NON_DOM_HTML_UNESCAPING=!1;goog.string.Unicode={NBSP:"\xA0"};goog.string.startsWith=function(a,b){return 0==a.lastIndexOf(b,0);};goog.string.endsWith=function(a,b){var c=a.length-b.length;return 0<=c&&a.indexOf(b,c)==c;};goog.string.caseInsensitiveStartsWith=function(a,b){return 0==goog.string.caseInsensitiveCompare(b,a.substr(0,b.length));};goog.string.caseInsensitiveEndsWith=function(a,b){return 0==goog.string.caseInsensitiveCompare(b,a.substr(a.length-b.length,b.length));};goog.string.caseInsensitiveEquals=function(a,b){return a.toLowerCase()==b.toLowerCase();};goog.string.subs=function(a,b){for(var c=a.split("%s"),d="",e=Array.prototype.slice.call(arguments,1);e.length&&1<c.length;){d+=c.shift()+e.shift();}return d+c.join("%s");};goog.string.collapseWhitespace=function(a){return a.replace(/[\s\xa0]+/g," ").replace(/^\s+|\s+$/g,"");};goog.string.isEmptyOrWhitespace=function(a){return /^[\s\xa0]*$/.test(a);};goog.string.isEmptyString=function(a){return 0==a.length;};goog.string.isEmpty=goog.string.isEmptyOrWhitespace;goog.string.isEmptyOrWhitespaceSafe=function(a){return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(a));};goog.string.isEmptySafe=goog.string.isEmptyOrWhitespaceSafe;goog.string.isBreakingWhitespace=function(a){return!/[^\t\n\r ]/.test(a);};goog.string.isAlpha=function(a){return!/[^a-zA-Z]/.test(a);};goog.string.isNumeric=function(a){return!/[^0-9]/.test(a);};goog.string.isAlphaNumeric=function(a){return!/[^a-zA-Z0-9]/.test(a);};goog.string.isSpace=function(a){return" "==a;};goog.string.isUnicodeChar=function(a){return 1==a.length&&" "<=a&&"~">=a||"\x80"<=a&&"\uFFFD">=a;};goog.string.stripNewlines=function(a){return a.replace(/(\r\n|\r|\n)+/g," ");};goog.string.canonicalizeNewlines=function(a){return a.replace(/(\r\n|\r|\n)/g,"\n");};goog.string.normalizeWhitespace=function(a){return a.replace(/\xa0|\s/g," ");};goog.string.normalizeSpaces=function(a){return a.replace(/\xa0|[ \t]+/g," ");};goog.string.collapseBreakingSpaces=function(a){return a.replace(/[\t\r\n ]+/g," ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g,"");};goog.string.trim=goog.TRUSTED_SITE&&String.prototype.trim?function(a){return a.trim();}:function(a){return a.replace(/^[\s\xa0]+|[\s\xa0]+$/g,"");};goog.string.trimLeft=function(a){return a.replace(/^[\s\xa0]+/,"");};goog.string.trimRight=function(a){return a.replace(/[\s\xa0]+$/,"");};goog.string.caseInsensitiveCompare=function(a,b){var c=String(a).toLowerCase(),d=String(b).toLowerCase();return c<d?-1:c==d?0:1;};goog.string.numberAwareCompare_=function(a,b,c){if(a==b)return 0;if(!a)return-1;if(!b)return 1;for(var d=a.toLowerCase().match(c),e=b.toLowerCase().match(c),f=Math.min(d.length,e.length),g=0;g<f;g++){c=d[g];var h=e[g];if(c!=h)return a=parseInt(c,10),!isNaN(a)&&(b=parseInt(h,10),!isNaN(b)&&a-b)?a-b:c<h?-1:1;}return d.length!=e.length?d.length-e.length:a<b?-1:1;};goog.string.intAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\d+|\D+/g);};goog.string.floatAwareCompare=function(a,b){return goog.string.numberAwareCompare_(a,b,/\d+|\.\d+|\D+/g);};goog.string.numerateCompare=goog.string.floatAwareCompare;goog.string.urlEncode=function(a){return encodeURIComponent(String(a));};goog.string.urlDecode=function(a){return decodeURIComponent(a.replace(/\+/g," "));};goog.string.newLineToBr=function(a,b){return a.replace(/(\r\n|\r|\n)/g,b?"<br />":"<br>");};goog.string.htmlEscape=function(a,b){if(b)a=a.replace(goog.string.AMP_RE_,"&amp;").replace(goog.string.LT_RE_,"&lt;").replace(goog.string.GT_RE_,"&gt;").replace(goog.string.QUOT_RE_,"&quot;").replace(goog.string.SINGLE_QUOTE_RE_,"&#39;").replace(goog.string.NULL_RE_,"&#0;"),goog.string.DETECT_DOUBLE_ESCAPING&&(a=a.replace(goog.string.E_RE_,"&#101;"));else{if(!goog.string.ALL_RE_.test(a))return a;-1!=a.indexOf("&")&&(a=a.replace(goog.string.AMP_RE_,"&amp;"));-1!=a.indexOf("<")&&(a=a.replace(goog.string.LT_RE_,"&lt;"));-1!=a.indexOf(">")&&(a=a.replace(goog.string.GT_RE_,"&gt;"));-1!=a.indexOf('"')&&(a=a.replace(goog.string.QUOT_RE_,"&quot;"));-1!=a.indexOf("'")&&(a=a.replace(goog.string.SINGLE_QUOTE_RE_,"&#39;"));-1!=a.indexOf("\x00")&&(a=a.replace(goog.string.NULL_RE_,"&#0;"));goog.string.DETECT_DOUBLE_ESCAPING&&-1!=a.indexOf("e")&&(a=a.replace(goog.string.E_RE_,"&#101;"));}return a;};goog.string.AMP_RE_=/&/g;goog.string.LT_RE_=/</g;goog.string.GT_RE_=/>/g;goog.string.QUOT_RE_=/"/g;goog.string.SINGLE_QUOTE_RE_=/'/g;goog.string.NULL_RE_=/\x00/g;goog.string.E_RE_=/e/g;goog.string.ALL_RE_=goog.string.DETECT_DOUBLE_ESCAPING?/[\x00&<>"'e]/:/[\x00&<>"']/;goog.string.unescapeEntities=function(a){return goog.string.contains(a,"&")?!goog.string.FORCE_NON_DOM_HTML_UNESCAPING&&"document"in goog.global?goog.string.unescapeEntitiesUsingDom_(a):goog.string.unescapePureXmlEntities_(a):a;};goog.string.unescapeEntitiesWithDocument=function(a,b){return goog.string.contains(a,"&")?goog.string.unescapeEntitiesUsingDom_(a,b):a;};goog.string.unescapeEntitiesUsingDom_=function(a,b){var c={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"'},d;d=b?b.createElement("div"):goog.global.document.createElement("div");return a.replace(goog.string.HTML_ENTITY_PATTERN_,function(a,b){var g=c[a];if(g)return g;if("#"==b.charAt(0)){var h=Number("0"+b.substr(1));isNaN(h)||(g=String.fromCharCode(h));}g||(d.innerHTML=a+" ",g=d.firstChild.nodeValue.slice(0,-1));return c[a]=g;});};goog.string.unescapePureXmlEntities_=function(a){return a.replace(/&([^;]+);/g,function(a,c){switch(c){case"amp":return"&";case"lt":return"<";case"gt":return">";case"quot":return'"';default:if("#"==c.charAt(0)){var d=Number("0"+c.substr(1));if(!isNaN(d))return String.fromCharCode(d);}return a;}});};goog.string.HTML_ENTITY_PATTERN_=/&([^;\s<&]+);?/g;goog.string.whitespaceEscape=function(a,b){return goog.string.newLineToBr(a.replace(/  /g," &#160;"),b);};goog.string.preserveSpaces=function(a){return a.replace(/(^|[\n ]) /g,"$1"+goog.string.Unicode.NBSP);};goog.string.stripQuotes=function(a,b){for(var c=b.length,d=0;d<c;d++){var e=1==c?b:b.charAt(d);if(a.charAt(0)==e&&a.charAt(a.length-1)==e)return a.substring(1,a.length-1);}return a;};goog.string.truncate=function(a,b,c){c&&(a=goog.string.unescapeEntities(a));a.length>b&&(a=a.substring(0,b-3)+"...");c&&(a=goog.string.htmlEscape(a));return a;};goog.string.truncateMiddle=function(a,b,c,d){c&&(a=goog.string.unescapeEntities(a));if(d&&a.length>b){d>b&&(d=b);var e=a.length-d;a=a.substring(0,b-d)+"..."+a.substring(e);}else a.length>b&&(d=Math.floor(b/2),e=a.length-d,a=a.substring(0,d+b%2)+"..."+a.substring(e));c&&(a=goog.string.htmlEscape(a));return a;};goog.string.specialEscapeChars_={"\x00":"\\0","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\x0B",'"':'\\"',"\\":"\\\\","<":"<"};goog.string.jsEscapeCache_={"'":"\\'"};goog.string.quote=function(a){a=String(a);for(var b=['"'],c=0;c<a.length;c++){var d=a.charAt(c),e=d.charCodeAt(0);b[c+1]=goog.string.specialEscapeChars_[d]||(31<e&&127>e?d:goog.string.escapeChar(d));}b.push('"');return b.join("");};goog.string.escapeString=function(a){for(var b=[],c=0;c<a.length;c++){b[c]=goog.string.escapeChar(a.charAt(c));}return b.join("");};goog.string.escapeChar=function(a){if(a in goog.string.jsEscapeCache_)return goog.string.jsEscapeCache_[a];if(a in goog.string.specialEscapeChars_)return goog.string.jsEscapeCache_[a]=goog.string.specialEscapeChars_[a];var b,c=a.charCodeAt(0);if(31<c&&127>c)b=a;else{if(256>c){if(b="\\x",16>c||256<c)b+="0";}else b="\\u",4096>c&&(b+="0");b+=c.toString(16).toUpperCase();}return goog.string.jsEscapeCache_[a]=b;};goog.string.contains=function(a,b){return-1!=a.indexOf(b);};goog.string.caseInsensitiveContains=function(a,b){return goog.string.contains(a.toLowerCase(),b.toLowerCase());};goog.string.countOf=function(a,b){return a&&b?a.split(b).length-1:0;};goog.string.removeAt=function(a,b,c){var d=a;0<=b&&b<a.length&&0<c&&(d=a.substr(0,b)+a.substr(b+c,a.length-b-c));return d;};goog.string.remove=function(a,b){var c=new RegExp(goog.string.regExpEscape(b),"");return a.replace(c,"");};goog.string.removeAll=function(a,b){var c=new RegExp(goog.string.regExpEscape(b),"g");return a.replace(c,"");};goog.string.regExpEscape=function(a){return String(a).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08");};goog.string.repeat=String.prototype.repeat?function(a,b){return a.repeat(b);}:function(a,b){return Array(b+1).join(a);};goog.string.padNumber=function(a,b,c){a=goog.isDef(c)?a.toFixed(c):String(a);c=a.indexOf(".");-1==c&&(c=a.length);return goog.string.repeat("0",Math.max(0,b-c))+a;};goog.string.makeSafe=function(a){return null==a?"":String(a);};goog.string.buildString=function(a){return Array.prototype.join.call(arguments,"");};goog.string.getRandomString=function(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^goog.now()).toString(36);};goog.string.compareVersions=function(a,b){for(var c=0,d=goog.string.trim(String(a)).split("."),e=goog.string.trim(String(b)).split("."),f=Math.max(d.length,e.length),g=0;0==c&&g<f;g++){var h=d[g]||"",k=e[g]||"",l=RegExp("(\\d*)(\\D*)","g"),p=RegExp("(\\d*)(\\D*)","g");do{var m=l.exec(h)||["","",""],n=p.exec(k)||["","",""];if(0==m[0].length&&0==n[0].length)break;var c=0==m[1].length?0:parseInt(m[1],10),q=0==n[1].length?0:parseInt(n[1],10),c=goog.string.compareElements_(c,q)||goog.string.compareElements_(0==m[2].length,0==n[2].length)||goog.string.compareElements_(m[2],n[2]);}while(0==c);}return c;};goog.string.compareElements_=function(a,b){return a<b?-1:a>b?1:0;};goog.string.hashCode=function(a){for(var b=0,c=0;c<a.length;++c){b=31*b+a.charCodeAt(c)>>>0;}return b;};goog.string.uniqueStringCounter_=2147483648*Math.random()|0;goog.string.createUniqueString=function(){return"goog_"+goog.string.uniqueStringCounter_++;};goog.string.toNumber=function(a){var b=Number(a);return 0==b&&goog.string.isEmptyOrWhitespace(a)?NaN:b;};goog.string.isLowerCamelCase=function(a){return /^[a-z]+([A-Z][a-z]*)*$/.test(a);};goog.string.isUpperCamelCase=function(a){return /^([A-Z][a-z]*)+$/.test(a);};goog.string.toCamelCase=function(a){return String(a).replace(/\-([a-z])/g,function(a,c){return c.toUpperCase();});};goog.string.toSelectorCase=function(a){return String(a).replace(/([A-Z])/g,"-$1").toLowerCase();};goog.string.toTitleCase=function(a,b){var c=goog.isString(b)?goog.string.regExpEscape(b):"\\s";return a.replace(new RegExp("(^"+(c?"|["+c+"]+":"")+")([a-z])","g"),function(a,b,c){return b+c.toUpperCase();});};goog.string.capitalize=function(a){return String(a.charAt(0)).toUpperCase()+String(a.substr(1)).toLowerCase();};goog.string.parseInt=function(a){isFinite(a)&&(a=String(a));return goog.isString(a)?/^\s*-?0x/i.test(a)?parseInt(a,16):parseInt(a,10):NaN;};goog.string.splitLimit=function(a,b,c){a=a.split(b);for(var d=[];0<c&&a.length;){d.push(a.shift()),c--;}a.length&&d.push(a.join(b));return d;};goog.string.editDistance=function(a,b){var c=[],d=[];if(a==b)return 0;if(!a.length||!b.length)return Math.max(a.length,b.length);for(var e=0;e<b.length+1;e++){c[e]=e;}for(e=0;e<a.length;e++){d[0]=e+1;for(var f=0;f<b.length;f++){d[f+1]=Math.min(d[f]+1,c[f+1]+1,c[f]+Number(a[e]!=b[f]));}for(f=0;f<c.length;f++){c[f]=d[f];}}return d[b.length];};goog.asserts={};goog.asserts.ENABLE_ASSERTS=goog.DEBUG;goog.asserts.AssertionError=function(a,b){b.unshift(a);goog.debug.Error.call(this,goog.string.subs.apply(null,b));b.shift();this.messagePattern=a;};goog.inherits(goog.asserts.AssertionError,goog.debug.Error);goog.asserts.AssertionError.prototype.name="AssertionError";goog.asserts.DEFAULT_ERROR_HANDLER=function(a){throw a;};goog.asserts.errorHandler_=goog.asserts.DEFAULT_ERROR_HANDLER;goog.asserts.doAssertFailure_=function(a,b,c,d){var e="Assertion failed";if(c)var e=e+(": "+c),f=d;else a&&(e+=": "+a,f=b);a=new goog.asserts.AssertionError(""+e,f||[]);goog.asserts.errorHandler_(a);};goog.asserts.setErrorHandler=function(a){goog.asserts.ENABLE_ASSERTS&&(goog.asserts.errorHandler_=a);};goog.asserts.assert=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!a&&goog.asserts.doAssertFailure_("",null,b,Array.prototype.slice.call(arguments,2));return a;};goog.asserts.fail=function(a,b){goog.asserts.ENABLE_ASSERTS&&goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure"+(a?": "+a:""),Array.prototype.slice.call(arguments,1)));};goog.asserts.assertNumber=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isNumber(a)&&goog.asserts.doAssertFailure_("Expected number but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a;};goog.asserts.assertString=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isString(a)&&goog.asserts.doAssertFailure_("Expected string but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a;};goog.asserts.assertFunction=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isFunction(a)&&goog.asserts.doAssertFailure_("Expected function but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a;};goog.asserts.assertObject=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isObject(a)&&goog.asserts.doAssertFailure_("Expected object but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a;};goog.asserts.assertArray=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isArray(a)&&goog.asserts.doAssertFailure_("Expected array but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a;};goog.asserts.assertBoolean=function(a,b,c){goog.asserts.ENABLE_ASSERTS&&!goog.isBoolean(a)&&goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a;};goog.asserts.assertElement=function(a,b,c){!goog.asserts.ENABLE_ASSERTS||goog.isObject(a)&&a.nodeType==goog.dom.NodeType.ELEMENT||goog.asserts.doAssertFailure_("Expected Element but got %s: %s.",[goog.typeOf(a),a],b,Array.prototype.slice.call(arguments,2));return a;};goog.asserts.assertInstanceof=function(a,b,c,d){!goog.asserts.ENABLE_ASSERTS||a instanceof b||goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.",[goog.asserts.getType_(b),goog.asserts.getType_(a)],c,Array.prototype.slice.call(arguments,3));return a;};goog.asserts.assertObjectPrototypeIsIntact=function(){for(var a in Object.prototype){goog.asserts.fail(a+" should not be enumerable in Object.prototype.");}};goog.asserts.getType_=function(a){return a instanceof Function?a.displayName||a.name||"unknown type name":a instanceof Object?a.constructor.displayName||a.constructor.name||Object.prototype.toString.call(a):null===a?"null":_typeof2(a);};var jspb={Map:function Map(a,b){this.arr_=a;this.valueCtor_=b;this.map_={};this.arrClean=!0;0<this.arr_.length&&this.loadFromArray_();}};jspb.Map.prototype.loadFromArray_=function(){for(var a=0;a<this.arr_.length;a++){var b=this.arr_[a],c=b[0];this.map_[c.toString()]=new jspb.Map.Entry_(c,b[1]);}this.arrClean=!0;};jspb.Map.prototype.toArray=function(){if(this.arrClean){if(this.valueCtor_){var a=this.map_,b;for(b in a){if(Object.prototype.hasOwnProperty.call(a,b)){var c=a[b].valueWrapper;c&&c.toArray();}}}}else{this.arr_.length=0;a=this.stringKeys_();a.sort();for(b=0;b<a.length;b++){var d=this.map_[a[b]];(c=d.valueWrapper)&&c.toArray();this.arr_.push([d.key,d.value]);}this.arrClean=!0;}return this.arr_;};jspb.Map.prototype.toObject=function(a,b){for(var c=this.toArray(),d=[],e=0;e<c.length;e++){var f=this.map_[c[e][0].toString()];this.wrapEntry_(f);var g=f.valueWrapper;g?(goog.asserts.assert(b),d.push([f.key,b(a,g)])):d.push([f.key,f.value]);}return d;};jspb.Map.fromObject=function(a,b,c){b=new jspb.Map([],b);for(var d=0;d<a.length;d++){var e=a[d][0],f=c(a[d][1]);b.set(e,f);}return b;};jspb.Map.ArrayIteratorIterable_=function(a){this.idx_=0;this.arr_=a;};jspb.Map.ArrayIteratorIterable_.prototype.next=function(){return this.idx_<this.arr_.length?{done:!1,value:this.arr_[this.idx_++]}:{done:!0,value:void 0};};$jscomp.initSymbol();"undefined"!=typeof Symbol&&($jscomp.initSymbol(),$jscomp.initSymbolIterator(),jspb.Map.ArrayIteratorIterable_.prototype[Symbol.iterator]=function(){return this;});jspb.Map.prototype.getLength=function(){return this.stringKeys_().length;};jspb.Map.prototype.clear=function(){this.map_={};this.arrClean=!1;};jspb.Map.prototype.del=function(a){a=a.toString();var b=this.map_.hasOwnProperty(a);delete this.map_[a];this.arrClean=!1;return b;};jspb.Map.prototype.getEntryList=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++){var d=this.map_[b[c]];a.push([d.key,d.value]);}return a;};jspb.Map.prototype.entries=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++){var d=this.map_[b[c]];a.push([d.key,this.wrapEntry_(d)]);}return new jspb.Map.ArrayIteratorIterable_(a);};jspb.Map.prototype.keys=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++){a.push(this.map_[b[c]].key);}return new jspb.Map.ArrayIteratorIterable_(a);};jspb.Map.prototype.values=function(){var a=[],b=this.stringKeys_();b.sort();for(var c=0;c<b.length;c++){a.push(this.wrapEntry_(this.map_[b[c]]));}return new jspb.Map.ArrayIteratorIterable_(a);};jspb.Map.prototype.forEach=function(a,b){var c=this.stringKeys_();c.sort();for(var d=0;d<c.length;d++){var e=this.map_[c[d]];a.call(b,this.wrapEntry_(e),e.key,this);}};jspb.Map.prototype.set=function(a,b){var c=new jspb.Map.Entry_(a);this.valueCtor_?(c.valueWrapper=b,c.value=b.toArray()):c.value=b;this.map_[a.toString()]=c;this.arrClean=!1;return this;};jspb.Map.prototype.wrapEntry_=function(a){return this.valueCtor_?(a.valueWrapper||(a.valueWrapper=new this.valueCtor_(a.value)),a.valueWrapper):a.value;};jspb.Map.prototype.get=function(a){if(a=this.map_[a.toString()])return this.wrapEntry_(a);};jspb.Map.prototype.has=function(a){return a.toString()in this.map_;};jspb.Map.prototype.serializeBinary=function(a,b,c,d,e){var f=this.stringKeys_();f.sort();for(var g=0;g<f.length;g++){var h=this.map_[f[g]];b.beginSubMessage(a);c.call(b,1,h.key);this.valueCtor_?d.call(b,2,this.wrapEntry_(h),e):d.call(b,2,h.value);b.endSubMessage();}};jspb.Map.deserializeBinary=function(a,b,c,d,e,f){for(var g=void 0;b.nextField()&&!b.isEndGroup();){var h=b.getFieldNumber();1==h?f=c.call(b):2==h&&(a.valueCtor_?(goog.asserts.assert(e),g=new a.valueCtor_(),d.call(b,g,e)):g=d.call(b));}goog.asserts.assert(void 0!=f);goog.asserts.assert(void 0!=g);a.set(f,g);};jspb.Map.prototype.stringKeys_=function(){var a=this.map_,b=[],c;for(c in a){Object.prototype.hasOwnProperty.call(a,c)&&b.push(c);}return b;};jspb.Map.Entry_=function(a,b){this.key=a;this.value=b;this.valueWrapper=void 0;};goog.array={};goog.NATIVE_ARRAY_PROTOTYPES=goog.TRUSTED_SITE;goog.array.ASSUME_NATIVE_FUNCTIONS=!1;goog.array.peek=function(a){return a[a.length-1];};goog.array.last=goog.array.peek;goog.array.indexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.indexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.indexOf.call(a,b,c);}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if(goog.isString(a))return goog.isString(b)&&1==b.length?a.indexOf(b,c):-1;for(;c<a.length;c++){if(c in a&&a[c]===b)return c;}return-1;};goog.array.lastIndexOf=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.lastIndexOf)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.lastIndexOf.call(a,b,null==c?a.length-1:c);}:function(a,b,c){c=null==c?a.length-1:c;0>c&&(c=Math.max(0,a.length+c));if(goog.isString(a))return goog.isString(b)&&1==b.length?a.lastIndexOf(b,c):-1;for(;0<=c;c--){if(c in a&&a[c]===b)return c;}return-1;};goog.array.forEach=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.forEach)?function(a,b,c){goog.asserts.assert(null!=a.length);Array.prototype.forEach.call(a,b,c);}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++){f in e&&b.call(c,e[f],f,a);}};goog.array.forEachRight=function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,d=d-1;0<=d;--d){d in e&&b.call(c,e[d],d,a);}};goog.array.filter=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.filter)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.filter.call(a,b,c);}:function(a,b,c){for(var d=a.length,e=[],f=0,g=goog.isString(a)?a.split(""):a,h=0;h<d;h++){if(h in g){var k=g[h];b.call(c,k,h,a)&&(e[f++]=k);}}return e;};goog.array.map=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.map)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.map.call(a,b,c);}:function(a,b,c){for(var d=a.length,e=Array(d),f=goog.isString(a)?a.split(""):a,g=0;g<d;g++){g in f&&(e[g]=b.call(c,f[g],g,a));}return e;};goog.array.reduce=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduce)?function(a,b,c,d){goog.asserts.assert(null!=a.length);d&&(b=goog.bind(b,d));return Array.prototype.reduce.call(a,b,c);}:function(a,b,c,d){var e=c;goog.array.forEach(a,function(c,g){e=b.call(d,e,c,g,a);});return e;};goog.array.reduceRight=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.reduceRight)?function(a,b,c,d){goog.asserts.assert(null!=a.length);goog.asserts.assert(null!=b);d&&(b=goog.bind(b,d));return Array.prototype.reduceRight.call(a,b,c);}:function(a,b,c,d){var e=c;goog.array.forEachRight(a,function(c,g){e=b.call(d,e,c,g,a);});return e;};goog.array.some=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.some)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.some.call(a,b,c);}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++){if(f in e&&b.call(c,e[f],f,a))return!0;}return!1;};goog.array.every=goog.NATIVE_ARRAY_PROTOTYPES&&(goog.array.ASSUME_NATIVE_FUNCTIONS||Array.prototype.every)?function(a,b,c){goog.asserts.assert(null!=a.length);return Array.prototype.every.call(a,b,c);}:function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++){if(f in e&&!b.call(c,e[f],f,a))return!1;}return!0;};goog.array.count=function(a,b,c){var d=0;goog.array.forEach(a,function(a,f,g){b.call(c,a,f,g)&&++d;},c);return d;};goog.array.find=function(a,b,c){b=goog.array.findIndex(a,b,c);return 0>b?null:goog.isString(a)?a.charAt(b):a[b];};goog.array.findIndex=function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,f=0;f<d;f++){if(f in e&&b.call(c,e[f],f,a))return f;}return-1;};goog.array.findRight=function(a,b,c){b=goog.array.findIndexRight(a,b,c);return 0>b?null:goog.isString(a)?a.charAt(b):a[b];};goog.array.findIndexRight=function(a,b,c){for(var d=a.length,e=goog.isString(a)?a.split(""):a,d=d-1;0<=d;d--){if(d in e&&b.call(c,e[d],d,a))return d;}return-1;};goog.array.contains=function(a,b){return 0<=goog.array.indexOf(a,b);};goog.array.isEmpty=function(a){return 0==a.length;};goog.array.clear=function(a){if(!goog.isArray(a))for(var b=a.length-1;0<=b;b--){delete a[b];}a.length=0;};goog.array.insert=function(a,b){goog.array.contains(a,b)||a.push(b);};goog.array.insertAt=function(a,b,c){goog.array.splice(a,c,0,b);};goog.array.insertArrayAt=function(a,b,c){goog.partial(goog.array.splice,a,c,0).apply(null,b);};goog.array.insertBefore=function(a,b,c){var d;2==arguments.length||0>(d=goog.array.indexOf(a,c))?a.push(b):goog.array.insertAt(a,b,d);};goog.array.remove=function(a,b){var c=goog.array.indexOf(a,b),d;(d=0<=c)&&goog.array.removeAt(a,c);return d;};goog.array.removeAt=function(a,b){goog.asserts.assert(null!=a.length);return 1==Array.prototype.splice.call(a,b,1).length;};goog.array.removeIf=function(a,b,c){b=goog.array.findIndex(a,b,c);return 0<=b?(goog.array.removeAt(a,b),!0):!1;};goog.array.removeAllIf=function(a,b,c){var d=0;goog.array.forEachRight(a,function(e,f){b.call(c,e,f,a)&&goog.array.removeAt(a,f)&&d++;});return d;};goog.array.concat=function(a){return Array.prototype.concat.apply(Array.prototype,arguments);};goog.array.join=function(a){return Array.prototype.concat.apply(Array.prototype,arguments);};goog.array.toArray=function(a){var b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++){c[d]=a[d];}return c;}return[];};goog.array.clone=goog.array.toArray;goog.array.extend=function(a,b){for(var c=1;c<arguments.length;c++){var d=arguments[c];if(goog.isArrayLike(d)){var e=a.length||0,f=d.length||0;a.length=e+f;for(var g=0;g<f;g++){a[e+g]=d[g];}}else a.push(d);}};goog.array.splice=function(a,b,c,d){goog.asserts.assert(null!=a.length);return Array.prototype.splice.apply(a,goog.array.slice(arguments,1));};goog.array.slice=function(a,b,c){goog.asserts.assert(null!=a.length);return 2>=arguments.length?Array.prototype.slice.call(a,b):Array.prototype.slice.call(a,b,c);};goog.array.removeDuplicates=function(a,b,c){b=b||a;var d=function d(a){return goog.isObject(a)?"o"+goog.getUid(a):_typeof2(a).charAt(0)+a;};c=c||d;for(var d={},e=0,f=0;f<a.length;){var g=a[f++],h=c(g);Object.prototype.hasOwnProperty.call(d,h)||(d[h]=!0,b[e++]=g);}b.length=e;};goog.array.binarySearch=function(a,b,c){return goog.array.binarySearch_(a,c||goog.array.defaultCompare,!1,b);};goog.array.binarySelect=function(a,b,c){return goog.array.binarySearch_(a,b,!0,void 0,c);};goog.array.binarySearch_=function(a,b,c,d,e){for(var f=0,g=a.length,h;f<g;){var k=f+g>>1,l;l=c?b.call(e,a[k],k,a):b(d,a[k]);0<l?f=k+1:(g=k,h=!l);}return h?f:~f;};goog.array.sort=function(a,b){a.sort(b||goog.array.defaultCompare);};goog.array.stableSort=function(a,b){for(var c=0;c<a.length;c++){a[c]={index:c,value:a[c]};}var d=b||goog.array.defaultCompare;goog.array.sort(a,function(a,b){return d(a.value,b.value)||a.index-b.index;});for(c=0;c<a.length;c++){a[c]=a[c].value;}};goog.array.sortByKey=function(a,b,c){var d=c||goog.array.defaultCompare;goog.array.sort(a,function(a,c){return d(b(a),b(c));});};goog.array.sortObjectsByKey=function(a,b,c){goog.array.sortByKey(a,function(a){return a[b];},c);};goog.array.isSorted=function(a,b,c){b=b||goog.array.defaultCompare;for(var d=1;d<a.length;d++){var e=b(a[d-1],a[d]);if(0<e||0==e&&c)return!1;}return!0;};goog.array.equals=function(a,b,c){if(!goog.isArrayLike(a)||!goog.isArrayLike(b)||a.length!=b.length)return!1;var d=a.length;c=c||goog.array.defaultCompareEquality;for(var e=0;e<d;e++){if(!c(a[e],b[e]))return!1;}return!0;};goog.array.compare3=function(a,b,c){c=c||goog.array.defaultCompare;for(var d=Math.min(a.length,b.length),e=0;e<d;e++){var f=c(a[e],b[e]);if(0!=f)return f;}return goog.array.defaultCompare(a.length,b.length);};goog.array.defaultCompare=function(a,b){return a>b?1:a<b?-1:0;};goog.array.inverseDefaultCompare=function(a,b){return-goog.array.defaultCompare(a,b);};goog.array.defaultCompareEquality=function(a,b){return a===b;};goog.array.binaryInsert=function(a,b,c){c=goog.array.binarySearch(a,b,c);return 0>c?(goog.array.insertAt(a,b,-(c+1)),!0):!1;};goog.array.binaryRemove=function(a,b,c){b=goog.array.binarySearch(a,b,c);return 0<=b?goog.array.removeAt(a,b):!1;};goog.array.bucket=function(a,b,c){for(var d={},e=0;e<a.length;e++){var f=a[e],g=b.call(c,f,e,a);goog.isDef(g)&&(d[g]||(d[g]=[])).push(f);}return d;};goog.array.toObject=function(a,b,c){var d={};goog.array.forEach(a,function(e,f){d[b.call(c,e,f,a)]=e;});return d;};goog.array.range=function(a,b,c){var d=[],e=0,f=a;c=c||1;void 0!==b&&(e=a,f=b);if(0>c*(f-e))return[];if(0<c)for(a=e;a<f;a+=c){d.push(a);}else for(a=e;a>f;a+=c){d.push(a);}return d;};goog.array.repeat=function(a,b){for(var c=[],d=0;d<b;d++){c[d]=a;}return c;};goog.array.flatten=function(a){for(var b=[],c=0;c<arguments.length;c++){var d=arguments[c];if(goog.isArray(d))for(var e=0;e<d.length;e+=8192){for(var f=goog.array.slice(d,e,e+8192),f=goog.array.flatten.apply(null,f),g=0;g<f.length;g++){b.push(f[g]);}}else b.push(d);}return b;};goog.array.rotate=function(a,b){goog.asserts.assert(null!=a.length);a.length&&(b%=a.length,0<b?Array.prototype.unshift.apply(a,a.splice(-b,b)):0>b&&Array.prototype.push.apply(a,a.splice(0,-b)));return a;};goog.array.moveItem=function(a,b,c){goog.asserts.assert(0<=b&&b<a.length);goog.asserts.assert(0<=c&&c<a.length);b=Array.prototype.splice.call(a,b,1);Array.prototype.splice.call(a,c,0,b[0]);};goog.array.zip=function(a){if(!arguments.length)return[];for(var b=[],c=arguments[0].length,d=1;d<arguments.length;d++){arguments[d].length<c&&(c=arguments[d].length);}for(d=0;d<c;d++){for(var e=[],f=0;f<arguments.length;f++){e.push(arguments[f][d]);}b.push(e);}return b;};goog.array.shuffle=function(a,b){for(var c=b||Math.random,d=a.length-1;0<d;d--){var e=Math.floor(c()*(d+1)),f=a[d];a[d]=a[e];a[e]=f;}};goog.array.copyByIndex=function(a,b){var c=[];goog.array.forEach(b,function(b){c.push(a[b]);});return c;};goog.crypt={};goog.crypt.stringToByteArray=function(a){for(var b=[],c=0,d=0;d<a.length;d++){for(var e=a.charCodeAt(d);255<e;){b[c++]=e&255,e>>=8;}b[c++]=e;}return b;};goog.crypt.byteArrayToString=function(a){if(8192>=a.length)return String.fromCharCode.apply(null,a);for(var b="",c=0;c<a.length;c+=8192){var d=goog.array.slice(a,c,c+8192),b=b+String.fromCharCode.apply(null,d);}return b;};goog.crypt.byteArrayToHex=function(a){return goog.array.map(a,function(a){a=a.toString(16);return 1<a.length?a:"0"+a;}).join("");};goog.crypt.hexToByteArray=function(a){goog.asserts.assert(0==a.length%2,"Key string length must be multiple of 2");for(var b=[],c=0;c<a.length;c+=2){b.push(parseInt(a.substring(c,c+2),16));}return b;};goog.crypt.stringToUtf8ByteArray=function(a){for(var b=[],c=0,d=0;d<a.length;d++){var e=a.charCodeAt(d);128>e?b[c++]=e:(2048>e?b[c++]=e>>6|192:(55296==(e&64512)&&d+1<a.length&&56320==(a.charCodeAt(d+1)&64512)?(e=65536+((e&1023)<<10)+(a.charCodeAt(++d)&1023),b[c++]=e>>18|240,b[c++]=e>>12&63|128):b[c++]=e>>12|224,b[c++]=e>>6&63|128),b[c++]=e&63|128);}return b;};goog.crypt.utf8ByteArrayToString=function(a){for(var b=[],c=0,d=0;c<a.length;){var e=a[c++];if(128>e)b[d++]=String.fromCharCode(e);else if(191<e&&224>e){var f=a[c++];b[d++]=String.fromCharCode((e&31)<<6|f&63);}else if(239<e&&365>e){var f=a[c++],g=a[c++],h=a[c++],e=((e&7)<<18|(f&63)<<12|(g&63)<<6|h&63)-65536;b[d++]=String.fromCharCode(55296+(e>>10));b[d++]=String.fromCharCode(56320+(e&1023));}else f=a[c++],g=a[c++],b[d++]=String.fromCharCode((e&15)<<12|(f&63)<<6|g&63);}return b.join("");};goog.crypt.xorByteArray=function(a,b){goog.asserts.assert(a.length==b.length,"XOR array lengths must match");for(var c=[],d=0;d<a.length;d++){c.push(a[d]^b[d]);}return c;};goog.labs={};goog.labs.userAgent={};goog.labs.userAgent.util={};goog.labs.userAgent.util.getNativeUserAgentString_=function(){var a=goog.labs.userAgent.util.getNavigator_();return a&&(a=a.userAgent)?a:"";};goog.labs.userAgent.util.getNavigator_=function(){return goog.global.navigator;};goog.labs.userAgent.util.userAgent_=goog.labs.userAgent.util.getNativeUserAgentString_();goog.labs.userAgent.util.setUserAgent=function(a){goog.labs.userAgent.util.userAgent_=a||goog.labs.userAgent.util.getNativeUserAgentString_();};goog.labs.userAgent.util.getUserAgent=function(){return goog.labs.userAgent.util.userAgent_;};goog.labs.userAgent.util.matchUserAgent=function(a){var b=goog.labs.userAgent.util.getUserAgent();return goog.string.contains(b,a);};goog.labs.userAgent.util.matchUserAgentIgnoreCase=function(a){var b=goog.labs.userAgent.util.getUserAgent();return goog.string.caseInsensitiveContains(b,a);};goog.labs.userAgent.util.extractVersionTuples=function(a){for(var b=RegExp("(\\w[\\w ]+)/([^\\s]+)\\s*(?:\\((.*?)\\))?","g"),c=[],d;d=b.exec(a);){c.push([d[1],d[2],d[3]||void 0]);}return c;};goog.labs.userAgent.platform={};goog.labs.userAgent.platform.isAndroid=function(){return goog.labs.userAgent.util.matchUserAgent("Android");};goog.labs.userAgent.platform.isIpod=function(){return goog.labs.userAgent.util.matchUserAgent("iPod");};goog.labs.userAgent.platform.isIphone=function(){return goog.labs.userAgent.util.matchUserAgent("iPhone")&&!goog.labs.userAgent.util.matchUserAgent("iPod")&&!goog.labs.userAgent.util.matchUserAgent("iPad");};goog.labs.userAgent.platform.isIpad=function(){return goog.labs.userAgent.util.matchUserAgent("iPad");};goog.labs.userAgent.platform.isIos=function(){return goog.labs.userAgent.platform.isIphone()||goog.labs.userAgent.platform.isIpad()||goog.labs.userAgent.platform.isIpod();};goog.labs.userAgent.platform.isMacintosh=function(){return goog.labs.userAgent.util.matchUserAgent("Macintosh");};goog.labs.userAgent.platform.isLinux=function(){return goog.labs.userAgent.util.matchUserAgent("Linux");};goog.labs.userAgent.platform.isWindows=function(){return goog.labs.userAgent.util.matchUserAgent("Windows");};goog.labs.userAgent.platform.isChromeOS=function(){return goog.labs.userAgent.util.matchUserAgent("CrOS");};goog.labs.userAgent.platform.getVersion=function(){var a=goog.labs.userAgent.util.getUserAgent(),b="";goog.labs.userAgent.platform.isWindows()?(b=/Windows (?:NT|Phone) ([0-9.]+)/,b=(a=b.exec(a))?a[1]:"0.0"):goog.labs.userAgent.platform.isIos()?(b=/(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/,b=(a=b.exec(a))&&a[1].replace(/_/g,".")):goog.labs.userAgent.platform.isMacintosh()?(b=/Mac OS X ([0-9_.]+)/,b=(a=b.exec(a))?a[1].replace(/_/g,"."):"10"):goog.labs.userAgent.platform.isAndroid()?(b=/Android\s+([^\);]+)(\)|;)/,b=(a=b.exec(a))&&a[1]):goog.labs.userAgent.platform.isChromeOS()&&(b=/(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/,b=(a=b.exec(a))&&a[1]);return b||"";};goog.labs.userAgent.platform.isVersionOrHigher=function(a){return 0<=goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(),a);};goog.object={};goog.object.forEach=function(a,b,c){for(var d in a){b.call(c,a[d],d,a);}};goog.object.filter=function(a,b,c){var d={},e;for(e in a){b.call(c,a[e],e,a)&&(d[e]=a[e]);}return d;};goog.object.map=function(a,b,c){var d={},e;for(e in a){d[e]=b.call(c,a[e],e,a);}return d;};goog.object.some=function(a,b,c){for(var d in a){if(b.call(c,a[d],d,a))return!0;}return!1;};goog.object.every=function(a,b,c){for(var d in a){if(!b.call(c,a[d],d,a))return!1;}return!0;};goog.object.getCount=function(a){var b=0,c;for(c in a){b++;}return b;};goog.object.getAnyKey=function(a){for(var b in a){return b;}};goog.object.getAnyValue=function(a){for(var b in a){return a[b];}};goog.object.contains=function(a,b){return goog.object.containsValue(a,b);};goog.object.getValues=function(a){var b=[],c=0,d;for(d in a){b[c++]=a[d];}return b;};goog.object.getKeys=function(a){var b=[],c=0,d;for(d in a){b[c++]=d;}return b;};goog.object.getValueByKeys=function(a,b){for(var c=goog.isArrayLike(b),d=c?b:arguments,c=c?0:1;c<d.length&&(a=a[d[c]],goog.isDef(a));c++){;}return a;};goog.object.containsKey=function(a,b){return null!==a&&b in a;};goog.object.containsValue=function(a,b){for(var c in a){if(a[c]==b)return!0;}return!1;};goog.object.findKey=function(a,b,c){for(var d in a){if(b.call(c,a[d],d,a))return d;}};goog.object.findValue=function(a,b,c){return(b=goog.object.findKey(a,b,c))&&a[b];};goog.object.isEmpty=function(a){for(var b in a){return!1;}return!0;};goog.object.clear=function(a){for(var b in a){delete a[b];}};goog.object.remove=function(a,b){var c;(c=b in a)&&delete a[b];return c;};goog.object.add=function(a,b,c){if(null!==a&&b in a)throw Error('The object already contains the key "'+b+'"');goog.object.set(a,b,c);};goog.object.get=function(a,b,c){return null!==a&&b in a?a[b]:c;};goog.object.set=function(a,b,c){a[b]=c;};goog.object.setIfUndefined=function(a,b,c){return b in a?a[b]:a[b]=c;};goog.object.setWithReturnValueIfNotSet=function(a,b,c){if(b in a)return a[b];c=c();return a[b]=c;};goog.object.equals=function(a,b){for(var c in a){if(!(c in b)||a[c]!==b[c])return!1;}for(c in b){if(!(c in a))return!1;}return!0;};goog.object.clone=function(a){var b={},c;for(c in a){b[c]=a[c];}return b;};goog.object.unsafeClone=function(a){var b=goog.typeOf(a);if("object"==b||"array"==b){if(goog.isFunction(a.clone))return a.clone();var b="array"==b?[]:{},c;for(c in a){b[c]=goog.object.unsafeClone(a[c]);}return b;}return a;};goog.object.transpose=function(a){var b={},c;for(c in a){b[a[c]]=c;}return b;};goog.object.PROTOTYPE_FIELDS_="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");goog.object.extend=function(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d){a[c]=d[c];}for(var f=0;f<goog.object.PROTOTYPE_FIELDS_.length;f++){c=goog.object.PROTOTYPE_FIELDS_[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c]);}}};goog.object.create=function(a){var b=arguments.length;if(1==b&&goog.isArray(arguments[0]))return goog.object.create.apply(null,arguments[0]);if(b%2)throw Error("Uneven number of arguments");for(var c={},d=0;d<b;d+=2){c[arguments[d]]=arguments[d+1];}return c;};goog.object.createSet=function(a){var b=arguments.length;if(1==b&&goog.isArray(arguments[0]))return goog.object.createSet.apply(null,arguments[0]);for(var c={},d=0;d<b;d++){c[arguments[d]]=!0;}return c;};goog.object.createImmutableView=function(a){var b=a;Object.isFrozen&&!Object.isFrozen(a)&&(b=Object.create(a),Object.freeze(b));return b;};goog.object.isImmutableView=function(a){return!!Object.isFrozen&&Object.isFrozen(a);};goog.labs.userAgent.browser={};goog.labs.userAgent.browser.matchOpera_=function(){return goog.labs.userAgent.util.matchUserAgent("Opera")||goog.labs.userAgent.util.matchUserAgent("OPR");};goog.labs.userAgent.browser.matchIE_=function(){return goog.labs.userAgent.util.matchUserAgent("Trident")||goog.labs.userAgent.util.matchUserAgent("MSIE");};goog.labs.userAgent.browser.matchEdge_=function(){return goog.labs.userAgent.util.matchUserAgent("Edge");};goog.labs.userAgent.browser.matchFirefox_=function(){return goog.labs.userAgent.util.matchUserAgent("Firefox");};goog.labs.userAgent.browser.matchSafari_=function(){return goog.labs.userAgent.util.matchUserAgent("Safari")&&!(goog.labs.userAgent.browser.matchChrome_()||goog.labs.userAgent.browser.matchCoast_()||goog.labs.userAgent.browser.matchOpera_()||goog.labs.userAgent.browser.matchEdge_()||goog.labs.userAgent.browser.isSilk()||goog.labs.userAgent.util.matchUserAgent("Android"));};goog.labs.userAgent.browser.matchCoast_=function(){return goog.labs.userAgent.util.matchUserAgent("Coast");};goog.labs.userAgent.browser.matchIosWebview_=function(){return(goog.labs.userAgent.util.matchUserAgent("iPad")||goog.labs.userAgent.util.matchUserAgent("iPhone"))&&!goog.labs.userAgent.browser.matchSafari_()&&!goog.labs.userAgent.browser.matchChrome_()&&!goog.labs.userAgent.browser.matchCoast_()&&goog.labs.userAgent.util.matchUserAgent("AppleWebKit");};goog.labs.userAgent.browser.matchChrome_=function(){return(goog.labs.userAgent.util.matchUserAgent("Chrome")||goog.labs.userAgent.util.matchUserAgent("CriOS"))&&!goog.labs.userAgent.browser.matchOpera_()&&!goog.labs.userAgent.browser.matchEdge_();};goog.labs.userAgent.browser.matchAndroidBrowser_=function(){return goog.labs.userAgent.util.matchUserAgent("Android")&&!(goog.labs.userAgent.browser.isChrome()||goog.labs.userAgent.browser.isFirefox()||goog.labs.userAgent.browser.isOpera()||goog.labs.userAgent.browser.isSilk());};goog.labs.userAgent.browser.isOpera=goog.labs.userAgent.browser.matchOpera_;goog.labs.userAgent.browser.isIE=goog.labs.userAgent.browser.matchIE_;goog.labs.userAgent.browser.isEdge=goog.labs.userAgent.browser.matchEdge_;goog.labs.userAgent.browser.isFirefox=goog.labs.userAgent.browser.matchFirefox_;goog.labs.userAgent.browser.isSafari=goog.labs.userAgent.browser.matchSafari_;goog.labs.userAgent.browser.isCoast=goog.labs.userAgent.browser.matchCoast_;goog.labs.userAgent.browser.isIosWebview=goog.labs.userAgent.browser.matchIosWebview_;goog.labs.userAgent.browser.isChrome=goog.labs.userAgent.browser.matchChrome_;goog.labs.userAgent.browser.isAndroidBrowser=goog.labs.userAgent.browser.matchAndroidBrowser_;goog.labs.userAgent.browser.isSilk=function(){return goog.labs.userAgent.util.matchUserAgent("Silk");};goog.labs.userAgent.browser.getVersion=function(){function a(a){a=goog.array.find(a,d);return c[a]||"";}var b=goog.labs.userAgent.util.getUserAgent();if(goog.labs.userAgent.browser.isIE())return goog.labs.userAgent.browser.getIEVersion_(b);var b=goog.labs.userAgent.util.extractVersionTuples(b),c={};goog.array.forEach(b,function(a){c[a[0]]=a[1];});var d=goog.partial(goog.object.containsKey,c);return goog.labs.userAgent.browser.isOpera()?a(["Version","Opera","OPR"]):goog.labs.userAgent.browser.isEdge()?a(["Edge"]):goog.labs.userAgent.browser.isChrome()?a(["Chrome","CriOS"]):(b=b[2])&&b[1]||"";};goog.labs.userAgent.browser.isVersionOrHigher=function(a){return 0<=goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(),a);};goog.labs.userAgent.browser.getIEVersion_=function(a){var b=/rv: *([\d\.]*)/.exec(a);if(b&&b[1])return b[1];var b="",c=/MSIE +([\d\.]+)/.exec(a);if(c&&c[1])if(a=/Trident\/(\d.\d)/.exec(a),"7.0"==c[1]){if(a&&a[1])switch(a[1]){case"4.0":b="8.0";break;case"5.0":b="9.0";break;case"6.0":b="10.0";break;case"7.0":b="11.0";}else b="7.0";}else b=c[1];return b;};goog.labs.userAgent.engine={};goog.labs.userAgent.engine.isPresto=function(){return goog.labs.userAgent.util.matchUserAgent("Presto");};goog.labs.userAgent.engine.isTrident=function(){return goog.labs.userAgent.util.matchUserAgent("Trident")||goog.labs.userAgent.util.matchUserAgent("MSIE");};goog.labs.userAgent.engine.isEdge=function(){return goog.labs.userAgent.util.matchUserAgent("Edge");};goog.labs.userAgent.engine.isWebKit=function(){return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit")&&!goog.labs.userAgent.engine.isEdge();};goog.labs.userAgent.engine.isGecko=function(){return goog.labs.userAgent.util.matchUserAgent("Gecko")&&!goog.labs.userAgent.engine.isWebKit()&&!goog.labs.userAgent.engine.isTrident()&&!goog.labs.userAgent.engine.isEdge();};goog.labs.userAgent.engine.getVersion=function(){var a=goog.labs.userAgent.util.getUserAgent();if(a){var a=goog.labs.userAgent.util.extractVersionTuples(a),b=goog.labs.userAgent.engine.getEngineTuple_(a);if(b)return"Gecko"==b[0]?goog.labs.userAgent.engine.getVersionForKey_(a,"Firefox"):b[1];var a=a[0],c;if(a&&(c=a[2])&&(c=/Trident\/([^\s;]+)/.exec(c)))return c[1];}return"";};goog.labs.userAgent.engine.getEngineTuple_=function(a){if(!goog.labs.userAgent.engine.isEdge())return a[1];for(var b=0;b<a.length;b++){var c=a[b];if("Edge"==c[0])return c;}};goog.labs.userAgent.engine.isVersionOrHigher=function(a){return 0<=goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(),a);};goog.labs.userAgent.engine.getVersionForKey_=function(a,b){var c=goog.array.find(a,function(a){return b==a[0];});return c&&c[1]||"";};goog.userAgent={};goog.userAgent.ASSUME_IE=!1;goog.userAgent.ASSUME_EDGE=!1;goog.userAgent.ASSUME_GECKO=!1;goog.userAgent.ASSUME_WEBKIT=!1;goog.userAgent.ASSUME_MOBILE_WEBKIT=!1;goog.userAgent.ASSUME_OPERA=!1;goog.userAgent.ASSUME_ANY_VERSION=!1;goog.userAgent.BROWSER_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_EDGE||goog.userAgent.ASSUME_GECKO||goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_OPERA;goog.userAgent.getUserAgentString=function(){return goog.labs.userAgent.util.getUserAgent();};goog.userAgent.getNavigator=function(){return goog.global.navigator||null;};goog.userAgent.OPERA=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_OPERA:goog.labs.userAgent.browser.isOpera();goog.userAgent.IE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_IE:goog.labs.userAgent.browser.isIE();goog.userAgent.EDGE=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_EDGE:goog.labs.userAgent.engine.isEdge();goog.userAgent.EDGE_OR_IE=goog.userAgent.EDGE||goog.userAgent.IE;goog.userAgent.GECKO=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_GECKO:goog.labs.userAgent.engine.isGecko();goog.userAgent.WEBKIT=goog.userAgent.BROWSER_KNOWN_?goog.userAgent.ASSUME_WEBKIT||goog.userAgent.ASSUME_MOBILE_WEBKIT:goog.labs.userAgent.engine.isWebKit();goog.userAgent.isMobile_=function(){return goog.userAgent.WEBKIT&&goog.labs.userAgent.util.matchUserAgent("Mobile");};goog.userAgent.MOBILE=goog.userAgent.ASSUME_MOBILE_WEBKIT||goog.userAgent.isMobile_();goog.userAgent.SAFARI=goog.userAgent.WEBKIT;goog.userAgent.determinePlatform_=function(){var a=goog.userAgent.getNavigator();return a&&a.platform||"";};goog.userAgent.PLATFORM=goog.userAgent.determinePlatform_();goog.userAgent.ASSUME_MAC=!1;goog.userAgent.ASSUME_WINDOWS=!1;goog.userAgent.ASSUME_LINUX=!1;goog.userAgent.ASSUME_X11=!1;goog.userAgent.ASSUME_ANDROID=!1;goog.userAgent.ASSUME_IPHONE=!1;goog.userAgent.ASSUME_IPAD=!1;goog.userAgent.PLATFORM_KNOWN_=goog.userAgent.ASSUME_MAC||goog.userAgent.ASSUME_WINDOWS||goog.userAgent.ASSUME_LINUX||goog.userAgent.ASSUME_X11||goog.userAgent.ASSUME_ANDROID||goog.userAgent.ASSUME_IPHONE||goog.userAgent.ASSUME_IPAD;goog.userAgent.MAC=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_MAC:goog.labs.userAgent.platform.isMacintosh();goog.userAgent.WINDOWS=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_WINDOWS:goog.labs.userAgent.platform.isWindows();goog.userAgent.isLegacyLinux_=function(){return goog.labs.userAgent.platform.isLinux()||goog.labs.userAgent.platform.isChromeOS();};goog.userAgent.LINUX=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_LINUX:goog.userAgent.isLegacyLinux_();goog.userAgent.isX11_=function(){var a=goog.userAgent.getNavigator();return!!a&&goog.string.contains(a.appVersion||"","X11");};goog.userAgent.X11=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_X11:goog.userAgent.isX11_();goog.userAgent.ANDROID=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_ANDROID:goog.labs.userAgent.platform.isAndroid();goog.userAgent.IPHONE=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPHONE:goog.labs.userAgent.platform.isIphone();goog.userAgent.IPAD=goog.userAgent.PLATFORM_KNOWN_?goog.userAgent.ASSUME_IPAD:goog.labs.userAgent.platform.isIpad();goog.userAgent.operaVersion_=function(){var a=goog.global.opera.version;try{return a();}catch(b){return a;}};goog.userAgent.determineVersion_=function(){if(goog.userAgent.OPERA&&goog.global.opera)return goog.userAgent.operaVersion_();var a="",b=goog.userAgent.getVersionRegexResult_();b&&(a=b?b[1]:"");return goog.userAgent.IE&&(b=goog.userAgent.getDocumentMode_(),b>parseFloat(a))?String(b):a;};goog.userAgent.getVersionRegexResult_=function(){var a=goog.userAgent.getUserAgentString();if(goog.userAgent.GECKO)return /rv\:([^\);]+)(\)|;)/.exec(a);if(goog.userAgent.EDGE)return /Edge\/([\d\.]+)/.exec(a);if(goog.userAgent.IE)return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(goog.userAgent.WEBKIT)return /WebKit\/(\S+)/.exec(a);};goog.userAgent.getDocumentMode_=function(){var a=goog.global.document;return a?a.documentMode:void 0;};goog.userAgent.VERSION=goog.userAgent.determineVersion_();goog.userAgent.compare=function(a,b){return goog.string.compareVersions(a,b);};goog.userAgent.isVersionOrHigherCache_={};goog.userAgent.isVersionOrHigher=function(a){return goog.userAgent.ASSUME_ANY_VERSION||goog.userAgent.isVersionOrHigherCache_[a]||(goog.userAgent.isVersionOrHigherCache_[a]=0<=goog.string.compareVersions(goog.userAgent.VERSION,a));};goog.userAgent.isVersion=goog.userAgent.isVersionOrHigher;goog.userAgent.isDocumentModeOrHigher=function(a){return Number(goog.userAgent.DOCUMENT_MODE)>=a;};goog.userAgent.isDocumentMode=goog.userAgent.isDocumentModeOrHigher;goog.userAgent.DOCUMENT_MODE=function(){var a=goog.global.document,b=goog.userAgent.getDocumentMode_();return a&&goog.userAgent.IE?b||("CSS1Compat"==a.compatMode?parseInt(goog.userAgent.VERSION,10):5):void 0;}();goog.userAgent.product={};goog.userAgent.product.ASSUME_FIREFOX=!1;goog.userAgent.product.ASSUME_IPHONE=!1;goog.userAgent.product.ASSUME_IPAD=!1;goog.userAgent.product.ASSUME_ANDROID=!1;goog.userAgent.product.ASSUME_CHROME=!1;goog.userAgent.product.ASSUME_SAFARI=!1;goog.userAgent.product.PRODUCT_KNOWN_=goog.userAgent.ASSUME_IE||goog.userAgent.ASSUME_EDGE||goog.userAgent.ASSUME_OPERA||goog.userAgent.product.ASSUME_FIREFOX||goog.userAgent.product.ASSUME_IPHONE||goog.userAgent.product.ASSUME_IPAD||goog.userAgent.product.ASSUME_ANDROID||goog.userAgent.product.ASSUME_CHROME||goog.userAgent.product.ASSUME_SAFARI;goog.userAgent.product.OPERA=goog.userAgent.OPERA;goog.userAgent.product.IE=goog.userAgent.IE;goog.userAgent.product.EDGE=goog.userAgent.EDGE;goog.userAgent.product.FIREFOX=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_FIREFOX:goog.labs.userAgent.browser.isFirefox();goog.userAgent.product.isIphoneOrIpod_=function(){return goog.labs.userAgent.platform.isIphone()||goog.labs.userAgent.platform.isIpod();};goog.userAgent.product.IPHONE=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_IPHONE:goog.userAgent.product.isIphoneOrIpod_();goog.userAgent.product.IPAD=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_IPAD:goog.labs.userAgent.platform.isIpad();goog.userAgent.product.ANDROID=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_ANDROID:goog.labs.userAgent.browser.isAndroidBrowser();goog.userAgent.product.CHROME=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_CHROME:goog.labs.userAgent.browser.isChrome();goog.userAgent.product.isSafariDesktop_=function(){return goog.labs.userAgent.browser.isSafari()&&!goog.labs.userAgent.platform.isIos();};goog.userAgent.product.SAFARI=goog.userAgent.product.PRODUCT_KNOWN_?goog.userAgent.product.ASSUME_SAFARI:goog.userAgent.product.isSafariDesktop_();goog.crypt.base64={};goog.crypt.base64.byteToCharMap_=null;goog.crypt.base64.charToByteMap_=null;goog.crypt.base64.byteToCharMapWebSafe_=null;goog.crypt.base64.ENCODED_VALS_BASE="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";goog.crypt.base64.ENCODED_VALS=goog.crypt.base64.ENCODED_VALS_BASE+"+/=";goog.crypt.base64.ENCODED_VALS_WEBSAFE=goog.crypt.base64.ENCODED_VALS_BASE+"-_.";goog.crypt.base64.ASSUME_NATIVE_SUPPORT_=goog.userAgent.GECKO||goog.userAgent.WEBKIT&&!goog.userAgent.product.SAFARI||goog.userAgent.OPERA;goog.crypt.base64.HAS_NATIVE_ENCODE_=goog.crypt.base64.ASSUME_NATIVE_SUPPORT_||"function"==typeof goog.global.btoa;goog.crypt.base64.HAS_NATIVE_DECODE_=goog.crypt.base64.ASSUME_NATIVE_SUPPORT_||!goog.userAgent.product.SAFARI&&!goog.userAgent.IE&&"function"==typeof goog.global.atob;goog.crypt.base64.encodeByteArray=function(a,b){goog.asserts.assert(goog.isArrayLike(a),"encodeByteArray takes an array as a parameter");goog.crypt.base64.init_();for(var c=b?goog.crypt.base64.byteToCharMapWebSafe_:goog.crypt.base64.byteToCharMap_,d=[],e=0;e<a.length;e+=3){var f=a[e],g=e+1<a.length,h=g?a[e+1]:0,k=e+2<a.length,l=k?a[e+2]:0,p=f>>2,f=(f&3)<<4|h>>4,h=(h&15)<<2|l>>6,l=l&63;k||(l=64,g||(h=64));d.push(c[p],c[f],c[h],c[l]);}return d.join("");};goog.crypt.base64.encodeString=function(a,b){return goog.crypt.base64.HAS_NATIVE_ENCODE_&&!b?goog.global.btoa(a):goog.crypt.base64.encodeByteArray(goog.crypt.stringToByteArray(a),b);};goog.crypt.base64.decodeString=function(a,b){if(goog.crypt.base64.HAS_NATIVE_DECODE_&&!b)return goog.global.atob(a);var c="";goog.crypt.base64.decodeStringInternal_(a,function(a){c+=String.fromCharCode(a);});return c;};goog.crypt.base64.decodeStringToByteArray=function(a,b){var c=[];goog.crypt.base64.decodeStringInternal_(a,function(a){c.push(a);});return c;};goog.crypt.base64.decodeStringToUint8Array=function(a){goog.asserts.assert(!goog.userAgent.IE||goog.userAgent.isVersionOrHigher("10"),"Browser does not support typed arrays");var b=new Uint8Array(Math.ceil(3*a.length/4)),c=0;goog.crypt.base64.decodeStringInternal_(a,function(a){b[c++]=a;});return b.subarray(0,c);};goog.crypt.base64.decodeStringInternal_=function(a,b){function c(b){for(;d<a.length;){var c=a.charAt(d++),e=goog.crypt.base64.charToByteMap_[c];if(null!=e)return e;if(!goog.string.isEmptyOrWhitespace(c))throw Error("Unknown base64 encoding at char: "+c);}return b;}goog.crypt.base64.init_();for(var d=0;;){var e=c(-1),f=c(0),g=c(64),h=c(64);if(64===h&&-1===e)break;b(e<<2|f>>4);64!=g&&(b(f<<4&240|g>>2),64!=h&&b(g<<6&192|h));}};goog.crypt.base64.init_=function(){if(!goog.crypt.base64.byteToCharMap_){goog.crypt.base64.byteToCharMap_={};goog.crypt.base64.charToByteMap_={};goog.crypt.base64.byteToCharMapWebSafe_={};for(var a=0;a<goog.crypt.base64.ENCODED_VALS.length;a++){goog.crypt.base64.byteToCharMap_[a]=goog.crypt.base64.ENCODED_VALS.charAt(a),goog.crypt.base64.charToByteMap_[goog.crypt.base64.byteToCharMap_[a]]=a,goog.crypt.base64.byteToCharMapWebSafe_[a]=goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(a),a>=goog.crypt.base64.ENCODED_VALS_BASE.length&&(goog.crypt.base64.charToByteMap_[goog.crypt.base64.ENCODED_VALS_WEBSAFE.charAt(a)]=a);}}};jspb.ExtensionFieldInfo=function(a,b,c,d,e){this.fieldIndex=a;this.fieldName=b;this.ctor=c;this.toObjectFn=d;this.isRepeated=e;};jspb.ExtensionFieldBinaryInfo=function(a,b,c,d,e,f){this.fieldInfo=a;this.binaryReaderFn=b;this.binaryWriterFn=c;this.binaryMessageSerializeFn=d;this.binaryMessageDeserializeFn=e;this.isPacked=f;};jspb.ExtensionFieldInfo.prototype.isMessageType=function(){return!!this.ctor;};jspb.Message=function(){};jspb.Message.GENERATE_TO_OBJECT=!0;jspb.Message.GENERATE_FROM_OBJECT=!goog.DISALLOW_TEST_ONLY_CODE;jspb.Message.GENERATE_TO_STRING=!0;jspb.Message.ASSUME_LOCAL_ARRAYS=!1;jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS=!0;jspb.Message.SUPPORTS_UINT8ARRAY_="function"==typeof Uint8Array;jspb.Message.prototype.getJsPbMessageId=function(){return this.messageId_;};jspb.Message.getIndex_=function(a,b){return b+a.arrayIndexOffset_;};jspb.Message.getFieldNumber_=function(a,b){return b-a.arrayIndexOffset_;};jspb.Message.initialize=function(a,b,c,d,e,f){a.wrappers_=null;b||(b=c?[c]:[]);a.messageId_=c?String(c):void 0;a.arrayIndexOffset_=0===c?-1:0;a.array=b;jspb.Message.initPivotAndExtensionObject_(a,d);a.convertedFloatingPointFields_={};jspb.Message.SERIALIZE_EMPTY_TRAILING_FIELDS||(a.repeatedFields=e);if(e)for(b=0;b<e.length;b++){c=e[b],c<a.pivot_?(c=jspb.Message.getIndex_(a,c),a.array[c]=a.array[c]||jspb.Message.EMPTY_LIST_SENTINEL_):(jspb.Message.maybeInitEmptyExtensionObject_(a),a.extensionObject_[c]=a.extensionObject_[c]||jspb.Message.EMPTY_LIST_SENTINEL_);}if(f&&f.length)for(b=0;b<f.length;b++){jspb.Message.computeOneofCase(a,f[b]);}};jspb.Message.EMPTY_LIST_SENTINEL_=goog.DEBUG&&Object.freeze?Object.freeze([]):[];jspb.Message.isArray_=function(a){return jspb.Message.ASSUME_LOCAL_ARRAYS?a instanceof Array:goog.isArray(a);};jspb.Message.initPivotAndExtensionObject_=function(a,b){if(a.array.length){var c=a.array.length-1,d=a.array[c];if(d&&"object"==_typeof2(d)&&!jspb.Message.isArray_(d)&&!(jspb.Message.SUPPORTS_UINT8ARRAY_&&d instanceof Uint8Array)){a.pivot_=jspb.Message.getFieldNumber_(a,c);a.extensionObject_=d;return;}}-1<b?(a.pivot_=b,a.extensionObject_=null):a.pivot_=Number.MAX_VALUE;};jspb.Message.maybeInitEmptyExtensionObject_=function(a){var b=jspb.Message.getIndex_(a,a.pivot_);a.array[b]||(a.extensionObject_=a.array[b]={});};jspb.Message.toObjectList=function(a,b,c){for(var d=[],e=0;e<a.length;e++){d[e]=b.call(a[e],c,a[e]);}return d;};jspb.Message.toObjectExtension=function(a,b,c,d,e){for(var f in c){var g=c[f],h=d.call(a,g);if(null!=h){for(var k in g.fieldName){if(g.fieldName.hasOwnProperty(k))break;}b[k]=g.toObjectFn?g.isRepeated?jspb.Message.toObjectList(h,g.toObjectFn,e):g.toObjectFn(e,h):h;}}};jspb.Message.serializeBinaryExtensions=function(a,b,c,d){for(var e in c){var f=c[e],g=f.fieldInfo;if(!f.binaryWriterFn)throw Error("Message extension present that was generated without binary serialization support");var h=d.call(a,g);if(null!=h)if(g.isMessageType()){if(f.binaryMessageSerializeFn)f.binaryWriterFn.call(b,g.fieldIndex,h,f.binaryMessageSerializeFn);else throw Error("Message extension present holding submessage without binary support enabled, and message is being serialized to binary format");}else f.binaryWriterFn.call(b,g.fieldIndex,h);}};jspb.Message.readBinaryExtension=function(a,b,c,d,e){var f=c[b.getFieldNumber()];if(f){c=f.fieldInfo;if(!f.binaryReaderFn)throw Error("Deserializing extension whose generated code does not support binary format");var g;c.isMessageType()?(g=new c.ctor(),f.binaryReaderFn.call(b,g,f.binaryMessageDeserializeFn)):g=f.binaryReaderFn.call(b);c.isRepeated&&!f.isPacked?(b=d.call(a,c))?b.push(g):e.call(a,c,[g]):e.call(a,c,g);}else b.skipField();};jspb.Message.getField=function(a,b){if(b<a.pivot_){var c=jspb.Message.getIndex_(a,b),d=a.array[c];return d===jspb.Message.EMPTY_LIST_SENTINEL_?a.array[c]=[]:d;}if(a.extensionObject_)return d=a.extensionObject_[b],d===jspb.Message.EMPTY_LIST_SENTINEL_?a.extensionObject_[b]=[]:d;};jspb.Message.getRepeatedField=function(a,b){if(b<a.pivot_){var c=jspb.Message.getIndex_(a,b),d=a.array[c];return d===jspb.Message.EMPTY_LIST_SENTINEL_?a.array[c]=[]:d;}d=a.extensionObject_[b];return d===jspb.Message.EMPTY_LIST_SENTINEL_?a.extensionObject_[b]=[]:d;};jspb.Message.getOptionalFloatingPointField=function(a,b){var c=jspb.Message.getField(a,b);return null==c?c:+c;};jspb.Message.getRepeatedFloatingPointField=function(a,b){var c=jspb.Message.getRepeatedField(a,b);a.convertedFloatingPointFields_||(a.convertedFloatingPointFields_={});if(!a.convertedFloatingPointFields_[b]){for(var d=0;d<c.length;d++){c[d]=+c[d];}a.convertedFloatingPointFields_[b]=!0;}return c;};jspb.Message.bytesAsB64=function(a){if(null==a||goog.isString(a))return a;if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)return goog.crypt.base64.encodeByteArray(a);goog.asserts.fail("Cannot coerce to b64 string: "+goog.typeOf(a));return null;};jspb.Message.bytesAsU8=function(a){if(null==a||a instanceof Uint8Array)return a;if(goog.isString(a))return goog.crypt.base64.decodeStringToUint8Array(a);goog.asserts.fail("Cannot coerce to Uint8Array: "+goog.typeOf(a));return null;};jspb.Message.bytesListAsB64=function(a){jspb.Message.assertConsistentTypes_(a);return!a.length||goog.isString(a[0])?a:goog.array.map(a,jspb.Message.bytesAsB64);};jspb.Message.bytesListAsU8=function(a){jspb.Message.assertConsistentTypes_(a);return!a.length||a[0]instanceof Uint8Array?a:goog.array.map(a,jspb.Message.bytesAsU8);};jspb.Message.assertConsistentTypes_=function(a){if(goog.DEBUG&&a&&1<a.length){var b=goog.typeOf(a[0]);goog.array.forEach(a,function(a){goog.typeOf(a)!=b&&goog.asserts.fail("Inconsistent type in JSPB repeated field array. Got "+goog.typeOf(a)+" expected "+b);});}};jspb.Message.getFieldWithDefault=function(a,b,c){a=jspb.Message.getField(a,b);return null==a?c:a;};jspb.Message.getFieldProto3=jspb.Message.getFieldWithDefault;jspb.Message.getMapField=function(a,b,c,d){a.wrappers_||(a.wrappers_={});if(b in a.wrappers_)return a.wrappers_[b];if(!c)return c=jspb.Message.getField(a,b),c||(c=[],jspb.Message.setField(a,b,c)),a.wrappers_[b]=new jspb.Map(c,d);};jspb.Message.setField=function(a,b,c){b<a.pivot_?a.array[jspb.Message.getIndex_(a,b)]=c:(jspb.Message.maybeInitEmptyExtensionObject_(a),a.extensionObject_[b]=c);};jspb.Message.setProto3IntField=function(a,b,c){jspb.Message.setFieldIgnoringDefault_(a,b,c,0);};jspb.Message.setProto3StringIntField=function(a,b,c){jspb.Message.setFieldIgnoringDefault_(a,b,c,"0");};jspb.Message.setProto3FloatField=function(a,b,c){jspb.Message.setFieldIgnoringDefault_(a,b,c,0);};jspb.Message.setProto3BooleanField=function(a,b,c){jspb.Message.setFieldIgnoringDefault_(a,b,c,!1);};jspb.Message.setProto3StringField=function(a,b,c){jspb.Message.setFieldIgnoringDefault_(a,b,c,"");};jspb.Message.setProto3BytesField=function(a,b,c){jspb.Message.setFieldIgnoringDefault_(a,b,c,"");};jspb.Message.setProto3EnumField=function(a,b,c){jspb.Message.setFieldIgnoringDefault_(a,b,c,0);};jspb.Message.setFieldIgnoringDefault_=function(a,b,c,d){c!=d?jspb.Message.setField(a,b,c):a.array[jspb.Message.getIndex_(a,b)]=null;};jspb.Message.addToRepeatedField=function(a,b,c,d){a=jspb.Message.getRepeatedField(a,b);void 0!=d?a.splice(d,0,c):a.push(c);};jspb.Message.setOneofField=function(a,b,c,d){(c=jspb.Message.computeOneofCase(a,c))&&c!==b&&void 0!==d&&(a.wrappers_&&c in a.wrappers_&&(a.wrappers_[c]=void 0),jspb.Message.setField(a,c,void 0));jspb.Message.setField(a,b,d);};jspb.Message.computeOneofCase=function(a,b){for(var c,d,e=0;e<b.length;e++){var f=b[e],g=jspb.Message.getField(a,f);null!=g&&(c=f,d=g,jspb.Message.setField(a,f,void 0));}return c?(jspb.Message.setField(a,c,d),c):0;};jspb.Message.getWrapperField=function(a,b,c,d){a.wrappers_||(a.wrappers_={});if(!a.wrappers_[c]){var e=jspb.Message.getField(a,c);if(d||e)a.wrappers_[c]=new b(e);}return a.wrappers_[c];};jspb.Message.getRepeatedWrapperField=function(a,b,c){jspb.Message.wrapRepeatedField_(a,b,c);b=a.wrappers_[c];b==jspb.Message.EMPTY_LIST_SENTINEL_&&(b=a.wrappers_[c]=[]);return b;};jspb.Message.wrapRepeatedField_=function(a,b,c){a.wrappers_||(a.wrappers_={});if(!a.wrappers_[c]){for(var d=jspb.Message.getRepeatedField(a,c),e=[],f=0;f<d.length;f++){e[f]=new b(d[f]);}a.wrappers_[c]=e;}};jspb.Message.setWrapperField=function(a,b,c){a.wrappers_||(a.wrappers_={});var d=c?c.toArray():c;a.wrappers_[b]=c;jspb.Message.setField(a,b,d);};jspb.Message.setOneofWrapperField=function(a,b,c,d){a.wrappers_||(a.wrappers_={});var e=d?d.toArray():d;a.wrappers_[b]=d;jspb.Message.setOneofField(a,b,c,e);};jspb.Message.setRepeatedWrapperField=function(a,b,c){a.wrappers_||(a.wrappers_={});c=c||[];for(var d=[],e=0;e<c.length;e++){d[e]=c[e].toArray();}a.wrappers_[b]=c;jspb.Message.setField(a,b,d);};jspb.Message.addToRepeatedWrapperField=function(a,b,c,d,e){jspb.Message.wrapRepeatedField_(a,d,b);var f=a.wrappers_[b];f||(f=a.wrappers_[b]=[]);c=c?c:new d();a=jspb.Message.getRepeatedField(a,b);void 0!=e?(f.splice(e,0,c),a.splice(e,0,c.toArray())):(f.push(c),a.push(c.toArray()));return c;};jspb.Message.toMap=function(a,b,c,d){for(var e={},f=0;f<a.length;f++){e[b.call(a[f])]=c?c.call(a[f],d,a[f]):a[f];}return e;};jspb.Message.prototype.syncMapFields_=function(){if(this.wrappers_)for(var a in this.wrappers_){var b=this.wrappers_[a];if(goog.isArray(b))for(var c=0;c<b.length;c++){b[c]&&b[c].toArray();}else b&&b.toArray();}};jspb.Message.prototype.toArray=function(){this.syncMapFields_();return this.array;};jspb.Message.GENERATE_TO_STRING&&(jspb.Message.prototype.toString=function(){this.syncMapFields_();return this.array.toString();});jspb.Message.prototype.getExtension=function(a){if(this.extensionObject_){this.wrappers_||(this.wrappers_={});var b=a.fieldIndex;if(a.isRepeated){if(a.isMessageType())return this.wrappers_[b]||(this.wrappers_[b]=goog.array.map(this.extensionObject_[b]||[],function(b){return new a.ctor(b);})),this.wrappers_[b];}else if(a.isMessageType())return!this.wrappers_[b]&&this.extensionObject_[b]&&(this.wrappers_[b]=new a.ctor(this.extensionObject_[b])),this.wrappers_[b];return this.extensionObject_[b];}};jspb.Message.prototype.setExtension=function(a,b){this.wrappers_||(this.wrappers_={});jspb.Message.maybeInitEmptyExtensionObject_(this);var c=a.fieldIndex;a.isRepeated?(b=b||[],a.isMessageType()?(this.wrappers_[c]=b,this.extensionObject_[c]=goog.array.map(b,function(a){return a.toArray();})):this.extensionObject_[c]=b):a.isMessageType()?(this.wrappers_[c]=b,this.extensionObject_[c]=b?b.toArray():b):this.extensionObject_[c]=b;return this;};jspb.Message.difference=function(a,b){if(!(a instanceof b.constructor))throw Error("Messages have different types.");var c=a.toArray(),d=b.toArray(),e=[],f=0,g=c.length>d.length?c.length:d.length;a.getJsPbMessageId()&&(e[0]=a.getJsPbMessageId(),f=1);for(;f<g;f++){jspb.Message.compareFields(c[f],d[f])||(e[f]=d[f]);}return new a.constructor(e);};jspb.Message.equals=function(a,b){return a==b||!(!a||!b)&&a instanceof b.constructor&&jspb.Message.compareFields(a.toArray(),b.toArray());};jspb.Message.compareExtensions=function(a,b){a=a||{};b=b||{};var c={},d;for(d in a){c[d]=0;}for(d in b){c[d]=0;}for(d in c){if(!jspb.Message.compareFields(a[d],b[d]))return!1;}return!0;};jspb.Message.compareFields=function(a,b){if(a==b)return!0;if(!goog.isObject(a)||!goog.isObject(b))return goog.isNumber(a)&&isNaN(a)||goog.isNumber(b)&&isNaN(b)?String(a)==String(b):!1;if(a.constructor!=b.constructor)return!1;if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a.constructor===Uint8Array){if(a.length!=b.length)return!1;for(var c=0;c<a.length;c++){if(a[c]!=b[c])return!1;}return!0;}if(a.constructor===Array){for(var d=void 0,e=void 0,f=Math.max(a.length,b.length),c=0;c<f;c++){var g=a[c],h=b[c];g&&g.constructor==Object&&(goog.asserts.assert(void 0===d),goog.asserts.assert(c===a.length-1),d=g,g=void 0);h&&h.constructor==Object&&(goog.asserts.assert(void 0===e),goog.asserts.assert(c===b.length-1),e=h,h=void 0);if(!jspb.Message.compareFields(g,h))return!1;}return d||e?(d=d||{},e=e||{},jspb.Message.compareExtensions(d,e)):!0;}if(a.constructor===Object)return jspb.Message.compareExtensions(a,b);throw Error("Invalid type in JSPB array");};jspb.Message.prototype.cloneMessage=function(){return jspb.Message.cloneMessage(this);};jspb.Message.prototype.clone=function(){return jspb.Message.cloneMessage(this);};jspb.Message.clone=function(a){return jspb.Message.cloneMessage(a);};jspb.Message.cloneMessage=function(a){return new a.constructor(jspb.Message.clone_(a.toArray()));};jspb.Message.copyInto=function(a,b){goog.asserts.assertInstanceof(a,jspb.Message);goog.asserts.assertInstanceof(b,jspb.Message);goog.asserts.assert(a.constructor==b.constructor,"Copy source and target message should have the same type.");for(var c=jspb.Message.clone(a),d=b.toArray(),e=c.toArray(),f=d.length=0;f<e.length;f++){d[f]=e[f];}b.wrappers_=c.wrappers_;b.extensionObject_=c.extensionObject_;};jspb.Message.clone_=function(a){var b;if(goog.isArray(a)){for(var c=Array(a.length),d=0;d<a.length;d++){b=a[d],null!=b&&(c[d]="object"==_typeof2(b)?jspb.Message.clone_(goog.asserts.assert(b)):b);}return c;}if(jspb.Message.SUPPORTS_UINT8ARRAY_&&a instanceof Uint8Array)return new Uint8Array(a);c={};for(d in a){b=a[d],null!=b&&(c[d]="object"==_typeof2(b)?jspb.Message.clone_(goog.asserts.assert(b)):b);}return c;};jspb.Message.registerMessageType=function(a,b){jspb.Message.registry_[a]=b;b.messageId=a;};jspb.Message.registry_={};jspb.Message.messageSetExtensions={};jspb.Message.messageSetExtensionsBinary={};jspb.arith={};jspb.arith.UInt64=function(a,b){this.lo=a;this.hi=b;};jspb.arith.UInt64.prototype.cmp=function(a){return this.hi<a.hi||this.hi==a.hi&&this.lo<a.lo?-1:this.hi==a.hi&&this.lo==a.lo?0:1;};jspb.arith.UInt64.prototype.rightShift=function(){return new jspb.arith.UInt64((this.lo>>>1|(this.hi&1)<<31)>>>0,this.hi>>>1>>>0);};jspb.arith.UInt64.prototype.leftShift=function(){return new jspb.arith.UInt64(this.lo<<1>>>0,(this.hi<<1|this.lo>>>31)>>>0);};jspb.arith.UInt64.prototype.msb=function(){return!!(this.hi&2147483648);};jspb.arith.UInt64.prototype.lsb=function(){return!!(this.lo&1);};jspb.arith.UInt64.prototype.zero=function(){return 0==this.lo&&0==this.hi;};jspb.arith.UInt64.prototype.add=function(a){return new jspb.arith.UInt64((this.lo+a.lo&4294967295)>>>0>>>0,((this.hi+a.hi&4294967295)>>>0)+(4294967296<=this.lo+a.lo?1:0)>>>0);};jspb.arith.UInt64.prototype.sub=function(a){return new jspb.arith.UInt64((this.lo-a.lo&4294967295)>>>0>>>0,((this.hi-a.hi&4294967295)>>>0)-(0>this.lo-a.lo?1:0)>>>0);};jspb.arith.UInt64.mul32x32=function(a,b){for(var c=a&65535,d=a>>>16,e=b&65535,f=b>>>16,g=c*e+65536*(c*f&65535)+65536*(d*e&65535),c=d*f+(c*f>>>16)+(d*e>>>16);4294967296<=g;){g-=4294967296,c+=1;}return new jspb.arith.UInt64(g>>>0,c>>>0);};jspb.arith.UInt64.prototype.mul=function(a){var b=jspb.arith.UInt64.mul32x32(this.lo,a);a=jspb.arith.UInt64.mul32x32(this.hi,a);a.hi=a.lo;a.lo=0;return b.add(a);};jspb.arith.UInt64.prototype.div=function(a){if(0==a)return[];var b=new jspb.arith.UInt64(0,0),c=new jspb.arith.UInt64(this.lo,this.hi);a=new jspb.arith.UInt64(a,0);for(var d=new jspb.arith.UInt64(1,0);!a.msb();){a=a.leftShift(),d=d.leftShift();}for(;!d.zero();){0>=a.cmp(c)&&(b=b.add(d),c=c.sub(a)),a=a.rightShift(),d=d.rightShift();}return[b,c];};jspb.arith.UInt64.prototype.toString=function(){for(var a="",b=this;!b.zero();){var b=b.div(10),c=b[0],a=b[1].lo+a,b=c;}""==a&&(a="0");return a;};jspb.arith.UInt64.fromString=function(a){for(var b=new jspb.arith.UInt64(0,0),c=new jspb.arith.UInt64(0,0),d=0;d<a.length;d++){if("0">a[d]||"9"<a[d])return null;var e=parseInt(a[d],10);c.lo=e;b=b.mul(10).add(c);}return b;};jspb.arith.UInt64.prototype.clone=function(){return new jspb.arith.UInt64(this.lo,this.hi);};jspb.arith.Int64=function(a,b){this.lo=a;this.hi=b;};jspb.arith.Int64.prototype.add=function(a){return new jspb.arith.Int64((this.lo+a.lo&4294967295)>>>0>>>0,((this.hi+a.hi&4294967295)>>>0)+(4294967296<=this.lo+a.lo?1:0)>>>0);};jspb.arith.Int64.prototype.sub=function(a){return new jspb.arith.Int64((this.lo-a.lo&4294967295)>>>0>>>0,((this.hi-a.hi&4294967295)>>>0)-(0>this.lo-a.lo?1:0)>>>0);};jspb.arith.Int64.prototype.clone=function(){return new jspb.arith.Int64(this.lo,this.hi);};jspb.arith.Int64.prototype.toString=function(){var a=0!=(this.hi&2147483648),b=new jspb.arith.UInt64(this.lo,this.hi);a&&(b=new jspb.arith.UInt64(0,0).sub(b));return(a?"-":"")+b.toString();};jspb.arith.Int64.fromString=function(a){var b=0<a.length&&"-"==a[0];b&&(a=a.substring(1));a=jspb.arith.UInt64.fromString(a);if(null===a)return null;b&&(a=new jspb.arith.UInt64(0,0).sub(a));return new jspb.arith.Int64(a.lo,a.hi);};jspb.BinaryConstants={};jspb.ConstBinaryMessage=function(){};jspb.BinaryMessage=function(){};jspb.BinaryConstants.FieldType={INVALID:-1,DOUBLE:1,FLOAT:2,INT64:3,UINT64:4,INT32:5,FIXED64:6,FIXED32:7,BOOL:8,STRING:9,GROUP:10,MESSAGE:11,BYTES:12,UINT32:13,ENUM:14,SFIXED32:15,SFIXED64:16,SINT32:17,SINT64:18,FHASH64:30,VHASH64:31};jspb.BinaryConstants.WireType={INVALID:-1,VARINT:0,FIXED64:1,DELIMITED:2,START_GROUP:3,END_GROUP:4,FIXED32:5};jspb.BinaryConstants.FieldTypeToWireType=function(a){var b=jspb.BinaryConstants.FieldType,c=jspb.BinaryConstants.WireType;switch(a){case b.INT32:case b.INT64:case b.UINT32:case b.UINT64:case b.SINT32:case b.SINT64:case b.BOOL:case b.ENUM:case b.VHASH64:return c.VARINT;case b.DOUBLE:case b.FIXED64:case b.SFIXED64:case b.FHASH64:return c.FIXED64;case b.STRING:case b.MESSAGE:case b.BYTES:return c.DELIMITED;case b.FLOAT:case b.FIXED32:case b.SFIXED32:return c.FIXED32;default:return c.INVALID;}};jspb.BinaryConstants.INVALID_FIELD_NUMBER=-1;jspb.BinaryConstants.FLOAT32_EPS=1.401298464324817E-45;jspb.BinaryConstants.FLOAT32_MIN=1.1754943508222875E-38;jspb.BinaryConstants.FLOAT32_MAX=3.4028234663852886E38;jspb.BinaryConstants.FLOAT64_EPS=4.9E-324;jspb.BinaryConstants.FLOAT64_MIN=2.2250738585072014E-308;jspb.BinaryConstants.FLOAT64_MAX=1.7976931348623157E308;jspb.BinaryConstants.TWO_TO_20=1048576;jspb.BinaryConstants.TWO_TO_23=8388608;jspb.BinaryConstants.TWO_TO_31=2147483648;jspb.BinaryConstants.TWO_TO_32=4294967296;jspb.BinaryConstants.TWO_TO_52=4503599627370496;jspb.BinaryConstants.TWO_TO_63=0x7fffffffffffffff;jspb.BinaryConstants.TWO_TO_64=1.8446744073709552E19;jspb.BinaryConstants.ZERO_HASH="\x00\x00\x00\x00\x00\x00\x00\x00";jspb.utils={};jspb.utils.split64Low=0;jspb.utils.split64High=0;jspb.utils.splitUint64=function(a){var b=a>>>0;a=Math.floor((a-b)/jspb.BinaryConstants.TWO_TO_32)>>>0;jspb.utils.split64Low=b;jspb.utils.split64High=a;};jspb.utils.splitInt64=function(a){var b=0>a;a=Math.abs(a);var c=a>>>0;a=Math.floor((a-c)/jspb.BinaryConstants.TWO_TO_32);a>>>=0;b&&(a=~a>>>0,c=(~c>>>0)+1,4294967295<c&&(c=0,a++,4294967295<a&&(a=0)));jspb.utils.split64Low=c;jspb.utils.split64High=a;};jspb.utils.splitZigzag64=function(a){var b=0>a;a=2*Math.abs(a);jspb.utils.splitUint64(a);a=jspb.utils.split64Low;var c=jspb.utils.split64High;b&&(0==a?0==c?c=a=4294967295:(c--,a=4294967295):a--);jspb.utils.split64Low=a;jspb.utils.split64High=c;};jspb.utils.splitFloat32=function(a){var b=0>a?1:0;a=b?-a:a;var c;0===a?0<1/a?(jspb.utils.split64High=0,jspb.utils.split64Low=0):(jspb.utils.split64High=0,jspb.utils.split64Low=2147483648):isNaN(a)?(jspb.utils.split64High=0,jspb.utils.split64Low=2147483647):a>jspb.BinaryConstants.FLOAT32_MAX?(jspb.utils.split64High=0,jspb.utils.split64Low=(b<<31|2139095040)>>>0):a<jspb.BinaryConstants.FLOAT32_MIN?(a=Math.round(a/Math.pow(2,-149)),jspb.utils.split64High=0,jspb.utils.split64Low=(b<<31|a)>>>0):(c=Math.floor(Math.log(a)/Math.LN2),a*=Math.pow(2,-c),a=Math.round(a*jspb.BinaryConstants.TWO_TO_23)&8388607,jspb.utils.split64High=0,jspb.utils.split64Low=(b<<31|c+127<<23|a)>>>0);};jspb.utils.splitFloat64=function(a){var b=0>a?1:0;a=b?-a:a;if(0===a)jspb.utils.split64High=0<1/a?0:2147483648,jspb.utils.split64Low=0;else if(isNaN(a))jspb.utils.split64High=2147483647,jspb.utils.split64Low=4294967295;else if(a>jspb.BinaryConstants.FLOAT64_MAX)jspb.utils.split64High=(b<<31|2146435072)>>>0,jspb.utils.split64Low=0;else if(a<jspb.BinaryConstants.FLOAT64_MIN){var c=a/Math.pow(2,-1074);a=c/jspb.BinaryConstants.TWO_TO_32;jspb.utils.split64High=(b<<31|a)>>>0;jspb.utils.split64Low=c>>>0;}else{var d=Math.floor(Math.log(a)/Math.LN2);1024==d&&(d=1023);c=a*Math.pow(2,-d);a=c*jspb.BinaryConstants.TWO_TO_20&1048575;c=c*jspb.BinaryConstants.TWO_TO_52>>>0;jspb.utils.split64High=(b<<31|d+1023<<20|a)>>>0;jspb.utils.split64Low=c;}};jspb.utils.splitHash64=function(a){var b=a.charCodeAt(0),c=a.charCodeAt(1),d=a.charCodeAt(2),e=a.charCodeAt(3),f=a.charCodeAt(4),g=a.charCodeAt(5),h=a.charCodeAt(6);a=a.charCodeAt(7);jspb.utils.split64Low=b+(c<<8)+(d<<16)+(e<<24)>>>0;jspb.utils.split64High=f+(g<<8)+(h<<16)+(a<<24)>>>0;};jspb.utils.joinUint64=function(a,b){return b*jspb.BinaryConstants.TWO_TO_32+a;};jspb.utils.joinInt64=function(a,b){var c=b&2147483648;c&&(a=~a+1>>>0,b=~b>>>0,0==a&&(b=b+1>>>0));var d=jspb.utils.joinUint64(a,b);return c?-d:d;};jspb.utils.joinZigzag64=function(a,b){var c=a&1;a=(a>>>1|b<<31)>>>0;b>>>=1;c&&(a=a+1>>>0,0==a&&(b=b+1>>>0));var d=jspb.utils.joinUint64(a,b);return c?-d:d;};jspb.utils.joinFloat32=function(a,b){var c=2*(a>>31)+1,d=a>>>23&255,e=a&8388607;return 255==d?e?NaN:Infinity*c:0==d?c*Math.pow(2,-149)*e:c*Math.pow(2,d-150)*(e+Math.pow(2,23));};jspb.utils.joinFloat64=function(a,b){var c=2*(b>>31)+1,d=b>>>20&2047,e=jspb.BinaryConstants.TWO_TO_32*(b&1048575)+a;return 2047==d?e?NaN:Infinity*c:0==d?c*Math.pow(2,-1074)*e:c*Math.pow(2,d-1075)*(e+jspb.BinaryConstants.TWO_TO_52);};jspb.utils.joinHash64=function(a,b){return String.fromCharCode(a>>>0&255,a>>>8&255,a>>>16&255,a>>>24&255,b>>>0&255,b>>>8&255,b>>>16&255,b>>>24&255);};jspb.utils.DIGITS="0123456789abcdef".split("");jspb.utils.joinUnsignedDecimalString=function(a,b){function c(a){for(var b=1E7,c=0;7>c;c++){var b=b/10,d=a/b%10>>>0;if(0!=d||h)h=!0,k+=g[d];}}if(2097151>=b)return""+(jspb.BinaryConstants.TWO_TO_32*b+a);var d=(a>>>24|b<<8)>>>0&16777215,e=b>>16&65535,f=(a&16777215)+6777216*d+6710656*e,d=d+8147497*e,e=2*e;1E7<=f&&(d+=Math.floor(f/1E7),f%=1E7);1E7<=d&&(e+=Math.floor(d/1E7),d%=1E7);var g=jspb.utils.DIGITS,h=!1,k="";(e||h)&&c(e);(d||h)&&c(d);(f||h)&&c(f);return k;};jspb.utils.joinSignedDecimalString=function(a,b){var c=b&2147483648;c&&(a=~a+1>>>0,b=~b+(0==a?1:0)>>>0);var d=jspb.utils.joinUnsignedDecimalString(a,b);return c?"-"+d:d;};jspb.utils.hash64ToDecimalString=function(a,b){jspb.utils.splitHash64(a);var c=jspb.utils.split64Low,d=jspb.utils.split64High;return b?jspb.utils.joinSignedDecimalString(c,d):jspb.utils.joinUnsignedDecimalString(c,d);};jspb.utils.hash64ArrayToDecimalStrings=function(a,b){for(var c=Array(a.length),d=0;d<a.length;d++){c[d]=jspb.utils.hash64ToDecimalString(a[d],b);}return c;};jspb.utils.decimalStringToHash64=function(a){function b(a,b){for(var c=0;8>c&&(1!==a||0<b);c++){var d=a*e[c]+b;e[c]=d&255;b=d>>>8;}}function c(){for(var a=0;8>a;a++){e[a]=~e[a]&255;}}goog.asserts.assert(0<a.length);var d=!1;"-"===a[0]&&(d=!0,a=a.slice(1));for(var e=[0,0,0,0,0,0,0,0],f=0;f<a.length;f++){b(10,jspb.utils.DIGITS.indexOf(a[f]));}d&&(c(),b(1,1));return goog.crypt.byteArrayToString(e);};jspb.utils.splitDecimalString=function(a){jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a));};jspb.utils.hash64ToHexString=function(a){var b=Array(18);b[0]="0";b[1]="x";for(var c=0;8>c;c++){var d=a.charCodeAt(7-c);b[2*c+2]=jspb.utils.DIGITS[d>>4];b[2*c+3]=jspb.utils.DIGITS[d&15];}return b.join("");};jspb.utils.hexStringToHash64=function(a){a=a.toLowerCase();goog.asserts.assert(18==a.length);goog.asserts.assert("0"==a[0]);goog.asserts.assert("x"==a[1]);for(var b="",c=0;8>c;c++){var d=jspb.utils.DIGITS.indexOf(a[2*c+2]),e=jspb.utils.DIGITS.indexOf(a[2*c+3]),b=String.fromCharCode(16*d+e)+b;}return b;};jspb.utils.hash64ToNumber=function(a,b){jspb.utils.splitHash64(a);var c=jspb.utils.split64Low,d=jspb.utils.split64High;return b?jspb.utils.joinInt64(c,d):jspb.utils.joinUint64(c,d);};jspb.utils.numberToHash64=function(a){jspb.utils.splitInt64(a);return jspb.utils.joinHash64(jspb.utils.split64Low,jspb.utils.split64High);};jspb.utils.countVarints=function(a,b,c){for(var d=0,e=b;e<c;e++){d+=a[e]>>7;}return c-b-d;};jspb.utils.countVarintFields=function(a,b,c,d){var e=0;d=8*d+jspb.BinaryConstants.WireType.VARINT;if(128>d)for(;b<c&&a[b++]==d;){for(e++;;){var f=a[b++];if(0==(f&128))break;}}else for(;b<c;){for(f=d;128<f;){if(a[b]!=(f&127|128))return e;b++;f>>=7;}if(a[b++]!=f)break;for(e++;f=a[b++],0!=(f&128);){;}}return e;};jspb.utils.countFixedFields_=function(a,b,c,d,e){var f=0;if(128>d)for(;b<c&&a[b++]==d;){f++,b+=e;}else for(;b<c;){for(var g=d;128<g;){if(a[b++]!=(g&127|128))return f;g>>=7;}if(a[b++]!=g)break;f++;b+=e;}return f;};jspb.utils.countFixed32Fields=function(a,b,c,d){return jspb.utils.countFixedFields_(a,b,c,8*d+jspb.BinaryConstants.WireType.FIXED32,4);};jspb.utils.countFixed64Fields=function(a,b,c,d){return jspb.utils.countFixedFields_(a,b,c,8*d+jspb.BinaryConstants.WireType.FIXED64,8);};jspb.utils.countDelimitedFields=function(a,b,c,d){var e=0;for(d=8*d+jspb.BinaryConstants.WireType.DELIMITED;b<c;){for(var f=d;128<f;){if(a[b++]!=(f&127|128))return e;f>>=7;}if(a[b++]!=f)break;e++;for(var g=0,h=1;f=a[b++],g+=(f&127)*h,h*=128,0!=(f&128);){;}b+=g;}return e;};jspb.utils.debugBytesToTextFormat=function(a){var b='"';if(a){a=jspb.utils.byteSourceToUint8Array(a);for(var c=0;c<a.length;c++){b+="\\x",16>a[c]&&(b+="0"),b+=a[c].toString(16);}}return b+'"';};jspb.utils.debugScalarToTextFormat=function(a){return goog.isString(a)?goog.string.quote(a):a.toString();};jspb.utils.stringToByteArray=function(a){for(var b=new Uint8Array(a.length),c=0;c<a.length;c++){var d=a.charCodeAt(c);if(255<d)throw Error("Conversion error: string contains codepoint outside of byte range");b[c]=d;}return b;};jspb.utils.byteSourceToUint8Array=function(a){if(a.constructor===Uint8Array)return a;if(a.constructor===ArrayBuffer||a.constructor===Buffer$1||a.constructor===Array)return new Uint8Array(a);if(a.constructor===String)return goog.crypt.base64.decodeStringToUint8Array(a);goog.asserts.fail("Type not convertible to Uint8Array.");return new Uint8Array(0);};jspb.BinaryEncoder=function(){this.buffer_=[];};jspb.BinaryEncoder.prototype.length=function(){return this.buffer_.length;};jspb.BinaryEncoder.prototype.end=function(){var a=this.buffer_;this.buffer_=[];return a;};jspb.BinaryEncoder.prototype.writeSplitVarint64=function(a,b){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(b==Math.floor(b));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);for(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32);0<b||127<a;){this.buffer_.push(a&127|128),a=(a>>>7|b<<25)>>>0,b>>>=7;}this.buffer_.push(a);};jspb.BinaryEncoder.prototype.writeSplitFixed64=function(a,b){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(b==Math.floor(b));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32);this.writeUint32(a);this.writeUint32(b);};jspb.BinaryEncoder.prototype.writeUnsignedVarint32=function(a){goog.asserts.assert(a==Math.floor(a));for(goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);127<a;){this.buffer_.push(a&127|128),a>>>=7;}this.buffer_.push(a);};jspb.BinaryEncoder.prototype.writeSignedVarint32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);if(0<=a)this.writeUnsignedVarint32(a);else{for(var b=0;9>b;b++){this.buffer_.push(a&127|128),a>>=7;}this.buffer_.push(1);}};jspb.BinaryEncoder.prototype.writeUnsignedVarint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_64);jspb.utils.splitInt64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High);};jspb.BinaryEncoder.prototype.writeSignedVarint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitInt64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High);};jspb.BinaryEncoder.prototype.writeZigzagVarint32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.writeUnsignedVarint32((a<<1^a>>31)>>>0);};jspb.BinaryEncoder.prototype.writeZigzagVarint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitZigzag64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High);};jspb.BinaryEncoder.prototype.writeZigzagVarint64String=function(a){this.writeZigzagVarint64(parseInt(a,10));};jspb.BinaryEncoder.prototype.writeUint8=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&256>a);this.buffer_.push(a>>>0&255);};jspb.BinaryEncoder.prototype.writeUint16=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&65536>a);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);};jspb.BinaryEncoder.prototype.writeUint32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_32);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);this.buffer_.push(a>>>16&255);this.buffer_.push(a>>>24&255);};jspb.BinaryEncoder.prototype.writeUint64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(0<=a&&a<jspb.BinaryConstants.TWO_TO_64);jspb.utils.splitUint64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High);};jspb.BinaryEncoder.prototype.writeInt8=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(-128<=a&&128>a);this.buffer_.push(a>>>0&255);};jspb.BinaryEncoder.prototype.writeInt16=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(-32768<=a&&32768>a);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);};jspb.BinaryEncoder.prototype.writeInt32=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.buffer_.push(a>>>0&255);this.buffer_.push(a>>>8&255);this.buffer_.push(a>>>16&255);this.buffer_.push(a>>>24&255);};jspb.BinaryEncoder.prototype.writeInt64=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_63&&a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitInt64(a);this.writeSplitFixed64(jspb.utils.split64Low,jspb.utils.split64High);};jspb.BinaryEncoder.prototype.writeInt64String=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(+a>=-jspb.BinaryConstants.TWO_TO_63&&+a<jspb.BinaryConstants.TWO_TO_63);jspb.utils.splitHash64(jspb.utils.decimalStringToHash64(a));this.writeSplitFixed64(jspb.utils.split64Low,jspb.utils.split64High);};jspb.BinaryEncoder.prototype.writeFloat=function(a){goog.asserts.assert(a>=-jspb.BinaryConstants.FLOAT32_MAX&&a<=jspb.BinaryConstants.FLOAT32_MAX);jspb.utils.splitFloat32(a);this.writeUint32(jspb.utils.split64Low);};jspb.BinaryEncoder.prototype.writeDouble=function(a){goog.asserts.assert(a>=-jspb.BinaryConstants.FLOAT64_MAX&&a<=jspb.BinaryConstants.FLOAT64_MAX);jspb.utils.splitFloat64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High);};jspb.BinaryEncoder.prototype.writeBool=function(a){goog.asserts.assert(goog.isBoolean(a)||goog.isNumber(a));this.buffer_.push(a?1:0);};jspb.BinaryEncoder.prototype.writeEnum=function(a){goog.asserts.assert(a==Math.floor(a));goog.asserts.assert(a>=-jspb.BinaryConstants.TWO_TO_31&&a<jspb.BinaryConstants.TWO_TO_31);this.writeSignedVarint32(a);};jspb.BinaryEncoder.prototype.writeBytes=function(a){this.buffer_.push.apply(this.buffer_,a);};jspb.BinaryEncoder.prototype.writeVarintHash64=function(a){jspb.utils.splitHash64(a);this.writeSplitVarint64(jspb.utils.split64Low,jspb.utils.split64High);};jspb.BinaryEncoder.prototype.writeFixedHash64=function(a){jspb.utils.splitHash64(a);this.writeUint32(jspb.utils.split64Low);this.writeUint32(jspb.utils.split64High);};jspb.BinaryEncoder.prototype.writeString=function(a){for(var b=this.buffer_.length,c=0;c<a.length;c++){var d=a.charCodeAt(c);if(128>d)this.buffer_.push(d);else if(2048>d)this.buffer_.push(d>>6|192),this.buffer_.push(d&63|128);else if(65536>d)if(55296<=d&&56319>=d&&c+1<a.length){var e=a.charCodeAt(c+1);56320<=e&&57343>=e&&(d=1024*(d-55296)+e-56320+65536,this.buffer_.push(d>>18|240),this.buffer_.push(d>>12&63|128),this.buffer_.push(d>>6&63|128),this.buffer_.push(d&63|128),c++);}else this.buffer_.push(d>>12|224),this.buffer_.push(d>>6&63|128),this.buffer_.push(d&63|128);}return this.buffer_.length-b;};jspb.BinaryWriter=function(){this.blocks_=[];this.totalLength_=0;this.encoder_=new jspb.BinaryEncoder();this.bookmarks_=[];};jspb.BinaryWriter.prototype.appendUint8Array_=function(a){var b=this.encoder_.end();this.blocks_.push(b);this.blocks_.push(a);this.totalLength_+=b.length+a.length;};jspb.BinaryWriter.prototype.beginDelimited_=function(a){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);a=this.encoder_.end();this.blocks_.push(a);this.totalLength_+=a.length;a.push(this.totalLength_);return a;};jspb.BinaryWriter.prototype.endDelimited_=function(a){var b=a.pop(),b=this.totalLength_+this.encoder_.length()-b;for(goog.asserts.assert(0<=b);127<b;){a.push(b&127|128),b>>>=7,this.totalLength_++;}a.push(b);this.totalLength_++;};jspb.BinaryWriter.prototype.writeSerializedMessage=function(a,b,c){this.appendUint8Array_(a.subarray(b,c));};jspb.BinaryWriter.prototype.maybeWriteSerializedMessage=function(a,b,c){null!=a&&null!=b&&null!=c&&this.writeSerializedMessage(a,b,c);};jspb.BinaryWriter.prototype.reset=function(){this.blocks_=[];this.encoder_.end();this.totalLength_=0;this.bookmarks_=[];};jspb.BinaryWriter.prototype.getResultBuffer=function(){goog.asserts.assert(0==this.bookmarks_.length);for(var a=new Uint8Array(this.totalLength_+this.encoder_.length()),b=this.blocks_,c=b.length,d=0,e=0;e<c;e++){var f=b[e];a.set(f,d);d+=f.length;}b=this.encoder_.end();a.set(b,d);d+=b.length;goog.asserts.assert(d==a.length);this.blocks_=[a];return a;};jspb.BinaryWriter.prototype.getResultBase64String=function(a){return goog.crypt.base64.encodeByteArray(this.getResultBuffer(),a);};jspb.BinaryWriter.prototype.beginSubMessage=function(a){this.bookmarks_.push(this.beginDelimited_(a));};jspb.BinaryWriter.prototype.endSubMessage=function(){goog.asserts.assert(0<=this.bookmarks_.length);this.endDelimited_(this.bookmarks_.pop());};jspb.BinaryWriter.prototype.writeFieldHeader_=function(a,b){goog.asserts.assert(1<=a&&a==Math.floor(a));this.encoder_.writeUnsignedVarint32(8*a+b);};jspb.BinaryWriter.prototype.writeAny=function(a,b,c){var d=jspb.BinaryConstants.FieldType;switch(a){case d.DOUBLE:this.writeDouble(b,c);break;case d.FLOAT:this.writeFloat(b,c);break;case d.INT64:this.writeInt64(b,c);break;case d.UINT64:this.writeUint64(b,c);break;case d.INT32:this.writeInt32(b,c);break;case d.FIXED64:this.writeFixed64(b,c);break;case d.FIXED32:this.writeFixed32(b,c);break;case d.BOOL:this.writeBool(b,c);break;case d.STRING:this.writeString(b,c);break;case d.GROUP:goog.asserts.fail("Group field type not supported in writeAny()");break;case d.MESSAGE:goog.asserts.fail("Message field type not supported in writeAny()");break;case d.BYTES:this.writeBytes(b,c);break;case d.UINT32:this.writeUint32(b,c);break;case d.ENUM:this.writeEnum(b,c);break;case d.SFIXED32:this.writeSfixed32(b,c);break;case d.SFIXED64:this.writeSfixed64(b,c);break;case d.SINT32:this.writeSint32(b,c);break;case d.SINT64:this.writeSint64(b,c);break;case d.FHASH64:this.writeFixedHash64(b,c);break;case d.VHASH64:this.writeVarintHash64(b,c);break;default:goog.asserts.fail("Invalid field type in writeAny()");}};jspb.BinaryWriter.prototype.writeUnsignedVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeUnsignedVarint32(b));};jspb.BinaryWriter.prototype.writeSignedVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(b));};jspb.BinaryWriter.prototype.writeUnsignedVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeUnsignedVarint64(b));};jspb.BinaryWriter.prototype.writeSignedVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint64(b));};jspb.BinaryWriter.prototype.writeZigzagVarint32_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint32(b));};jspb.BinaryWriter.prototype.writeZigzagVarint64_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint64(b));};jspb.BinaryWriter.prototype.writeZigzagVarint64String_=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeZigzagVarint64String(b));};jspb.BinaryWriter.prototype.writeInt32=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeSignedVarint32_(a,b));};jspb.BinaryWriter.prototype.writeInt32String=function(a,b){if(null!=b){var c=parseInt(b,10);goog.asserts.assert(c>=-jspb.BinaryConstants.TWO_TO_31&&c<jspb.BinaryConstants.TWO_TO_31);this.writeSignedVarint32_(a,c);}};jspb.BinaryWriter.prototype.writeInt64=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeSignedVarint64_(a,b));};jspb.BinaryWriter.prototype.writeInt64String=function(a,b){if(null!=b){var c=jspb.arith.Int64.fromString(b);this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT);this.encoder_.writeSplitVarint64(c.lo,c.hi);}};jspb.BinaryWriter.prototype.writeUint32=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeUnsignedVarint32_(a,b));};jspb.BinaryWriter.prototype.writeUint32String=function(a,b){if(null!=b){var c=parseInt(b,10);goog.asserts.assert(0<=c&&c<jspb.BinaryConstants.TWO_TO_32);this.writeUnsignedVarint32_(a,c);}};jspb.BinaryWriter.prototype.writeUint64=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_64),this.writeUnsignedVarint64_(a,b));};jspb.BinaryWriter.prototype.writeUint64String=function(a,b){if(null!=b){var c=jspb.arith.UInt64.fromString(b);this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT);this.encoder_.writeSplitVarint64(c.lo,c.hi);}};jspb.BinaryWriter.prototype.writeSint32=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeZigzagVarint32_(a,b));};jspb.BinaryWriter.prototype.writeSint64=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeZigzagVarint64_(a,b));};jspb.BinaryWriter.prototype.writeSint64String=function(a,b){null!=b&&(goog.asserts.assert(+b>=-jspb.BinaryConstants.TWO_TO_63&&+b<jspb.BinaryConstants.TWO_TO_63),this.writeZigzagVarint64String_(a,b));};jspb.BinaryWriter.prototype.writeFixed32=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_32),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeUint32(b));};jspb.BinaryWriter.prototype.writeFixed64=function(a,b){null!=b&&(goog.asserts.assert(0<=b&&b<jspb.BinaryConstants.TWO_TO_64),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeUint64(b));};jspb.BinaryWriter.prototype.writeFixed64String=function(a,b){if(null!=b){var c=jspb.arith.UInt64.fromString(b);this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64);this.encoder_.writeSplitFixed64(c.lo,c.hi);}};jspb.BinaryWriter.prototype.writeSfixed32=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeInt32(b));};jspb.BinaryWriter.prototype.writeSfixed64=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_63&&b<jspb.BinaryConstants.TWO_TO_63),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeInt64(b));};jspb.BinaryWriter.prototype.writeSfixed64String=function(a,b){if(null!=b){var c=jspb.arith.Int64.fromString(b);this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64);this.encoder_.writeSplitFixed64(c.lo,c.hi);}};jspb.BinaryWriter.prototype.writeFloat=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED32),this.encoder_.writeFloat(b));};jspb.BinaryWriter.prototype.writeDouble=function(a,b){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeDouble(b));};jspb.BinaryWriter.prototype.writeBool=function(a,b){null!=b&&(goog.asserts.assert(goog.isBoolean(b)||goog.isNumber(b)),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeBool(b));};jspb.BinaryWriter.prototype.writeEnum=function(a,b){null!=b&&(goog.asserts.assert(b>=-jspb.BinaryConstants.TWO_TO_31&&b<jspb.BinaryConstants.TWO_TO_31),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeSignedVarint32(b));};jspb.BinaryWriter.prototype.writeString=function(a,b){if(null!=b){var c=this.beginDelimited_(a);this.encoder_.writeString(b);this.endDelimited_(c);}};jspb.BinaryWriter.prototype.writeBytes=function(a,b){if(null!=b){var c=jspb.utils.byteSourceToUint8Array(b);this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);this.encoder_.writeUnsignedVarint32(c.length);this.appendUint8Array_(c);}};jspb.BinaryWriter.prototype.writeMessage=function(a,b,c){null!=b&&(a=this.beginDelimited_(a),c(b,this),this.endDelimited_(a));};jspb.BinaryWriter.prototype.writeGroup=function(a,b,c){null!=b&&(this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.START_GROUP),c(b,this),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.END_GROUP));};jspb.BinaryWriter.prototype.writeFixedHash64=function(a,b){null!=b&&(goog.asserts.assert(8==b.length),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.FIXED64),this.encoder_.writeFixedHash64(b));};jspb.BinaryWriter.prototype.writeVarintHash64=function(a,b){null!=b&&(goog.asserts.assert(8==b.length),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.VARINT),this.encoder_.writeVarintHash64(b));};jspb.BinaryWriter.prototype.writeRepeatedInt32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeSignedVarint32_(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedInt32String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeInt32String(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedInt64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeSignedVarint64_(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedInt64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeInt64String(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedUint32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeUnsignedVarint32_(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedUint32String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeUint32String(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedUint64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeUnsignedVarint64_(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedUint64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeUint64String(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedSint32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeZigzagVarint32_(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedSint64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeZigzagVarint64_(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedSint64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeZigzagVarint64String_(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedFixed32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeFixed32(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedFixed64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeFixed64(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedFixed64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeFixed64String(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedSfixed32=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeSfixed32(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedSfixed64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeSfixed64(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedSfixed64String=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeSfixed64String(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedFloat=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeFloat(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedDouble=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeDouble(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedBool=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeBool(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedEnum=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeEnum(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedString=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeString(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedBytes=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeBytes(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedMessage=function(a,b,c){if(null!=b)for(var d=0;d<b.length;d++){var e=this.beginDelimited_(a);c(b[d],this);this.endDelimited_(e);}};jspb.BinaryWriter.prototype.writeRepeatedGroup=function(a,b,c){if(null!=b)for(var d=0;d<b.length;d++){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.START_GROUP),c(b[d],this),this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.END_GROUP);}};jspb.BinaryWriter.prototype.writeRepeatedFixedHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeFixedHash64(a,b[c]);}};jspb.BinaryWriter.prototype.writeRepeatedVarintHash64=function(a,b){if(null!=b)for(var c=0;c<b.length;c++){this.writeVarintHash64(a,b[c]);}};jspb.BinaryWriter.prototype.writePackedInt32=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++){this.encoder_.writeSignedVarint32(b[d]);}this.endDelimited_(c);}};jspb.BinaryWriter.prototype.writePackedInt32String=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++){this.encoder_.writeSignedVarint32(parseInt(b[d],10));}this.endDelimited_(c);}};jspb.BinaryWriter.prototype.writePackedInt64=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++){this.encoder_.writeSignedVarint64(b[d]);}this.endDelimited_(c);}};jspb.BinaryWriter.prototype.writePackedInt64String=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++){var e=jspb.arith.Int64.fromString(b[d]);this.encoder_.writeSplitVarint64(e.lo,e.hi);}this.endDelimited_(c);}};jspb.BinaryWriter.prototype.writePackedUint32=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++){this.encoder_.writeUnsignedVarint32(b[d]);}this.endDelimited_(c);}};jspb.BinaryWriter.prototype.writePackedUint32String=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++){this.encoder_.writeUnsignedVarint32(parseInt(b[d],10));}this.endDelimited_(c);}};jspb.BinaryWriter.prototype.writePackedUint64=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++){this.encoder_.writeUnsignedVarint64(b[d]);}this.endDelimited_(c);}};jspb.BinaryWriter.prototype.writePackedUint64String=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++){var e=jspb.arith.UInt64.fromString(b[d]);this.encoder_.writeSplitVarint64(e.lo,e.hi);}this.endDelimited_(c);}};jspb.BinaryWriter.prototype.writePackedSint32=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++){this.encoder_.writeZigzagVarint32(b[d]);}this.endDelimited_(c);}};jspb.BinaryWriter.prototype.writePackedSint64=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++){this.encoder_.writeZigzagVarint64(b[d]);}this.endDelimited_(c);}};jspb.BinaryWriter.prototype.writePackedSint64String=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++){this.encoder_.writeZigzagVarint64(parseInt(b[d],10));}this.endDelimited_(c);}};jspb.BinaryWriter.prototype.writePackedFixed32=function(a,b){if(null!=b&&b.length){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);this.encoder_.writeUnsignedVarint32(4*b.length);for(var c=0;c<b.length;c++){this.encoder_.writeUint32(b[c]);}}};jspb.BinaryWriter.prototype.writePackedFixed64=function(a,b){if(null!=b&&b.length){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);this.encoder_.writeUnsignedVarint32(8*b.length);for(var c=0;c<b.length;c++){this.encoder_.writeUint64(b[c]);}}};jspb.BinaryWriter.prototype.writePackedFixed64String=function(a,b){if(null!=b&&b.length){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);this.encoder_.writeUnsignedVarint32(8*b.length);for(var c=0;c<b.length;c++){var d=jspb.arith.UInt64.fromString(b[c]);this.encoder_.writeSplitFixed64(d.lo,d.hi);}}};jspb.BinaryWriter.prototype.writePackedSfixed32=function(a,b){if(null!=b&&b.length){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);this.encoder_.writeUnsignedVarint32(4*b.length);for(var c=0;c<b.length;c++){this.encoder_.writeInt32(b[c]);}}};jspb.BinaryWriter.prototype.writePackedSfixed64=function(a,b){if(null!=b&&b.length){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);this.encoder_.writeUnsignedVarint32(8*b.length);for(var c=0;c<b.length;c++){this.encoder_.writeInt64(b[c]);}}};jspb.BinaryWriter.prototype.writePackedSfixed64String=function(a,b){if(null!=b&&b.length){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);this.encoder_.writeUnsignedVarint32(8*b.length);for(var c=0;c<b.length;c++){this.encoder_.writeInt64String(b[c]);}}};jspb.BinaryWriter.prototype.writePackedFloat=function(a,b){if(null!=b&&b.length){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);this.encoder_.writeUnsignedVarint32(4*b.length);for(var c=0;c<b.length;c++){this.encoder_.writeFloat(b[c]);}}};jspb.BinaryWriter.prototype.writePackedDouble=function(a,b){if(null!=b&&b.length){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);this.encoder_.writeUnsignedVarint32(8*b.length);for(var c=0;c<b.length;c++){this.encoder_.writeDouble(b[c]);}}};jspb.BinaryWriter.prototype.writePackedBool=function(a,b){if(null!=b&&b.length){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);this.encoder_.writeUnsignedVarint32(b.length);for(var c=0;c<b.length;c++){this.encoder_.writeBool(b[c]);}}};jspb.BinaryWriter.prototype.writePackedEnum=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++){this.encoder_.writeEnum(b[d]);}this.endDelimited_(c);}};jspb.BinaryWriter.prototype.writePackedFixedHash64=function(a,b){if(null!=b&&b.length){this.writeFieldHeader_(a,jspb.BinaryConstants.WireType.DELIMITED);this.encoder_.writeUnsignedVarint32(8*b.length);for(var c=0;c<b.length;c++){this.encoder_.writeFixedHash64(b[c]);}}};jspb.BinaryWriter.prototype.writePackedVarintHash64=function(a,b){if(null!=b&&b.length){for(var c=this.beginDelimited_(a),d=0;d<b.length;d++){this.encoder_.writeVarintHash64(b[d]);}this.endDelimited_(c);}};jspb.BinaryIterator=function(a,b,c){this.elements_=this.nextMethod_=this.decoder_=null;this.cursor_=0;this.nextValue_=null;this.atEnd_=!0;this.init_(a,b,c);};jspb.BinaryIterator.prototype.init_=function(a,b,c){a&&b&&(this.decoder_=a,this.nextMethod_=b);this.elements_=c||null;this.cursor_=0;this.nextValue_=null;this.atEnd_=!this.decoder_&&!this.elements_;this.next();};jspb.BinaryIterator.instanceCache_=[];jspb.BinaryIterator.alloc=function(a,b,c){if(jspb.BinaryIterator.instanceCache_.length){var d=jspb.BinaryIterator.instanceCache_.pop();d.init_(a,b,c);return d;}return new jspb.BinaryIterator(a,b,c);};jspb.BinaryIterator.prototype.free=function(){this.clear();100>jspb.BinaryIterator.instanceCache_.length&&jspb.BinaryIterator.instanceCache_.push(this);};jspb.BinaryIterator.prototype.clear=function(){this.decoder_&&this.decoder_.free();this.elements_=this.nextMethod_=this.decoder_=null;this.cursor_=0;this.nextValue_=null;this.atEnd_=!0;};jspb.BinaryIterator.prototype.get=function(){return this.nextValue_;};jspb.BinaryIterator.prototype.atEnd=function(){return this.atEnd_;};jspb.BinaryIterator.prototype.next=function(){var a=this.nextValue_;this.decoder_?this.decoder_.atEnd()?(this.nextValue_=null,this.atEnd_=!0):this.nextValue_=this.nextMethod_.call(this.decoder_):this.elements_&&(this.cursor_==this.elements_.length?(this.nextValue_=null,this.atEnd_=!0):this.nextValue_=this.elements_[this.cursor_++]);return a;};jspb.BinaryDecoder=function(a,b,c){this.bytes_=null;this.tempHigh_=this.tempLow_=this.cursor_=this.end_=this.start_=0;this.error_=!1;a&&this.setBlock(a,b,c);};jspb.BinaryDecoder.instanceCache_=[];jspb.BinaryDecoder.alloc=function(a,b,c){if(jspb.BinaryDecoder.instanceCache_.length){var d=jspb.BinaryDecoder.instanceCache_.pop();a&&d.setBlock(a,b,c);return d;}return new jspb.BinaryDecoder(a,b,c);};jspb.BinaryDecoder.prototype.free=function(){this.clear();100>jspb.BinaryDecoder.instanceCache_.length&&jspb.BinaryDecoder.instanceCache_.push(this);};jspb.BinaryDecoder.prototype.clone=function(){return jspb.BinaryDecoder.alloc(this.bytes_,this.start_,this.end_-this.start_);};jspb.BinaryDecoder.prototype.clear=function(){this.bytes_=null;this.cursor_=this.end_=this.start_=0;this.error_=!1;};jspb.BinaryDecoder.prototype.getBuffer=function(){return this.bytes_;};jspb.BinaryDecoder.prototype.setBlock=function(a,b,c){this.bytes_=jspb.utils.byteSourceToUint8Array(a);this.start_=goog.isDef(b)?b:0;this.end_=goog.isDef(c)?this.start_+c:this.bytes_.length;this.cursor_=this.start_;};jspb.BinaryDecoder.prototype.getEnd=function(){return this.end_;};jspb.BinaryDecoder.prototype.setEnd=function(a){this.end_=a;};jspb.BinaryDecoder.prototype.reset=function(){this.cursor_=this.start_;};jspb.BinaryDecoder.prototype.getCursor=function(){return this.cursor_;};jspb.BinaryDecoder.prototype.setCursor=function(a){this.cursor_=a;};jspb.BinaryDecoder.prototype.advance=function(a){this.cursor_+=a;goog.asserts.assert(this.cursor_<=this.end_);};jspb.BinaryDecoder.prototype.atEnd=function(){return this.cursor_==this.end_;};jspb.BinaryDecoder.prototype.pastEnd=function(){return this.cursor_>this.end_;};jspb.BinaryDecoder.prototype.getError=function(){return this.error_||0>this.cursor_||this.cursor_>this.end_;};jspb.BinaryDecoder.prototype.readSplitVarint64_=function(){for(var a,b=0,c,d=0;4>d;d++){if(a=this.bytes_[this.cursor_++],b|=(a&127)<<7*d,128>a){this.tempLow_=b>>>0;this.tempHigh_=0;return;}}a=this.bytes_[this.cursor_++];b|=(a&127)<<28;c=0|(a&127)>>4;if(128>a)this.tempLow_=b>>>0,this.tempHigh_=c>>>0;else{for(d=0;5>d;d++){if(a=this.bytes_[this.cursor_++],c|=(a&127)<<7*d+3,128>a){this.tempLow_=b>>>0;this.tempHigh_=c>>>0;return;}}goog.asserts.fail("Failed to read varint, encoding is invalid.");this.error_=!0;}};jspb.BinaryDecoder.prototype.skipVarint=function(){for(;this.bytes_[this.cursor_]&128;){this.cursor_++;}this.cursor_++;};jspb.BinaryDecoder.prototype.unskipVarint=function(a){for(;128<a;){this.cursor_--,a>>>=7;}this.cursor_--;};jspb.BinaryDecoder.prototype.readUnsignedVarint32=function(){var a,b=this.bytes_;a=b[this.cursor_+0];var c=a&127;if(128>a)return this.cursor_+=1,goog.asserts.assert(this.cursor_<=this.end_),c;a=b[this.cursor_+1];c|=(a&127)<<7;if(128>a)return this.cursor_+=2,goog.asserts.assert(this.cursor_<=this.end_),c;a=b[this.cursor_+2];c|=(a&127)<<14;if(128>a)return this.cursor_+=3,goog.asserts.assert(this.cursor_<=this.end_),c;a=b[this.cursor_+3];c|=(a&127)<<21;if(128>a)return this.cursor_+=4,goog.asserts.assert(this.cursor_<=this.end_),c;a=b[this.cursor_+4];c|=(a&15)<<28;if(128>a)return this.cursor_+=5,goog.asserts.assert(this.cursor_<=this.end_),c>>>0;this.cursor_+=5;128<=b[this.cursor_++]&&128<=b[this.cursor_++]&&128<=b[this.cursor_++]&&128<=b[this.cursor_++]&&128<=b[this.cursor_++]&&goog.asserts.assert(!1);goog.asserts.assert(this.cursor_<=this.end_);return c;};jspb.BinaryDecoder.prototype.readSignedVarint32=jspb.BinaryDecoder.prototype.readUnsignedVarint32;jspb.BinaryDecoder.prototype.readUnsignedVarint32String=function(){return this.readUnsignedVarint32().toString();};jspb.BinaryDecoder.prototype.readSignedVarint32String=function(){return this.readSignedVarint32().toString();};jspb.BinaryDecoder.prototype.readZigzagVarint32=function(){var a=this.readUnsignedVarint32();return a>>>1^-(a&1);};jspb.BinaryDecoder.prototype.readUnsignedVarint64=function(){this.readSplitVarint64_();return jspb.utils.joinUint64(this.tempLow_,this.tempHigh_);};jspb.BinaryDecoder.prototype.readUnsignedVarint64String=function(){this.readSplitVarint64_();return jspb.utils.joinUnsignedDecimalString(this.tempLow_,this.tempHigh_);};jspb.BinaryDecoder.prototype.readSignedVarint64=function(){this.readSplitVarint64_();return jspb.utils.joinInt64(this.tempLow_,this.tempHigh_);};jspb.BinaryDecoder.prototype.readSignedVarint64String=function(){this.readSplitVarint64_();return jspb.utils.joinSignedDecimalString(this.tempLow_,this.tempHigh_);};jspb.BinaryDecoder.prototype.readZigzagVarint64=function(){this.readSplitVarint64_();return jspb.utils.joinZigzag64(this.tempLow_,this.tempHigh_);};jspb.BinaryDecoder.prototype.readZigzagVarint64String=function(){return this.readZigzagVarint64().toString();};jspb.BinaryDecoder.prototype.readUint8=function(){var a=this.bytes_[this.cursor_+0];this.cursor_+=1;goog.asserts.assert(this.cursor_<=this.end_);return a;};jspb.BinaryDecoder.prototype.readUint16=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1];this.cursor_+=2;goog.asserts.assert(this.cursor_<=this.end_);return a<<0|b<<8;};jspb.BinaryDecoder.prototype.readUint32=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1],c=this.bytes_[this.cursor_+2],d=this.bytes_[this.cursor_+3];this.cursor_+=4;goog.asserts.assert(this.cursor_<=this.end_);return(a<<0|b<<8|c<<16|d<<24)>>>0;};jspb.BinaryDecoder.prototype.readUint64=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinUint64(a,b);};jspb.BinaryDecoder.prototype.readUint64String=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinUnsignedDecimalString(a,b);};jspb.BinaryDecoder.prototype.readInt8=function(){var a=this.bytes_[this.cursor_+0];this.cursor_+=1;goog.asserts.assert(this.cursor_<=this.end_);return a<<24>>24;};jspb.BinaryDecoder.prototype.readInt16=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1];this.cursor_+=2;goog.asserts.assert(this.cursor_<=this.end_);return(a<<0|b<<8)<<16>>16;};jspb.BinaryDecoder.prototype.readInt32=function(){var a=this.bytes_[this.cursor_+0],b=this.bytes_[this.cursor_+1],c=this.bytes_[this.cursor_+2],d=this.bytes_[this.cursor_+3];this.cursor_+=4;goog.asserts.assert(this.cursor_<=this.end_);return a<<0|b<<8|c<<16|d<<24;};jspb.BinaryDecoder.prototype.readInt64=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinInt64(a,b);};jspb.BinaryDecoder.prototype.readInt64String=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinSignedDecimalString(a,b);};jspb.BinaryDecoder.prototype.readFloat=function(){var a=this.readUint32();return jspb.utils.joinFloat32(a,0);};jspb.BinaryDecoder.prototype.readDouble=function(){var a=this.readUint32(),b=this.readUint32();return jspb.utils.joinFloat64(a,b);};jspb.BinaryDecoder.prototype.readBool=function(){return!!this.bytes_[this.cursor_++];};jspb.BinaryDecoder.prototype.readEnum=function(){return this.readSignedVarint32();};jspb.BinaryDecoder.prototype.readString=function(a){var b=this.bytes_,c=this.cursor_;a=c+a;for(var d=[],e="";c<a;){var f=b[c++];if(128>f)d.push(f);else if(192>f)continue;else if(224>f){var g=b[c++];d.push((f&31)<<6|g&63);}else if(240>f){var g=b[c++],h=b[c++];d.push((f&15)<<12|(g&63)<<6|h&63);}else if(248>f){var g=b[c++],h=b[c++],k=b[c++],f=(f&7)<<18|(g&63)<<12|(h&63)<<6|k&63,f=f-65536;d.push((f>>10&1023)+55296,(f&1023)+56320);}8192<=d.length&&(e+=String.fromCharCode.apply(null,d),d.length=0);}e+=goog.crypt.byteArrayToString(d);this.cursor_=c;return e;};jspb.BinaryDecoder.prototype.readStringWithLength=function(){var a=this.readUnsignedVarint32();return this.readString(a);};jspb.BinaryDecoder.prototype.readBytes=function(a){if(0>a||this.cursor_+a>this.bytes_.length)return this.error_=!0,goog.asserts.fail("Invalid byte length!"),new Uint8Array(0);var b=this.bytes_.subarray(this.cursor_,this.cursor_+a);this.cursor_+=a;goog.asserts.assert(this.cursor_<=this.end_);return b;};jspb.BinaryDecoder.prototype.readVarintHash64=function(){this.readSplitVarint64_();return jspb.utils.joinHash64(this.tempLow_,this.tempHigh_);};jspb.BinaryDecoder.prototype.readFixedHash64=function(){var a=this.bytes_,b=this.cursor_,c=a[b+0],d=a[b+1],e=a[b+2],f=a[b+3],g=a[b+4],h=a[b+5],k=a[b+6],a=a[b+7];this.cursor_+=8;return String.fromCharCode(c,d,e,f,g,h,k,a);};jspb.BinaryReader=function(a,b,c){this.decoder_=jspb.BinaryDecoder.alloc(a,b,c);this.fieldCursor_=this.decoder_.getCursor();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;this.error_=!1;this.readCallbacks_=null;};jspb.BinaryReader.instanceCache_=[];jspb.BinaryReader.alloc=function(a,b,c){if(jspb.BinaryReader.instanceCache_.length){var d=jspb.BinaryReader.instanceCache_.pop();a&&d.decoder_.setBlock(a,b,c);return d;}return new jspb.BinaryReader(a,b,c);};jspb.BinaryReader.prototype.alloc=jspb.BinaryReader.alloc;jspb.BinaryReader.prototype.free=function(){this.decoder_.clear();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;this.error_=!1;this.readCallbacks_=null;100>jspb.BinaryReader.instanceCache_.length&&jspb.BinaryReader.instanceCache_.push(this);};jspb.BinaryReader.prototype.getFieldCursor=function(){return this.fieldCursor_;};jspb.BinaryReader.prototype.getCursor=function(){return this.decoder_.getCursor();};jspb.BinaryReader.prototype.getBuffer=function(){return this.decoder_.getBuffer();};jspb.BinaryReader.prototype.getFieldNumber=function(){return this.nextField_;};jspb.BinaryReader.prototype.getWireType=function(){return this.nextWireType_;};jspb.BinaryReader.prototype.isEndGroup=function(){return this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP;};jspb.BinaryReader.prototype.getError=function(){return this.error_||this.decoder_.getError();};jspb.BinaryReader.prototype.setBlock=function(a,b,c){this.decoder_.setBlock(a,b,c);this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;};jspb.BinaryReader.prototype.reset=function(){this.decoder_.reset();this.nextField_=jspb.BinaryConstants.INVALID_FIELD_NUMBER;this.nextWireType_=jspb.BinaryConstants.WireType.INVALID;};jspb.BinaryReader.prototype.advance=function(a){this.decoder_.advance(a);};jspb.BinaryReader.prototype.nextField=function(){if(this.decoder_.atEnd())return!1;if(this.getError())return goog.asserts.fail("Decoder hit an error"),!1;this.fieldCursor_=this.decoder_.getCursor();var a=this.decoder_.readUnsignedVarint32(),b=a>>>3,a=a&7;if(a!=jspb.BinaryConstants.WireType.VARINT&&a!=jspb.BinaryConstants.WireType.FIXED32&&a!=jspb.BinaryConstants.WireType.FIXED64&&a!=jspb.BinaryConstants.WireType.DELIMITED&&a!=jspb.BinaryConstants.WireType.START_GROUP&&a!=jspb.BinaryConstants.WireType.END_GROUP)return goog.asserts.fail("Invalid wire type"),this.error_=!0,!1;this.nextField_=b;this.nextWireType_=a;return!0;};jspb.BinaryReader.prototype.unskipHeader=function(){this.decoder_.unskipVarint(this.nextField_<<3|this.nextWireType_);};jspb.BinaryReader.prototype.skipMatchingFields=function(){var a=this.nextField_;for(this.unskipHeader();this.nextField()&&this.getFieldNumber()==a;){this.skipField();}this.decoder_.atEnd()||this.unskipHeader();};jspb.BinaryReader.prototype.skipVarintField=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.VARINT?(goog.asserts.fail("Invalid wire type for skipVarintField"),this.skipField()):this.decoder_.skipVarint();};jspb.BinaryReader.prototype.skipDelimitedField=function(){if(this.nextWireType_!=jspb.BinaryConstants.WireType.DELIMITED)goog.asserts.fail("Invalid wire type for skipDelimitedField"),this.skipField();else{var a=this.decoder_.readUnsignedVarint32();this.decoder_.advance(a);}};jspb.BinaryReader.prototype.skipFixed32Field=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.FIXED32?(goog.asserts.fail("Invalid wire type for skipFixed32Field"),this.skipField()):this.decoder_.advance(4);};jspb.BinaryReader.prototype.skipFixed64Field=function(){this.nextWireType_!=jspb.BinaryConstants.WireType.FIXED64?(goog.asserts.fail("Invalid wire type for skipFixed64Field"),this.skipField()):this.decoder_.advance(8);};jspb.BinaryReader.prototype.skipGroup=function(){var a=[this.nextField_];do{if(!this.nextField()){goog.asserts.fail("Unmatched start-group tag: stream EOF");this.error_=!0;break;}if(this.nextWireType_==jspb.BinaryConstants.WireType.START_GROUP)a.push(this.nextField_);else if(this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP&&this.nextField_!=a.pop()){goog.asserts.fail("Unmatched end-group tag");this.error_=!0;break;}}while(0<a.length);};jspb.BinaryReader.prototype.skipField=function(){switch(this.nextWireType_){case jspb.BinaryConstants.WireType.VARINT:this.skipVarintField();break;case jspb.BinaryConstants.WireType.FIXED64:this.skipFixed64Field();break;case jspb.BinaryConstants.WireType.DELIMITED:this.skipDelimitedField();break;case jspb.BinaryConstants.WireType.FIXED32:this.skipFixed32Field();break;case jspb.BinaryConstants.WireType.START_GROUP:this.skipGroup();break;default:goog.asserts.fail("Invalid wire encoding for field.");}};jspb.BinaryReader.prototype.registerReadCallback=function(a,b){goog.isNull(this.readCallbacks_)&&(this.readCallbacks_={});goog.asserts.assert(!this.readCallbacks_[a]);this.readCallbacks_[a]=b;};jspb.BinaryReader.prototype.runReadCallback=function(a){goog.asserts.assert(!goog.isNull(this.readCallbacks_));a=this.readCallbacks_[a];goog.asserts.assert(a);return a(this);};jspb.BinaryReader.prototype.readAny=function(a){this.nextWireType_=jspb.BinaryConstants.FieldTypeToWireType(a);var b=jspb.BinaryConstants.FieldType;switch(a){case b.DOUBLE:return this.readDouble();case b.FLOAT:return this.readFloat();case b.INT64:return this.readInt64();case b.UINT64:return this.readUint64();case b.INT32:return this.readInt32();case b.FIXED64:return this.readFixed64();case b.FIXED32:return this.readFixed32();case b.BOOL:return this.readBool();case b.STRING:return this.readString();case b.GROUP:goog.asserts.fail("Group field type not supported in readAny()");case b.MESSAGE:goog.asserts.fail("Message field type not supported in readAny()");case b.BYTES:return this.readBytes();case b.UINT32:return this.readUint32();case b.ENUM:return this.readEnum();case b.SFIXED32:return this.readSfixed32();case b.SFIXED64:return this.readSfixed64();case b.SINT32:return this.readSint32();case b.SINT64:return this.readSint64();case b.FHASH64:return this.readFixedHash64();case b.VHASH64:return this.readVarintHash64();default:goog.asserts.fail("Invalid field type in readAny()");}return 0;};jspb.BinaryReader.prototype.readMessage=function(a,b){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var c=this.decoder_.getEnd(),d=this.decoder_.readUnsignedVarint32(),d=this.decoder_.getCursor()+d;this.decoder_.setEnd(d);b(a,this);this.decoder_.setCursor(d);this.decoder_.setEnd(c);};jspb.BinaryReader.prototype.readGroup=function(a,b,c){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.START_GROUP);goog.asserts.assert(this.nextField_==a);c(b,this);this.error_||this.nextWireType_==jspb.BinaryConstants.WireType.END_GROUP||(goog.asserts.fail("Group submessage did not end with an END_GROUP tag"),this.error_=!0);};jspb.BinaryReader.prototype.getFieldDecoder=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32(),b=this.decoder_.getCursor(),c=b+a,a=jspb.BinaryDecoder.alloc(this.decoder_.getBuffer(),b,a);this.decoder_.setCursor(c);return a;};jspb.BinaryReader.prototype.readInt32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint32();};jspb.BinaryReader.prototype.readInt32String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint32String();};jspb.BinaryReader.prototype.readInt64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64();};jspb.BinaryReader.prototype.readInt64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64String();};jspb.BinaryReader.prototype.readUint32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint32();};jspb.BinaryReader.prototype.readUint32String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint32String();};jspb.BinaryReader.prototype.readUint64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint64();};jspb.BinaryReader.prototype.readUint64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readUnsignedVarint64String();};jspb.BinaryReader.prototype.readSint32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint32();};jspb.BinaryReader.prototype.readSint64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint64();};jspb.BinaryReader.prototype.readSint64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readZigzagVarint64String();};jspb.BinaryReader.prototype.readFixed32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readUint32();};jspb.BinaryReader.prototype.readFixed64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readUint64();};jspb.BinaryReader.prototype.readFixed64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readUint64String();};jspb.BinaryReader.prototype.readSfixed32=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readInt32();};jspb.BinaryReader.prototype.readSfixed32String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readInt32().toString();};jspb.BinaryReader.prototype.readSfixed64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readInt64();};jspb.BinaryReader.prototype.readSfixed64String=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readInt64String();};jspb.BinaryReader.prototype.readFloat=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED32);return this.decoder_.readFloat();};jspb.BinaryReader.prototype.readDouble=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readDouble();};jspb.BinaryReader.prototype.readBool=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return!!this.decoder_.readUnsignedVarint32();};jspb.BinaryReader.prototype.readEnum=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readSignedVarint64();};jspb.BinaryReader.prototype.readString=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32();return this.decoder_.readString(a);};jspb.BinaryReader.prototype.readBytes=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);var a=this.decoder_.readUnsignedVarint32();return this.decoder_.readBytes(a);};jspb.BinaryReader.prototype.readVarintHash64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.VARINT);return this.decoder_.readVarintHash64();};jspb.BinaryReader.prototype.readFixedHash64=function(){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.FIXED64);return this.decoder_.readFixedHash64();};jspb.BinaryReader.prototype.readPackedField_=function(a){goog.asserts.assert(this.nextWireType_==jspb.BinaryConstants.WireType.DELIMITED);for(var b=this.decoder_.readUnsignedVarint32(),b=this.decoder_.getCursor()+b,c=[];this.decoder_.getCursor()<b;){c.push(a.call(this.decoder_));}return c;};jspb.BinaryReader.prototype.readPackedInt32=function(){return this.readPackedField_(this.decoder_.readSignedVarint32);};jspb.BinaryReader.prototype.readPackedInt32String=function(){return this.readPackedField_(this.decoder_.readSignedVarint32String);};jspb.BinaryReader.prototype.readPackedInt64=function(){return this.readPackedField_(this.decoder_.readSignedVarint64);};jspb.BinaryReader.prototype.readPackedInt64String=function(){return this.readPackedField_(this.decoder_.readSignedVarint64String);};jspb.BinaryReader.prototype.readPackedUint32=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint32);};jspb.BinaryReader.prototype.readPackedUint32String=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint32String);};jspb.BinaryReader.prototype.readPackedUint64=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint64);};jspb.BinaryReader.prototype.readPackedUint64String=function(){return this.readPackedField_(this.decoder_.readUnsignedVarint64String);};jspb.BinaryReader.prototype.readPackedSint32=function(){return this.readPackedField_(this.decoder_.readZigzagVarint32);};jspb.BinaryReader.prototype.readPackedSint64=function(){return this.readPackedField_(this.decoder_.readZigzagVarint64);};jspb.BinaryReader.prototype.readPackedSint64String=function(){return this.readPackedField_(this.decoder_.readZigzagVarint64String);};jspb.BinaryReader.prototype.readPackedFixed32=function(){return this.readPackedField_(this.decoder_.readUint32);};jspb.BinaryReader.prototype.readPackedFixed64=function(){return this.readPackedField_(this.decoder_.readUint64);};jspb.BinaryReader.prototype.readPackedFixed64String=function(){return this.readPackedField_(this.decoder_.readUint64String);};jspb.BinaryReader.prototype.readPackedSfixed32=function(){return this.readPackedField_(this.decoder_.readInt32);};jspb.BinaryReader.prototype.readPackedSfixed64=function(){return this.readPackedField_(this.decoder_.readInt64);};jspb.BinaryReader.prototype.readPackedSfixed64String=function(){return this.readPackedField_(this.decoder_.readInt64String);};jspb.BinaryReader.prototype.readPackedFloat=function(){return this.readPackedField_(this.decoder_.readFloat);};jspb.BinaryReader.prototype.readPackedDouble=function(){return this.readPackedField_(this.decoder_.readDouble);};jspb.BinaryReader.prototype.readPackedBool=function(){return this.readPackedField_(this.decoder_.readBool);};jspb.BinaryReader.prototype.readPackedEnum=function(){return this.readPackedField_(this.decoder_.readEnum);};jspb.BinaryReader.prototype.readPackedVarintHash64=function(){return this.readPackedField_(this.decoder_.readVarintHash64);};jspb.BinaryReader.prototype.readPackedFixedHash64=function(){return this.readPackedField_(this.decoder_.readFixedHash64);};jspb.Export={};var Map$1=jspb.Map;var Message=jspb.Message;var BinaryReader=jspb.BinaryReader;var BinaryWriter=jspb.BinaryWriter;var ExtensionFieldInfo=jspb.ExtensionFieldInfo;var ExtensionFieldBinaryInfo=jspb.ExtensionFieldBinaryInfo;var exportSymbol=goog.exportSymbol;var inherits=goog.inherits;var object={extend:goog.object.extend};var typeOf=goog.typeOf;var googleProtobuf={Map:Map$1,Message:Message,BinaryReader:BinaryReader,BinaryWriter:BinaryWriter,ExtensionFieldInfo:ExtensionFieldInfo,ExtensionFieldBinaryInfo:ExtensionFieldBinaryInfo,exportSymbol:exportSymbol,inherits:inherits,object:object,typeOf:typeOf};var blockchain_pb=createCommonjsModule(function(module,exports){/**
	   * @fileoverview
	   * @enhanceable
	   * @suppress {messageConventions} JS Compiler reports an error if a variable or
	   *     field starts with 'MSG_' and isn't a translatable message.
	   * @public
	   */ // GENERATED CODE -- DO NOT EDIT!
var goog=googleProtobuf;var global=Function('return this')();goog.exportSymbol('proto.types.ABI',null,global);goog.exportSymbol('proto.types.AccountProof',null,global);goog.exportSymbol('proto.types.Block',null,global);goog.exportSymbol('proto.types.BlockBody',null,global);goog.exportSymbol('proto.types.BlockHeader',null,global);goog.exportSymbol('proto.types.ContractVarProof',null,global);goog.exportSymbol('proto.types.Event',null,global);goog.exportSymbol('proto.types.FilterInfo',null,global);goog.exportSymbol('proto.types.FnArgument',null,global);goog.exportSymbol('proto.types.Function',null,global);goog.exportSymbol('proto.types.Query',null,global);goog.exportSymbol('proto.types.Receipt',null,global);goog.exportSymbol('proto.types.State',null,global);goog.exportSymbol('proto.types.StateQuery',null,global);goog.exportSymbol('proto.types.StateQueryProof',null,global);goog.exportSymbol('proto.types.StateVar',null,global);goog.exportSymbol('proto.types.Tx',null,global);goog.exportSymbol('proto.types.TxBody',null,global);goog.exportSymbol('proto.types.TxIdx',null,global);goog.exportSymbol('proto.types.TxInBlock',null,global);goog.exportSymbol('proto.types.TxList',null,global);goog.exportSymbol('proto.types.TxType',null,global);/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.Block=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.Block,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.Block.prototype.toObject=function(opt_includeInstance){return proto.types.Block.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.Block} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.Block.toObject=function(includeInstance,msg){var f,obj={hash:msg.getHash_asB64(),header:(f=msg.getHeader())&&proto.types.BlockHeader.toObject(includeInstance,f),body:(f=msg.getBody())&&proto.types.BlockBody.toObject(includeInstance,f)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.Block}
	   */proto.types.Block.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.Block();return proto.types.Block.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.Block} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.Block}
	   */proto.types.Block.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setHash(value);break;case 2:var value=new proto.types.BlockHeader();reader.readMessage(value,proto.types.BlockHeader.deserializeBinaryFromReader);msg.setHeader(value);break;case 3:var value=new proto.types.BlockBody();reader.readMessage(value,proto.types.BlockBody.deserializeBinaryFromReader);msg.setBody(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.Block.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.Block.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.Block} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.Block.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getHash_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getHeader();if(f!=null){writer.writeMessage(2,f,proto.types.BlockHeader.serializeBinaryToWriter);}f=message.getBody();if(f!=null){writer.writeMessage(3,f,proto.types.BlockBody.serializeBinaryToWriter);}};/**
	   * optional bytes hash = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Block.prototype.getHash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes hash = 1;
	   * This is a type-conversion wrapper around `getHash()`
	   * @return {string}
	   */proto.types.Block.prototype.getHash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getHash()));};/**
	   * optional bytes hash = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getHash()`
	   * @return {!Uint8Array}
	   */proto.types.Block.prototype.getHash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getHash()));};/** @param {!(string|Uint8Array)} value */proto.types.Block.prototype.setHash=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional BlockHeader header = 2;
	   * @return {?proto.types.BlockHeader}
	   */proto.types.Block.prototype.getHeader=function(){return(/** @type{?proto.types.BlockHeader} */googleProtobuf.Message.getWrapperField(this,proto.types.BlockHeader,2));};/** @param {?proto.types.BlockHeader|undefined} value */proto.types.Block.prototype.setHeader=function(value){googleProtobuf.Message.setWrapperField(this,2,value);};proto.types.Block.prototype.clearHeader=function(){this.setHeader(undefined);};/**
	   * Returns whether this field is set.
	   * @return {!boolean}
	   */proto.types.Block.prototype.hasHeader=function(){return googleProtobuf.Message.getField(this,2)!=null;};/**
	   * optional BlockBody body = 3;
	   * @return {?proto.types.BlockBody}
	   */proto.types.Block.prototype.getBody=function(){return(/** @type{?proto.types.BlockBody} */googleProtobuf.Message.getWrapperField(this,proto.types.BlockBody,3));};/** @param {?proto.types.BlockBody|undefined} value */proto.types.Block.prototype.setBody=function(value){googleProtobuf.Message.setWrapperField(this,3,value);};proto.types.Block.prototype.clearBody=function(){this.setBody(undefined);};/**
	   * Returns whether this field is set.
	   * @return {!boolean}
	   */proto.types.Block.prototype.hasBody=function(){return googleProtobuf.Message.getField(this,3)!=null;};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.BlockHeader=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.BlockHeader,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.BlockHeader.prototype.toObject=function(opt_includeInstance){return proto.types.BlockHeader.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.BlockHeader} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.BlockHeader.toObject=function(includeInstance,msg){var obj={chainid:msg.getChainid_asB64(),prevblockhash:msg.getPrevblockhash_asB64(),blockno:googleProtobuf.Message.getFieldWithDefault(msg,3,0),timestamp:googleProtobuf.Message.getFieldWithDefault(msg,4,0),blocksroothash:msg.getBlocksroothash_asB64(),txsroothash:msg.getTxsroothash_asB64(),receiptsroothash:msg.getReceiptsroothash_asB64(),confirms:googleProtobuf.Message.getFieldWithDefault(msg,8,0),pubkey:msg.getPubkey_asB64(),coinbaseaccount:msg.getCoinbaseaccount_asB64(),sign:msg.getSign_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.BlockHeader}
	   */proto.types.BlockHeader.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.BlockHeader();return proto.types.BlockHeader.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.BlockHeader} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.BlockHeader}
	   */proto.types.BlockHeader.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setChainid(value);break;case 2:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setPrevblockhash(value);break;case 3:var value=/** @type {number} */reader.readUint64();msg.setBlockno(value);break;case 4:var value=/** @type {number} */reader.readInt64();msg.setTimestamp(value);break;case 5:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setBlocksroothash(value);break;case 6:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setTxsroothash(value);break;case 7:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setReceiptsroothash(value);break;case 8:var value=/** @type {number} */reader.readUint64();msg.setConfirms(value);break;case 9:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setPubkey(value);break;case 10:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setCoinbaseaccount(value);break;case 11:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setSign(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.BlockHeader.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.BlockHeader.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.BlockHeader} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.BlockHeader.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getChainid_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getPrevblockhash_asU8();if(f.length>0){writer.writeBytes(2,f);}f=message.getBlockno();if(f!==0){writer.writeUint64(3,f);}f=message.getTimestamp();if(f!==0){writer.writeInt64(4,f);}f=message.getBlocksroothash_asU8();if(f.length>0){writer.writeBytes(5,f);}f=message.getTxsroothash_asU8();if(f.length>0){writer.writeBytes(6,f);}f=message.getReceiptsroothash_asU8();if(f.length>0){writer.writeBytes(7,f);}f=message.getConfirms();if(f!==0){writer.writeUint64(8,f);}f=message.getPubkey_asU8();if(f.length>0){writer.writeBytes(9,f);}f=message.getCoinbaseaccount_asU8();if(f.length>0){writer.writeBytes(10,f);}f=message.getSign_asU8();if(f.length>0){writer.writeBytes(11,f);}};/**
	   * optional bytes chainID = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.BlockHeader.prototype.getChainid=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes chainID = 1;
	   * This is a type-conversion wrapper around `getChainid()`
	   * @return {string}
	   */proto.types.BlockHeader.prototype.getChainid_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getChainid()));};/**
	   * optional bytes chainID = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getChainid()`
	   * @return {!Uint8Array}
	   */proto.types.BlockHeader.prototype.getChainid_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getChainid()));};/** @param {!(string|Uint8Array)} value */proto.types.BlockHeader.prototype.setChainid=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional bytes prevBlockHash = 2;
	   * @return {!(string|Uint8Array)}
	   */proto.types.BlockHeader.prototype.getPrevblockhash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,2,""));};/**
	   * optional bytes prevBlockHash = 2;
	   * This is a type-conversion wrapper around `getPrevblockhash()`
	   * @return {string}
	   */proto.types.BlockHeader.prototype.getPrevblockhash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getPrevblockhash()));};/**
	   * optional bytes prevBlockHash = 2;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getPrevblockhash()`
	   * @return {!Uint8Array}
	   */proto.types.BlockHeader.prototype.getPrevblockhash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getPrevblockhash()));};/** @param {!(string|Uint8Array)} value */proto.types.BlockHeader.prototype.setPrevblockhash=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional uint64 blockNo = 3;
	   * @return {number}
	   */proto.types.BlockHeader.prototype.getBlockno=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,3,0));};/** @param {number} value */proto.types.BlockHeader.prototype.setBlockno=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * optional int64 timestamp = 4;
	   * @return {number}
	   */proto.types.BlockHeader.prototype.getTimestamp=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,4,0));};/** @param {number} value */proto.types.BlockHeader.prototype.setTimestamp=function(value){googleProtobuf.Message.setField(this,4,value);};/**
	   * optional bytes blocksRootHash = 5;
	   * @return {!(string|Uint8Array)}
	   */proto.types.BlockHeader.prototype.getBlocksroothash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,5,""));};/**
	   * optional bytes blocksRootHash = 5;
	   * This is a type-conversion wrapper around `getBlocksroothash()`
	   * @return {string}
	   */proto.types.BlockHeader.prototype.getBlocksroothash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getBlocksroothash()));};/**
	   * optional bytes blocksRootHash = 5;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getBlocksroothash()`
	   * @return {!Uint8Array}
	   */proto.types.BlockHeader.prototype.getBlocksroothash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getBlocksroothash()));};/** @param {!(string|Uint8Array)} value */proto.types.BlockHeader.prototype.setBlocksroothash=function(value){googleProtobuf.Message.setField(this,5,value);};/**
	   * optional bytes txsRootHash = 6;
	   * @return {!(string|Uint8Array)}
	   */proto.types.BlockHeader.prototype.getTxsroothash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,6,""));};/**
	   * optional bytes txsRootHash = 6;
	   * This is a type-conversion wrapper around `getTxsroothash()`
	   * @return {string}
	   */proto.types.BlockHeader.prototype.getTxsroothash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getTxsroothash()));};/**
	   * optional bytes txsRootHash = 6;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getTxsroothash()`
	   * @return {!Uint8Array}
	   */proto.types.BlockHeader.prototype.getTxsroothash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getTxsroothash()));};/** @param {!(string|Uint8Array)} value */proto.types.BlockHeader.prototype.setTxsroothash=function(value){googleProtobuf.Message.setField(this,6,value);};/**
	   * optional bytes receiptsRootHash = 7;
	   * @return {!(string|Uint8Array)}
	   */proto.types.BlockHeader.prototype.getReceiptsroothash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,7,""));};/**
	   * optional bytes receiptsRootHash = 7;
	   * This is a type-conversion wrapper around `getReceiptsroothash()`
	   * @return {string}
	   */proto.types.BlockHeader.prototype.getReceiptsroothash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getReceiptsroothash()));};/**
	   * optional bytes receiptsRootHash = 7;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getReceiptsroothash()`
	   * @return {!Uint8Array}
	   */proto.types.BlockHeader.prototype.getReceiptsroothash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getReceiptsroothash()));};/** @param {!(string|Uint8Array)} value */proto.types.BlockHeader.prototype.setReceiptsroothash=function(value){googleProtobuf.Message.setField(this,7,value);};/**
	   * optional uint64 confirms = 8;
	   * @return {number}
	   */proto.types.BlockHeader.prototype.getConfirms=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,8,0));};/** @param {number} value */proto.types.BlockHeader.prototype.setConfirms=function(value){googleProtobuf.Message.setField(this,8,value);};/**
	   * optional bytes pubKey = 9;
	   * @return {!(string|Uint8Array)}
	   */proto.types.BlockHeader.prototype.getPubkey=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,9,""));};/**
	   * optional bytes pubKey = 9;
	   * This is a type-conversion wrapper around `getPubkey()`
	   * @return {string}
	   */proto.types.BlockHeader.prototype.getPubkey_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getPubkey()));};/**
	   * optional bytes pubKey = 9;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getPubkey()`
	   * @return {!Uint8Array}
	   */proto.types.BlockHeader.prototype.getPubkey_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getPubkey()));};/** @param {!(string|Uint8Array)} value */proto.types.BlockHeader.prototype.setPubkey=function(value){googleProtobuf.Message.setField(this,9,value);};/**
	   * optional bytes coinbaseAccount = 10;
	   * @return {!(string|Uint8Array)}
	   */proto.types.BlockHeader.prototype.getCoinbaseaccount=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,10,""));};/**
	   * optional bytes coinbaseAccount = 10;
	   * This is a type-conversion wrapper around `getCoinbaseaccount()`
	   * @return {string}
	   */proto.types.BlockHeader.prototype.getCoinbaseaccount_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getCoinbaseaccount()));};/**
	   * optional bytes coinbaseAccount = 10;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getCoinbaseaccount()`
	   * @return {!Uint8Array}
	   */proto.types.BlockHeader.prototype.getCoinbaseaccount_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getCoinbaseaccount()));};/** @param {!(string|Uint8Array)} value */proto.types.BlockHeader.prototype.setCoinbaseaccount=function(value){googleProtobuf.Message.setField(this,10,value);};/**
	   * optional bytes sign = 11;
	   * @return {!(string|Uint8Array)}
	   */proto.types.BlockHeader.prototype.getSign=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,11,""));};/**
	   * optional bytes sign = 11;
	   * This is a type-conversion wrapper around `getSign()`
	   * @return {string}
	   */proto.types.BlockHeader.prototype.getSign_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getSign()));};/**
	   * optional bytes sign = 11;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getSign()`
	   * @return {!Uint8Array}
	   */proto.types.BlockHeader.prototype.getSign_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getSign()));};/** @param {!(string|Uint8Array)} value */proto.types.BlockHeader.prototype.setSign=function(value){googleProtobuf.Message.setField(this,11,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.BlockBody=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.BlockBody.repeatedFields_,null);};goog.inherits(proto.types.BlockBody,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.BlockBody.repeatedFields_=[1];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.BlockBody.prototype.toObject=function(opt_includeInstance){return proto.types.BlockBody.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.BlockBody} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.BlockBody.toObject=function(includeInstance,msg){var obj={txsList:googleProtobuf.Message.toObjectList(msg.getTxsList(),proto.types.Tx.toObject,includeInstance)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.BlockBody}
	   */proto.types.BlockBody.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.BlockBody();return proto.types.BlockBody.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.BlockBody} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.BlockBody}
	   */proto.types.BlockBody.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=new proto.types.Tx();reader.readMessage(value,proto.types.Tx.deserializeBinaryFromReader);msg.addTxs(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.BlockBody.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.BlockBody.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.BlockBody} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.BlockBody.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getTxsList();if(f.length>0){writer.writeRepeatedMessage(1,f,proto.types.Tx.serializeBinaryToWriter);}};/**
	   * repeated Tx txs = 1;
	   * @return {!Array.<!proto.types.Tx>}
	   */proto.types.BlockBody.prototype.getTxsList=function(){return(/** @type{!Array.<!proto.types.Tx>} */googleProtobuf.Message.getRepeatedWrapperField(this,proto.types.Tx,1));};/** @param {!Array.<!proto.types.Tx>} value */proto.types.BlockBody.prototype.setTxsList=function(value){googleProtobuf.Message.setRepeatedWrapperField(this,1,value);};/**
	   * @param {!proto.types.Tx=} opt_value
	   * @param {number=} opt_index
	   * @return {!proto.types.Tx}
	   */proto.types.BlockBody.prototype.addTxs=function(opt_value,opt_index){return googleProtobuf.Message.addToRepeatedWrapperField(this,1,opt_value,proto.types.Tx,opt_index);};proto.types.BlockBody.prototype.clearTxsList=function(){this.setTxsList([]);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.TxList=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.TxList.repeatedFields_,null);};goog.inherits(proto.types.TxList,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.TxList.repeatedFields_=[1];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.TxList.prototype.toObject=function(opt_includeInstance){return proto.types.TxList.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.TxList} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.TxList.toObject=function(includeInstance,msg){var obj={txsList:googleProtobuf.Message.toObjectList(msg.getTxsList(),proto.types.Tx.toObject,includeInstance)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.TxList}
	   */proto.types.TxList.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.TxList();return proto.types.TxList.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.TxList} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.TxList}
	   */proto.types.TxList.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=new proto.types.Tx();reader.readMessage(value,proto.types.Tx.deserializeBinaryFromReader);msg.addTxs(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.TxList.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.TxList.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.TxList} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.TxList.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getTxsList();if(f.length>0){writer.writeRepeatedMessage(1,f,proto.types.Tx.serializeBinaryToWriter);}};/**
	   * repeated Tx txs = 1;
	   * @return {!Array.<!proto.types.Tx>}
	   */proto.types.TxList.prototype.getTxsList=function(){return(/** @type{!Array.<!proto.types.Tx>} */googleProtobuf.Message.getRepeatedWrapperField(this,proto.types.Tx,1));};/** @param {!Array.<!proto.types.Tx>} value */proto.types.TxList.prototype.setTxsList=function(value){googleProtobuf.Message.setRepeatedWrapperField(this,1,value);};/**
	   * @param {!proto.types.Tx=} opt_value
	   * @param {number=} opt_index
	   * @return {!proto.types.Tx}
	   */proto.types.TxList.prototype.addTxs=function(opt_value,opt_index){return googleProtobuf.Message.addToRepeatedWrapperField(this,1,opt_value,proto.types.Tx,opt_index);};proto.types.TxList.prototype.clearTxsList=function(){this.setTxsList([]);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.Tx=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.Tx,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.Tx.prototype.toObject=function(opt_includeInstance){return proto.types.Tx.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.Tx} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.Tx.toObject=function(includeInstance,msg){var f,obj={hash:msg.getHash_asB64(),body:(f=msg.getBody())&&proto.types.TxBody.toObject(includeInstance,f)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.Tx}
	   */proto.types.Tx.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.Tx();return proto.types.Tx.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.Tx} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.Tx}
	   */proto.types.Tx.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setHash(value);break;case 2:var value=new proto.types.TxBody();reader.readMessage(value,proto.types.TxBody.deserializeBinaryFromReader);msg.setBody(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.Tx.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.Tx.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.Tx} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.Tx.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getHash_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getBody();if(f!=null){writer.writeMessage(2,f,proto.types.TxBody.serializeBinaryToWriter);}};/**
	   * optional bytes hash = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Tx.prototype.getHash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes hash = 1;
	   * This is a type-conversion wrapper around `getHash()`
	   * @return {string}
	   */proto.types.Tx.prototype.getHash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getHash()));};/**
	   * optional bytes hash = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getHash()`
	   * @return {!Uint8Array}
	   */proto.types.Tx.prototype.getHash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getHash()));};/** @param {!(string|Uint8Array)} value */proto.types.Tx.prototype.setHash=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional TxBody body = 2;
	   * @return {?proto.types.TxBody}
	   */proto.types.Tx.prototype.getBody=function(){return(/** @type{?proto.types.TxBody} */googleProtobuf.Message.getWrapperField(this,proto.types.TxBody,2));};/** @param {?proto.types.TxBody|undefined} value */proto.types.Tx.prototype.setBody=function(value){googleProtobuf.Message.setWrapperField(this,2,value);};proto.types.Tx.prototype.clearBody=function(){this.setBody(undefined);};/**
	   * Returns whether this field is set.
	   * @return {!boolean}
	   */proto.types.Tx.prototype.hasBody=function(){return googleProtobuf.Message.getField(this,2)!=null;};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.TxBody=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.TxBody,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.TxBody.prototype.toObject=function(opt_includeInstance){return proto.types.TxBody.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.TxBody} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.TxBody.toObject=function(includeInstance,msg){var obj={nonce:googleProtobuf.Message.getFieldWithDefault(msg,1,0),account:msg.getAccount_asB64(),recipient:msg.getRecipient_asB64(),amount:msg.getAmount_asB64(),payload:msg.getPayload_asB64(),gaslimit:googleProtobuf.Message.getFieldWithDefault(msg,6,0),gasprice:msg.getGasprice_asB64(),type:googleProtobuf.Message.getFieldWithDefault(msg,8,0),chainidhash:msg.getChainidhash_asB64(),sign:msg.getSign_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.TxBody}
	   */proto.types.TxBody.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.TxBody();return proto.types.TxBody.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.TxBody} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.TxBody}
	   */proto.types.TxBody.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {number} */reader.readUint64();msg.setNonce(value);break;case 2:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setAccount(value);break;case 3:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setRecipient(value);break;case 4:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setAmount(value);break;case 5:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setPayload(value);break;case 6:var value=/** @type {number} */reader.readUint64();msg.setGaslimit(value);break;case 7:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setGasprice(value);break;case 8:var value=/** @type {!proto.types.TxType} */reader.readEnum();msg.setType(value);break;case 9:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setChainidhash(value);break;case 10:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setSign(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.TxBody.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.TxBody.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.TxBody} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.TxBody.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getNonce();if(f!==0){writer.writeUint64(1,f);}f=message.getAccount_asU8();if(f.length>0){writer.writeBytes(2,f);}f=message.getRecipient_asU8();if(f.length>0){writer.writeBytes(3,f);}f=message.getAmount_asU8();if(f.length>0){writer.writeBytes(4,f);}f=message.getPayload_asU8();if(f.length>0){writer.writeBytes(5,f);}f=message.getGaslimit();if(f!==0){writer.writeUint64(6,f);}f=message.getGasprice_asU8();if(f.length>0){writer.writeBytes(7,f);}f=message.getType();if(f!==0.0){writer.writeEnum(8,f);}f=message.getChainidhash_asU8();if(f.length>0){writer.writeBytes(9,f);}f=message.getSign_asU8();if(f.length>0){writer.writeBytes(10,f);}};/**
	   * optional uint64 nonce = 1;
	   * @return {number}
	   */proto.types.TxBody.prototype.getNonce=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,1,0));};/** @param {number} value */proto.types.TxBody.prototype.setNonce=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional bytes account = 2;
	   * @return {!(string|Uint8Array)}
	   */proto.types.TxBody.prototype.getAccount=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,2,""));};/**
	   * optional bytes account = 2;
	   * This is a type-conversion wrapper around `getAccount()`
	   * @return {string}
	   */proto.types.TxBody.prototype.getAccount_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getAccount()));};/**
	   * optional bytes account = 2;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getAccount()`
	   * @return {!Uint8Array}
	   */proto.types.TxBody.prototype.getAccount_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getAccount()));};/** @param {!(string|Uint8Array)} value */proto.types.TxBody.prototype.setAccount=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional bytes recipient = 3;
	   * @return {!(string|Uint8Array)}
	   */proto.types.TxBody.prototype.getRecipient=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,3,""));};/**
	   * optional bytes recipient = 3;
	   * This is a type-conversion wrapper around `getRecipient()`
	   * @return {string}
	   */proto.types.TxBody.prototype.getRecipient_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getRecipient()));};/**
	   * optional bytes recipient = 3;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getRecipient()`
	   * @return {!Uint8Array}
	   */proto.types.TxBody.prototype.getRecipient_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getRecipient()));};/** @param {!(string|Uint8Array)} value */proto.types.TxBody.prototype.setRecipient=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * optional bytes amount = 4;
	   * @return {!(string|Uint8Array)}
	   */proto.types.TxBody.prototype.getAmount=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,4,""));};/**
	   * optional bytes amount = 4;
	   * This is a type-conversion wrapper around `getAmount()`
	   * @return {string}
	   */proto.types.TxBody.prototype.getAmount_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getAmount()));};/**
	   * optional bytes amount = 4;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getAmount()`
	   * @return {!Uint8Array}
	   */proto.types.TxBody.prototype.getAmount_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getAmount()));};/** @param {!(string|Uint8Array)} value */proto.types.TxBody.prototype.setAmount=function(value){googleProtobuf.Message.setField(this,4,value);};/**
	   * optional bytes payload = 5;
	   * @return {!(string|Uint8Array)}
	   */proto.types.TxBody.prototype.getPayload=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,5,""));};/**
	   * optional bytes payload = 5;
	   * This is a type-conversion wrapper around `getPayload()`
	   * @return {string}
	   */proto.types.TxBody.prototype.getPayload_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getPayload()));};/**
	   * optional bytes payload = 5;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getPayload()`
	   * @return {!Uint8Array}
	   */proto.types.TxBody.prototype.getPayload_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getPayload()));};/** @param {!(string|Uint8Array)} value */proto.types.TxBody.prototype.setPayload=function(value){googleProtobuf.Message.setField(this,5,value);};/**
	   * optional uint64 gasLimit = 6;
	   * @return {number}
	   */proto.types.TxBody.prototype.getGaslimit=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,6,0));};/** @param {number} value */proto.types.TxBody.prototype.setGaslimit=function(value){googleProtobuf.Message.setField(this,6,value);};/**
	   * optional bytes gasPrice = 7;
	   * @return {!(string|Uint8Array)}
	   */proto.types.TxBody.prototype.getGasprice=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,7,""));};/**
	   * optional bytes gasPrice = 7;
	   * This is a type-conversion wrapper around `getGasprice()`
	   * @return {string}
	   */proto.types.TxBody.prototype.getGasprice_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getGasprice()));};/**
	   * optional bytes gasPrice = 7;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getGasprice()`
	   * @return {!Uint8Array}
	   */proto.types.TxBody.prototype.getGasprice_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getGasprice()));};/** @param {!(string|Uint8Array)} value */proto.types.TxBody.prototype.setGasprice=function(value){googleProtobuf.Message.setField(this,7,value);};/**
	   * optional TxType type = 8;
	   * @return {!proto.types.TxType}
	   */proto.types.TxBody.prototype.getType=function(){return(/** @type {!proto.types.TxType} */googleProtobuf.Message.getFieldWithDefault(this,8,0));};/** @param {!proto.types.TxType} value */proto.types.TxBody.prototype.setType=function(value){googleProtobuf.Message.setField(this,8,value);};/**
	   * optional bytes chainIdHash = 9;
	   * @return {!(string|Uint8Array)}
	   */proto.types.TxBody.prototype.getChainidhash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,9,""));};/**
	   * optional bytes chainIdHash = 9;
	   * This is a type-conversion wrapper around `getChainidhash()`
	   * @return {string}
	   */proto.types.TxBody.prototype.getChainidhash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getChainidhash()));};/**
	   * optional bytes chainIdHash = 9;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getChainidhash()`
	   * @return {!Uint8Array}
	   */proto.types.TxBody.prototype.getChainidhash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getChainidhash()));};/** @param {!(string|Uint8Array)} value */proto.types.TxBody.prototype.setChainidhash=function(value){googleProtobuf.Message.setField(this,9,value);};/**
	   * optional bytes sign = 10;
	   * @return {!(string|Uint8Array)}
	   */proto.types.TxBody.prototype.getSign=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,10,""));};/**
	   * optional bytes sign = 10;
	   * This is a type-conversion wrapper around `getSign()`
	   * @return {string}
	   */proto.types.TxBody.prototype.getSign_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getSign()));};/**
	   * optional bytes sign = 10;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getSign()`
	   * @return {!Uint8Array}
	   */proto.types.TxBody.prototype.getSign_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getSign()));};/** @param {!(string|Uint8Array)} value */proto.types.TxBody.prototype.setSign=function(value){googleProtobuf.Message.setField(this,10,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.TxIdx=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.TxIdx,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.TxIdx.prototype.toObject=function(opt_includeInstance){return proto.types.TxIdx.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.TxIdx} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.TxIdx.toObject=function(includeInstance,msg){var obj={blockhash:msg.getBlockhash_asB64(),idx:googleProtobuf.Message.getFieldWithDefault(msg,2,0)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.TxIdx}
	   */proto.types.TxIdx.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.TxIdx();return proto.types.TxIdx.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.TxIdx} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.TxIdx}
	   */proto.types.TxIdx.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setBlockhash(value);break;case 2:var value=/** @type {number} */reader.readInt32();msg.setIdx(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.TxIdx.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.TxIdx.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.TxIdx} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.TxIdx.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getBlockhash_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getIdx();if(f!==0){writer.writeInt32(2,f);}};/**
	   * optional bytes blockHash = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.TxIdx.prototype.getBlockhash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes blockHash = 1;
	   * This is a type-conversion wrapper around `getBlockhash()`
	   * @return {string}
	   */proto.types.TxIdx.prototype.getBlockhash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getBlockhash()));};/**
	   * optional bytes blockHash = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getBlockhash()`
	   * @return {!Uint8Array}
	   */proto.types.TxIdx.prototype.getBlockhash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getBlockhash()));};/** @param {!(string|Uint8Array)} value */proto.types.TxIdx.prototype.setBlockhash=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional int32 idx = 2;
	   * @return {number}
	   */proto.types.TxIdx.prototype.getIdx=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,2,0));};/** @param {number} value */proto.types.TxIdx.prototype.setIdx=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.TxInBlock=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.TxInBlock,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.TxInBlock.prototype.toObject=function(opt_includeInstance){return proto.types.TxInBlock.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.TxInBlock} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.TxInBlock.toObject=function(includeInstance,msg){var f,obj={txidx:(f=msg.getTxidx())&&proto.types.TxIdx.toObject(includeInstance,f),tx:(f=msg.getTx())&&proto.types.Tx.toObject(includeInstance,f)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.TxInBlock}
	   */proto.types.TxInBlock.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.TxInBlock();return proto.types.TxInBlock.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.TxInBlock} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.TxInBlock}
	   */proto.types.TxInBlock.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=new proto.types.TxIdx();reader.readMessage(value,proto.types.TxIdx.deserializeBinaryFromReader);msg.setTxidx(value);break;case 2:var value=new proto.types.Tx();reader.readMessage(value,proto.types.Tx.deserializeBinaryFromReader);msg.setTx(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.TxInBlock.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.TxInBlock.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.TxInBlock} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.TxInBlock.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getTxidx();if(f!=null){writer.writeMessage(1,f,proto.types.TxIdx.serializeBinaryToWriter);}f=message.getTx();if(f!=null){writer.writeMessage(2,f,proto.types.Tx.serializeBinaryToWriter);}};/**
	   * optional TxIdx txIdx = 1;
	   * @return {?proto.types.TxIdx}
	   */proto.types.TxInBlock.prototype.getTxidx=function(){return(/** @type{?proto.types.TxIdx} */googleProtobuf.Message.getWrapperField(this,proto.types.TxIdx,1));};/** @param {?proto.types.TxIdx|undefined} value */proto.types.TxInBlock.prototype.setTxidx=function(value){googleProtobuf.Message.setWrapperField(this,1,value);};proto.types.TxInBlock.prototype.clearTxidx=function(){this.setTxidx(undefined);};/**
	   * Returns whether this field is set.
	   * @return {!boolean}
	   */proto.types.TxInBlock.prototype.hasTxidx=function(){return googleProtobuf.Message.getField(this,1)!=null;};/**
	   * optional Tx tx = 2;
	   * @return {?proto.types.Tx}
	   */proto.types.TxInBlock.prototype.getTx=function(){return(/** @type{?proto.types.Tx} */googleProtobuf.Message.getWrapperField(this,proto.types.Tx,2));};/** @param {?proto.types.Tx|undefined} value */proto.types.TxInBlock.prototype.setTx=function(value){googleProtobuf.Message.setWrapperField(this,2,value);};proto.types.TxInBlock.prototype.clearTx=function(){this.setTx(undefined);};/**
	   * Returns whether this field is set.
	   * @return {!boolean}
	   */proto.types.TxInBlock.prototype.hasTx=function(){return googleProtobuf.Message.getField(this,2)!=null;};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.State=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.State,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.State.prototype.toObject=function(opt_includeInstance){return proto.types.State.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.State} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.State.toObject=function(includeInstance,msg){var obj={nonce:googleProtobuf.Message.getFieldWithDefault(msg,1,0),balance:msg.getBalance_asB64(),codehash:msg.getCodehash_asB64(),storageroot:msg.getStorageroot_asB64(),sqlrecoverypoint:googleProtobuf.Message.getFieldWithDefault(msg,5,0)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.State}
	   */proto.types.State.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.State();return proto.types.State.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.State} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.State}
	   */proto.types.State.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {number} */reader.readUint64();msg.setNonce(value);break;case 2:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setBalance(value);break;case 3:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setCodehash(value);break;case 4:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setStorageroot(value);break;case 5:var value=/** @type {number} */reader.readUint64();msg.setSqlrecoverypoint(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.State.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.State.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.State} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.State.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getNonce();if(f!==0){writer.writeUint64(1,f);}f=message.getBalance_asU8();if(f.length>0){writer.writeBytes(2,f);}f=message.getCodehash_asU8();if(f.length>0){writer.writeBytes(3,f);}f=message.getStorageroot_asU8();if(f.length>0){writer.writeBytes(4,f);}f=message.getSqlrecoverypoint();if(f!==0){writer.writeUint64(5,f);}};/**
	   * optional uint64 nonce = 1;
	   * @return {number}
	   */proto.types.State.prototype.getNonce=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,1,0));};/** @param {number} value */proto.types.State.prototype.setNonce=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional bytes balance = 2;
	   * @return {!(string|Uint8Array)}
	   */proto.types.State.prototype.getBalance=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,2,""));};/**
	   * optional bytes balance = 2;
	   * This is a type-conversion wrapper around `getBalance()`
	   * @return {string}
	   */proto.types.State.prototype.getBalance_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getBalance()));};/**
	   * optional bytes balance = 2;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getBalance()`
	   * @return {!Uint8Array}
	   */proto.types.State.prototype.getBalance_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getBalance()));};/** @param {!(string|Uint8Array)} value */proto.types.State.prototype.setBalance=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional bytes codeHash = 3;
	   * @return {!(string|Uint8Array)}
	   */proto.types.State.prototype.getCodehash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,3,""));};/**
	   * optional bytes codeHash = 3;
	   * This is a type-conversion wrapper around `getCodehash()`
	   * @return {string}
	   */proto.types.State.prototype.getCodehash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getCodehash()));};/**
	   * optional bytes codeHash = 3;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getCodehash()`
	   * @return {!Uint8Array}
	   */proto.types.State.prototype.getCodehash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getCodehash()));};/** @param {!(string|Uint8Array)} value */proto.types.State.prototype.setCodehash=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * optional bytes storageRoot = 4;
	   * @return {!(string|Uint8Array)}
	   */proto.types.State.prototype.getStorageroot=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,4,""));};/**
	   * optional bytes storageRoot = 4;
	   * This is a type-conversion wrapper around `getStorageroot()`
	   * @return {string}
	   */proto.types.State.prototype.getStorageroot_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getStorageroot()));};/**
	   * optional bytes storageRoot = 4;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getStorageroot()`
	   * @return {!Uint8Array}
	   */proto.types.State.prototype.getStorageroot_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getStorageroot()));};/** @param {!(string|Uint8Array)} value */proto.types.State.prototype.setStorageroot=function(value){googleProtobuf.Message.setField(this,4,value);};/**
	   * optional uint64 sqlRecoveryPoint = 5;
	   * @return {number}
	   */proto.types.State.prototype.getSqlrecoverypoint=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,5,0));};/** @param {number} value */proto.types.State.prototype.setSqlrecoverypoint=function(value){googleProtobuf.Message.setField(this,5,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.AccountProof=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.AccountProof.repeatedFields_,null);};goog.inherits(proto.types.AccountProof,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.AccountProof.repeatedFields_=[8];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.AccountProof.prototype.toObject=function(opt_includeInstance){return proto.types.AccountProof.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.AccountProof} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.AccountProof.toObject=function(includeInstance,msg){var f,obj={state:(f=msg.getState())&&proto.types.State.toObject(includeInstance,f),inclusion:googleProtobuf.Message.getFieldWithDefault(msg,2,false),key:msg.getKey_asB64(),proofkey:msg.getProofkey_asB64(),proofval:msg.getProofval_asB64(),bitmap:msg.getBitmap_asB64(),height:googleProtobuf.Message.getFieldWithDefault(msg,7,0),auditpathList:msg.getAuditpathList_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.AccountProof}
	   */proto.types.AccountProof.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.AccountProof();return proto.types.AccountProof.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.AccountProof} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.AccountProof}
	   */proto.types.AccountProof.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=new proto.types.State();reader.readMessage(value,proto.types.State.deserializeBinaryFromReader);msg.setState(value);break;case 2:var value=/** @type {boolean} */reader.readBool();msg.setInclusion(value);break;case 3:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setKey(value);break;case 4:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setProofkey(value);break;case 5:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setProofval(value);break;case 6:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setBitmap(value);break;case 7:var value=/** @type {number} */reader.readUint32();msg.setHeight(value);break;case 8:var value=/** @type {!Uint8Array} */reader.readBytes();msg.addAuditpath(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.AccountProof.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.AccountProof.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.AccountProof} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.AccountProof.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getState();if(f!=null){writer.writeMessage(1,f,proto.types.State.serializeBinaryToWriter);}f=message.getInclusion();if(f){writer.writeBool(2,f);}f=message.getKey_asU8();if(f.length>0){writer.writeBytes(3,f);}f=message.getProofkey_asU8();if(f.length>0){writer.writeBytes(4,f);}f=message.getProofval_asU8();if(f.length>0){writer.writeBytes(5,f);}f=message.getBitmap_asU8();if(f.length>0){writer.writeBytes(6,f);}f=message.getHeight();if(f!==0){writer.writeUint32(7,f);}f=message.getAuditpathList_asU8();if(f.length>0){writer.writeRepeatedBytes(8,f);}};/**
	   * optional State state = 1;
	   * @return {?proto.types.State}
	   */proto.types.AccountProof.prototype.getState=function(){return(/** @type{?proto.types.State} */googleProtobuf.Message.getWrapperField(this,proto.types.State,1));};/** @param {?proto.types.State|undefined} value */proto.types.AccountProof.prototype.setState=function(value){googleProtobuf.Message.setWrapperField(this,1,value);};proto.types.AccountProof.prototype.clearState=function(){this.setState(undefined);};/**
	   * Returns whether this field is set.
	   * @return {!boolean}
	   */proto.types.AccountProof.prototype.hasState=function(){return googleProtobuf.Message.getField(this,1)!=null;};/**
	   * optional bool inclusion = 2;
	   * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	   * You should avoid comparisons like {@code val === true/false} in those cases.
	   * @return {boolean}
	   */proto.types.AccountProof.prototype.getInclusion=function(){return(/** @type {boolean} */googleProtobuf.Message.getFieldWithDefault(this,2,false));};/** @param {boolean} value */proto.types.AccountProof.prototype.setInclusion=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional bytes key = 3;
	   * @return {!(string|Uint8Array)}
	   */proto.types.AccountProof.prototype.getKey=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,3,""));};/**
	   * optional bytes key = 3;
	   * This is a type-conversion wrapper around `getKey()`
	   * @return {string}
	   */proto.types.AccountProof.prototype.getKey_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getKey()));};/**
	   * optional bytes key = 3;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getKey()`
	   * @return {!Uint8Array}
	   */proto.types.AccountProof.prototype.getKey_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getKey()));};/** @param {!(string|Uint8Array)} value */proto.types.AccountProof.prototype.setKey=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * optional bytes proofKey = 4;
	   * @return {!(string|Uint8Array)}
	   */proto.types.AccountProof.prototype.getProofkey=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,4,""));};/**
	   * optional bytes proofKey = 4;
	   * This is a type-conversion wrapper around `getProofkey()`
	   * @return {string}
	   */proto.types.AccountProof.prototype.getProofkey_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getProofkey()));};/**
	   * optional bytes proofKey = 4;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getProofkey()`
	   * @return {!Uint8Array}
	   */proto.types.AccountProof.prototype.getProofkey_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getProofkey()));};/** @param {!(string|Uint8Array)} value */proto.types.AccountProof.prototype.setProofkey=function(value){googleProtobuf.Message.setField(this,4,value);};/**
	   * optional bytes proofVal = 5;
	   * @return {!(string|Uint8Array)}
	   */proto.types.AccountProof.prototype.getProofval=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,5,""));};/**
	   * optional bytes proofVal = 5;
	   * This is a type-conversion wrapper around `getProofval()`
	   * @return {string}
	   */proto.types.AccountProof.prototype.getProofval_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getProofval()));};/**
	   * optional bytes proofVal = 5;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getProofval()`
	   * @return {!Uint8Array}
	   */proto.types.AccountProof.prototype.getProofval_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getProofval()));};/** @param {!(string|Uint8Array)} value */proto.types.AccountProof.prototype.setProofval=function(value){googleProtobuf.Message.setField(this,5,value);};/**
	   * optional bytes bitmap = 6;
	   * @return {!(string|Uint8Array)}
	   */proto.types.AccountProof.prototype.getBitmap=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,6,""));};/**
	   * optional bytes bitmap = 6;
	   * This is a type-conversion wrapper around `getBitmap()`
	   * @return {string}
	   */proto.types.AccountProof.prototype.getBitmap_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getBitmap()));};/**
	   * optional bytes bitmap = 6;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getBitmap()`
	   * @return {!Uint8Array}
	   */proto.types.AccountProof.prototype.getBitmap_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getBitmap()));};/** @param {!(string|Uint8Array)} value */proto.types.AccountProof.prototype.setBitmap=function(value){googleProtobuf.Message.setField(this,6,value);};/**
	   * optional uint32 height = 7;
	   * @return {number}
	   */proto.types.AccountProof.prototype.getHeight=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,7,0));};/** @param {number} value */proto.types.AccountProof.prototype.setHeight=function(value){googleProtobuf.Message.setField(this,7,value);};/**
	   * repeated bytes auditPath = 8;
	   * @return {!(Array<!Uint8Array>|Array<string>)}
	   */proto.types.AccountProof.prototype.getAuditpathList=function(){return(/** @type {!(Array<!Uint8Array>|Array<string>)} */googleProtobuf.Message.getRepeatedField(this,8));};/**
	   * repeated bytes auditPath = 8;
	   * This is a type-conversion wrapper around `getAuditpathList()`
	   * @return {!Array.<string>}
	   */proto.types.AccountProof.prototype.getAuditpathList_asB64=function(){return(/** @type {!Array.<string>} */googleProtobuf.Message.bytesListAsB64(this.getAuditpathList()));};/**
	   * repeated bytes auditPath = 8;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getAuditpathList()`
	   * @return {!Array.<!Uint8Array>}
	   */proto.types.AccountProof.prototype.getAuditpathList_asU8=function(){return(/** @type {!Array.<!Uint8Array>} */googleProtobuf.Message.bytesListAsU8(this.getAuditpathList()));};/** @param {!(Array<!Uint8Array>|Array<string>)} value */proto.types.AccountProof.prototype.setAuditpathList=function(value){googleProtobuf.Message.setField(this,8,value||[]);};/**
	   * @param {!(string|Uint8Array)} value
	   * @param {number=} opt_index
	   */proto.types.AccountProof.prototype.addAuditpath=function(value,opt_index){googleProtobuf.Message.addToRepeatedField(this,8,value,opt_index);};proto.types.AccountProof.prototype.clearAuditpathList=function(){this.setAuditpathList([]);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.ContractVarProof=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.ContractVarProof.repeatedFields_,null);};goog.inherits(proto.types.ContractVarProof,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.ContractVarProof.repeatedFields_=[8];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.ContractVarProof.prototype.toObject=function(opt_includeInstance){return proto.types.ContractVarProof.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.ContractVarProof} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.ContractVarProof.toObject=function(includeInstance,msg){var obj={value:msg.getValue_asB64(),inclusion:googleProtobuf.Message.getFieldWithDefault(msg,2,false),key:googleProtobuf.Message.getFieldWithDefault(msg,3,""),proofkey:msg.getProofkey_asB64(),proofval:msg.getProofval_asB64(),bitmap:msg.getBitmap_asB64(),height:googleProtobuf.Message.getFieldWithDefault(msg,7,0),auditpathList:msg.getAuditpathList_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.ContractVarProof}
	   */proto.types.ContractVarProof.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.ContractVarProof();return proto.types.ContractVarProof.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.ContractVarProof} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.ContractVarProof}
	   */proto.types.ContractVarProof.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setValue(value);break;case 2:var value=/** @type {boolean} */reader.readBool();msg.setInclusion(value);break;case 3:var value=/** @type {string} */reader.readString();msg.setKey(value);break;case 4:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setProofkey(value);break;case 5:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setProofval(value);break;case 6:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setBitmap(value);break;case 7:var value=/** @type {number} */reader.readUint32();msg.setHeight(value);break;case 8:var value=/** @type {!Uint8Array} */reader.readBytes();msg.addAuditpath(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.ContractVarProof.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.ContractVarProof.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.ContractVarProof} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.ContractVarProof.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getValue_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getInclusion();if(f){writer.writeBool(2,f);}f=message.getKey();if(f.length>0){writer.writeString(3,f);}f=message.getProofkey_asU8();if(f.length>0){writer.writeBytes(4,f);}f=message.getProofval_asU8();if(f.length>0){writer.writeBytes(5,f);}f=message.getBitmap_asU8();if(f.length>0){writer.writeBytes(6,f);}f=message.getHeight();if(f!==0){writer.writeUint32(7,f);}f=message.getAuditpathList_asU8();if(f.length>0){writer.writeRepeatedBytes(8,f);}};/**
	   * optional bytes value = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.ContractVarProof.prototype.getValue=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes value = 1;
	   * This is a type-conversion wrapper around `getValue()`
	   * @return {string}
	   */proto.types.ContractVarProof.prototype.getValue_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getValue()));};/**
	   * optional bytes value = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getValue()`
	   * @return {!Uint8Array}
	   */proto.types.ContractVarProof.prototype.getValue_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getValue()));};/** @param {!(string|Uint8Array)} value */proto.types.ContractVarProof.prototype.setValue=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional bool inclusion = 2;
	   * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	   * You should avoid comparisons like {@code val === true/false} in those cases.
	   * @return {boolean}
	   */proto.types.ContractVarProof.prototype.getInclusion=function(){return(/** @type {boolean} */googleProtobuf.Message.getFieldWithDefault(this,2,false));};/** @param {boolean} value */proto.types.ContractVarProof.prototype.setInclusion=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional string key = 3;
	   * @return {string}
	   */proto.types.ContractVarProof.prototype.getKey=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,3,""));};/** @param {string} value */proto.types.ContractVarProof.prototype.setKey=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * optional bytes proofKey = 4;
	   * @return {!(string|Uint8Array)}
	   */proto.types.ContractVarProof.prototype.getProofkey=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,4,""));};/**
	   * optional bytes proofKey = 4;
	   * This is a type-conversion wrapper around `getProofkey()`
	   * @return {string}
	   */proto.types.ContractVarProof.prototype.getProofkey_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getProofkey()));};/**
	   * optional bytes proofKey = 4;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getProofkey()`
	   * @return {!Uint8Array}
	   */proto.types.ContractVarProof.prototype.getProofkey_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getProofkey()));};/** @param {!(string|Uint8Array)} value */proto.types.ContractVarProof.prototype.setProofkey=function(value){googleProtobuf.Message.setField(this,4,value);};/**
	   * optional bytes proofVal = 5;
	   * @return {!(string|Uint8Array)}
	   */proto.types.ContractVarProof.prototype.getProofval=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,5,""));};/**
	   * optional bytes proofVal = 5;
	   * This is a type-conversion wrapper around `getProofval()`
	   * @return {string}
	   */proto.types.ContractVarProof.prototype.getProofval_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getProofval()));};/**
	   * optional bytes proofVal = 5;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getProofval()`
	   * @return {!Uint8Array}
	   */proto.types.ContractVarProof.prototype.getProofval_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getProofval()));};/** @param {!(string|Uint8Array)} value */proto.types.ContractVarProof.prototype.setProofval=function(value){googleProtobuf.Message.setField(this,5,value);};/**
	   * optional bytes bitmap = 6;
	   * @return {!(string|Uint8Array)}
	   */proto.types.ContractVarProof.prototype.getBitmap=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,6,""));};/**
	   * optional bytes bitmap = 6;
	   * This is a type-conversion wrapper around `getBitmap()`
	   * @return {string}
	   */proto.types.ContractVarProof.prototype.getBitmap_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getBitmap()));};/**
	   * optional bytes bitmap = 6;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getBitmap()`
	   * @return {!Uint8Array}
	   */proto.types.ContractVarProof.prototype.getBitmap_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getBitmap()));};/** @param {!(string|Uint8Array)} value */proto.types.ContractVarProof.prototype.setBitmap=function(value){googleProtobuf.Message.setField(this,6,value);};/**
	   * optional uint32 height = 7;
	   * @return {number}
	   */proto.types.ContractVarProof.prototype.getHeight=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,7,0));};/** @param {number} value */proto.types.ContractVarProof.prototype.setHeight=function(value){googleProtobuf.Message.setField(this,7,value);};/**
	   * repeated bytes auditPath = 8;
	   * @return {!(Array<!Uint8Array>|Array<string>)}
	   */proto.types.ContractVarProof.prototype.getAuditpathList=function(){return(/** @type {!(Array<!Uint8Array>|Array<string>)} */googleProtobuf.Message.getRepeatedField(this,8));};/**
	   * repeated bytes auditPath = 8;
	   * This is a type-conversion wrapper around `getAuditpathList()`
	   * @return {!Array.<string>}
	   */proto.types.ContractVarProof.prototype.getAuditpathList_asB64=function(){return(/** @type {!Array.<string>} */googleProtobuf.Message.bytesListAsB64(this.getAuditpathList()));};/**
	   * repeated bytes auditPath = 8;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getAuditpathList()`
	   * @return {!Array.<!Uint8Array>}
	   */proto.types.ContractVarProof.prototype.getAuditpathList_asU8=function(){return(/** @type {!Array.<!Uint8Array>} */googleProtobuf.Message.bytesListAsU8(this.getAuditpathList()));};/** @param {!(Array<!Uint8Array>|Array<string>)} value */proto.types.ContractVarProof.prototype.setAuditpathList=function(value){googleProtobuf.Message.setField(this,8,value||[]);};/**
	   * @param {!(string|Uint8Array)} value
	   * @param {number=} opt_index
	   */proto.types.ContractVarProof.prototype.addAuditpath=function(value,opt_index){googleProtobuf.Message.addToRepeatedField(this,8,value,opt_index);};proto.types.ContractVarProof.prototype.clearAuditpathList=function(){this.setAuditpathList([]);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.StateQueryProof=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.StateQueryProof.repeatedFields_,null);};goog.inherits(proto.types.StateQueryProof,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.StateQueryProof.repeatedFields_=[2];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.StateQueryProof.prototype.toObject=function(opt_includeInstance){return proto.types.StateQueryProof.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.StateQueryProof} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.StateQueryProof.toObject=function(includeInstance,msg){var f,obj={contractproof:(f=msg.getContractproof())&&proto.types.AccountProof.toObject(includeInstance,f),varproofsList:googleProtobuf.Message.toObjectList(msg.getVarproofsList(),proto.types.ContractVarProof.toObject,includeInstance)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.StateQueryProof}
	   */proto.types.StateQueryProof.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.StateQueryProof();return proto.types.StateQueryProof.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.StateQueryProof} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.StateQueryProof}
	   */proto.types.StateQueryProof.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=new proto.types.AccountProof();reader.readMessage(value,proto.types.AccountProof.deserializeBinaryFromReader);msg.setContractproof(value);break;case 2:var value=new proto.types.ContractVarProof();reader.readMessage(value,proto.types.ContractVarProof.deserializeBinaryFromReader);msg.addVarproofs(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.StateQueryProof.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.StateQueryProof.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.StateQueryProof} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.StateQueryProof.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getContractproof();if(f!=null){writer.writeMessage(1,f,proto.types.AccountProof.serializeBinaryToWriter);}f=message.getVarproofsList();if(f.length>0){writer.writeRepeatedMessage(2,f,proto.types.ContractVarProof.serializeBinaryToWriter);}};/**
	   * optional AccountProof contractProof = 1;
	   * @return {?proto.types.AccountProof}
	   */proto.types.StateQueryProof.prototype.getContractproof=function(){return(/** @type{?proto.types.AccountProof} */googleProtobuf.Message.getWrapperField(this,proto.types.AccountProof,1));};/** @param {?proto.types.AccountProof|undefined} value */proto.types.StateQueryProof.prototype.setContractproof=function(value){googleProtobuf.Message.setWrapperField(this,1,value);};proto.types.StateQueryProof.prototype.clearContractproof=function(){this.setContractproof(undefined);};/**
	   * Returns whether this field is set.
	   * @return {!boolean}
	   */proto.types.StateQueryProof.prototype.hasContractproof=function(){return googleProtobuf.Message.getField(this,1)!=null;};/**
	   * repeated ContractVarProof varProofs = 2;
	   * @return {!Array.<!proto.types.ContractVarProof>}
	   */proto.types.StateQueryProof.prototype.getVarproofsList=function(){return(/** @type{!Array.<!proto.types.ContractVarProof>} */googleProtobuf.Message.getRepeatedWrapperField(this,proto.types.ContractVarProof,2));};/** @param {!Array.<!proto.types.ContractVarProof>} value */proto.types.StateQueryProof.prototype.setVarproofsList=function(value){googleProtobuf.Message.setRepeatedWrapperField(this,2,value);};/**
	   * @param {!proto.types.ContractVarProof=} opt_value
	   * @param {number=} opt_index
	   * @return {!proto.types.ContractVarProof}
	   */proto.types.StateQueryProof.prototype.addVarproofs=function(opt_value,opt_index){return googleProtobuf.Message.addToRepeatedWrapperField(this,2,opt_value,proto.types.ContractVarProof,opt_index);};proto.types.StateQueryProof.prototype.clearVarproofsList=function(){this.setVarproofsList([]);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.Receipt=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.Receipt.repeatedFields_,null);};goog.inherits(proto.types.Receipt,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.Receipt.repeatedFields_=[8];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.Receipt.prototype.toObject=function(opt_includeInstance){return proto.types.Receipt.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.Receipt} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.Receipt.toObject=function(includeInstance,msg){var obj={contractaddress:msg.getContractaddress_asB64(),status:googleProtobuf.Message.getFieldWithDefault(msg,2,""),ret:googleProtobuf.Message.getFieldWithDefault(msg,3,""),txhash:msg.getTxhash_asB64(),feeused:msg.getFeeused_asB64(),cumulativefeeused:msg.getCumulativefeeused_asB64(),bloom:msg.getBloom_asB64(),eventsList:googleProtobuf.Message.toObjectList(msg.getEventsList(),proto.types.Event.toObject,includeInstance),blockno:googleProtobuf.Message.getFieldWithDefault(msg,9,0),blockhash:msg.getBlockhash_asB64(),txindex:googleProtobuf.Message.getFieldWithDefault(msg,11,0),from:msg.getFrom_asB64(),to:msg.getTo_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.Receipt}
	   */proto.types.Receipt.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.Receipt();return proto.types.Receipt.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.Receipt} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.Receipt}
	   */proto.types.Receipt.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setContractaddress(value);break;case 2:var value=/** @type {string} */reader.readString();msg.setStatus(value);break;case 3:var value=/** @type {string} */reader.readString();msg.setRet(value);break;case 4:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setTxhash(value);break;case 5:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setFeeused(value);break;case 6:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setCumulativefeeused(value);break;case 7:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setBloom(value);break;case 8:var value=new proto.types.Event();reader.readMessage(value,proto.types.Event.deserializeBinaryFromReader);msg.addEvents(value);break;case 9:var value=/** @type {number} */reader.readUint64();msg.setBlockno(value);break;case 10:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setBlockhash(value);break;case 11:var value=/** @type {number} */reader.readInt32();msg.setTxindex(value);break;case 12:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setFrom(value);break;case 13:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setTo(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.Receipt.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.Receipt.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.Receipt} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.Receipt.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getContractaddress_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getStatus();if(f.length>0){writer.writeString(2,f);}f=message.getRet();if(f.length>0){writer.writeString(3,f);}f=message.getTxhash_asU8();if(f.length>0){writer.writeBytes(4,f);}f=message.getFeeused_asU8();if(f.length>0){writer.writeBytes(5,f);}f=message.getCumulativefeeused_asU8();if(f.length>0){writer.writeBytes(6,f);}f=message.getBloom_asU8();if(f.length>0){writer.writeBytes(7,f);}f=message.getEventsList();if(f.length>0){writer.writeRepeatedMessage(8,f,proto.types.Event.serializeBinaryToWriter);}f=message.getBlockno();if(f!==0){writer.writeUint64(9,f);}f=message.getBlockhash_asU8();if(f.length>0){writer.writeBytes(10,f);}f=message.getTxindex();if(f!==0){writer.writeInt32(11,f);}f=message.getFrom_asU8();if(f.length>0){writer.writeBytes(12,f);}f=message.getTo_asU8();if(f.length>0){writer.writeBytes(13,f);}};/**
	   * optional bytes contractAddress = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Receipt.prototype.getContractaddress=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes contractAddress = 1;
	   * This is a type-conversion wrapper around `getContractaddress()`
	   * @return {string}
	   */proto.types.Receipt.prototype.getContractaddress_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getContractaddress()));};/**
	   * optional bytes contractAddress = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getContractaddress()`
	   * @return {!Uint8Array}
	   */proto.types.Receipt.prototype.getContractaddress_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getContractaddress()));};/** @param {!(string|Uint8Array)} value */proto.types.Receipt.prototype.setContractaddress=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional string status = 2;
	   * @return {string}
	   */proto.types.Receipt.prototype.getStatus=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,2,""));};/** @param {string} value */proto.types.Receipt.prototype.setStatus=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional string ret = 3;
	   * @return {string}
	   */proto.types.Receipt.prototype.getRet=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,3,""));};/** @param {string} value */proto.types.Receipt.prototype.setRet=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * optional bytes txHash = 4;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Receipt.prototype.getTxhash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,4,""));};/**
	   * optional bytes txHash = 4;
	   * This is a type-conversion wrapper around `getTxhash()`
	   * @return {string}
	   */proto.types.Receipt.prototype.getTxhash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getTxhash()));};/**
	   * optional bytes txHash = 4;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getTxhash()`
	   * @return {!Uint8Array}
	   */proto.types.Receipt.prototype.getTxhash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getTxhash()));};/** @param {!(string|Uint8Array)} value */proto.types.Receipt.prototype.setTxhash=function(value){googleProtobuf.Message.setField(this,4,value);};/**
	   * optional bytes feeUsed = 5;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Receipt.prototype.getFeeused=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,5,""));};/**
	   * optional bytes feeUsed = 5;
	   * This is a type-conversion wrapper around `getFeeused()`
	   * @return {string}
	   */proto.types.Receipt.prototype.getFeeused_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getFeeused()));};/**
	   * optional bytes feeUsed = 5;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getFeeused()`
	   * @return {!Uint8Array}
	   */proto.types.Receipt.prototype.getFeeused_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getFeeused()));};/** @param {!(string|Uint8Array)} value */proto.types.Receipt.prototype.setFeeused=function(value){googleProtobuf.Message.setField(this,5,value);};/**
	   * optional bytes cumulativeFeeUsed = 6;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Receipt.prototype.getCumulativefeeused=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,6,""));};/**
	   * optional bytes cumulativeFeeUsed = 6;
	   * This is a type-conversion wrapper around `getCumulativefeeused()`
	   * @return {string}
	   */proto.types.Receipt.prototype.getCumulativefeeused_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getCumulativefeeused()));};/**
	   * optional bytes cumulativeFeeUsed = 6;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getCumulativefeeused()`
	   * @return {!Uint8Array}
	   */proto.types.Receipt.prototype.getCumulativefeeused_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getCumulativefeeused()));};/** @param {!(string|Uint8Array)} value */proto.types.Receipt.prototype.setCumulativefeeused=function(value){googleProtobuf.Message.setField(this,6,value);};/**
	   * optional bytes bloom = 7;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Receipt.prototype.getBloom=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,7,""));};/**
	   * optional bytes bloom = 7;
	   * This is a type-conversion wrapper around `getBloom()`
	   * @return {string}
	   */proto.types.Receipt.prototype.getBloom_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getBloom()));};/**
	   * optional bytes bloom = 7;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getBloom()`
	   * @return {!Uint8Array}
	   */proto.types.Receipt.prototype.getBloom_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getBloom()));};/** @param {!(string|Uint8Array)} value */proto.types.Receipt.prototype.setBloom=function(value){googleProtobuf.Message.setField(this,7,value);};/**
	   * repeated Event events = 8;
	   * @return {!Array.<!proto.types.Event>}
	   */proto.types.Receipt.prototype.getEventsList=function(){return(/** @type{!Array.<!proto.types.Event>} */googleProtobuf.Message.getRepeatedWrapperField(this,proto.types.Event,8));};/** @param {!Array.<!proto.types.Event>} value */proto.types.Receipt.prototype.setEventsList=function(value){googleProtobuf.Message.setRepeatedWrapperField(this,8,value);};/**
	   * @param {!proto.types.Event=} opt_value
	   * @param {number=} opt_index
	   * @return {!proto.types.Event}
	   */proto.types.Receipt.prototype.addEvents=function(opt_value,opt_index){return googleProtobuf.Message.addToRepeatedWrapperField(this,8,opt_value,proto.types.Event,opt_index);};proto.types.Receipt.prototype.clearEventsList=function(){this.setEventsList([]);};/**
	   * optional uint64 blockNo = 9;
	   * @return {number}
	   */proto.types.Receipt.prototype.getBlockno=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,9,0));};/** @param {number} value */proto.types.Receipt.prototype.setBlockno=function(value){googleProtobuf.Message.setField(this,9,value);};/**
	   * optional bytes blockHash = 10;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Receipt.prototype.getBlockhash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,10,""));};/**
	   * optional bytes blockHash = 10;
	   * This is a type-conversion wrapper around `getBlockhash()`
	   * @return {string}
	   */proto.types.Receipt.prototype.getBlockhash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getBlockhash()));};/**
	   * optional bytes blockHash = 10;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getBlockhash()`
	   * @return {!Uint8Array}
	   */proto.types.Receipt.prototype.getBlockhash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getBlockhash()));};/** @param {!(string|Uint8Array)} value */proto.types.Receipt.prototype.setBlockhash=function(value){googleProtobuf.Message.setField(this,10,value);};/**
	   * optional int32 txIndex = 11;
	   * @return {number}
	   */proto.types.Receipt.prototype.getTxindex=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,11,0));};/** @param {number} value */proto.types.Receipt.prototype.setTxindex=function(value){googleProtobuf.Message.setField(this,11,value);};/**
	   * optional bytes from = 12;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Receipt.prototype.getFrom=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,12,""));};/**
	   * optional bytes from = 12;
	   * This is a type-conversion wrapper around `getFrom()`
	   * @return {string}
	   */proto.types.Receipt.prototype.getFrom_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getFrom()));};/**
	   * optional bytes from = 12;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getFrom()`
	   * @return {!Uint8Array}
	   */proto.types.Receipt.prototype.getFrom_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getFrom()));};/** @param {!(string|Uint8Array)} value */proto.types.Receipt.prototype.setFrom=function(value){googleProtobuf.Message.setField(this,12,value);};/**
	   * optional bytes to = 13;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Receipt.prototype.getTo=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,13,""));};/**
	   * optional bytes to = 13;
	   * This is a type-conversion wrapper around `getTo()`
	   * @return {string}
	   */proto.types.Receipt.prototype.getTo_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getTo()));};/**
	   * optional bytes to = 13;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getTo()`
	   * @return {!Uint8Array}
	   */proto.types.Receipt.prototype.getTo_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getTo()));};/** @param {!(string|Uint8Array)} value */proto.types.Receipt.prototype.setTo=function(value){googleProtobuf.Message.setField(this,13,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.Event=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.Event,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.Event.prototype.toObject=function(opt_includeInstance){return proto.types.Event.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.Event} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.Event.toObject=function(includeInstance,msg){var obj={contractaddress:msg.getContractaddress_asB64(),eventname:googleProtobuf.Message.getFieldWithDefault(msg,2,""),jsonargs:googleProtobuf.Message.getFieldWithDefault(msg,3,""),eventidx:googleProtobuf.Message.getFieldWithDefault(msg,4,0),txhash:msg.getTxhash_asB64(),blockhash:msg.getBlockhash_asB64(),blockno:googleProtobuf.Message.getFieldWithDefault(msg,7,0),txindex:googleProtobuf.Message.getFieldWithDefault(msg,8,0)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.Event}
	   */proto.types.Event.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.Event();return proto.types.Event.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.Event} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.Event}
	   */proto.types.Event.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setContractaddress(value);break;case 2:var value=/** @type {string} */reader.readString();msg.setEventname(value);break;case 3:var value=/** @type {string} */reader.readString();msg.setJsonargs(value);break;case 4:var value=/** @type {number} */reader.readInt32();msg.setEventidx(value);break;case 5:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setTxhash(value);break;case 6:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setBlockhash(value);break;case 7:var value=/** @type {number} */reader.readUint64();msg.setBlockno(value);break;case 8:var value=/** @type {number} */reader.readInt32();msg.setTxindex(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.Event.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.Event.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.Event} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.Event.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getContractaddress_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getEventname();if(f.length>0){writer.writeString(2,f);}f=message.getJsonargs();if(f.length>0){writer.writeString(3,f);}f=message.getEventidx();if(f!==0){writer.writeInt32(4,f);}f=message.getTxhash_asU8();if(f.length>0){writer.writeBytes(5,f);}f=message.getBlockhash_asU8();if(f.length>0){writer.writeBytes(6,f);}f=message.getBlockno();if(f!==0){writer.writeUint64(7,f);}f=message.getTxindex();if(f!==0){writer.writeInt32(8,f);}};/**
	   * optional bytes contractAddress = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Event.prototype.getContractaddress=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes contractAddress = 1;
	   * This is a type-conversion wrapper around `getContractaddress()`
	   * @return {string}
	   */proto.types.Event.prototype.getContractaddress_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getContractaddress()));};/**
	   * optional bytes contractAddress = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getContractaddress()`
	   * @return {!Uint8Array}
	   */proto.types.Event.prototype.getContractaddress_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getContractaddress()));};/** @param {!(string|Uint8Array)} value */proto.types.Event.prototype.setContractaddress=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional string eventName = 2;
	   * @return {string}
	   */proto.types.Event.prototype.getEventname=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,2,""));};/** @param {string} value */proto.types.Event.prototype.setEventname=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional string jsonArgs = 3;
	   * @return {string}
	   */proto.types.Event.prototype.getJsonargs=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,3,""));};/** @param {string} value */proto.types.Event.prototype.setJsonargs=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * optional int32 eventIdx = 4;
	   * @return {number}
	   */proto.types.Event.prototype.getEventidx=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,4,0));};/** @param {number} value */proto.types.Event.prototype.setEventidx=function(value){googleProtobuf.Message.setField(this,4,value);};/**
	   * optional bytes txHash = 5;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Event.prototype.getTxhash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,5,""));};/**
	   * optional bytes txHash = 5;
	   * This is a type-conversion wrapper around `getTxhash()`
	   * @return {string}
	   */proto.types.Event.prototype.getTxhash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getTxhash()));};/**
	   * optional bytes txHash = 5;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getTxhash()`
	   * @return {!Uint8Array}
	   */proto.types.Event.prototype.getTxhash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getTxhash()));};/** @param {!(string|Uint8Array)} value */proto.types.Event.prototype.setTxhash=function(value){googleProtobuf.Message.setField(this,5,value);};/**
	   * optional bytes blockHash = 6;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Event.prototype.getBlockhash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,6,""));};/**
	   * optional bytes blockHash = 6;
	   * This is a type-conversion wrapper around `getBlockhash()`
	   * @return {string}
	   */proto.types.Event.prototype.getBlockhash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getBlockhash()));};/**
	   * optional bytes blockHash = 6;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getBlockhash()`
	   * @return {!Uint8Array}
	   */proto.types.Event.prototype.getBlockhash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getBlockhash()));};/** @param {!(string|Uint8Array)} value */proto.types.Event.prototype.setBlockhash=function(value){googleProtobuf.Message.setField(this,6,value);};/**
	   * optional uint64 blockNo = 7;
	   * @return {number}
	   */proto.types.Event.prototype.getBlockno=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,7,0));};/** @param {number} value */proto.types.Event.prototype.setBlockno=function(value){googleProtobuf.Message.setField(this,7,value);};/**
	   * optional int32 txIndex = 8;
	   * @return {number}
	   */proto.types.Event.prototype.getTxindex=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,8,0));};/** @param {number} value */proto.types.Event.prototype.setTxindex=function(value){googleProtobuf.Message.setField(this,8,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.FnArgument=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.FnArgument,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.FnArgument.prototype.toObject=function(opt_includeInstance){return proto.types.FnArgument.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.FnArgument} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.FnArgument.toObject=function(includeInstance,msg){var obj={name:googleProtobuf.Message.getFieldWithDefault(msg,1,"")};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.FnArgument}
	   */proto.types.FnArgument.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.FnArgument();return proto.types.FnArgument.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.FnArgument} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.FnArgument}
	   */proto.types.FnArgument.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {string} */reader.readString();msg.setName(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.FnArgument.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.FnArgument.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.FnArgument} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.FnArgument.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getName();if(f.length>0){writer.writeString(1,f);}};/**
	   * optional string name = 1;
	   * @return {string}
	   */proto.types.FnArgument.prototype.getName=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/** @param {string} value */proto.types.FnArgument.prototype.setName=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.Function=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.Function.repeatedFields_,null);};goog.inherits(proto.types.Function,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.Function.repeatedFields_=[2];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.Function.prototype.toObject=function(opt_includeInstance){return proto.types.Function.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.Function} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.Function.toObject=function(includeInstance,msg){var obj={name:googleProtobuf.Message.getFieldWithDefault(msg,1,""),argumentsList:googleProtobuf.Message.toObjectList(msg.getArgumentsList(),proto.types.FnArgument.toObject,includeInstance),payable:googleProtobuf.Message.getFieldWithDefault(msg,3,false),view:googleProtobuf.Message.getFieldWithDefault(msg,4,false)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.Function}
	   */proto.types.Function.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.Function();return proto.types.Function.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.Function} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.Function}
	   */proto.types.Function.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {string} */reader.readString();msg.setName(value);break;case 2:var value=new proto.types.FnArgument();reader.readMessage(value,proto.types.FnArgument.deserializeBinaryFromReader);msg.addArguments(value);break;case 3:var value=/** @type {boolean} */reader.readBool();msg.setPayable(value);break;case 4:var value=/** @type {boolean} */reader.readBool();msg.setView(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.Function.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.Function.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.Function} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.Function.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getName();if(f.length>0){writer.writeString(1,f);}f=message.getArgumentsList();if(f.length>0){writer.writeRepeatedMessage(2,f,proto.types.FnArgument.serializeBinaryToWriter);}f=message.getPayable();if(f){writer.writeBool(3,f);}f=message.getView();if(f){writer.writeBool(4,f);}};/**
	   * optional string name = 1;
	   * @return {string}
	   */proto.types.Function.prototype.getName=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/** @param {string} value */proto.types.Function.prototype.setName=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * repeated FnArgument arguments = 2;
	   * @return {!Array.<!proto.types.FnArgument>}
	   */proto.types.Function.prototype.getArgumentsList=function(){return(/** @type{!Array.<!proto.types.FnArgument>} */googleProtobuf.Message.getRepeatedWrapperField(this,proto.types.FnArgument,2));};/** @param {!Array.<!proto.types.FnArgument>} value */proto.types.Function.prototype.setArgumentsList=function(value){googleProtobuf.Message.setRepeatedWrapperField(this,2,value);};/**
	   * @param {!proto.types.FnArgument=} opt_value
	   * @param {number=} opt_index
	   * @return {!proto.types.FnArgument}
	   */proto.types.Function.prototype.addArguments=function(opt_value,opt_index){return googleProtobuf.Message.addToRepeatedWrapperField(this,2,opt_value,proto.types.FnArgument,opt_index);};proto.types.Function.prototype.clearArgumentsList=function(){this.setArgumentsList([]);};/**
	   * optional bool payable = 3;
	   * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	   * You should avoid comparisons like {@code val === true/false} in those cases.
	   * @return {boolean}
	   */proto.types.Function.prototype.getPayable=function(){return(/** @type {boolean} */googleProtobuf.Message.getFieldWithDefault(this,3,false));};/** @param {boolean} value */proto.types.Function.prototype.setPayable=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * optional bool view = 4;
	   * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	   * You should avoid comparisons like {@code val === true/false} in those cases.
	   * @return {boolean}
	   */proto.types.Function.prototype.getView=function(){return(/** @type {boolean} */googleProtobuf.Message.getFieldWithDefault(this,4,false));};/** @param {boolean} value */proto.types.Function.prototype.setView=function(value){googleProtobuf.Message.setField(this,4,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.StateVar=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.StateVar,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.StateVar.prototype.toObject=function(opt_includeInstance){return proto.types.StateVar.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.StateVar} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.StateVar.toObject=function(includeInstance,msg){var obj={name:googleProtobuf.Message.getFieldWithDefault(msg,1,""),type:googleProtobuf.Message.getFieldWithDefault(msg,2,""),len:googleProtobuf.Message.getFieldWithDefault(msg,3,0)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.StateVar}
	   */proto.types.StateVar.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.StateVar();return proto.types.StateVar.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.StateVar} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.StateVar}
	   */proto.types.StateVar.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {string} */reader.readString();msg.setName(value);break;case 2:var value=/** @type {string} */reader.readString();msg.setType(value);break;case 3:var value=/** @type {number} */reader.readInt32();msg.setLen(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.StateVar.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.StateVar.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.StateVar} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.StateVar.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getName();if(f.length>0){writer.writeString(1,f);}f=message.getType();if(f.length>0){writer.writeString(2,f);}f=message.getLen();if(f!==0){writer.writeInt32(3,f);}};/**
	   * optional string name = 1;
	   * @return {string}
	   */proto.types.StateVar.prototype.getName=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/** @param {string} value */proto.types.StateVar.prototype.setName=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional string type = 2;
	   * @return {string}
	   */proto.types.StateVar.prototype.getType=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,2,""));};/** @param {string} value */proto.types.StateVar.prototype.setType=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional int32 len = 3;
	   * @return {number}
	   */proto.types.StateVar.prototype.getLen=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,3,0));};/** @param {number} value */proto.types.StateVar.prototype.setLen=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.ABI=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.ABI.repeatedFields_,null);};goog.inherits(proto.types.ABI,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.ABI.repeatedFields_=[3,4];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.ABI.prototype.toObject=function(opt_includeInstance){return proto.types.ABI.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.ABI} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.ABI.toObject=function(includeInstance,msg){var obj={version:googleProtobuf.Message.getFieldWithDefault(msg,1,""),language:googleProtobuf.Message.getFieldWithDefault(msg,2,""),functionsList:googleProtobuf.Message.toObjectList(msg.getFunctionsList(),proto.types.Function.toObject,includeInstance),stateVariablesList:googleProtobuf.Message.toObjectList(msg.getStateVariablesList(),proto.types.StateVar.toObject,includeInstance)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.ABI}
	   */proto.types.ABI.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.ABI();return proto.types.ABI.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.ABI} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.ABI}
	   */proto.types.ABI.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {string} */reader.readString();msg.setVersion(value);break;case 2:var value=/** @type {string} */reader.readString();msg.setLanguage(value);break;case 3:var value=new proto.types.Function();reader.readMessage(value,proto.types.Function.deserializeBinaryFromReader);msg.addFunctions(value);break;case 4:var value=new proto.types.StateVar();reader.readMessage(value,proto.types.StateVar.deserializeBinaryFromReader);msg.addStateVariables(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.ABI.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.ABI.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.ABI} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.ABI.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getVersion();if(f.length>0){writer.writeString(1,f);}f=message.getLanguage();if(f.length>0){writer.writeString(2,f);}f=message.getFunctionsList();if(f.length>0){writer.writeRepeatedMessage(3,f,proto.types.Function.serializeBinaryToWriter);}f=message.getStateVariablesList();if(f.length>0){writer.writeRepeatedMessage(4,f,proto.types.StateVar.serializeBinaryToWriter);}};/**
	   * optional string version = 1;
	   * @return {string}
	   */proto.types.ABI.prototype.getVersion=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/** @param {string} value */proto.types.ABI.prototype.setVersion=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional string language = 2;
	   * @return {string}
	   */proto.types.ABI.prototype.getLanguage=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,2,""));};/** @param {string} value */proto.types.ABI.prototype.setLanguage=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * repeated Function functions = 3;
	   * @return {!Array.<!proto.types.Function>}
	   */proto.types.ABI.prototype.getFunctionsList=function(){return(/** @type{!Array.<!proto.types.Function>} */googleProtobuf.Message.getRepeatedWrapperField(this,proto.types.Function,3));};/** @param {!Array.<!proto.types.Function>} value */proto.types.ABI.prototype.setFunctionsList=function(value){googleProtobuf.Message.setRepeatedWrapperField(this,3,value);};/**
	   * @param {!proto.types.Function=} opt_value
	   * @param {number=} opt_index
	   * @return {!proto.types.Function}
	   */proto.types.ABI.prototype.addFunctions=function(opt_value,opt_index){return googleProtobuf.Message.addToRepeatedWrapperField(this,3,opt_value,proto.types.Function,opt_index);};proto.types.ABI.prototype.clearFunctionsList=function(){this.setFunctionsList([]);};/**
	   * repeated StateVar state_variables = 4;
	   * @return {!Array.<!proto.types.StateVar>}
	   */proto.types.ABI.prototype.getStateVariablesList=function(){return(/** @type{!Array.<!proto.types.StateVar>} */googleProtobuf.Message.getRepeatedWrapperField(this,proto.types.StateVar,4));};/** @param {!Array.<!proto.types.StateVar>} value */proto.types.ABI.prototype.setStateVariablesList=function(value){googleProtobuf.Message.setRepeatedWrapperField(this,4,value);};/**
	   * @param {!proto.types.StateVar=} opt_value
	   * @param {number=} opt_index
	   * @return {!proto.types.StateVar}
	   */proto.types.ABI.prototype.addStateVariables=function(opt_value,opt_index){return googleProtobuf.Message.addToRepeatedWrapperField(this,4,opt_value,proto.types.StateVar,opt_index);};proto.types.ABI.prototype.clearStateVariablesList=function(){this.setStateVariablesList([]);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.Query=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.Query,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.Query.prototype.toObject=function(opt_includeInstance){return proto.types.Query.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.Query} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.Query.toObject=function(includeInstance,msg){var obj={contractaddress:msg.getContractaddress_asB64(),queryinfo:msg.getQueryinfo_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.Query}
	   */proto.types.Query.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.Query();return proto.types.Query.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.Query} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.Query}
	   */proto.types.Query.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setContractaddress(value);break;case 2:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setQueryinfo(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.Query.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.Query.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.Query} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.Query.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getContractaddress_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getQueryinfo_asU8();if(f.length>0){writer.writeBytes(2,f);}};/**
	   * optional bytes contractAddress = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Query.prototype.getContractaddress=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes contractAddress = 1;
	   * This is a type-conversion wrapper around `getContractaddress()`
	   * @return {string}
	   */proto.types.Query.prototype.getContractaddress_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getContractaddress()));};/**
	   * optional bytes contractAddress = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getContractaddress()`
	   * @return {!Uint8Array}
	   */proto.types.Query.prototype.getContractaddress_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getContractaddress()));};/** @param {!(string|Uint8Array)} value */proto.types.Query.prototype.setContractaddress=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional bytes queryinfo = 2;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Query.prototype.getQueryinfo=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,2,""));};/**
	   * optional bytes queryinfo = 2;
	   * This is a type-conversion wrapper around `getQueryinfo()`
	   * @return {string}
	   */proto.types.Query.prototype.getQueryinfo_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getQueryinfo()));};/**
	   * optional bytes queryinfo = 2;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getQueryinfo()`
	   * @return {!Uint8Array}
	   */proto.types.Query.prototype.getQueryinfo_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getQueryinfo()));};/** @param {!(string|Uint8Array)} value */proto.types.Query.prototype.setQueryinfo=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.StateQuery=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.StateQuery.repeatedFields_,null);};goog.inherits(proto.types.StateQuery,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.StateQuery.repeatedFields_=[2];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.StateQuery.prototype.toObject=function(opt_includeInstance){return proto.types.StateQuery.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.StateQuery} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.StateQuery.toObject=function(includeInstance,msg){var obj={contractaddress:msg.getContractaddress_asB64(),storagekeysList:googleProtobuf.Message.getRepeatedField(msg,2),root:msg.getRoot_asB64(),compressed:googleProtobuf.Message.getFieldWithDefault(msg,4,false)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.StateQuery}
	   */proto.types.StateQuery.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.StateQuery();return proto.types.StateQuery.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.StateQuery} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.StateQuery}
	   */proto.types.StateQuery.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setContractaddress(value);break;case 2:var value=/** @type {string} */reader.readString();msg.addStoragekeys(value);break;case 3:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setRoot(value);break;case 4:var value=/** @type {boolean} */reader.readBool();msg.setCompressed(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.StateQuery.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.StateQuery.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.StateQuery} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.StateQuery.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getContractaddress_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getStoragekeysList();if(f.length>0){writer.writeRepeatedString(2,f);}f=message.getRoot_asU8();if(f.length>0){writer.writeBytes(3,f);}f=message.getCompressed();if(f){writer.writeBool(4,f);}};/**
	   * optional bytes contractAddress = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.StateQuery.prototype.getContractaddress=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes contractAddress = 1;
	   * This is a type-conversion wrapper around `getContractaddress()`
	   * @return {string}
	   */proto.types.StateQuery.prototype.getContractaddress_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getContractaddress()));};/**
	   * optional bytes contractAddress = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getContractaddress()`
	   * @return {!Uint8Array}
	   */proto.types.StateQuery.prototype.getContractaddress_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getContractaddress()));};/** @param {!(string|Uint8Array)} value */proto.types.StateQuery.prototype.setContractaddress=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * repeated string storageKeys = 2;
	   * @return {!Array.<string>}
	   */proto.types.StateQuery.prototype.getStoragekeysList=function(){return(/** @type {!Array.<string>} */googleProtobuf.Message.getRepeatedField(this,2));};/** @param {!Array.<string>} value */proto.types.StateQuery.prototype.setStoragekeysList=function(value){googleProtobuf.Message.setField(this,2,value||[]);};/**
	   * @param {!string} value
	   * @param {number=} opt_index
	   */proto.types.StateQuery.prototype.addStoragekeys=function(value,opt_index){googleProtobuf.Message.addToRepeatedField(this,2,value,opt_index);};proto.types.StateQuery.prototype.clearStoragekeysList=function(){this.setStoragekeysList([]);};/**
	   * optional bytes root = 3;
	   * @return {!(string|Uint8Array)}
	   */proto.types.StateQuery.prototype.getRoot=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,3,""));};/**
	   * optional bytes root = 3;
	   * This is a type-conversion wrapper around `getRoot()`
	   * @return {string}
	   */proto.types.StateQuery.prototype.getRoot_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getRoot()));};/**
	   * optional bytes root = 3;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getRoot()`
	   * @return {!Uint8Array}
	   */proto.types.StateQuery.prototype.getRoot_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getRoot()));};/** @param {!(string|Uint8Array)} value */proto.types.StateQuery.prototype.setRoot=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * optional bool compressed = 4;
	   * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	   * You should avoid comparisons like {@code val === true/false} in those cases.
	   * @return {boolean}
	   */proto.types.StateQuery.prototype.getCompressed=function(){return(/** @type {boolean} */googleProtobuf.Message.getFieldWithDefault(this,4,false));};/** @param {boolean} value */proto.types.StateQuery.prototype.setCompressed=function(value){googleProtobuf.Message.setField(this,4,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.FilterInfo=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.FilterInfo,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.FilterInfo.prototype.toObject=function(opt_includeInstance){return proto.types.FilterInfo.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.FilterInfo} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.FilterInfo.toObject=function(includeInstance,msg){var obj={contractaddress:msg.getContractaddress_asB64(),eventname:googleProtobuf.Message.getFieldWithDefault(msg,2,""),blockfrom:googleProtobuf.Message.getFieldWithDefault(msg,3,0),blockto:googleProtobuf.Message.getFieldWithDefault(msg,4,0),desc:googleProtobuf.Message.getFieldWithDefault(msg,5,false),argfilter:msg.getArgfilter_asB64(),recentblockcnt:googleProtobuf.Message.getFieldWithDefault(msg,7,0)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.FilterInfo}
	   */proto.types.FilterInfo.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.FilterInfo();return proto.types.FilterInfo.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.FilterInfo} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.FilterInfo}
	   */proto.types.FilterInfo.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setContractaddress(value);break;case 2:var value=/** @type {string} */reader.readString();msg.setEventname(value);break;case 3:var value=/** @type {number} */reader.readUint64();msg.setBlockfrom(value);break;case 4:var value=/** @type {number} */reader.readUint64();msg.setBlockto(value);break;case 5:var value=/** @type {boolean} */reader.readBool();msg.setDesc(value);break;case 6:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setArgfilter(value);break;case 7:var value=/** @type {number} */reader.readInt32();msg.setRecentblockcnt(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.FilterInfo.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.FilterInfo.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.FilterInfo} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.FilterInfo.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getContractaddress_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getEventname();if(f.length>0){writer.writeString(2,f);}f=message.getBlockfrom();if(f!==0){writer.writeUint64(3,f);}f=message.getBlockto();if(f!==0){writer.writeUint64(4,f);}f=message.getDesc();if(f){writer.writeBool(5,f);}f=message.getArgfilter_asU8();if(f.length>0){writer.writeBytes(6,f);}f=message.getRecentblockcnt();if(f!==0){writer.writeInt32(7,f);}};/**
	   * optional bytes contractAddress = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.FilterInfo.prototype.getContractaddress=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes contractAddress = 1;
	   * This is a type-conversion wrapper around `getContractaddress()`
	   * @return {string}
	   */proto.types.FilterInfo.prototype.getContractaddress_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getContractaddress()));};/**
	   * optional bytes contractAddress = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getContractaddress()`
	   * @return {!Uint8Array}
	   */proto.types.FilterInfo.prototype.getContractaddress_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getContractaddress()));};/** @param {!(string|Uint8Array)} value */proto.types.FilterInfo.prototype.setContractaddress=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional string eventName = 2;
	   * @return {string}
	   */proto.types.FilterInfo.prototype.getEventname=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,2,""));};/** @param {string} value */proto.types.FilterInfo.prototype.setEventname=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional uint64 blockfrom = 3;
	   * @return {number}
	   */proto.types.FilterInfo.prototype.getBlockfrom=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,3,0));};/** @param {number} value */proto.types.FilterInfo.prototype.setBlockfrom=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * optional uint64 blockto = 4;
	   * @return {number}
	   */proto.types.FilterInfo.prototype.getBlockto=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,4,0));};/** @param {number} value */proto.types.FilterInfo.prototype.setBlockto=function(value){googleProtobuf.Message.setField(this,4,value);};/**
	   * optional bool desc = 5;
	   * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	   * You should avoid comparisons like {@code val === true/false} in those cases.
	   * @return {boolean}
	   */proto.types.FilterInfo.prototype.getDesc=function(){return(/** @type {boolean} */googleProtobuf.Message.getFieldWithDefault(this,5,false));};/** @param {boolean} value */proto.types.FilterInfo.prototype.setDesc=function(value){googleProtobuf.Message.setField(this,5,value);};/**
	   * optional bytes argFilter = 6;
	   * @return {!(string|Uint8Array)}
	   */proto.types.FilterInfo.prototype.getArgfilter=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,6,""));};/**
	   * optional bytes argFilter = 6;
	   * This is a type-conversion wrapper around `getArgfilter()`
	   * @return {string}
	   */proto.types.FilterInfo.prototype.getArgfilter_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getArgfilter()));};/**
	   * optional bytes argFilter = 6;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getArgfilter()`
	   * @return {!Uint8Array}
	   */proto.types.FilterInfo.prototype.getArgfilter_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getArgfilter()));};/** @param {!(string|Uint8Array)} value */proto.types.FilterInfo.prototype.setArgfilter=function(value){googleProtobuf.Message.setField(this,6,value);};/**
	   * optional int32 recentBlockCnt = 7;
	   * @return {number}
	   */proto.types.FilterInfo.prototype.getRecentblockcnt=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,7,0));};/** @param {number} value */proto.types.FilterInfo.prototype.setRecentblockcnt=function(value){googleProtobuf.Message.setField(this,7,value);};/**
	   * @enum {number}
	   */proto.types.TxType={NORMAL:0,GOVERNANCE:1};goog.object.extend(exports,proto.types);});var blockchain_pb_1=blockchain_pb.TxList;var blockchain_pb_2=blockchain_pb.TxBody;var blockchain_pb_3=blockchain_pb.Tx;var blockchain_pb_4=blockchain_pb.Block;var blockchain_pb_5=blockchain_pb.Query;var blockchain_pb_6=blockchain_pb.StateQuery;var blockchain_pb_7=blockchain_pb.FilterInfo;var account_pb=createCommonjsModule(function(module,exports){/**
	   * @fileoverview
	   * @enhanceable
	   * @suppress {messageConventions} JS Compiler reports an error if a variable or
	   *     field starts with 'MSG_' and isn't a translatable message.
	   * @public
	   */ // GENERATED CODE -- DO NOT EDIT!
var goog=googleProtobuf;var global=Function('return this')();goog.exportSymbol('proto.types.Account',null,global);goog.exportSymbol('proto.types.AccountList',null,global);/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.Account=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.Account,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.Account.prototype.toObject=function(opt_includeInstance){return proto.types.Account.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.Account} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.Account.toObject=function(includeInstance,msg){var obj={address:msg.getAddress_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.Account}
	   */proto.types.Account.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.Account();return proto.types.Account.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.Account} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.Account}
	   */proto.types.Account.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setAddress(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.Account.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.Account.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.Account} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.Account.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getAddress_asU8();if(f.length>0){writer.writeBytes(1,f);}};/**
	   * optional bytes address = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Account.prototype.getAddress=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes address = 1;
	   * This is a type-conversion wrapper around `getAddress()`
	   * @return {string}
	   */proto.types.Account.prototype.getAddress_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getAddress()));};/**
	   * optional bytes address = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getAddress()`
	   * @return {!Uint8Array}
	   */proto.types.Account.prototype.getAddress_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getAddress()));};/** @param {!(string|Uint8Array)} value */proto.types.Account.prototype.setAddress=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.AccountList=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.AccountList.repeatedFields_,null);};goog.inherits(proto.types.AccountList,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.AccountList.repeatedFields_=[1];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.AccountList.prototype.toObject=function(opt_includeInstance){return proto.types.AccountList.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.AccountList} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.AccountList.toObject=function(includeInstance,msg){var obj={accountsList:googleProtobuf.Message.toObjectList(msg.getAccountsList(),proto.types.Account.toObject,includeInstance)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.AccountList}
	   */proto.types.AccountList.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.AccountList();return proto.types.AccountList.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.AccountList} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.AccountList}
	   */proto.types.AccountList.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=new proto.types.Account();reader.readMessage(value,proto.types.Account.deserializeBinaryFromReader);msg.addAccounts(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.AccountList.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.AccountList.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.AccountList} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.AccountList.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getAccountsList();if(f.length>0){writer.writeRepeatedMessage(1,f,proto.types.Account.serializeBinaryToWriter);}};/**
	   * repeated Account accounts = 1;
	   * @return {!Array.<!proto.types.Account>}
	   */proto.types.AccountList.prototype.getAccountsList=function(){return(/** @type{!Array.<!proto.types.Account>} */googleProtobuf.Message.getRepeatedWrapperField(this,proto.types.Account,1));};/** @param {!Array.<!proto.types.Account>} value */proto.types.AccountList.prototype.setAccountsList=function(value){googleProtobuf.Message.setRepeatedWrapperField(this,1,value);};/**
	   * @param {!proto.types.Account=} opt_value
	   * @param {number=} opt_index
	   * @return {!proto.types.Account}
	   */proto.types.AccountList.prototype.addAccounts=function(opt_value,opt_index){return googleProtobuf.Message.addToRepeatedWrapperField(this,1,opt_value,proto.types.Account,opt_index);};proto.types.AccountList.prototype.clearAccountsList=function(){this.setAccountsList([]);};goog.object.extend(exports,proto.types);});var account_pb_1=account_pb.Account;var node_pb=createCommonjsModule(function(module,exports){/**
	   * @fileoverview
	   * @enhanceable
	   * @suppress {messageConventions} JS Compiler reports an error if a variable or
	   *     field starts with 'MSG_' and isn't a translatable message.
	   * @public
	   */ // GENERATED CODE -- DO NOT EDIT!
var goog=googleProtobuf;var global=Function('return this')();goog.exportSymbol('proto.types.PeerAddress',null,global);/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.PeerAddress=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.PeerAddress,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.PeerAddress.prototype.toObject=function(opt_includeInstance){return proto.types.PeerAddress.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.PeerAddress} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.PeerAddress.toObject=function(includeInstance,msg){var obj={address:googleProtobuf.Message.getFieldWithDefault(msg,1,""),port:googleProtobuf.Message.getFieldWithDefault(msg,2,0),peerid:msg.getPeerid_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.PeerAddress}
	   */proto.types.PeerAddress.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.PeerAddress();return proto.types.PeerAddress.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.PeerAddress} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.PeerAddress}
	   */proto.types.PeerAddress.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {string} */reader.readString();msg.setAddress(value);break;case 2:var value=/** @type {number} */reader.readUint32();msg.setPort(value);break;case 3:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setPeerid(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.PeerAddress.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.PeerAddress.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.PeerAddress} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.PeerAddress.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getAddress();if(f.length>0){writer.writeString(1,f);}f=message.getPort();if(f!==0){writer.writeUint32(2,f);}f=message.getPeerid_asU8();if(f.length>0){writer.writeBytes(3,f);}};/**
	   * optional string address = 1;
	   * @return {string}
	   */proto.types.PeerAddress.prototype.getAddress=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/** @param {string} value */proto.types.PeerAddress.prototype.setAddress=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional uint32 port = 2;
	   * @return {number}
	   */proto.types.PeerAddress.prototype.getPort=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,2,0));};/** @param {number} value */proto.types.PeerAddress.prototype.setPort=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional bytes peerID = 3;
	   * @return {!(string|Uint8Array)}
	   */proto.types.PeerAddress.prototype.getPeerid=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,3,""));};/**
	   * optional bytes peerID = 3;
	   * This is a type-conversion wrapper around `getPeerid()`
	   * @return {string}
	   */proto.types.PeerAddress.prototype.getPeerid_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getPeerid()));};/**
	   * optional bytes peerID = 3;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getPeerid()`
	   * @return {!Uint8Array}
	   */proto.types.PeerAddress.prototype.getPeerid_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getPeerid()));};/** @param {!(string|Uint8Array)} value */proto.types.PeerAddress.prototype.setPeerid=function(value){googleProtobuf.Message.setField(this,3,value);};goog.object.extend(exports,proto.types);});var p2p_pb=createCommonjsModule(function(module,exports){/**
	   * @fileoverview
	   * @enhanceable
	   * @suppress {messageConventions} JS Compiler reports an error if a variable or
	   *     field starts with 'MSG_' and isn't a translatable message.
	   * @public
	   */ // GENERATED CODE -- DO NOT EDIT!
var goog=googleProtobuf;var global=Function('return this')();goog.exportSymbol('proto.types.AddressesRequest',null,global);goog.exportSymbol('proto.types.AddressesResponse',null,global);goog.exportSymbol('proto.types.BlockProducedNotice',null,global);goog.exportSymbol('proto.types.GetAncestorRequest',null,global);goog.exportSymbol('proto.types.GetAncestorResponse',null,global);goog.exportSymbol('proto.types.GetBlockHeadersRequest',null,global);goog.exportSymbol('proto.types.GetBlockHeadersResponse',null,global);goog.exportSymbol('proto.types.GetBlockRequest',null,global);goog.exportSymbol('proto.types.GetBlockResponse',null,global);goog.exportSymbol('proto.types.GetHashByNo',null,global);goog.exportSymbol('proto.types.GetHashByNoResponse',null,global);goog.exportSymbol('proto.types.GetHashesRequest',null,global);goog.exportSymbol('proto.types.GetHashesResponse',null,global);goog.exportSymbol('proto.types.GetMissingRequest',null,global);goog.exportSymbol('proto.types.GetTransactionsRequest',null,global);goog.exportSymbol('proto.types.GetTransactionsResponse',null,global);goog.exportSymbol('proto.types.GoAwayNotice',null,global);goog.exportSymbol('proto.types.MsgHeader',null,global);goog.exportSymbol('proto.types.NewBlockNotice',null,global);goog.exportSymbol('proto.types.NewTransactionsNotice',null,global);goog.exportSymbol('proto.types.P2PMessage',null,global);goog.exportSymbol('proto.types.Ping',null,global);goog.exportSymbol('proto.types.Pong',null,global);goog.exportSymbol('proto.types.ResultStatus',null,global);goog.exportSymbol('proto.types.Status',null,global);/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.MsgHeader=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.MsgHeader,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.MsgHeader.prototype.toObject=function(opt_includeInstance){return proto.types.MsgHeader.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.MsgHeader} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.MsgHeader.toObject=function(includeInstance,msg){var obj={clientversion:googleProtobuf.Message.getFieldWithDefault(msg,1,""),timestamp:googleProtobuf.Message.getFieldWithDefault(msg,2,0),id:googleProtobuf.Message.getFieldWithDefault(msg,3,""),gossip:googleProtobuf.Message.getFieldWithDefault(msg,4,false),peerid:msg.getPeerid_asB64(),nodepubkey:msg.getNodepubkey_asB64(),sign:msg.getSign_asB64(),subprotocol:googleProtobuf.Message.getFieldWithDefault(msg,8,0),length:googleProtobuf.Message.getFieldWithDefault(msg,9,0)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.MsgHeader}
	   */proto.types.MsgHeader.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.MsgHeader();return proto.types.MsgHeader.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.MsgHeader} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.MsgHeader}
	   */proto.types.MsgHeader.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {string} */reader.readString();msg.setClientversion(value);break;case 2:var value=/** @type {number} */reader.readInt64();msg.setTimestamp(value);break;case 3:var value=/** @type {string} */reader.readString();msg.setId(value);break;case 4:var value=/** @type {boolean} */reader.readBool();msg.setGossip(value);break;case 5:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setPeerid(value);break;case 6:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setNodepubkey(value);break;case 7:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setSign(value);break;case 8:var value=/** @type {number} */reader.readUint32();msg.setSubprotocol(value);break;case 9:var value=/** @type {number} */reader.readUint32();msg.setLength(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.MsgHeader.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.MsgHeader.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.MsgHeader} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.MsgHeader.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getClientversion();if(f.length>0){writer.writeString(1,f);}f=message.getTimestamp();if(f!==0){writer.writeInt64(2,f);}f=message.getId();if(f.length>0){writer.writeString(3,f);}f=message.getGossip();if(f){writer.writeBool(4,f);}f=message.getPeerid_asU8();if(f.length>0){writer.writeBytes(5,f);}f=message.getNodepubkey_asU8();if(f.length>0){writer.writeBytes(6,f);}f=message.getSign_asU8();if(f.length>0){writer.writeBytes(7,f);}f=message.getSubprotocol();if(f!==0){writer.writeUint32(8,f);}f=message.getLength();if(f!==0){writer.writeUint32(9,f);}};/**
	   * optional string clientVersion = 1;
	   * @return {string}
	   */proto.types.MsgHeader.prototype.getClientversion=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/** @param {string} value */proto.types.MsgHeader.prototype.setClientversion=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional int64 timestamp = 2;
	   * @return {number}
	   */proto.types.MsgHeader.prototype.getTimestamp=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,2,0));};/** @param {number} value */proto.types.MsgHeader.prototype.setTimestamp=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional string id = 3;
	   * @return {string}
	   */proto.types.MsgHeader.prototype.getId=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,3,""));};/** @param {string} value */proto.types.MsgHeader.prototype.setId=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * optional bool gossip = 4;
	   * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	   * You should avoid comparisons like {@code val === true/false} in those cases.
	   * @return {boolean}
	   */proto.types.MsgHeader.prototype.getGossip=function(){return(/** @type {boolean} */googleProtobuf.Message.getFieldWithDefault(this,4,false));};/** @param {boolean} value */proto.types.MsgHeader.prototype.setGossip=function(value){googleProtobuf.Message.setField(this,4,value);};/**
	   * optional bytes peerID = 5;
	   * @return {!(string|Uint8Array)}
	   */proto.types.MsgHeader.prototype.getPeerid=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,5,""));};/**
	   * optional bytes peerID = 5;
	   * This is a type-conversion wrapper around `getPeerid()`
	   * @return {string}
	   */proto.types.MsgHeader.prototype.getPeerid_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getPeerid()));};/**
	   * optional bytes peerID = 5;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getPeerid()`
	   * @return {!Uint8Array}
	   */proto.types.MsgHeader.prototype.getPeerid_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getPeerid()));};/** @param {!(string|Uint8Array)} value */proto.types.MsgHeader.prototype.setPeerid=function(value){googleProtobuf.Message.setField(this,5,value);};/**
	   * optional bytes nodePubKey = 6;
	   * @return {!(string|Uint8Array)}
	   */proto.types.MsgHeader.prototype.getNodepubkey=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,6,""));};/**
	   * optional bytes nodePubKey = 6;
	   * This is a type-conversion wrapper around `getNodepubkey()`
	   * @return {string}
	   */proto.types.MsgHeader.prototype.getNodepubkey_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getNodepubkey()));};/**
	   * optional bytes nodePubKey = 6;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getNodepubkey()`
	   * @return {!Uint8Array}
	   */proto.types.MsgHeader.prototype.getNodepubkey_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getNodepubkey()));};/** @param {!(string|Uint8Array)} value */proto.types.MsgHeader.prototype.setNodepubkey=function(value){googleProtobuf.Message.setField(this,6,value);};/**
	   * optional bytes sign = 7;
	   * @return {!(string|Uint8Array)}
	   */proto.types.MsgHeader.prototype.getSign=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,7,""));};/**
	   * optional bytes sign = 7;
	   * This is a type-conversion wrapper around `getSign()`
	   * @return {string}
	   */proto.types.MsgHeader.prototype.getSign_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getSign()));};/**
	   * optional bytes sign = 7;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getSign()`
	   * @return {!Uint8Array}
	   */proto.types.MsgHeader.prototype.getSign_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getSign()));};/** @param {!(string|Uint8Array)} value */proto.types.MsgHeader.prototype.setSign=function(value){googleProtobuf.Message.setField(this,7,value);};/**
	   * optional uint32 subprotocol = 8;
	   * @return {number}
	   */proto.types.MsgHeader.prototype.getSubprotocol=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,8,0));};/** @param {number} value */proto.types.MsgHeader.prototype.setSubprotocol=function(value){googleProtobuf.Message.setField(this,8,value);};/**
	   * optional uint32 length = 9;
	   * @return {number}
	   */proto.types.MsgHeader.prototype.getLength=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,9,0));};/** @param {number} value */proto.types.MsgHeader.prototype.setLength=function(value){googleProtobuf.Message.setField(this,9,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.P2PMessage=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.P2PMessage,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.P2PMessage.prototype.toObject=function(opt_includeInstance){return proto.types.P2PMessage.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.P2PMessage} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.P2PMessage.toObject=function(includeInstance,msg){var f,obj={header:(f=msg.getHeader())&&proto.types.MsgHeader.toObject(includeInstance,f),data:msg.getData_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.P2PMessage}
	   */proto.types.P2PMessage.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.P2PMessage();return proto.types.P2PMessage.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.P2PMessage} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.P2PMessage}
	   */proto.types.P2PMessage.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=new proto.types.MsgHeader();reader.readMessage(value,proto.types.MsgHeader.deserializeBinaryFromReader);msg.setHeader(value);break;case 2:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setData(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.P2PMessage.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.P2PMessage.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.P2PMessage} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.P2PMessage.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getHeader();if(f!=null){writer.writeMessage(1,f,proto.types.MsgHeader.serializeBinaryToWriter);}f=message.getData_asU8();if(f.length>0){writer.writeBytes(2,f);}};/**
	   * optional MsgHeader header = 1;
	   * @return {?proto.types.MsgHeader}
	   */proto.types.P2PMessage.prototype.getHeader=function(){return(/** @type{?proto.types.MsgHeader} */googleProtobuf.Message.getWrapperField(this,proto.types.MsgHeader,1));};/** @param {?proto.types.MsgHeader|undefined} value */proto.types.P2PMessage.prototype.setHeader=function(value){googleProtobuf.Message.setWrapperField(this,1,value);};proto.types.P2PMessage.prototype.clearHeader=function(){this.setHeader(undefined);};/**
	   * Returns whether this field is set.
	   * @return {!boolean}
	   */proto.types.P2PMessage.prototype.hasHeader=function(){return googleProtobuf.Message.getField(this,1)!=null;};/**
	   * optional bytes data = 2;
	   * @return {!(string|Uint8Array)}
	   */proto.types.P2PMessage.prototype.getData=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,2,""));};/**
	   * optional bytes data = 2;
	   * This is a type-conversion wrapper around `getData()`
	   * @return {string}
	   */proto.types.P2PMessage.prototype.getData_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getData()));};/**
	   * optional bytes data = 2;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getData()`
	   * @return {!Uint8Array}
	   */proto.types.P2PMessage.prototype.getData_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getData()));};/** @param {!(string|Uint8Array)} value */proto.types.P2PMessage.prototype.setData=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.Ping=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.Ping,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.Ping.prototype.toObject=function(opt_includeInstance){return proto.types.Ping.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.Ping} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.Ping.toObject=function(includeInstance,msg){var obj={bestBlockHash:msg.getBestBlockHash_asB64(),bestHeight:googleProtobuf.Message.getFieldWithDefault(msg,2,0)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.Ping}
	   */proto.types.Ping.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.Ping();return proto.types.Ping.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.Ping} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.Ping}
	   */proto.types.Ping.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setBestBlockHash(value);break;case 2:var value=/** @type {number} */reader.readUint64();msg.setBestHeight(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.Ping.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.Ping.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.Ping} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.Ping.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getBestBlockHash_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getBestHeight();if(f!==0){writer.writeUint64(2,f);}};/**
	   * optional bytes best_block_hash = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Ping.prototype.getBestBlockHash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes best_block_hash = 1;
	   * This is a type-conversion wrapper around `getBestBlockHash()`
	   * @return {string}
	   */proto.types.Ping.prototype.getBestBlockHash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getBestBlockHash()));};/**
	   * optional bytes best_block_hash = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getBestBlockHash()`
	   * @return {!Uint8Array}
	   */proto.types.Ping.prototype.getBestBlockHash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getBestBlockHash()));};/** @param {!(string|Uint8Array)} value */proto.types.Ping.prototype.setBestBlockHash=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional uint64 best_height = 2;
	   * @return {number}
	   */proto.types.Ping.prototype.getBestHeight=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,2,0));};/** @param {number} value */proto.types.Ping.prototype.setBestHeight=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.Pong=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.Pong,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.Pong.prototype.toObject=function(opt_includeInstance){return proto.types.Pong.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.Pong} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.Pong.toObject=function(includeInstance,msg){var obj={bestblockhash:msg.getBestblockhash_asB64(),bestheight:googleProtobuf.Message.getFieldWithDefault(msg,2,0)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.Pong}
	   */proto.types.Pong.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.Pong();return proto.types.Pong.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.Pong} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.Pong}
	   */proto.types.Pong.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setBestblockhash(value);break;case 2:var value=/** @type {number} */reader.readUint64();msg.setBestheight(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.Pong.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.Pong.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.Pong} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.Pong.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getBestblockhash_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getBestheight();if(f!==0){writer.writeUint64(2,f);}};/**
	   * optional bytes bestBlockHash = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Pong.prototype.getBestblockhash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes bestBlockHash = 1;
	   * This is a type-conversion wrapper around `getBestblockhash()`
	   * @return {string}
	   */proto.types.Pong.prototype.getBestblockhash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getBestblockhash()));};/**
	   * optional bytes bestBlockHash = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getBestblockhash()`
	   * @return {!Uint8Array}
	   */proto.types.Pong.prototype.getBestblockhash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getBestblockhash()));};/** @param {!(string|Uint8Array)} value */proto.types.Pong.prototype.setBestblockhash=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional uint64 bestHeight = 2;
	   * @return {number}
	   */proto.types.Pong.prototype.getBestheight=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,2,0));};/** @param {number} value */proto.types.Pong.prototype.setBestheight=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.Status=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.Status,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.Status.prototype.toObject=function(opt_includeInstance){return proto.types.Status.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.Status} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.Status.toObject=function(includeInstance,msg){var f,obj={sender:(f=msg.getSender())&&node_pb.PeerAddress.toObject(includeInstance,f),bestblockhash:msg.getBestblockhash_asB64(),bestheight:googleProtobuf.Message.getFieldWithDefault(msg,3,0),chainid:msg.getChainid_asB64(),noexpose:googleProtobuf.Message.getFieldWithDefault(msg,5,false)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.Status}
	   */proto.types.Status.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.Status();return proto.types.Status.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.Status} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.Status}
	   */proto.types.Status.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=new node_pb.PeerAddress();reader.readMessage(value,node_pb.PeerAddress.deserializeBinaryFromReader);msg.setSender(value);break;case 2:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setBestblockhash(value);break;case 3:var value=/** @type {number} */reader.readUint64();msg.setBestheight(value);break;case 4:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setChainid(value);break;case 5:var value=/** @type {boolean} */reader.readBool();msg.setNoexpose(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.Status.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.Status.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.Status} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.Status.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getSender();if(f!=null){writer.writeMessage(1,f,node_pb.PeerAddress.serializeBinaryToWriter);}f=message.getBestblockhash_asU8();if(f.length>0){writer.writeBytes(2,f);}f=message.getBestheight();if(f!==0){writer.writeUint64(3,f);}f=message.getChainid_asU8();if(f.length>0){writer.writeBytes(4,f);}f=message.getNoexpose();if(f){writer.writeBool(5,f);}};/**
	   * optional PeerAddress sender = 1;
	   * @return {?proto.types.PeerAddress}
	   */proto.types.Status.prototype.getSender=function(){return(/** @type{?proto.types.PeerAddress} */googleProtobuf.Message.getWrapperField(this,node_pb.PeerAddress,1));};/** @param {?proto.types.PeerAddress|undefined} value */proto.types.Status.prototype.setSender=function(value){googleProtobuf.Message.setWrapperField(this,1,value);};proto.types.Status.prototype.clearSender=function(){this.setSender(undefined);};/**
	   * Returns whether this field is set.
	   * @return {!boolean}
	   */proto.types.Status.prototype.hasSender=function(){return googleProtobuf.Message.getField(this,1)!=null;};/**
	   * optional bytes bestBlockHash = 2;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Status.prototype.getBestblockhash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,2,""));};/**
	   * optional bytes bestBlockHash = 2;
	   * This is a type-conversion wrapper around `getBestblockhash()`
	   * @return {string}
	   */proto.types.Status.prototype.getBestblockhash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getBestblockhash()));};/**
	   * optional bytes bestBlockHash = 2;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getBestblockhash()`
	   * @return {!Uint8Array}
	   */proto.types.Status.prototype.getBestblockhash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getBestblockhash()));};/** @param {!(string|Uint8Array)} value */proto.types.Status.prototype.setBestblockhash=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional uint64 bestHeight = 3;
	   * @return {number}
	   */proto.types.Status.prototype.getBestheight=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,3,0));};/** @param {number} value */proto.types.Status.prototype.setBestheight=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * optional bytes chainID = 4;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Status.prototype.getChainid=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,4,""));};/**
	   * optional bytes chainID = 4;
	   * This is a type-conversion wrapper around `getChainid()`
	   * @return {string}
	   */proto.types.Status.prototype.getChainid_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getChainid()));};/**
	   * optional bytes chainID = 4;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getChainid()`
	   * @return {!Uint8Array}
	   */proto.types.Status.prototype.getChainid_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getChainid()));};/** @param {!(string|Uint8Array)} value */proto.types.Status.prototype.setChainid=function(value){googleProtobuf.Message.setField(this,4,value);};/**
	   * optional bool noExpose = 5;
	   * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	   * You should avoid comparisons like {@code val === true/false} in those cases.
	   * @return {boolean}
	   */proto.types.Status.prototype.getNoexpose=function(){return(/** @type {boolean} */googleProtobuf.Message.getFieldWithDefault(this,5,false));};/** @param {boolean} value */proto.types.Status.prototype.setNoexpose=function(value){googleProtobuf.Message.setField(this,5,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.GoAwayNotice=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.GoAwayNotice,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.GoAwayNotice.prototype.toObject=function(opt_includeInstance){return proto.types.GoAwayNotice.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.GoAwayNotice} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.GoAwayNotice.toObject=function(includeInstance,msg){var obj={message:googleProtobuf.Message.getFieldWithDefault(msg,1,"")};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.GoAwayNotice}
	   */proto.types.GoAwayNotice.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.GoAwayNotice();return proto.types.GoAwayNotice.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.GoAwayNotice} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.GoAwayNotice}
	   */proto.types.GoAwayNotice.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {string} */reader.readString();msg.setMessage(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.GoAwayNotice.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.GoAwayNotice.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.GoAwayNotice} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.GoAwayNotice.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getMessage();if(f.length>0){writer.writeString(1,f);}};/**
	   * optional string message = 1;
	   * @return {string}
	   */proto.types.GoAwayNotice.prototype.getMessage=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/** @param {string} value */proto.types.GoAwayNotice.prototype.setMessage=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.AddressesRequest=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.AddressesRequest,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.AddressesRequest.prototype.toObject=function(opt_includeInstance){return proto.types.AddressesRequest.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.AddressesRequest} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.AddressesRequest.toObject=function(includeInstance,msg){var f,obj={sender:(f=msg.getSender())&&node_pb.PeerAddress.toObject(includeInstance,f),maxsize:googleProtobuf.Message.getFieldWithDefault(msg,2,0)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.AddressesRequest}
	   */proto.types.AddressesRequest.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.AddressesRequest();return proto.types.AddressesRequest.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.AddressesRequest} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.AddressesRequest}
	   */proto.types.AddressesRequest.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=new node_pb.PeerAddress();reader.readMessage(value,node_pb.PeerAddress.deserializeBinaryFromReader);msg.setSender(value);break;case 2:var value=/** @type {number} */reader.readUint32();msg.setMaxsize(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.AddressesRequest.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.AddressesRequest.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.AddressesRequest} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.AddressesRequest.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getSender();if(f!=null){writer.writeMessage(1,f,node_pb.PeerAddress.serializeBinaryToWriter);}f=message.getMaxsize();if(f!==0){writer.writeUint32(2,f);}};/**
	   * optional PeerAddress sender = 1;
	   * @return {?proto.types.PeerAddress}
	   */proto.types.AddressesRequest.prototype.getSender=function(){return(/** @type{?proto.types.PeerAddress} */googleProtobuf.Message.getWrapperField(this,node_pb.PeerAddress,1));};/** @param {?proto.types.PeerAddress|undefined} value */proto.types.AddressesRequest.prototype.setSender=function(value){googleProtobuf.Message.setWrapperField(this,1,value);};proto.types.AddressesRequest.prototype.clearSender=function(){this.setSender(undefined);};/**
	   * Returns whether this field is set.
	   * @return {!boolean}
	   */proto.types.AddressesRequest.prototype.hasSender=function(){return googleProtobuf.Message.getField(this,1)!=null;};/**
	   * optional uint32 maxSize = 2;
	   * @return {number}
	   */proto.types.AddressesRequest.prototype.getMaxsize=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,2,0));};/** @param {number} value */proto.types.AddressesRequest.prototype.setMaxsize=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.AddressesResponse=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.AddressesResponse.repeatedFields_,null);};goog.inherits(proto.types.AddressesResponse,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.AddressesResponse.repeatedFields_=[2];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.AddressesResponse.prototype.toObject=function(opt_includeInstance){return proto.types.AddressesResponse.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.AddressesResponse} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.AddressesResponse.toObject=function(includeInstance,msg){var obj={status:googleProtobuf.Message.getFieldWithDefault(msg,1,0),peersList:googleProtobuf.Message.toObjectList(msg.getPeersList(),node_pb.PeerAddress.toObject,includeInstance)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.AddressesResponse}
	   */proto.types.AddressesResponse.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.AddressesResponse();return proto.types.AddressesResponse.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.AddressesResponse} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.AddressesResponse}
	   */proto.types.AddressesResponse.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!proto.types.ResultStatus} */reader.readEnum();msg.setStatus(value);break;case 2:var value=new node_pb.PeerAddress();reader.readMessage(value,node_pb.PeerAddress.deserializeBinaryFromReader);msg.addPeers(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.AddressesResponse.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.AddressesResponse.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.AddressesResponse} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.AddressesResponse.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getStatus();if(f!==0.0){writer.writeEnum(1,f);}f=message.getPeersList();if(f.length>0){writer.writeRepeatedMessage(2,f,node_pb.PeerAddress.serializeBinaryToWriter);}};/**
	   * optional ResultStatus status = 1;
	   * @return {!proto.types.ResultStatus}
	   */proto.types.AddressesResponse.prototype.getStatus=function(){return(/** @type {!proto.types.ResultStatus} */googleProtobuf.Message.getFieldWithDefault(this,1,0));};/** @param {!proto.types.ResultStatus} value */proto.types.AddressesResponse.prototype.setStatus=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * repeated PeerAddress peers = 2;
	   * @return {!Array.<!proto.types.PeerAddress>}
	   */proto.types.AddressesResponse.prototype.getPeersList=function(){return(/** @type{!Array.<!proto.types.PeerAddress>} */googleProtobuf.Message.getRepeatedWrapperField(this,node_pb.PeerAddress,2));};/** @param {!Array.<!proto.types.PeerAddress>} value */proto.types.AddressesResponse.prototype.setPeersList=function(value){googleProtobuf.Message.setRepeatedWrapperField(this,2,value);};/**
	   * @param {!proto.types.PeerAddress=} opt_value
	   * @param {number=} opt_index
	   * @return {!proto.types.PeerAddress}
	   */proto.types.AddressesResponse.prototype.addPeers=function(opt_value,opt_index){return googleProtobuf.Message.addToRepeatedWrapperField(this,2,opt_value,proto.types.PeerAddress,opt_index);};proto.types.AddressesResponse.prototype.clearPeersList=function(){this.setPeersList([]);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.NewBlockNotice=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.NewBlockNotice,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.NewBlockNotice.prototype.toObject=function(opt_includeInstance){return proto.types.NewBlockNotice.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.NewBlockNotice} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.NewBlockNotice.toObject=function(includeInstance,msg){var obj={blockhash:msg.getBlockhash_asB64(),blockno:googleProtobuf.Message.getFieldWithDefault(msg,2,0)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.NewBlockNotice}
	   */proto.types.NewBlockNotice.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.NewBlockNotice();return proto.types.NewBlockNotice.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.NewBlockNotice} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.NewBlockNotice}
	   */proto.types.NewBlockNotice.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setBlockhash(value);break;case 2:var value=/** @type {number} */reader.readUint64();msg.setBlockno(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.NewBlockNotice.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.NewBlockNotice.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.NewBlockNotice} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.NewBlockNotice.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getBlockhash_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getBlockno();if(f!==0){writer.writeUint64(2,f);}};/**
	   * optional bytes blockHash = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.NewBlockNotice.prototype.getBlockhash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes blockHash = 1;
	   * This is a type-conversion wrapper around `getBlockhash()`
	   * @return {string}
	   */proto.types.NewBlockNotice.prototype.getBlockhash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getBlockhash()));};/**
	   * optional bytes blockHash = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getBlockhash()`
	   * @return {!Uint8Array}
	   */proto.types.NewBlockNotice.prototype.getBlockhash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getBlockhash()));};/** @param {!(string|Uint8Array)} value */proto.types.NewBlockNotice.prototype.setBlockhash=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional uint64 blockNo = 2;
	   * @return {number}
	   */proto.types.NewBlockNotice.prototype.getBlockno=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,2,0));};/** @param {number} value */proto.types.NewBlockNotice.prototype.setBlockno=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.BlockProducedNotice=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.BlockProducedNotice,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.BlockProducedNotice.prototype.toObject=function(opt_includeInstance){return proto.types.BlockProducedNotice.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.BlockProducedNotice} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.BlockProducedNotice.toObject=function(includeInstance,msg){var f,obj={producerid:msg.getProducerid_asB64(),blockno:googleProtobuf.Message.getFieldWithDefault(msg,2,0),block:(f=msg.getBlock())&&blockchain_pb.Block.toObject(includeInstance,f)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.BlockProducedNotice}
	   */proto.types.BlockProducedNotice.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.BlockProducedNotice();return proto.types.BlockProducedNotice.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.BlockProducedNotice} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.BlockProducedNotice}
	   */proto.types.BlockProducedNotice.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setProducerid(value);break;case 2:var value=/** @type {number} */reader.readUint64();msg.setBlockno(value);break;case 3:var value=new blockchain_pb.Block();reader.readMessage(value,blockchain_pb.Block.deserializeBinaryFromReader);msg.setBlock(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.BlockProducedNotice.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.BlockProducedNotice.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.BlockProducedNotice} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.BlockProducedNotice.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getProducerid_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getBlockno();if(f!==0){writer.writeUint64(2,f);}f=message.getBlock();if(f!=null){writer.writeMessage(3,f,blockchain_pb.Block.serializeBinaryToWriter);}};/**
	   * optional bytes producerID = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.BlockProducedNotice.prototype.getProducerid=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes producerID = 1;
	   * This is a type-conversion wrapper around `getProducerid()`
	   * @return {string}
	   */proto.types.BlockProducedNotice.prototype.getProducerid_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getProducerid()));};/**
	   * optional bytes producerID = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getProducerid()`
	   * @return {!Uint8Array}
	   */proto.types.BlockProducedNotice.prototype.getProducerid_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getProducerid()));};/** @param {!(string|Uint8Array)} value */proto.types.BlockProducedNotice.prototype.setProducerid=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional uint64 blockNo = 2;
	   * @return {number}
	   */proto.types.BlockProducedNotice.prototype.getBlockno=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,2,0));};/** @param {number} value */proto.types.BlockProducedNotice.prototype.setBlockno=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional Block block = 3;
	   * @return {?proto.types.Block}
	   */proto.types.BlockProducedNotice.prototype.getBlock=function(){return(/** @type{?proto.types.Block} */googleProtobuf.Message.getWrapperField(this,blockchain_pb.Block,3));};/** @param {?proto.types.Block|undefined} value */proto.types.BlockProducedNotice.prototype.setBlock=function(value){googleProtobuf.Message.setWrapperField(this,3,value);};proto.types.BlockProducedNotice.prototype.clearBlock=function(){this.setBlock(undefined);};/**
	   * Returns whether this field is set.
	   * @return {!boolean}
	   */proto.types.BlockProducedNotice.prototype.hasBlock=function(){return googleProtobuf.Message.getField(this,3)!=null;};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.GetBlockHeadersRequest=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.GetBlockHeadersRequest,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.GetBlockHeadersRequest.prototype.toObject=function(opt_includeInstance){return proto.types.GetBlockHeadersRequest.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.GetBlockHeadersRequest} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.GetBlockHeadersRequest.toObject=function(includeInstance,msg){var obj={hash:msg.getHash_asB64(),height:googleProtobuf.Message.getFieldWithDefault(msg,2,0),offset:googleProtobuf.Message.getFieldWithDefault(msg,3,0),size:googleProtobuf.Message.getFieldWithDefault(msg,4,0),asc:googleProtobuf.Message.getFieldWithDefault(msg,5,false)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.GetBlockHeadersRequest}
	   */proto.types.GetBlockHeadersRequest.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.GetBlockHeadersRequest();return proto.types.GetBlockHeadersRequest.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.GetBlockHeadersRequest} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.GetBlockHeadersRequest}
	   */proto.types.GetBlockHeadersRequest.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setHash(value);break;case 2:var value=/** @type {number} */reader.readUint64();msg.setHeight(value);break;case 3:var value=/** @type {number} */reader.readUint64();msg.setOffset(value);break;case 4:var value=/** @type {number} */reader.readUint32();msg.setSize(value);break;case 5:var value=/** @type {boolean} */reader.readBool();msg.setAsc(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.GetBlockHeadersRequest.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.GetBlockHeadersRequest.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.GetBlockHeadersRequest} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.GetBlockHeadersRequest.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getHash_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getHeight();if(f!==0){writer.writeUint64(2,f);}f=message.getOffset();if(f!==0){writer.writeUint64(3,f);}f=message.getSize();if(f!==0){writer.writeUint32(4,f);}f=message.getAsc();if(f){writer.writeBool(5,f);}};/**
	   * optional bytes hash = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.GetBlockHeadersRequest.prototype.getHash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes hash = 1;
	   * This is a type-conversion wrapper around `getHash()`
	   * @return {string}
	   */proto.types.GetBlockHeadersRequest.prototype.getHash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getHash()));};/**
	   * optional bytes hash = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getHash()`
	   * @return {!Uint8Array}
	   */proto.types.GetBlockHeadersRequest.prototype.getHash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getHash()));};/** @param {!(string|Uint8Array)} value */proto.types.GetBlockHeadersRequest.prototype.setHash=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional uint64 height = 2;
	   * @return {number}
	   */proto.types.GetBlockHeadersRequest.prototype.getHeight=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,2,0));};/** @param {number} value */proto.types.GetBlockHeadersRequest.prototype.setHeight=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional uint64 offset = 3;
	   * @return {number}
	   */proto.types.GetBlockHeadersRequest.prototype.getOffset=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,3,0));};/** @param {number} value */proto.types.GetBlockHeadersRequest.prototype.setOffset=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * optional uint32 size = 4;
	   * @return {number}
	   */proto.types.GetBlockHeadersRequest.prototype.getSize=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,4,0));};/** @param {number} value */proto.types.GetBlockHeadersRequest.prototype.setSize=function(value){googleProtobuf.Message.setField(this,4,value);};/**
	   * optional bool asc = 5;
	   * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	   * You should avoid comparisons like {@code val === true/false} in those cases.
	   * @return {boolean}
	   */proto.types.GetBlockHeadersRequest.prototype.getAsc=function(){return(/** @type {boolean} */googleProtobuf.Message.getFieldWithDefault(this,5,false));};/** @param {boolean} value */proto.types.GetBlockHeadersRequest.prototype.setAsc=function(value){googleProtobuf.Message.setField(this,5,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.GetBlockHeadersResponse=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.GetBlockHeadersResponse.repeatedFields_,null);};goog.inherits(proto.types.GetBlockHeadersResponse,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.GetBlockHeadersResponse.repeatedFields_=[2,3];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.GetBlockHeadersResponse.prototype.toObject=function(opt_includeInstance){return proto.types.GetBlockHeadersResponse.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.GetBlockHeadersResponse} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.GetBlockHeadersResponse.toObject=function(includeInstance,msg){var obj={status:googleProtobuf.Message.getFieldWithDefault(msg,1,0),hashesList:msg.getHashesList_asB64(),headersList:googleProtobuf.Message.toObjectList(msg.getHeadersList(),blockchain_pb.BlockHeader.toObject,includeInstance),hasnext:googleProtobuf.Message.getFieldWithDefault(msg,4,false)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.GetBlockHeadersResponse}
	   */proto.types.GetBlockHeadersResponse.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.GetBlockHeadersResponse();return proto.types.GetBlockHeadersResponse.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.GetBlockHeadersResponse} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.GetBlockHeadersResponse}
	   */proto.types.GetBlockHeadersResponse.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!proto.types.ResultStatus} */reader.readEnum();msg.setStatus(value);break;case 2:var value=/** @type {!Uint8Array} */reader.readBytes();msg.addHashes(value);break;case 3:var value=new blockchain_pb.BlockHeader();reader.readMessage(value,blockchain_pb.BlockHeader.deserializeBinaryFromReader);msg.addHeaders(value);break;case 4:var value=/** @type {boolean} */reader.readBool();msg.setHasnext(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.GetBlockHeadersResponse.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.GetBlockHeadersResponse.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.GetBlockHeadersResponse} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.GetBlockHeadersResponse.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getStatus();if(f!==0.0){writer.writeEnum(1,f);}f=message.getHashesList_asU8();if(f.length>0){writer.writeRepeatedBytes(2,f);}f=message.getHeadersList();if(f.length>0){writer.writeRepeatedMessage(3,f,blockchain_pb.BlockHeader.serializeBinaryToWriter);}f=message.getHasnext();if(f){writer.writeBool(4,f);}};/**
	   * optional ResultStatus status = 1;
	   * @return {!proto.types.ResultStatus}
	   */proto.types.GetBlockHeadersResponse.prototype.getStatus=function(){return(/** @type {!proto.types.ResultStatus} */googleProtobuf.Message.getFieldWithDefault(this,1,0));};/** @param {!proto.types.ResultStatus} value */proto.types.GetBlockHeadersResponse.prototype.setStatus=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * repeated bytes hashes = 2;
	   * @return {!(Array<!Uint8Array>|Array<string>)}
	   */proto.types.GetBlockHeadersResponse.prototype.getHashesList=function(){return(/** @type {!(Array<!Uint8Array>|Array<string>)} */googleProtobuf.Message.getRepeatedField(this,2));};/**
	   * repeated bytes hashes = 2;
	   * This is a type-conversion wrapper around `getHashesList()`
	   * @return {!Array.<string>}
	   */proto.types.GetBlockHeadersResponse.prototype.getHashesList_asB64=function(){return(/** @type {!Array.<string>} */googleProtobuf.Message.bytesListAsB64(this.getHashesList()));};/**
	   * repeated bytes hashes = 2;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getHashesList()`
	   * @return {!Array.<!Uint8Array>}
	   */proto.types.GetBlockHeadersResponse.prototype.getHashesList_asU8=function(){return(/** @type {!Array.<!Uint8Array>} */googleProtobuf.Message.bytesListAsU8(this.getHashesList()));};/** @param {!(Array<!Uint8Array>|Array<string>)} value */proto.types.GetBlockHeadersResponse.prototype.setHashesList=function(value){googleProtobuf.Message.setField(this,2,value||[]);};/**
	   * @param {!(string|Uint8Array)} value
	   * @param {number=} opt_index
	   */proto.types.GetBlockHeadersResponse.prototype.addHashes=function(value,opt_index){googleProtobuf.Message.addToRepeatedField(this,2,value,opt_index);};proto.types.GetBlockHeadersResponse.prototype.clearHashesList=function(){this.setHashesList([]);};/**
	   * repeated BlockHeader headers = 3;
	   * @return {!Array.<!proto.types.BlockHeader>}
	   */proto.types.GetBlockHeadersResponse.prototype.getHeadersList=function(){return(/** @type{!Array.<!proto.types.BlockHeader>} */googleProtobuf.Message.getRepeatedWrapperField(this,blockchain_pb.BlockHeader,3));};/** @param {!Array.<!proto.types.BlockHeader>} value */proto.types.GetBlockHeadersResponse.prototype.setHeadersList=function(value){googleProtobuf.Message.setRepeatedWrapperField(this,3,value);};/**
	   * @param {!proto.types.BlockHeader=} opt_value
	   * @param {number=} opt_index
	   * @return {!proto.types.BlockHeader}
	   */proto.types.GetBlockHeadersResponse.prototype.addHeaders=function(opt_value,opt_index){return googleProtobuf.Message.addToRepeatedWrapperField(this,3,opt_value,proto.types.BlockHeader,opt_index);};proto.types.GetBlockHeadersResponse.prototype.clearHeadersList=function(){this.setHeadersList([]);};/**
	   * optional bool hasNext = 4;
	   * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	   * You should avoid comparisons like {@code val === true/false} in those cases.
	   * @return {boolean}
	   */proto.types.GetBlockHeadersResponse.prototype.getHasnext=function(){return(/** @type {boolean} */googleProtobuf.Message.getFieldWithDefault(this,4,false));};/** @param {boolean} value */proto.types.GetBlockHeadersResponse.prototype.setHasnext=function(value){googleProtobuf.Message.setField(this,4,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.GetBlockRequest=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.GetBlockRequest.repeatedFields_,null);};goog.inherits(proto.types.GetBlockRequest,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.GetBlockRequest.repeatedFields_=[1];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.GetBlockRequest.prototype.toObject=function(opt_includeInstance){return proto.types.GetBlockRequest.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.GetBlockRequest} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.GetBlockRequest.toObject=function(includeInstance,msg){var obj={hashesList:msg.getHashesList_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.GetBlockRequest}
	   */proto.types.GetBlockRequest.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.GetBlockRequest();return proto.types.GetBlockRequest.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.GetBlockRequest} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.GetBlockRequest}
	   */proto.types.GetBlockRequest.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.addHashes(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.GetBlockRequest.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.GetBlockRequest.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.GetBlockRequest} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.GetBlockRequest.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getHashesList_asU8();if(f.length>0){writer.writeRepeatedBytes(1,f);}};/**
	   * repeated bytes hashes = 1;
	   * @return {!(Array<!Uint8Array>|Array<string>)}
	   */proto.types.GetBlockRequest.prototype.getHashesList=function(){return(/** @type {!(Array<!Uint8Array>|Array<string>)} */googleProtobuf.Message.getRepeatedField(this,1));};/**
	   * repeated bytes hashes = 1;
	   * This is a type-conversion wrapper around `getHashesList()`
	   * @return {!Array.<string>}
	   */proto.types.GetBlockRequest.prototype.getHashesList_asB64=function(){return(/** @type {!Array.<string>} */googleProtobuf.Message.bytesListAsB64(this.getHashesList()));};/**
	   * repeated bytes hashes = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getHashesList()`
	   * @return {!Array.<!Uint8Array>}
	   */proto.types.GetBlockRequest.prototype.getHashesList_asU8=function(){return(/** @type {!Array.<!Uint8Array>} */googleProtobuf.Message.bytesListAsU8(this.getHashesList()));};/** @param {!(Array<!Uint8Array>|Array<string>)} value */proto.types.GetBlockRequest.prototype.setHashesList=function(value){googleProtobuf.Message.setField(this,1,value||[]);};/**
	   * @param {!(string|Uint8Array)} value
	   * @param {number=} opt_index
	   */proto.types.GetBlockRequest.prototype.addHashes=function(value,opt_index){googleProtobuf.Message.addToRepeatedField(this,1,value,opt_index);};proto.types.GetBlockRequest.prototype.clearHashesList=function(){this.setHashesList([]);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.GetBlockResponse=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.GetBlockResponse.repeatedFields_,null);};goog.inherits(proto.types.GetBlockResponse,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.GetBlockResponse.repeatedFields_=[2];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.GetBlockResponse.prototype.toObject=function(opt_includeInstance){return proto.types.GetBlockResponse.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.GetBlockResponse} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.GetBlockResponse.toObject=function(includeInstance,msg){var obj={status:googleProtobuf.Message.getFieldWithDefault(msg,1,0),blocksList:googleProtobuf.Message.toObjectList(msg.getBlocksList(),blockchain_pb.Block.toObject,includeInstance),hasnext:googleProtobuf.Message.getFieldWithDefault(msg,3,false)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.GetBlockResponse}
	   */proto.types.GetBlockResponse.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.GetBlockResponse();return proto.types.GetBlockResponse.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.GetBlockResponse} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.GetBlockResponse}
	   */proto.types.GetBlockResponse.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!proto.types.ResultStatus} */reader.readEnum();msg.setStatus(value);break;case 2:var value=new blockchain_pb.Block();reader.readMessage(value,blockchain_pb.Block.deserializeBinaryFromReader);msg.addBlocks(value);break;case 3:var value=/** @type {boolean} */reader.readBool();msg.setHasnext(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.GetBlockResponse.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.GetBlockResponse.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.GetBlockResponse} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.GetBlockResponse.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getStatus();if(f!==0.0){writer.writeEnum(1,f);}f=message.getBlocksList();if(f.length>0){writer.writeRepeatedMessage(2,f,blockchain_pb.Block.serializeBinaryToWriter);}f=message.getHasnext();if(f){writer.writeBool(3,f);}};/**
	   * optional ResultStatus status = 1;
	   * @return {!proto.types.ResultStatus}
	   */proto.types.GetBlockResponse.prototype.getStatus=function(){return(/** @type {!proto.types.ResultStatus} */googleProtobuf.Message.getFieldWithDefault(this,1,0));};/** @param {!proto.types.ResultStatus} value */proto.types.GetBlockResponse.prototype.setStatus=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * repeated Block blocks = 2;
	   * @return {!Array.<!proto.types.Block>}
	   */proto.types.GetBlockResponse.prototype.getBlocksList=function(){return(/** @type{!Array.<!proto.types.Block>} */googleProtobuf.Message.getRepeatedWrapperField(this,blockchain_pb.Block,2));};/** @param {!Array.<!proto.types.Block>} value */proto.types.GetBlockResponse.prototype.setBlocksList=function(value){googleProtobuf.Message.setRepeatedWrapperField(this,2,value);};/**
	   * @param {!proto.types.Block=} opt_value
	   * @param {number=} opt_index
	   * @return {!proto.types.Block}
	   */proto.types.GetBlockResponse.prototype.addBlocks=function(opt_value,opt_index){return googleProtobuf.Message.addToRepeatedWrapperField(this,2,opt_value,proto.types.Block,opt_index);};proto.types.GetBlockResponse.prototype.clearBlocksList=function(){this.setBlocksList([]);};/**
	   * optional bool hasNext = 3;
	   * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	   * You should avoid comparisons like {@code val === true/false} in those cases.
	   * @return {boolean}
	   */proto.types.GetBlockResponse.prototype.getHasnext=function(){return(/** @type {boolean} */googleProtobuf.Message.getFieldWithDefault(this,3,false));};/** @param {boolean} value */proto.types.GetBlockResponse.prototype.setHasnext=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.NewTransactionsNotice=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.NewTransactionsNotice.repeatedFields_,null);};goog.inherits(proto.types.NewTransactionsNotice,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.NewTransactionsNotice.repeatedFields_=[1];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.NewTransactionsNotice.prototype.toObject=function(opt_includeInstance){return proto.types.NewTransactionsNotice.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.NewTransactionsNotice} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.NewTransactionsNotice.toObject=function(includeInstance,msg){var obj={txhashesList:msg.getTxhashesList_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.NewTransactionsNotice}
	   */proto.types.NewTransactionsNotice.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.NewTransactionsNotice();return proto.types.NewTransactionsNotice.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.NewTransactionsNotice} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.NewTransactionsNotice}
	   */proto.types.NewTransactionsNotice.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.addTxhashes(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.NewTransactionsNotice.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.NewTransactionsNotice.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.NewTransactionsNotice} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.NewTransactionsNotice.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getTxhashesList_asU8();if(f.length>0){writer.writeRepeatedBytes(1,f);}};/**
	   * repeated bytes txHashes = 1;
	   * @return {!(Array<!Uint8Array>|Array<string>)}
	   */proto.types.NewTransactionsNotice.prototype.getTxhashesList=function(){return(/** @type {!(Array<!Uint8Array>|Array<string>)} */googleProtobuf.Message.getRepeatedField(this,1));};/**
	   * repeated bytes txHashes = 1;
	   * This is a type-conversion wrapper around `getTxhashesList()`
	   * @return {!Array.<string>}
	   */proto.types.NewTransactionsNotice.prototype.getTxhashesList_asB64=function(){return(/** @type {!Array.<string>} */googleProtobuf.Message.bytesListAsB64(this.getTxhashesList()));};/**
	   * repeated bytes txHashes = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getTxhashesList()`
	   * @return {!Array.<!Uint8Array>}
	   */proto.types.NewTransactionsNotice.prototype.getTxhashesList_asU8=function(){return(/** @type {!Array.<!Uint8Array>} */googleProtobuf.Message.bytesListAsU8(this.getTxhashesList()));};/** @param {!(Array<!Uint8Array>|Array<string>)} value */proto.types.NewTransactionsNotice.prototype.setTxhashesList=function(value){googleProtobuf.Message.setField(this,1,value||[]);};/**
	   * @param {!(string|Uint8Array)} value
	   * @param {number=} opt_index
	   */proto.types.NewTransactionsNotice.prototype.addTxhashes=function(value,opt_index){googleProtobuf.Message.addToRepeatedField(this,1,value,opt_index);};proto.types.NewTransactionsNotice.prototype.clearTxhashesList=function(){this.setTxhashesList([]);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.GetTransactionsRequest=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.GetTransactionsRequest.repeatedFields_,null);};goog.inherits(proto.types.GetTransactionsRequest,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.GetTransactionsRequest.repeatedFields_=[1];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.GetTransactionsRequest.prototype.toObject=function(opt_includeInstance){return proto.types.GetTransactionsRequest.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.GetTransactionsRequest} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.GetTransactionsRequest.toObject=function(includeInstance,msg){var obj={hashesList:msg.getHashesList_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.GetTransactionsRequest}
	   */proto.types.GetTransactionsRequest.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.GetTransactionsRequest();return proto.types.GetTransactionsRequest.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.GetTransactionsRequest} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.GetTransactionsRequest}
	   */proto.types.GetTransactionsRequest.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.addHashes(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.GetTransactionsRequest.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.GetTransactionsRequest.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.GetTransactionsRequest} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.GetTransactionsRequest.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getHashesList_asU8();if(f.length>0){writer.writeRepeatedBytes(1,f);}};/**
	   * repeated bytes hashes = 1;
	   * @return {!(Array<!Uint8Array>|Array<string>)}
	   */proto.types.GetTransactionsRequest.prototype.getHashesList=function(){return(/** @type {!(Array<!Uint8Array>|Array<string>)} */googleProtobuf.Message.getRepeatedField(this,1));};/**
	   * repeated bytes hashes = 1;
	   * This is a type-conversion wrapper around `getHashesList()`
	   * @return {!Array.<string>}
	   */proto.types.GetTransactionsRequest.prototype.getHashesList_asB64=function(){return(/** @type {!Array.<string>} */googleProtobuf.Message.bytesListAsB64(this.getHashesList()));};/**
	   * repeated bytes hashes = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getHashesList()`
	   * @return {!Array.<!Uint8Array>}
	   */proto.types.GetTransactionsRequest.prototype.getHashesList_asU8=function(){return(/** @type {!Array.<!Uint8Array>} */googleProtobuf.Message.bytesListAsU8(this.getHashesList()));};/** @param {!(Array<!Uint8Array>|Array<string>)} value */proto.types.GetTransactionsRequest.prototype.setHashesList=function(value){googleProtobuf.Message.setField(this,1,value||[]);};/**
	   * @param {!(string|Uint8Array)} value
	   * @param {number=} opt_index
	   */proto.types.GetTransactionsRequest.prototype.addHashes=function(value,opt_index){googleProtobuf.Message.addToRepeatedField(this,1,value,opt_index);};proto.types.GetTransactionsRequest.prototype.clearHashesList=function(){this.setHashesList([]);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.GetTransactionsResponse=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.GetTransactionsResponse.repeatedFields_,null);};goog.inherits(proto.types.GetTransactionsResponse,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.GetTransactionsResponse.repeatedFields_=[2,3];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.GetTransactionsResponse.prototype.toObject=function(opt_includeInstance){return proto.types.GetTransactionsResponse.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.GetTransactionsResponse} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.GetTransactionsResponse.toObject=function(includeInstance,msg){var obj={status:googleProtobuf.Message.getFieldWithDefault(msg,1,0),hashesList:msg.getHashesList_asB64(),txsList:googleProtobuf.Message.toObjectList(msg.getTxsList(),blockchain_pb.Tx.toObject,includeInstance),hasnext:googleProtobuf.Message.getFieldWithDefault(msg,4,false)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.GetTransactionsResponse}
	   */proto.types.GetTransactionsResponse.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.GetTransactionsResponse();return proto.types.GetTransactionsResponse.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.GetTransactionsResponse} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.GetTransactionsResponse}
	   */proto.types.GetTransactionsResponse.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!proto.types.ResultStatus} */reader.readEnum();msg.setStatus(value);break;case 2:var value=/** @type {!Uint8Array} */reader.readBytes();msg.addHashes(value);break;case 3:var value=new blockchain_pb.Tx();reader.readMessage(value,blockchain_pb.Tx.deserializeBinaryFromReader);msg.addTxs(value);break;case 4:var value=/** @type {boolean} */reader.readBool();msg.setHasnext(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.GetTransactionsResponse.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.GetTransactionsResponse.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.GetTransactionsResponse} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.GetTransactionsResponse.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getStatus();if(f!==0.0){writer.writeEnum(1,f);}f=message.getHashesList_asU8();if(f.length>0){writer.writeRepeatedBytes(2,f);}f=message.getTxsList();if(f.length>0){writer.writeRepeatedMessage(3,f,blockchain_pb.Tx.serializeBinaryToWriter);}f=message.getHasnext();if(f){writer.writeBool(4,f);}};/**
	   * optional ResultStatus status = 1;
	   * @return {!proto.types.ResultStatus}
	   */proto.types.GetTransactionsResponse.prototype.getStatus=function(){return(/** @type {!proto.types.ResultStatus} */googleProtobuf.Message.getFieldWithDefault(this,1,0));};/** @param {!proto.types.ResultStatus} value */proto.types.GetTransactionsResponse.prototype.setStatus=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * repeated bytes hashes = 2;
	   * @return {!(Array<!Uint8Array>|Array<string>)}
	   */proto.types.GetTransactionsResponse.prototype.getHashesList=function(){return(/** @type {!(Array<!Uint8Array>|Array<string>)} */googleProtobuf.Message.getRepeatedField(this,2));};/**
	   * repeated bytes hashes = 2;
	   * This is a type-conversion wrapper around `getHashesList()`
	   * @return {!Array.<string>}
	   */proto.types.GetTransactionsResponse.prototype.getHashesList_asB64=function(){return(/** @type {!Array.<string>} */googleProtobuf.Message.bytesListAsB64(this.getHashesList()));};/**
	   * repeated bytes hashes = 2;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getHashesList()`
	   * @return {!Array.<!Uint8Array>}
	   */proto.types.GetTransactionsResponse.prototype.getHashesList_asU8=function(){return(/** @type {!Array.<!Uint8Array>} */googleProtobuf.Message.bytesListAsU8(this.getHashesList()));};/** @param {!(Array<!Uint8Array>|Array<string>)} value */proto.types.GetTransactionsResponse.prototype.setHashesList=function(value){googleProtobuf.Message.setField(this,2,value||[]);};/**
	   * @param {!(string|Uint8Array)} value
	   * @param {number=} opt_index
	   */proto.types.GetTransactionsResponse.prototype.addHashes=function(value,opt_index){googleProtobuf.Message.addToRepeatedField(this,2,value,opt_index);};proto.types.GetTransactionsResponse.prototype.clearHashesList=function(){this.setHashesList([]);};/**
	   * repeated Tx txs = 3;
	   * @return {!Array.<!proto.types.Tx>}
	   */proto.types.GetTransactionsResponse.prototype.getTxsList=function(){return(/** @type{!Array.<!proto.types.Tx>} */googleProtobuf.Message.getRepeatedWrapperField(this,blockchain_pb.Tx,3));};/** @param {!Array.<!proto.types.Tx>} value */proto.types.GetTransactionsResponse.prototype.setTxsList=function(value){googleProtobuf.Message.setRepeatedWrapperField(this,3,value);};/**
	   * @param {!proto.types.Tx=} opt_value
	   * @param {number=} opt_index
	   * @return {!proto.types.Tx}
	   */proto.types.GetTransactionsResponse.prototype.addTxs=function(opt_value,opt_index){return googleProtobuf.Message.addToRepeatedWrapperField(this,3,opt_value,proto.types.Tx,opt_index);};proto.types.GetTransactionsResponse.prototype.clearTxsList=function(){this.setTxsList([]);};/**
	   * optional bool hasNext = 4;
	   * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	   * You should avoid comparisons like {@code val === true/false} in those cases.
	   * @return {boolean}
	   */proto.types.GetTransactionsResponse.prototype.getHasnext=function(){return(/** @type {boolean} */googleProtobuf.Message.getFieldWithDefault(this,4,false));};/** @param {boolean} value */proto.types.GetTransactionsResponse.prototype.setHasnext=function(value){googleProtobuf.Message.setField(this,4,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.GetMissingRequest=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.GetMissingRequest.repeatedFields_,null);};goog.inherits(proto.types.GetMissingRequest,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.GetMissingRequest.repeatedFields_=[1];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.GetMissingRequest.prototype.toObject=function(opt_includeInstance){return proto.types.GetMissingRequest.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.GetMissingRequest} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.GetMissingRequest.toObject=function(includeInstance,msg){var obj={hashesList:msg.getHashesList_asB64(),stophash:msg.getStophash_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.GetMissingRequest}
	   */proto.types.GetMissingRequest.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.GetMissingRequest();return proto.types.GetMissingRequest.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.GetMissingRequest} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.GetMissingRequest}
	   */proto.types.GetMissingRequest.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.addHashes(value);break;case 2:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setStophash(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.GetMissingRequest.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.GetMissingRequest.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.GetMissingRequest} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.GetMissingRequest.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getHashesList_asU8();if(f.length>0){writer.writeRepeatedBytes(1,f);}f=message.getStophash_asU8();if(f.length>0){writer.writeBytes(2,f);}};/**
	   * repeated bytes hashes = 1;
	   * @return {!(Array<!Uint8Array>|Array<string>)}
	   */proto.types.GetMissingRequest.prototype.getHashesList=function(){return(/** @type {!(Array<!Uint8Array>|Array<string>)} */googleProtobuf.Message.getRepeatedField(this,1));};/**
	   * repeated bytes hashes = 1;
	   * This is a type-conversion wrapper around `getHashesList()`
	   * @return {!Array.<string>}
	   */proto.types.GetMissingRequest.prototype.getHashesList_asB64=function(){return(/** @type {!Array.<string>} */googleProtobuf.Message.bytesListAsB64(this.getHashesList()));};/**
	   * repeated bytes hashes = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getHashesList()`
	   * @return {!Array.<!Uint8Array>}
	   */proto.types.GetMissingRequest.prototype.getHashesList_asU8=function(){return(/** @type {!Array.<!Uint8Array>} */googleProtobuf.Message.bytesListAsU8(this.getHashesList()));};/** @param {!(Array<!Uint8Array>|Array<string>)} value */proto.types.GetMissingRequest.prototype.setHashesList=function(value){googleProtobuf.Message.setField(this,1,value||[]);};/**
	   * @param {!(string|Uint8Array)} value
	   * @param {number=} opt_index
	   */proto.types.GetMissingRequest.prototype.addHashes=function(value,opt_index){googleProtobuf.Message.addToRepeatedField(this,1,value,opt_index);};proto.types.GetMissingRequest.prototype.clearHashesList=function(){this.setHashesList([]);};/**
	   * optional bytes stophash = 2;
	   * @return {!(string|Uint8Array)}
	   */proto.types.GetMissingRequest.prototype.getStophash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,2,""));};/**
	   * optional bytes stophash = 2;
	   * This is a type-conversion wrapper around `getStophash()`
	   * @return {string}
	   */proto.types.GetMissingRequest.prototype.getStophash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getStophash()));};/**
	   * optional bytes stophash = 2;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getStophash()`
	   * @return {!Uint8Array}
	   */proto.types.GetMissingRequest.prototype.getStophash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getStophash()));};/** @param {!(string|Uint8Array)} value */proto.types.GetMissingRequest.prototype.setStophash=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.GetAncestorRequest=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.GetAncestorRequest.repeatedFields_,null);};goog.inherits(proto.types.GetAncestorRequest,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.GetAncestorRequest.repeatedFields_=[1];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.GetAncestorRequest.prototype.toObject=function(opt_includeInstance){return proto.types.GetAncestorRequest.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.GetAncestorRequest} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.GetAncestorRequest.toObject=function(includeInstance,msg){var obj={hashesList:msg.getHashesList_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.GetAncestorRequest}
	   */proto.types.GetAncestorRequest.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.GetAncestorRequest();return proto.types.GetAncestorRequest.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.GetAncestorRequest} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.GetAncestorRequest}
	   */proto.types.GetAncestorRequest.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.addHashes(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.GetAncestorRequest.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.GetAncestorRequest.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.GetAncestorRequest} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.GetAncestorRequest.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getHashesList_asU8();if(f.length>0){writer.writeRepeatedBytes(1,f);}};/**
	   * repeated bytes hashes = 1;
	   * @return {!(Array<!Uint8Array>|Array<string>)}
	   */proto.types.GetAncestorRequest.prototype.getHashesList=function(){return(/** @type {!(Array<!Uint8Array>|Array<string>)} */googleProtobuf.Message.getRepeatedField(this,1));};/**
	   * repeated bytes hashes = 1;
	   * This is a type-conversion wrapper around `getHashesList()`
	   * @return {!Array.<string>}
	   */proto.types.GetAncestorRequest.prototype.getHashesList_asB64=function(){return(/** @type {!Array.<string>} */googleProtobuf.Message.bytesListAsB64(this.getHashesList()));};/**
	   * repeated bytes hashes = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getHashesList()`
	   * @return {!Array.<!Uint8Array>}
	   */proto.types.GetAncestorRequest.prototype.getHashesList_asU8=function(){return(/** @type {!Array.<!Uint8Array>} */googleProtobuf.Message.bytesListAsU8(this.getHashesList()));};/** @param {!(Array<!Uint8Array>|Array<string>)} value */proto.types.GetAncestorRequest.prototype.setHashesList=function(value){googleProtobuf.Message.setField(this,1,value||[]);};/**
	   * @param {!(string|Uint8Array)} value
	   * @param {number=} opt_index
	   */proto.types.GetAncestorRequest.prototype.addHashes=function(value,opt_index){googleProtobuf.Message.addToRepeatedField(this,1,value,opt_index);};proto.types.GetAncestorRequest.prototype.clearHashesList=function(){this.setHashesList([]);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.GetAncestorResponse=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.GetAncestorResponse,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.GetAncestorResponse.prototype.toObject=function(opt_includeInstance){return proto.types.GetAncestorResponse.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.GetAncestorResponse} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.GetAncestorResponse.toObject=function(includeInstance,msg){var obj={status:googleProtobuf.Message.getFieldWithDefault(msg,1,0),ancestorhash:msg.getAncestorhash_asB64(),ancestorno:googleProtobuf.Message.getFieldWithDefault(msg,3,0)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.GetAncestorResponse}
	   */proto.types.GetAncestorResponse.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.GetAncestorResponse();return proto.types.GetAncestorResponse.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.GetAncestorResponse} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.GetAncestorResponse}
	   */proto.types.GetAncestorResponse.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!proto.types.ResultStatus} */reader.readEnum();msg.setStatus(value);break;case 2:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setAncestorhash(value);break;case 3:var value=/** @type {number} */reader.readUint64();msg.setAncestorno(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.GetAncestorResponse.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.GetAncestorResponse.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.GetAncestorResponse} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.GetAncestorResponse.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getStatus();if(f!==0.0){writer.writeEnum(1,f);}f=message.getAncestorhash_asU8();if(f.length>0){writer.writeBytes(2,f);}f=message.getAncestorno();if(f!==0){writer.writeUint64(3,f);}};/**
	   * optional ResultStatus status = 1;
	   * @return {!proto.types.ResultStatus}
	   */proto.types.GetAncestorResponse.prototype.getStatus=function(){return(/** @type {!proto.types.ResultStatus} */googleProtobuf.Message.getFieldWithDefault(this,1,0));};/** @param {!proto.types.ResultStatus} value */proto.types.GetAncestorResponse.prototype.setStatus=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional bytes ancestorHash = 2;
	   * @return {!(string|Uint8Array)}
	   */proto.types.GetAncestorResponse.prototype.getAncestorhash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,2,""));};/**
	   * optional bytes ancestorHash = 2;
	   * This is a type-conversion wrapper around `getAncestorhash()`
	   * @return {string}
	   */proto.types.GetAncestorResponse.prototype.getAncestorhash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getAncestorhash()));};/**
	   * optional bytes ancestorHash = 2;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getAncestorhash()`
	   * @return {!Uint8Array}
	   */proto.types.GetAncestorResponse.prototype.getAncestorhash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getAncestorhash()));};/** @param {!(string|Uint8Array)} value */proto.types.GetAncestorResponse.prototype.setAncestorhash=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional uint64 ancestorNo = 3;
	   * @return {number}
	   */proto.types.GetAncestorResponse.prototype.getAncestorno=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,3,0));};/** @param {number} value */proto.types.GetAncestorResponse.prototype.setAncestorno=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.GetHashByNo=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.GetHashByNo,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.GetHashByNo.prototype.toObject=function(opt_includeInstance){return proto.types.GetHashByNo.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.GetHashByNo} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.GetHashByNo.toObject=function(includeInstance,msg){var obj={blockno:googleProtobuf.Message.getFieldWithDefault(msg,1,0)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.GetHashByNo}
	   */proto.types.GetHashByNo.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.GetHashByNo();return proto.types.GetHashByNo.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.GetHashByNo} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.GetHashByNo}
	   */proto.types.GetHashByNo.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {number} */reader.readUint64();msg.setBlockno(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.GetHashByNo.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.GetHashByNo.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.GetHashByNo} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.GetHashByNo.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getBlockno();if(f!==0){writer.writeUint64(1,f);}};/**
	   * optional uint64 blockNo = 1;
	   * @return {number}
	   */proto.types.GetHashByNo.prototype.getBlockno=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,1,0));};/** @param {number} value */proto.types.GetHashByNo.prototype.setBlockno=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.GetHashByNoResponse=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.GetHashByNoResponse,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.GetHashByNoResponse.prototype.toObject=function(opt_includeInstance){return proto.types.GetHashByNoResponse.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.GetHashByNoResponse} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.GetHashByNoResponse.toObject=function(includeInstance,msg){var obj={status:googleProtobuf.Message.getFieldWithDefault(msg,1,0),blockhash:msg.getBlockhash_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.GetHashByNoResponse}
	   */proto.types.GetHashByNoResponse.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.GetHashByNoResponse();return proto.types.GetHashByNoResponse.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.GetHashByNoResponse} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.GetHashByNoResponse}
	   */proto.types.GetHashByNoResponse.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!proto.types.ResultStatus} */reader.readEnum();msg.setStatus(value);break;case 2:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setBlockhash(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.GetHashByNoResponse.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.GetHashByNoResponse.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.GetHashByNoResponse} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.GetHashByNoResponse.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getStatus();if(f!==0.0){writer.writeEnum(1,f);}f=message.getBlockhash_asU8();if(f.length>0){writer.writeBytes(2,f);}};/**
	   * optional ResultStatus status = 1;
	   * @return {!proto.types.ResultStatus}
	   */proto.types.GetHashByNoResponse.prototype.getStatus=function(){return(/** @type {!proto.types.ResultStatus} */googleProtobuf.Message.getFieldWithDefault(this,1,0));};/** @param {!proto.types.ResultStatus} value */proto.types.GetHashByNoResponse.prototype.setStatus=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional bytes blockHash = 2;
	   * @return {!(string|Uint8Array)}
	   */proto.types.GetHashByNoResponse.prototype.getBlockhash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,2,""));};/**
	   * optional bytes blockHash = 2;
	   * This is a type-conversion wrapper around `getBlockhash()`
	   * @return {string}
	   */proto.types.GetHashByNoResponse.prototype.getBlockhash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getBlockhash()));};/**
	   * optional bytes blockHash = 2;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getBlockhash()`
	   * @return {!Uint8Array}
	   */proto.types.GetHashByNoResponse.prototype.getBlockhash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getBlockhash()));};/** @param {!(string|Uint8Array)} value */proto.types.GetHashByNoResponse.prototype.setBlockhash=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.GetHashesRequest=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.GetHashesRequest,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.GetHashesRequest.prototype.toObject=function(opt_includeInstance){return proto.types.GetHashesRequest.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.GetHashesRequest} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.GetHashesRequest.toObject=function(includeInstance,msg){var obj={prevhash:msg.getPrevhash_asB64(),prevnumber:googleProtobuf.Message.getFieldWithDefault(msg,2,0),size:googleProtobuf.Message.getFieldWithDefault(msg,3,0)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.GetHashesRequest}
	   */proto.types.GetHashesRequest.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.GetHashesRequest();return proto.types.GetHashesRequest.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.GetHashesRequest} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.GetHashesRequest}
	   */proto.types.GetHashesRequest.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setPrevhash(value);break;case 2:var value=/** @type {number} */reader.readUint64();msg.setPrevnumber(value);break;case 3:var value=/** @type {number} */reader.readUint64();msg.setSize(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.GetHashesRequest.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.GetHashesRequest.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.GetHashesRequest} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.GetHashesRequest.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getPrevhash_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getPrevnumber();if(f!==0){writer.writeUint64(2,f);}f=message.getSize();if(f!==0){writer.writeUint64(3,f);}};/**
	   * optional bytes prevHash = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.GetHashesRequest.prototype.getPrevhash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes prevHash = 1;
	   * This is a type-conversion wrapper around `getPrevhash()`
	   * @return {string}
	   */proto.types.GetHashesRequest.prototype.getPrevhash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getPrevhash()));};/**
	   * optional bytes prevHash = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getPrevhash()`
	   * @return {!Uint8Array}
	   */proto.types.GetHashesRequest.prototype.getPrevhash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getPrevhash()));};/** @param {!(string|Uint8Array)} value */proto.types.GetHashesRequest.prototype.setPrevhash=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional uint64 prevNumber = 2;
	   * @return {number}
	   */proto.types.GetHashesRequest.prototype.getPrevnumber=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,2,0));};/** @param {number} value */proto.types.GetHashesRequest.prototype.setPrevnumber=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional uint64 size = 3;
	   * @return {number}
	   */proto.types.GetHashesRequest.prototype.getSize=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,3,0));};/** @param {number} value */proto.types.GetHashesRequest.prototype.setSize=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.GetHashesResponse=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.GetHashesResponse.repeatedFields_,null);};goog.inherits(proto.types.GetHashesResponse,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.GetHashesResponse.repeatedFields_=[2];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.GetHashesResponse.prototype.toObject=function(opt_includeInstance){return proto.types.GetHashesResponse.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.GetHashesResponse} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.GetHashesResponse.toObject=function(includeInstance,msg){var obj={status:googleProtobuf.Message.getFieldWithDefault(msg,1,0),hashesList:msg.getHashesList_asB64(),hasnext:googleProtobuf.Message.getFieldWithDefault(msg,3,false)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.GetHashesResponse}
	   */proto.types.GetHashesResponse.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.GetHashesResponse();return proto.types.GetHashesResponse.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.GetHashesResponse} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.GetHashesResponse}
	   */proto.types.GetHashesResponse.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!proto.types.ResultStatus} */reader.readEnum();msg.setStatus(value);break;case 2:var value=/** @type {!Uint8Array} */reader.readBytes();msg.addHashes(value);break;case 3:var value=/** @type {boolean} */reader.readBool();msg.setHasnext(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.GetHashesResponse.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.GetHashesResponse.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.GetHashesResponse} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.GetHashesResponse.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getStatus();if(f!==0.0){writer.writeEnum(1,f);}f=message.getHashesList_asU8();if(f.length>0){writer.writeRepeatedBytes(2,f);}f=message.getHasnext();if(f){writer.writeBool(3,f);}};/**
	   * optional ResultStatus status = 1;
	   * @return {!proto.types.ResultStatus}
	   */proto.types.GetHashesResponse.prototype.getStatus=function(){return(/** @type {!proto.types.ResultStatus} */googleProtobuf.Message.getFieldWithDefault(this,1,0));};/** @param {!proto.types.ResultStatus} value */proto.types.GetHashesResponse.prototype.setStatus=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * repeated bytes hashes = 2;
	   * @return {!(Array<!Uint8Array>|Array<string>)}
	   */proto.types.GetHashesResponse.prototype.getHashesList=function(){return(/** @type {!(Array<!Uint8Array>|Array<string>)} */googleProtobuf.Message.getRepeatedField(this,2));};/**
	   * repeated bytes hashes = 2;
	   * This is a type-conversion wrapper around `getHashesList()`
	   * @return {!Array.<string>}
	   */proto.types.GetHashesResponse.prototype.getHashesList_asB64=function(){return(/** @type {!Array.<string>} */googleProtobuf.Message.bytesListAsB64(this.getHashesList()));};/**
	   * repeated bytes hashes = 2;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getHashesList()`
	   * @return {!Array.<!Uint8Array>}
	   */proto.types.GetHashesResponse.prototype.getHashesList_asU8=function(){return(/** @type {!Array.<!Uint8Array>} */googleProtobuf.Message.bytesListAsU8(this.getHashesList()));};/** @param {!(Array<!Uint8Array>|Array<string>)} value */proto.types.GetHashesResponse.prototype.setHashesList=function(value){googleProtobuf.Message.setField(this,2,value||[]);};/**
	   * @param {!(string|Uint8Array)} value
	   * @param {number=} opt_index
	   */proto.types.GetHashesResponse.prototype.addHashes=function(value,opt_index){googleProtobuf.Message.addToRepeatedField(this,2,value,opt_index);};proto.types.GetHashesResponse.prototype.clearHashesList=function(){this.setHashesList([]);};/**
	   * optional bool hasNext = 3;
	   * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	   * You should avoid comparisons like {@code val === true/false} in those cases.
	   * @return {boolean}
	   */proto.types.GetHashesResponse.prototype.getHasnext=function(){return(/** @type {boolean} */googleProtobuf.Message.getFieldWithDefault(this,3,false));};/** @param {boolean} value */proto.types.GetHashesResponse.prototype.setHasnext=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * @enum {number}
	   */proto.types.ResultStatus={OK:0,CANCELED:1,UNKNOWN:2,INVALID_ARGUMENT:3,DEADLINE_EXCEEDED:4,NOT_FOUND:5,ALREADY_EXISTS:6,PERMISSION_DENIED:7,RESOURCE_EXHAUSTED:8,FAILED_PRECONDITION:9,ABORTED:10,OUT_OF_RANGE:11,UNIMPLEMENTED:12,INTERNAL:13,UNAVAILABLE:14,DATA_LOSS:15,UNAUTHENTICATED:16};goog.object.extend(exports,proto.types);});var metric_pb=createCommonjsModule(function(module,exports){/**
	   * @fileoverview
	   * @enhanceable
	   * @suppress {messageConventions} JS Compiler reports an error if a variable or
	   *     field starts with 'MSG_' and isn't a translatable message.
	   * @public
	   */ // GENERATED CODE -- DO NOT EDIT!
var goog=googleProtobuf;var global=Function('return this')();goog.exportSymbol('proto.types.MetricType',null,global);goog.exportSymbol('proto.types.Metrics',null,global);goog.exportSymbol('proto.types.MetricsRequest',null,global);goog.exportSymbol('proto.types.PeerMetric',null,global);/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.MetricsRequest=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.MetricsRequest.repeatedFields_,null);};goog.inherits(proto.types.MetricsRequest,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.MetricsRequest.repeatedFields_=[1];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.MetricsRequest.prototype.toObject=function(opt_includeInstance){return proto.types.MetricsRequest.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.MetricsRequest} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.MetricsRequest.toObject=function(includeInstance,msg){var obj={typesList:googleProtobuf.Message.getRepeatedField(msg,1)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.MetricsRequest}
	   */proto.types.MetricsRequest.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.MetricsRequest();return proto.types.MetricsRequest.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.MetricsRequest} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.MetricsRequest}
	   */proto.types.MetricsRequest.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Array.<!proto.types.MetricType>} */reader.readPackedEnum();msg.setTypesList(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.MetricsRequest.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.MetricsRequest.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.MetricsRequest} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.MetricsRequest.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getTypesList();if(f.length>0){writer.writePackedEnum(1,f);}};/**
	   * repeated MetricType types = 1;
	   * @return {!Array.<!proto.types.MetricType>}
	   */proto.types.MetricsRequest.prototype.getTypesList=function(){return(/** @type {!Array.<!proto.types.MetricType>} */googleProtobuf.Message.getRepeatedField(this,1));};/** @param {!Array.<!proto.types.MetricType>} value */proto.types.MetricsRequest.prototype.setTypesList=function(value){googleProtobuf.Message.setField(this,1,value||[]);};/**
	   * @param {!proto.types.MetricType} value
	   * @param {number=} opt_index
	   */proto.types.MetricsRequest.prototype.addTypes=function(value,opt_index){googleProtobuf.Message.addToRepeatedField(this,1,value,opt_index);};proto.types.MetricsRequest.prototype.clearTypesList=function(){this.setTypesList([]);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.Metrics=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.Metrics.repeatedFields_,null);};goog.inherits(proto.types.Metrics,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.Metrics.repeatedFields_=[1];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.Metrics.prototype.toObject=function(opt_includeInstance){return proto.types.Metrics.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.Metrics} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.Metrics.toObject=function(includeInstance,msg){var obj={peersList:googleProtobuf.Message.toObjectList(msg.getPeersList(),proto.types.PeerMetric.toObject,includeInstance)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.Metrics}
	   */proto.types.Metrics.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.Metrics();return proto.types.Metrics.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.Metrics} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.Metrics}
	   */proto.types.Metrics.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=new proto.types.PeerMetric();reader.readMessage(value,proto.types.PeerMetric.deserializeBinaryFromReader);msg.addPeers(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.Metrics.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.Metrics.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.Metrics} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.Metrics.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getPeersList();if(f.length>0){writer.writeRepeatedMessage(1,f,proto.types.PeerMetric.serializeBinaryToWriter);}};/**
	   * repeated PeerMetric peers = 1;
	   * @return {!Array.<!proto.types.PeerMetric>}
	   */proto.types.Metrics.prototype.getPeersList=function(){return(/** @type{!Array.<!proto.types.PeerMetric>} */googleProtobuf.Message.getRepeatedWrapperField(this,proto.types.PeerMetric,1));};/** @param {!Array.<!proto.types.PeerMetric>} value */proto.types.Metrics.prototype.setPeersList=function(value){googleProtobuf.Message.setRepeatedWrapperField(this,1,value);};/**
	   * @param {!proto.types.PeerMetric=} opt_value
	   * @param {number=} opt_index
	   * @return {!proto.types.PeerMetric}
	   */proto.types.Metrics.prototype.addPeers=function(opt_value,opt_index){return googleProtobuf.Message.addToRepeatedWrapperField(this,1,opt_value,proto.types.PeerMetric,opt_index);};proto.types.Metrics.prototype.clearPeersList=function(){this.setPeersList([]);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.PeerMetric=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.PeerMetric,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.PeerMetric.prototype.toObject=function(opt_includeInstance){return proto.types.PeerMetric.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.PeerMetric} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.PeerMetric.toObject=function(includeInstance,msg){var obj={peerid:msg.getPeerid_asB64(),sumin:googleProtobuf.Message.getFieldWithDefault(msg,2,0),avrin:googleProtobuf.Message.getFieldWithDefault(msg,3,0),sumout:googleProtobuf.Message.getFieldWithDefault(msg,4,0),avrout:googleProtobuf.Message.getFieldWithDefault(msg,5,0)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.PeerMetric}
	   */proto.types.PeerMetric.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.PeerMetric();return proto.types.PeerMetric.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.PeerMetric} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.PeerMetric}
	   */proto.types.PeerMetric.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setPeerid(value);break;case 2:var value=/** @type {number} */reader.readInt64();msg.setSumin(value);break;case 3:var value=/** @type {number} */reader.readInt64();msg.setAvrin(value);break;case 4:var value=/** @type {number} */reader.readInt64();msg.setSumout(value);break;case 5:var value=/** @type {number} */reader.readInt64();msg.setAvrout(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.PeerMetric.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.PeerMetric.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.PeerMetric} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.PeerMetric.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getPeerid_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getSumin();if(f!==0){writer.writeInt64(2,f);}f=message.getAvrin();if(f!==0){writer.writeInt64(3,f);}f=message.getSumout();if(f!==0){writer.writeInt64(4,f);}f=message.getAvrout();if(f!==0){writer.writeInt64(5,f);}};/**
	   * optional bytes peerID = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.PeerMetric.prototype.getPeerid=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes peerID = 1;
	   * This is a type-conversion wrapper around `getPeerid()`
	   * @return {string}
	   */proto.types.PeerMetric.prototype.getPeerid_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getPeerid()));};/**
	   * optional bytes peerID = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getPeerid()`
	   * @return {!Uint8Array}
	   */proto.types.PeerMetric.prototype.getPeerid_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getPeerid()));};/** @param {!(string|Uint8Array)} value */proto.types.PeerMetric.prototype.setPeerid=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional int64 sumIn = 2;
	   * @return {number}
	   */proto.types.PeerMetric.prototype.getSumin=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,2,0));};/** @param {number} value */proto.types.PeerMetric.prototype.setSumin=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional int64 avrIn = 3;
	   * @return {number}
	   */proto.types.PeerMetric.prototype.getAvrin=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,3,0));};/** @param {number} value */proto.types.PeerMetric.prototype.setAvrin=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * optional int64 sumOut = 4;
	   * @return {number}
	   */proto.types.PeerMetric.prototype.getSumout=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,4,0));};/** @param {number} value */proto.types.PeerMetric.prototype.setSumout=function(value){googleProtobuf.Message.setField(this,4,value);};/**
	   * optional int64 avrOut = 5;
	   * @return {number}
	   */proto.types.PeerMetric.prototype.getAvrout=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,5,0));};/** @param {number} value */proto.types.PeerMetric.prototype.setAvrout=function(value){googleProtobuf.Message.setField(this,5,value);};/**
	   * @enum {number}
	   */proto.types.MetricType={NOTHING:0,P2P_NETWORK:1};goog.object.extend(exports,proto.types);});var rpc_pb=createCommonjsModule(function(module,exports){/**
	   * @fileoverview
	   * @enhanceable
	   * @suppress {messageConventions} JS Compiler reports an error if a variable or
	   *     field starts with 'MSG_' and isn't a translatable message.
	   * @public
	   */ // GENERATED CODE -- DO NOT EDIT!
var goog=googleProtobuf;var global=Function('return this')();goog.exportSymbol('proto.types.AccountAddress',null,global);goog.exportSymbol('proto.types.AccountAndRoot',null,global);goog.exportSymbol('proto.types.AccountVoteInfo',null,global);goog.exportSymbol('proto.types.BlockBodyPaged',null,global);goog.exportSymbol('proto.types.BlockBodyParams',null,global);goog.exportSymbol('proto.types.BlockHeaderList',null,global);goog.exportSymbol('proto.types.BlockMetadata',null,global);goog.exportSymbol('proto.types.BlockMetadataList',null,global);goog.exportSymbol('proto.types.BlockchainStatus',null,global);goog.exportSymbol('proto.types.ChainId',null,global);goog.exportSymbol('proto.types.ChainInfo',null,global);goog.exportSymbol('proto.types.CommitResult',null,global);goog.exportSymbol('proto.types.CommitResultList',null,global);goog.exportSymbol('proto.types.CommitStatus',null,global);goog.exportSymbol('proto.types.ConfigItem',null,global);goog.exportSymbol('proto.types.ConsensusInfo',null,global);goog.exportSymbol('proto.types.Empty',null,global);goog.exportSymbol('proto.types.EventList',null,global);goog.exportSymbol('proto.types.ImportFormat',null,global);goog.exportSymbol('proto.types.Input',null,global);goog.exportSymbol('proto.types.KeyParams',null,global);goog.exportSymbol('proto.types.ListParams',null,global);goog.exportSymbol('proto.types.Name',null,global);goog.exportSymbol('proto.types.NameInfo',null,global);goog.exportSymbol('proto.types.NodeReq',null,global);goog.exportSymbol('proto.types.Output',null,global);goog.exportSymbol('proto.types.PageParams',null,global);goog.exportSymbol('proto.types.Peer',null,global);goog.exportSymbol('proto.types.PeerList',null,global);goog.exportSymbol('proto.types.PeersParams',null,global);goog.exportSymbol('proto.types.Personal',null,global);goog.exportSymbol('proto.types.ServerInfo',null,global);goog.exportSymbol('proto.types.SingleBytes',null,global);goog.exportSymbol('proto.types.Staking',null,global);goog.exportSymbol('proto.types.VerifyResult',null,global);goog.exportSymbol('proto.types.VerifyStatus',null,global);goog.exportSymbol('proto.types.Vote',null,global);goog.exportSymbol('proto.types.VoteInfo',null,global);goog.exportSymbol('proto.types.VoteList',null,global);goog.exportSymbol('proto.types.VoteParams',null,global);/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.BlockchainStatus=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.BlockchainStatus,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.BlockchainStatus.prototype.toObject=function(opt_includeInstance){return proto.types.BlockchainStatus.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.BlockchainStatus} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.BlockchainStatus.toObject=function(includeInstance,msg){var obj={bestBlockHash:msg.getBestBlockHash_asB64(),bestHeight:googleProtobuf.Message.getFieldWithDefault(msg,2,0),consensusInfo:googleProtobuf.Message.getFieldWithDefault(msg,3,""),bestChainIdHash:msg.getBestChainIdHash_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.BlockchainStatus}
	   */proto.types.BlockchainStatus.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.BlockchainStatus();return proto.types.BlockchainStatus.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.BlockchainStatus} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.BlockchainStatus}
	   */proto.types.BlockchainStatus.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setBestBlockHash(value);break;case 2:var value=/** @type {number} */reader.readUint64();msg.setBestHeight(value);break;case 3:var value=/** @type {string} */reader.readString();msg.setConsensusInfo(value);break;case 4:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setBestChainIdHash(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.BlockchainStatus.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.BlockchainStatus.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.BlockchainStatus} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.BlockchainStatus.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getBestBlockHash_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getBestHeight();if(f!==0){writer.writeUint64(2,f);}f=message.getConsensusInfo();if(f.length>0){writer.writeString(3,f);}f=message.getBestChainIdHash_asU8();if(f.length>0){writer.writeBytes(4,f);}};/**
	   * optional bytes best_block_hash = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.BlockchainStatus.prototype.getBestBlockHash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes best_block_hash = 1;
	   * This is a type-conversion wrapper around `getBestBlockHash()`
	   * @return {string}
	   */proto.types.BlockchainStatus.prototype.getBestBlockHash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getBestBlockHash()));};/**
	   * optional bytes best_block_hash = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getBestBlockHash()`
	   * @return {!Uint8Array}
	   */proto.types.BlockchainStatus.prototype.getBestBlockHash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getBestBlockHash()));};/** @param {!(string|Uint8Array)} value */proto.types.BlockchainStatus.prototype.setBestBlockHash=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional uint64 best_height = 2;
	   * @return {number}
	   */proto.types.BlockchainStatus.prototype.getBestHeight=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,2,0));};/** @param {number} value */proto.types.BlockchainStatus.prototype.setBestHeight=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional string consensus_info = 3;
	   * @return {string}
	   */proto.types.BlockchainStatus.prototype.getConsensusInfo=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,3,""));};/** @param {string} value */proto.types.BlockchainStatus.prototype.setConsensusInfo=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * optional bytes best_chain_id_hash = 4;
	   * @return {!(string|Uint8Array)}
	   */proto.types.BlockchainStatus.prototype.getBestChainIdHash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,4,""));};/**
	   * optional bytes best_chain_id_hash = 4;
	   * This is a type-conversion wrapper around `getBestChainIdHash()`
	   * @return {string}
	   */proto.types.BlockchainStatus.prototype.getBestChainIdHash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getBestChainIdHash()));};/**
	   * optional bytes best_chain_id_hash = 4;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getBestChainIdHash()`
	   * @return {!Uint8Array}
	   */proto.types.BlockchainStatus.prototype.getBestChainIdHash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getBestChainIdHash()));};/** @param {!(string|Uint8Array)} value */proto.types.BlockchainStatus.prototype.setBestChainIdHash=function(value){googleProtobuf.Message.setField(this,4,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.ChainId=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.ChainId,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.ChainId.prototype.toObject=function(opt_includeInstance){return proto.types.ChainId.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.ChainId} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.ChainId.toObject=function(includeInstance,msg){var obj={magic:googleProtobuf.Message.getFieldWithDefault(msg,1,""),pb_public:googleProtobuf.Message.getFieldWithDefault(msg,2,false),mainnet:googleProtobuf.Message.getFieldWithDefault(msg,3,false),consensus:googleProtobuf.Message.getFieldWithDefault(msg,4,"")};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.ChainId}
	   */proto.types.ChainId.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.ChainId();return proto.types.ChainId.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.ChainId} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.ChainId}
	   */proto.types.ChainId.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {string} */reader.readString();msg.setMagic(value);break;case 2:var value=/** @type {boolean} */reader.readBool();msg.setPublic(value);break;case 3:var value=/** @type {boolean} */reader.readBool();msg.setMainnet(value);break;case 4:var value=/** @type {string} */reader.readString();msg.setConsensus(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.ChainId.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.ChainId.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.ChainId} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.ChainId.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getMagic();if(f.length>0){writer.writeString(1,f);}f=message.getPublic();if(f){writer.writeBool(2,f);}f=message.getMainnet();if(f){writer.writeBool(3,f);}f=message.getConsensus();if(f.length>0){writer.writeString(4,f);}};/**
	   * optional string magic = 1;
	   * @return {string}
	   */proto.types.ChainId.prototype.getMagic=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/** @param {string} value */proto.types.ChainId.prototype.setMagic=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional bool public = 2;
	   * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	   * You should avoid comparisons like {@code val === true/false} in those cases.
	   * @return {boolean}
	   */proto.types.ChainId.prototype.getPublic=function(){return(/** @type {boolean} */googleProtobuf.Message.getFieldWithDefault(this,2,false));};/** @param {boolean} value */proto.types.ChainId.prototype.setPublic=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional bool mainnet = 3;
	   * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	   * You should avoid comparisons like {@code val === true/false} in those cases.
	   * @return {boolean}
	   */proto.types.ChainId.prototype.getMainnet=function(){return(/** @type {boolean} */googleProtobuf.Message.getFieldWithDefault(this,3,false));};/** @param {boolean} value */proto.types.ChainId.prototype.setMainnet=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * optional string consensus = 4;
	   * @return {string}
	   */proto.types.ChainId.prototype.getConsensus=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,4,""));};/** @param {string} value */proto.types.ChainId.prototype.setConsensus=function(value){googleProtobuf.Message.setField(this,4,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.ChainInfo=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.ChainInfo,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.ChainInfo.prototype.toObject=function(opt_includeInstance){return proto.types.ChainInfo.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.ChainInfo} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.ChainInfo.toObject=function(includeInstance,msg){var f,obj={id:(f=msg.getId())&&proto.types.ChainId.toObject(includeInstance,f),bpnumber:googleProtobuf.Message.getFieldWithDefault(msg,2,0),maxblocksize:googleProtobuf.Message.getFieldWithDefault(msg,3,0),maxtokens:msg.getMaxtokens_asB64(),stakingminimum:msg.getStakingminimum_asB64(),totalstaking:msg.getTotalstaking_asB64(),gasprice:msg.getGasprice_asB64(),nameprice:msg.getNameprice_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.ChainInfo}
	   */proto.types.ChainInfo.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.ChainInfo();return proto.types.ChainInfo.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.ChainInfo} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.ChainInfo}
	   */proto.types.ChainInfo.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=new proto.types.ChainId();reader.readMessage(value,proto.types.ChainId.deserializeBinaryFromReader);msg.setId(value);break;case 2:var value=/** @type {number} */reader.readUint32();msg.setBpnumber(value);break;case 3:var value=/** @type {number} */reader.readUint64();msg.setMaxblocksize(value);break;case 4:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setMaxtokens(value);break;case 5:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setStakingminimum(value);break;case 6:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setTotalstaking(value);break;case 7:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setGasprice(value);break;case 8:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setNameprice(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.ChainInfo.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.ChainInfo.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.ChainInfo} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.ChainInfo.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getId();if(f!=null){writer.writeMessage(1,f,proto.types.ChainId.serializeBinaryToWriter);}f=message.getBpnumber();if(f!==0){writer.writeUint32(2,f);}f=message.getMaxblocksize();if(f!==0){writer.writeUint64(3,f);}f=message.getMaxtokens_asU8();if(f.length>0){writer.writeBytes(4,f);}f=message.getStakingminimum_asU8();if(f.length>0){writer.writeBytes(5,f);}f=message.getTotalstaking_asU8();if(f.length>0){writer.writeBytes(6,f);}f=message.getGasprice_asU8();if(f.length>0){writer.writeBytes(7,f);}f=message.getNameprice_asU8();if(f.length>0){writer.writeBytes(8,f);}};/**
	   * optional ChainId id = 1;
	   * @return {?proto.types.ChainId}
	   */proto.types.ChainInfo.prototype.getId=function(){return(/** @type{?proto.types.ChainId} */googleProtobuf.Message.getWrapperField(this,proto.types.ChainId,1));};/** @param {?proto.types.ChainId|undefined} value */proto.types.ChainInfo.prototype.setId=function(value){googleProtobuf.Message.setWrapperField(this,1,value);};proto.types.ChainInfo.prototype.clearId=function(){this.setId(undefined);};/**
	   * Returns whether this field is set.
	   * @return {!boolean}
	   */proto.types.ChainInfo.prototype.hasId=function(){return googleProtobuf.Message.getField(this,1)!=null;};/**
	   * optional uint32 bpNumber = 2;
	   * @return {number}
	   */proto.types.ChainInfo.prototype.getBpnumber=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,2,0));};/** @param {number} value */proto.types.ChainInfo.prototype.setBpnumber=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional uint64 maxblocksize = 3;
	   * @return {number}
	   */proto.types.ChainInfo.prototype.getMaxblocksize=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,3,0));};/** @param {number} value */proto.types.ChainInfo.prototype.setMaxblocksize=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * optional bytes maxtokens = 4;
	   * @return {!(string|Uint8Array)}
	   */proto.types.ChainInfo.prototype.getMaxtokens=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,4,""));};/**
	   * optional bytes maxtokens = 4;
	   * This is a type-conversion wrapper around `getMaxtokens()`
	   * @return {string}
	   */proto.types.ChainInfo.prototype.getMaxtokens_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getMaxtokens()));};/**
	   * optional bytes maxtokens = 4;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getMaxtokens()`
	   * @return {!Uint8Array}
	   */proto.types.ChainInfo.prototype.getMaxtokens_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getMaxtokens()));};/** @param {!(string|Uint8Array)} value */proto.types.ChainInfo.prototype.setMaxtokens=function(value){googleProtobuf.Message.setField(this,4,value);};/**
	   * optional bytes stakingminimum = 5;
	   * @return {!(string|Uint8Array)}
	   */proto.types.ChainInfo.prototype.getStakingminimum=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,5,""));};/**
	   * optional bytes stakingminimum = 5;
	   * This is a type-conversion wrapper around `getStakingminimum()`
	   * @return {string}
	   */proto.types.ChainInfo.prototype.getStakingminimum_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getStakingminimum()));};/**
	   * optional bytes stakingminimum = 5;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getStakingminimum()`
	   * @return {!Uint8Array}
	   */proto.types.ChainInfo.prototype.getStakingminimum_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getStakingminimum()));};/** @param {!(string|Uint8Array)} value */proto.types.ChainInfo.prototype.setStakingminimum=function(value){googleProtobuf.Message.setField(this,5,value);};/**
	   * optional bytes totalstaking = 6;
	   * @return {!(string|Uint8Array)}
	   */proto.types.ChainInfo.prototype.getTotalstaking=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,6,""));};/**
	   * optional bytes totalstaking = 6;
	   * This is a type-conversion wrapper around `getTotalstaking()`
	   * @return {string}
	   */proto.types.ChainInfo.prototype.getTotalstaking_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getTotalstaking()));};/**
	   * optional bytes totalstaking = 6;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getTotalstaking()`
	   * @return {!Uint8Array}
	   */proto.types.ChainInfo.prototype.getTotalstaking_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getTotalstaking()));};/** @param {!(string|Uint8Array)} value */proto.types.ChainInfo.prototype.setTotalstaking=function(value){googleProtobuf.Message.setField(this,6,value);};/**
	   * optional bytes gasprice = 7;
	   * @return {!(string|Uint8Array)}
	   */proto.types.ChainInfo.prototype.getGasprice=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,7,""));};/**
	   * optional bytes gasprice = 7;
	   * This is a type-conversion wrapper around `getGasprice()`
	   * @return {string}
	   */proto.types.ChainInfo.prototype.getGasprice_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getGasprice()));};/**
	   * optional bytes gasprice = 7;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getGasprice()`
	   * @return {!Uint8Array}
	   */proto.types.ChainInfo.prototype.getGasprice_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getGasprice()));};/** @param {!(string|Uint8Array)} value */proto.types.ChainInfo.prototype.setGasprice=function(value){googleProtobuf.Message.setField(this,7,value);};/**
	   * optional bytes nameprice = 8;
	   * @return {!(string|Uint8Array)}
	   */proto.types.ChainInfo.prototype.getNameprice=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,8,""));};/**
	   * optional bytes nameprice = 8;
	   * This is a type-conversion wrapper around `getNameprice()`
	   * @return {string}
	   */proto.types.ChainInfo.prototype.getNameprice_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getNameprice()));};/**
	   * optional bytes nameprice = 8;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getNameprice()`
	   * @return {!Uint8Array}
	   */proto.types.ChainInfo.prototype.getNameprice_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getNameprice()));};/** @param {!(string|Uint8Array)} value */proto.types.ChainInfo.prototype.setNameprice=function(value){googleProtobuf.Message.setField(this,8,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.Input=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.Input.repeatedFields_,null);};goog.inherits(proto.types.Input,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.Input.repeatedFields_=[2];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.Input.prototype.toObject=function(opt_includeInstance){return proto.types.Input.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.Input} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.Input.toObject=function(includeInstance,msg){var obj={hash:msg.getHash_asB64(),addressList:msg.getAddressList_asB64(),value:msg.getValue_asB64(),script:msg.getScript_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.Input}
	   */proto.types.Input.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.Input();return proto.types.Input.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.Input} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.Input}
	   */proto.types.Input.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setHash(value);break;case 2:var value=/** @type {!Uint8Array} */reader.readBytes();msg.addAddress(value);break;case 3:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setValue(value);break;case 4:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setScript(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.Input.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.Input.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.Input} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.Input.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getHash_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getAddressList_asU8();if(f.length>0){writer.writeRepeatedBytes(2,f);}f=message.getValue_asU8();if(f.length>0){writer.writeBytes(3,f);}f=message.getScript_asU8();if(f.length>0){writer.writeBytes(4,f);}};/**
	   * optional bytes hash = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Input.prototype.getHash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes hash = 1;
	   * This is a type-conversion wrapper around `getHash()`
	   * @return {string}
	   */proto.types.Input.prototype.getHash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getHash()));};/**
	   * optional bytes hash = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getHash()`
	   * @return {!Uint8Array}
	   */proto.types.Input.prototype.getHash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getHash()));};/** @param {!(string|Uint8Array)} value */proto.types.Input.prototype.setHash=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * repeated bytes address = 2;
	   * @return {!(Array<!Uint8Array>|Array<string>)}
	   */proto.types.Input.prototype.getAddressList=function(){return(/** @type {!(Array<!Uint8Array>|Array<string>)} */googleProtobuf.Message.getRepeatedField(this,2));};/**
	   * repeated bytes address = 2;
	   * This is a type-conversion wrapper around `getAddressList()`
	   * @return {!Array.<string>}
	   */proto.types.Input.prototype.getAddressList_asB64=function(){return(/** @type {!Array.<string>} */googleProtobuf.Message.bytesListAsB64(this.getAddressList()));};/**
	   * repeated bytes address = 2;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getAddressList()`
	   * @return {!Array.<!Uint8Array>}
	   */proto.types.Input.prototype.getAddressList_asU8=function(){return(/** @type {!Array.<!Uint8Array>} */googleProtobuf.Message.bytesListAsU8(this.getAddressList()));};/** @param {!(Array<!Uint8Array>|Array<string>)} value */proto.types.Input.prototype.setAddressList=function(value){googleProtobuf.Message.setField(this,2,value||[]);};/**
	   * @param {!(string|Uint8Array)} value
	   * @param {number=} opt_index
	   */proto.types.Input.prototype.addAddress=function(value,opt_index){googleProtobuf.Message.addToRepeatedField(this,2,value,opt_index);};proto.types.Input.prototype.clearAddressList=function(){this.setAddressList([]);};/**
	   * optional bytes value = 3;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Input.prototype.getValue=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,3,""));};/**
	   * optional bytes value = 3;
	   * This is a type-conversion wrapper around `getValue()`
	   * @return {string}
	   */proto.types.Input.prototype.getValue_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getValue()));};/**
	   * optional bytes value = 3;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getValue()`
	   * @return {!Uint8Array}
	   */proto.types.Input.prototype.getValue_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getValue()));};/** @param {!(string|Uint8Array)} value */proto.types.Input.prototype.setValue=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * optional bytes script = 4;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Input.prototype.getScript=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,4,""));};/**
	   * optional bytes script = 4;
	   * This is a type-conversion wrapper around `getScript()`
	   * @return {string}
	   */proto.types.Input.prototype.getScript_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getScript()));};/**
	   * optional bytes script = 4;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getScript()`
	   * @return {!Uint8Array}
	   */proto.types.Input.prototype.getScript_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getScript()));};/** @param {!(string|Uint8Array)} value */proto.types.Input.prototype.setScript=function(value){googleProtobuf.Message.setField(this,4,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.Output=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.Output,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.Output.prototype.toObject=function(opt_includeInstance){return proto.types.Output.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.Output} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.Output.toObject=function(includeInstance,msg){var obj={index:googleProtobuf.Message.getFieldWithDefault(msg,1,0),address:msg.getAddress_asB64(),value:msg.getValue_asB64(),script:msg.getScript_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.Output}
	   */proto.types.Output.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.Output();return proto.types.Output.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.Output} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.Output}
	   */proto.types.Output.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {number} */reader.readUint32();msg.setIndex(value);break;case 2:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setAddress(value);break;case 3:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setValue(value);break;case 4:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setScript(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.Output.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.Output.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.Output} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.Output.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getIndex();if(f!==0){writer.writeUint32(1,f);}f=message.getAddress_asU8();if(f.length>0){writer.writeBytes(2,f);}f=message.getValue_asU8();if(f.length>0){writer.writeBytes(3,f);}f=message.getScript_asU8();if(f.length>0){writer.writeBytes(4,f);}};/**
	   * optional uint32 index = 1;
	   * @return {number}
	   */proto.types.Output.prototype.getIndex=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,1,0));};/** @param {number} value */proto.types.Output.prototype.setIndex=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional bytes address = 2;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Output.prototype.getAddress=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,2,""));};/**
	   * optional bytes address = 2;
	   * This is a type-conversion wrapper around `getAddress()`
	   * @return {string}
	   */proto.types.Output.prototype.getAddress_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getAddress()));};/**
	   * optional bytes address = 2;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getAddress()`
	   * @return {!Uint8Array}
	   */proto.types.Output.prototype.getAddress_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getAddress()));};/** @param {!(string|Uint8Array)} value */proto.types.Output.prototype.setAddress=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional bytes value = 3;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Output.prototype.getValue=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,3,""));};/**
	   * optional bytes value = 3;
	   * This is a type-conversion wrapper around `getValue()`
	   * @return {string}
	   */proto.types.Output.prototype.getValue_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getValue()));};/**
	   * optional bytes value = 3;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getValue()`
	   * @return {!Uint8Array}
	   */proto.types.Output.prototype.getValue_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getValue()));};/** @param {!(string|Uint8Array)} value */proto.types.Output.prototype.setValue=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * optional bytes script = 4;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Output.prototype.getScript=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,4,""));};/**
	   * optional bytes script = 4;
	   * This is a type-conversion wrapper around `getScript()`
	   * @return {string}
	   */proto.types.Output.prototype.getScript_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getScript()));};/**
	   * optional bytes script = 4;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getScript()`
	   * @return {!Uint8Array}
	   */proto.types.Output.prototype.getScript_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getScript()));};/** @param {!(string|Uint8Array)} value */proto.types.Output.prototype.setScript=function(value){googleProtobuf.Message.setField(this,4,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.Empty=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.Empty,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.Empty.prototype.toObject=function(opt_includeInstance){return proto.types.Empty.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.Empty} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.Empty.toObject=function(includeInstance,msg){var obj={};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.Empty}
	   */proto.types.Empty.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.Empty();return proto.types.Empty.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.Empty} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.Empty}
	   */proto.types.Empty.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.Empty.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.Empty.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.Empty} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.Empty.serializeBinaryToWriter=function(message,writer){};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.SingleBytes=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.SingleBytes,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.SingleBytes.prototype.toObject=function(opt_includeInstance){return proto.types.SingleBytes.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.SingleBytes} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.SingleBytes.toObject=function(includeInstance,msg){var obj={value:msg.getValue_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.SingleBytes}
	   */proto.types.SingleBytes.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.SingleBytes();return proto.types.SingleBytes.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.SingleBytes} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.SingleBytes}
	   */proto.types.SingleBytes.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setValue(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.SingleBytes.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.SingleBytes.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.SingleBytes} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.SingleBytes.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getValue_asU8();if(f.length>0){writer.writeBytes(1,f);}};/**
	   * optional bytes value = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.SingleBytes.prototype.getValue=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes value = 1;
	   * This is a type-conversion wrapper around `getValue()`
	   * @return {string}
	   */proto.types.SingleBytes.prototype.getValue_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getValue()));};/**
	   * optional bytes value = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getValue()`
	   * @return {!Uint8Array}
	   */proto.types.SingleBytes.prototype.getValue_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getValue()));};/** @param {!(string|Uint8Array)} value */proto.types.SingleBytes.prototype.setValue=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.AccountAddress=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.AccountAddress,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.AccountAddress.prototype.toObject=function(opt_includeInstance){return proto.types.AccountAddress.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.AccountAddress} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.AccountAddress.toObject=function(includeInstance,msg){var obj={value:msg.getValue_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.AccountAddress}
	   */proto.types.AccountAddress.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.AccountAddress();return proto.types.AccountAddress.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.AccountAddress} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.AccountAddress}
	   */proto.types.AccountAddress.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setValue(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.AccountAddress.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.AccountAddress.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.AccountAddress} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.AccountAddress.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getValue_asU8();if(f.length>0){writer.writeBytes(1,f);}};/**
	   * optional bytes value = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.AccountAddress.prototype.getValue=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes value = 1;
	   * This is a type-conversion wrapper around `getValue()`
	   * @return {string}
	   */proto.types.AccountAddress.prototype.getValue_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getValue()));};/**
	   * optional bytes value = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getValue()`
	   * @return {!Uint8Array}
	   */proto.types.AccountAddress.prototype.getValue_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getValue()));};/** @param {!(string|Uint8Array)} value */proto.types.AccountAddress.prototype.setValue=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.AccountAndRoot=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.AccountAndRoot,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.AccountAndRoot.prototype.toObject=function(opt_includeInstance){return proto.types.AccountAndRoot.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.AccountAndRoot} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.AccountAndRoot.toObject=function(includeInstance,msg){var obj={account:msg.getAccount_asB64(),root:msg.getRoot_asB64(),compressed:googleProtobuf.Message.getFieldWithDefault(msg,3,false)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.AccountAndRoot}
	   */proto.types.AccountAndRoot.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.AccountAndRoot();return proto.types.AccountAndRoot.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.AccountAndRoot} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.AccountAndRoot}
	   */proto.types.AccountAndRoot.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setAccount(value);break;case 2:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setRoot(value);break;case 3:var value=/** @type {boolean} */reader.readBool();msg.setCompressed(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.AccountAndRoot.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.AccountAndRoot.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.AccountAndRoot} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.AccountAndRoot.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getAccount_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getRoot_asU8();if(f.length>0){writer.writeBytes(2,f);}f=message.getCompressed();if(f){writer.writeBool(3,f);}};/**
	   * optional bytes Account = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.AccountAndRoot.prototype.getAccount=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes Account = 1;
	   * This is a type-conversion wrapper around `getAccount()`
	   * @return {string}
	   */proto.types.AccountAndRoot.prototype.getAccount_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getAccount()));};/**
	   * optional bytes Account = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getAccount()`
	   * @return {!Uint8Array}
	   */proto.types.AccountAndRoot.prototype.getAccount_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getAccount()));};/** @param {!(string|Uint8Array)} value */proto.types.AccountAndRoot.prototype.setAccount=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional bytes Root = 2;
	   * @return {!(string|Uint8Array)}
	   */proto.types.AccountAndRoot.prototype.getRoot=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,2,""));};/**
	   * optional bytes Root = 2;
	   * This is a type-conversion wrapper around `getRoot()`
	   * @return {string}
	   */proto.types.AccountAndRoot.prototype.getRoot_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getRoot()));};/**
	   * optional bytes Root = 2;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getRoot()`
	   * @return {!Uint8Array}
	   */proto.types.AccountAndRoot.prototype.getRoot_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getRoot()));};/** @param {!(string|Uint8Array)} value */proto.types.AccountAndRoot.prototype.setRoot=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional bool Compressed = 3;
	   * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	   * You should avoid comparisons like {@code val === true/false} in those cases.
	   * @return {boolean}
	   */proto.types.AccountAndRoot.prototype.getCompressed=function(){return(/** @type {boolean} */googleProtobuf.Message.getFieldWithDefault(this,3,false));};/** @param {boolean} value */proto.types.AccountAndRoot.prototype.setCompressed=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.Peer=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.Peer,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.Peer.prototype.toObject=function(opt_includeInstance){return proto.types.Peer.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.Peer} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.Peer.toObject=function(includeInstance,msg){var f,obj={address:(f=msg.getAddress())&&node_pb.PeerAddress.toObject(includeInstance,f),bestblock:(f=msg.getBestblock())&&p2p_pb.NewBlockNotice.toObject(includeInstance,f),state:googleProtobuf.Message.getFieldWithDefault(msg,3,0),hidden:googleProtobuf.Message.getFieldWithDefault(msg,4,false),lashcheck:googleProtobuf.Message.getFieldWithDefault(msg,5,0),selfpeer:googleProtobuf.Message.getFieldWithDefault(msg,6,false)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.Peer}
	   */proto.types.Peer.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.Peer();return proto.types.Peer.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.Peer} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.Peer}
	   */proto.types.Peer.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=new node_pb.PeerAddress();reader.readMessage(value,node_pb.PeerAddress.deserializeBinaryFromReader);msg.setAddress(value);break;case 2:var value=new p2p_pb.NewBlockNotice();reader.readMessage(value,p2p_pb.NewBlockNotice.deserializeBinaryFromReader);msg.setBestblock(value);break;case 3:var value=/** @type {number} */reader.readInt32();msg.setState(value);break;case 4:var value=/** @type {boolean} */reader.readBool();msg.setHidden(value);break;case 5:var value=/** @type {number} */reader.readInt64();msg.setLashcheck(value);break;case 6:var value=/** @type {boolean} */reader.readBool();msg.setSelfpeer(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.Peer.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.Peer.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.Peer} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.Peer.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getAddress();if(f!=null){writer.writeMessage(1,f,node_pb.PeerAddress.serializeBinaryToWriter);}f=message.getBestblock();if(f!=null){writer.writeMessage(2,f,p2p_pb.NewBlockNotice.serializeBinaryToWriter);}f=message.getState();if(f!==0){writer.writeInt32(3,f);}f=message.getHidden();if(f){writer.writeBool(4,f);}f=message.getLashcheck();if(f!==0){writer.writeInt64(5,f);}f=message.getSelfpeer();if(f){writer.writeBool(6,f);}};/**
	   * optional PeerAddress address = 1;
	   * @return {?proto.types.PeerAddress}
	   */proto.types.Peer.prototype.getAddress=function(){return(/** @type{?proto.types.PeerAddress} */googleProtobuf.Message.getWrapperField(this,node_pb.PeerAddress,1));};/** @param {?proto.types.PeerAddress|undefined} value */proto.types.Peer.prototype.setAddress=function(value){googleProtobuf.Message.setWrapperField(this,1,value);};proto.types.Peer.prototype.clearAddress=function(){this.setAddress(undefined);};/**
	   * Returns whether this field is set.
	   * @return {!boolean}
	   */proto.types.Peer.prototype.hasAddress=function(){return googleProtobuf.Message.getField(this,1)!=null;};/**
	   * optional NewBlockNotice bestblock = 2;
	   * @return {?proto.types.NewBlockNotice}
	   */proto.types.Peer.prototype.getBestblock=function(){return(/** @type{?proto.types.NewBlockNotice} */googleProtobuf.Message.getWrapperField(this,p2p_pb.NewBlockNotice,2));};/** @param {?proto.types.NewBlockNotice|undefined} value */proto.types.Peer.prototype.setBestblock=function(value){googleProtobuf.Message.setWrapperField(this,2,value);};proto.types.Peer.prototype.clearBestblock=function(){this.setBestblock(undefined);};/**
	   * Returns whether this field is set.
	   * @return {!boolean}
	   */proto.types.Peer.prototype.hasBestblock=function(){return googleProtobuf.Message.getField(this,2)!=null;};/**
	   * optional int32 state = 3;
	   * @return {number}
	   */proto.types.Peer.prototype.getState=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,3,0));};/** @param {number} value */proto.types.Peer.prototype.setState=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * optional bool hidden = 4;
	   * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	   * You should avoid comparisons like {@code val === true/false} in those cases.
	   * @return {boolean}
	   */proto.types.Peer.prototype.getHidden=function(){return(/** @type {boolean} */googleProtobuf.Message.getFieldWithDefault(this,4,false));};/** @param {boolean} value */proto.types.Peer.prototype.setHidden=function(value){googleProtobuf.Message.setField(this,4,value);};/**
	   * optional int64 lashCheck = 5;
	   * @return {number}
	   */proto.types.Peer.prototype.getLashcheck=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,5,0));};/** @param {number} value */proto.types.Peer.prototype.setLashcheck=function(value){googleProtobuf.Message.setField(this,5,value);};/**
	   * optional bool selfpeer = 6;
	   * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	   * You should avoid comparisons like {@code val === true/false} in those cases.
	   * @return {boolean}
	   */proto.types.Peer.prototype.getSelfpeer=function(){return(/** @type {boolean} */googleProtobuf.Message.getFieldWithDefault(this,6,false));};/** @param {boolean} value */proto.types.Peer.prototype.setSelfpeer=function(value){googleProtobuf.Message.setField(this,6,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.PeerList=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.PeerList.repeatedFields_,null);};goog.inherits(proto.types.PeerList,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.PeerList.repeatedFields_=[1];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.PeerList.prototype.toObject=function(opt_includeInstance){return proto.types.PeerList.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.PeerList} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.PeerList.toObject=function(includeInstance,msg){var obj={peersList:googleProtobuf.Message.toObjectList(msg.getPeersList(),proto.types.Peer.toObject,includeInstance)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.PeerList}
	   */proto.types.PeerList.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.PeerList();return proto.types.PeerList.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.PeerList} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.PeerList}
	   */proto.types.PeerList.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=new proto.types.Peer();reader.readMessage(value,proto.types.Peer.deserializeBinaryFromReader);msg.addPeers(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.PeerList.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.PeerList.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.PeerList} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.PeerList.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getPeersList();if(f.length>0){writer.writeRepeatedMessage(1,f,proto.types.Peer.serializeBinaryToWriter);}};/**
	   * repeated Peer peers = 1;
	   * @return {!Array.<!proto.types.Peer>}
	   */proto.types.PeerList.prototype.getPeersList=function(){return(/** @type{!Array.<!proto.types.Peer>} */googleProtobuf.Message.getRepeatedWrapperField(this,proto.types.Peer,1));};/** @param {!Array.<!proto.types.Peer>} value */proto.types.PeerList.prototype.setPeersList=function(value){googleProtobuf.Message.setRepeatedWrapperField(this,1,value);};/**
	   * @param {!proto.types.Peer=} opt_value
	   * @param {number=} opt_index
	   * @return {!proto.types.Peer}
	   */proto.types.PeerList.prototype.addPeers=function(opt_value,opt_index){return googleProtobuf.Message.addToRepeatedWrapperField(this,1,opt_value,proto.types.Peer,opt_index);};proto.types.PeerList.prototype.clearPeersList=function(){this.setPeersList([]);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.ListParams=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.ListParams,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.ListParams.prototype.toObject=function(opt_includeInstance){return proto.types.ListParams.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.ListParams} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.ListParams.toObject=function(includeInstance,msg){var obj={hash:msg.getHash_asB64(),height:googleProtobuf.Message.getFieldWithDefault(msg,2,0),size:googleProtobuf.Message.getFieldWithDefault(msg,3,0),offset:googleProtobuf.Message.getFieldWithDefault(msg,4,0),asc:googleProtobuf.Message.getFieldWithDefault(msg,5,false)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.ListParams}
	   */proto.types.ListParams.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.ListParams();return proto.types.ListParams.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.ListParams} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.ListParams}
	   */proto.types.ListParams.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setHash(value);break;case 2:var value=/** @type {number} */reader.readUint64();msg.setHeight(value);break;case 3:var value=/** @type {number} */reader.readUint32();msg.setSize(value);break;case 4:var value=/** @type {number} */reader.readUint32();msg.setOffset(value);break;case 5:var value=/** @type {boolean} */reader.readBool();msg.setAsc(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.ListParams.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.ListParams.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.ListParams} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.ListParams.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getHash_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getHeight();if(f!==0){writer.writeUint64(2,f);}f=message.getSize();if(f!==0){writer.writeUint32(3,f);}f=message.getOffset();if(f!==0){writer.writeUint32(4,f);}f=message.getAsc();if(f){writer.writeBool(5,f);}};/**
	   * optional bytes hash = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.ListParams.prototype.getHash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes hash = 1;
	   * This is a type-conversion wrapper around `getHash()`
	   * @return {string}
	   */proto.types.ListParams.prototype.getHash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getHash()));};/**
	   * optional bytes hash = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getHash()`
	   * @return {!Uint8Array}
	   */proto.types.ListParams.prototype.getHash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getHash()));};/** @param {!(string|Uint8Array)} value */proto.types.ListParams.prototype.setHash=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional uint64 height = 2;
	   * @return {number}
	   */proto.types.ListParams.prototype.getHeight=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,2,0));};/** @param {number} value */proto.types.ListParams.prototype.setHeight=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional uint32 size = 3;
	   * @return {number}
	   */proto.types.ListParams.prototype.getSize=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,3,0));};/** @param {number} value */proto.types.ListParams.prototype.setSize=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * optional uint32 offset = 4;
	   * @return {number}
	   */proto.types.ListParams.prototype.getOffset=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,4,0));};/** @param {number} value */proto.types.ListParams.prototype.setOffset=function(value){googleProtobuf.Message.setField(this,4,value);};/**
	   * optional bool asc = 5;
	   * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	   * You should avoid comparisons like {@code val === true/false} in those cases.
	   * @return {boolean}
	   */proto.types.ListParams.prototype.getAsc=function(){return(/** @type {boolean} */googleProtobuf.Message.getFieldWithDefault(this,5,false));};/** @param {boolean} value */proto.types.ListParams.prototype.setAsc=function(value){googleProtobuf.Message.setField(this,5,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.PageParams=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.PageParams,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.PageParams.prototype.toObject=function(opt_includeInstance){return proto.types.PageParams.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.PageParams} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.PageParams.toObject=function(includeInstance,msg){var obj={offset:googleProtobuf.Message.getFieldWithDefault(msg,1,0),size:googleProtobuf.Message.getFieldWithDefault(msg,2,0)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.PageParams}
	   */proto.types.PageParams.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.PageParams();return proto.types.PageParams.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.PageParams} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.PageParams}
	   */proto.types.PageParams.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {number} */reader.readUint32();msg.setOffset(value);break;case 2:var value=/** @type {number} */reader.readUint32();msg.setSize(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.PageParams.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.PageParams.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.PageParams} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.PageParams.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getOffset();if(f!==0){writer.writeUint32(1,f);}f=message.getSize();if(f!==0){writer.writeUint32(2,f);}};/**
	   * optional uint32 offset = 1;
	   * @return {number}
	   */proto.types.PageParams.prototype.getOffset=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,1,0));};/** @param {number} value */proto.types.PageParams.prototype.setOffset=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional uint32 size = 2;
	   * @return {number}
	   */proto.types.PageParams.prototype.getSize=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,2,0));};/** @param {number} value */proto.types.PageParams.prototype.setSize=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.BlockBodyPaged=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.BlockBodyPaged,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.BlockBodyPaged.prototype.toObject=function(opt_includeInstance){return proto.types.BlockBodyPaged.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.BlockBodyPaged} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.BlockBodyPaged.toObject=function(includeInstance,msg){var f,obj={total:googleProtobuf.Message.getFieldWithDefault(msg,1,0),offset:googleProtobuf.Message.getFieldWithDefault(msg,2,0),size:googleProtobuf.Message.getFieldWithDefault(msg,3,0),body:(f=msg.getBody())&&blockchain_pb.BlockBody.toObject(includeInstance,f)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.BlockBodyPaged}
	   */proto.types.BlockBodyPaged.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.BlockBodyPaged();return proto.types.BlockBodyPaged.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.BlockBodyPaged} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.BlockBodyPaged}
	   */proto.types.BlockBodyPaged.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {number} */reader.readUint32();msg.setTotal(value);break;case 2:var value=/** @type {number} */reader.readUint32();msg.setOffset(value);break;case 3:var value=/** @type {number} */reader.readUint32();msg.setSize(value);break;case 4:var value=new blockchain_pb.BlockBody();reader.readMessage(value,blockchain_pb.BlockBody.deserializeBinaryFromReader);msg.setBody(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.BlockBodyPaged.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.BlockBodyPaged.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.BlockBodyPaged} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.BlockBodyPaged.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getTotal();if(f!==0){writer.writeUint32(1,f);}f=message.getOffset();if(f!==0){writer.writeUint32(2,f);}f=message.getSize();if(f!==0){writer.writeUint32(3,f);}f=message.getBody();if(f!=null){writer.writeMessage(4,f,blockchain_pb.BlockBody.serializeBinaryToWriter);}};/**
	   * optional uint32 total = 1;
	   * @return {number}
	   */proto.types.BlockBodyPaged.prototype.getTotal=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,1,0));};/** @param {number} value */proto.types.BlockBodyPaged.prototype.setTotal=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional uint32 offset = 2;
	   * @return {number}
	   */proto.types.BlockBodyPaged.prototype.getOffset=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,2,0));};/** @param {number} value */proto.types.BlockBodyPaged.prototype.setOffset=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional uint32 size = 3;
	   * @return {number}
	   */proto.types.BlockBodyPaged.prototype.getSize=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,3,0));};/** @param {number} value */proto.types.BlockBodyPaged.prototype.setSize=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * optional BlockBody body = 4;
	   * @return {?proto.types.BlockBody}
	   */proto.types.BlockBodyPaged.prototype.getBody=function(){return(/** @type{?proto.types.BlockBody} */googleProtobuf.Message.getWrapperField(this,blockchain_pb.BlockBody,4));};/** @param {?proto.types.BlockBody|undefined} value */proto.types.BlockBodyPaged.prototype.setBody=function(value){googleProtobuf.Message.setWrapperField(this,4,value);};proto.types.BlockBodyPaged.prototype.clearBody=function(){this.setBody(undefined);};/**
	   * Returns whether this field is set.
	   * @return {!boolean}
	   */proto.types.BlockBodyPaged.prototype.hasBody=function(){return googleProtobuf.Message.getField(this,4)!=null;};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.BlockBodyParams=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.BlockBodyParams,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.BlockBodyParams.prototype.toObject=function(opt_includeInstance){return proto.types.BlockBodyParams.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.BlockBodyParams} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.BlockBodyParams.toObject=function(includeInstance,msg){var f,obj={hashornumber:msg.getHashornumber_asB64(),paging:(f=msg.getPaging())&&proto.types.PageParams.toObject(includeInstance,f)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.BlockBodyParams}
	   */proto.types.BlockBodyParams.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.BlockBodyParams();return proto.types.BlockBodyParams.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.BlockBodyParams} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.BlockBodyParams}
	   */proto.types.BlockBodyParams.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setHashornumber(value);break;case 2:var value=new proto.types.PageParams();reader.readMessage(value,proto.types.PageParams.deserializeBinaryFromReader);msg.setPaging(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.BlockBodyParams.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.BlockBodyParams.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.BlockBodyParams} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.BlockBodyParams.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getHashornumber_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getPaging();if(f!=null){writer.writeMessage(2,f,proto.types.PageParams.serializeBinaryToWriter);}};/**
	   * optional bytes hashornumber = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.BlockBodyParams.prototype.getHashornumber=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes hashornumber = 1;
	   * This is a type-conversion wrapper around `getHashornumber()`
	   * @return {string}
	   */proto.types.BlockBodyParams.prototype.getHashornumber_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getHashornumber()));};/**
	   * optional bytes hashornumber = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getHashornumber()`
	   * @return {!Uint8Array}
	   */proto.types.BlockBodyParams.prototype.getHashornumber_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getHashornumber()));};/** @param {!(string|Uint8Array)} value */proto.types.BlockBodyParams.prototype.setHashornumber=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional PageParams paging = 2;
	   * @return {?proto.types.PageParams}
	   */proto.types.BlockBodyParams.prototype.getPaging=function(){return(/** @type{?proto.types.PageParams} */googleProtobuf.Message.getWrapperField(this,proto.types.PageParams,2));};/** @param {?proto.types.PageParams|undefined} value */proto.types.BlockBodyParams.prototype.setPaging=function(value){googleProtobuf.Message.setWrapperField(this,2,value);};proto.types.BlockBodyParams.prototype.clearPaging=function(){this.setPaging(undefined);};/**
	   * Returns whether this field is set.
	   * @return {!boolean}
	   */proto.types.BlockBodyParams.prototype.hasPaging=function(){return googleProtobuf.Message.getField(this,2)!=null;};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.BlockHeaderList=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.BlockHeaderList.repeatedFields_,null);};goog.inherits(proto.types.BlockHeaderList,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.BlockHeaderList.repeatedFields_=[1];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.BlockHeaderList.prototype.toObject=function(opt_includeInstance){return proto.types.BlockHeaderList.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.BlockHeaderList} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.BlockHeaderList.toObject=function(includeInstance,msg){var obj={blocksList:googleProtobuf.Message.toObjectList(msg.getBlocksList(),blockchain_pb.Block.toObject,includeInstance)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.BlockHeaderList}
	   */proto.types.BlockHeaderList.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.BlockHeaderList();return proto.types.BlockHeaderList.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.BlockHeaderList} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.BlockHeaderList}
	   */proto.types.BlockHeaderList.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=new blockchain_pb.Block();reader.readMessage(value,blockchain_pb.Block.deserializeBinaryFromReader);msg.addBlocks(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.BlockHeaderList.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.BlockHeaderList.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.BlockHeaderList} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.BlockHeaderList.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getBlocksList();if(f.length>0){writer.writeRepeatedMessage(1,f,blockchain_pb.Block.serializeBinaryToWriter);}};/**
	   * repeated Block blocks = 1;
	   * @return {!Array.<!proto.types.Block>}
	   */proto.types.BlockHeaderList.prototype.getBlocksList=function(){return(/** @type{!Array.<!proto.types.Block>} */googleProtobuf.Message.getRepeatedWrapperField(this,blockchain_pb.Block,1));};/** @param {!Array.<!proto.types.Block>} value */proto.types.BlockHeaderList.prototype.setBlocksList=function(value){googleProtobuf.Message.setRepeatedWrapperField(this,1,value);};/**
	   * @param {!proto.types.Block=} opt_value
	   * @param {number=} opt_index
	   * @return {!proto.types.Block}
	   */proto.types.BlockHeaderList.prototype.addBlocks=function(opt_value,opt_index){return googleProtobuf.Message.addToRepeatedWrapperField(this,1,opt_value,proto.types.Block,opt_index);};proto.types.BlockHeaderList.prototype.clearBlocksList=function(){this.setBlocksList([]);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.BlockMetadata=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.BlockMetadata,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.BlockMetadata.prototype.toObject=function(opt_includeInstance){return proto.types.BlockMetadata.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.BlockMetadata} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.BlockMetadata.toObject=function(includeInstance,msg){var f,obj={hash:msg.getHash_asB64(),header:(f=msg.getHeader())&&blockchain_pb.BlockHeader.toObject(includeInstance,f),txcount:googleProtobuf.Message.getFieldWithDefault(msg,3,0)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.BlockMetadata}
	   */proto.types.BlockMetadata.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.BlockMetadata();return proto.types.BlockMetadata.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.BlockMetadata} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.BlockMetadata}
	   */proto.types.BlockMetadata.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setHash(value);break;case 2:var value=new blockchain_pb.BlockHeader();reader.readMessage(value,blockchain_pb.BlockHeader.deserializeBinaryFromReader);msg.setHeader(value);break;case 3:var value=/** @type {number} */reader.readInt32();msg.setTxcount(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.BlockMetadata.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.BlockMetadata.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.BlockMetadata} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.BlockMetadata.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getHash_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getHeader();if(f!=null){writer.writeMessage(2,f,blockchain_pb.BlockHeader.serializeBinaryToWriter);}f=message.getTxcount();if(f!==0){writer.writeInt32(3,f);}};/**
	   * optional bytes hash = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.BlockMetadata.prototype.getHash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes hash = 1;
	   * This is a type-conversion wrapper around `getHash()`
	   * @return {string}
	   */proto.types.BlockMetadata.prototype.getHash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getHash()));};/**
	   * optional bytes hash = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getHash()`
	   * @return {!Uint8Array}
	   */proto.types.BlockMetadata.prototype.getHash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getHash()));};/** @param {!(string|Uint8Array)} value */proto.types.BlockMetadata.prototype.setHash=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional BlockHeader header = 2;
	   * @return {?proto.types.BlockHeader}
	   */proto.types.BlockMetadata.prototype.getHeader=function(){return(/** @type{?proto.types.BlockHeader} */googleProtobuf.Message.getWrapperField(this,blockchain_pb.BlockHeader,2));};/** @param {?proto.types.BlockHeader|undefined} value */proto.types.BlockMetadata.prototype.setHeader=function(value){googleProtobuf.Message.setWrapperField(this,2,value);};proto.types.BlockMetadata.prototype.clearHeader=function(){this.setHeader(undefined);};/**
	   * Returns whether this field is set.
	   * @return {!boolean}
	   */proto.types.BlockMetadata.prototype.hasHeader=function(){return googleProtobuf.Message.getField(this,2)!=null;};/**
	   * optional int32 txcount = 3;
	   * @return {number}
	   */proto.types.BlockMetadata.prototype.getTxcount=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,3,0));};/** @param {number} value */proto.types.BlockMetadata.prototype.setTxcount=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.BlockMetadataList=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.BlockMetadataList.repeatedFields_,null);};goog.inherits(proto.types.BlockMetadataList,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.BlockMetadataList.repeatedFields_=[1];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.BlockMetadataList.prototype.toObject=function(opt_includeInstance){return proto.types.BlockMetadataList.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.BlockMetadataList} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.BlockMetadataList.toObject=function(includeInstance,msg){var obj={blocksList:googleProtobuf.Message.toObjectList(msg.getBlocksList(),proto.types.BlockMetadata.toObject,includeInstance)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.BlockMetadataList}
	   */proto.types.BlockMetadataList.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.BlockMetadataList();return proto.types.BlockMetadataList.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.BlockMetadataList} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.BlockMetadataList}
	   */proto.types.BlockMetadataList.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=new proto.types.BlockMetadata();reader.readMessage(value,proto.types.BlockMetadata.deserializeBinaryFromReader);msg.addBlocks(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.BlockMetadataList.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.BlockMetadataList.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.BlockMetadataList} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.BlockMetadataList.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getBlocksList();if(f.length>0){writer.writeRepeatedMessage(1,f,proto.types.BlockMetadata.serializeBinaryToWriter);}};/**
	   * repeated BlockMetadata blocks = 1;
	   * @return {!Array.<!proto.types.BlockMetadata>}
	   */proto.types.BlockMetadataList.prototype.getBlocksList=function(){return(/** @type{!Array.<!proto.types.BlockMetadata>} */googleProtobuf.Message.getRepeatedWrapperField(this,proto.types.BlockMetadata,1));};/** @param {!Array.<!proto.types.BlockMetadata>} value */proto.types.BlockMetadataList.prototype.setBlocksList=function(value){googleProtobuf.Message.setRepeatedWrapperField(this,1,value);};/**
	   * @param {!proto.types.BlockMetadata=} opt_value
	   * @param {number=} opt_index
	   * @return {!proto.types.BlockMetadata}
	   */proto.types.BlockMetadataList.prototype.addBlocks=function(opt_value,opt_index){return googleProtobuf.Message.addToRepeatedWrapperField(this,1,opt_value,proto.types.BlockMetadata,opt_index);};proto.types.BlockMetadataList.prototype.clearBlocksList=function(){this.setBlocksList([]);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.CommitResult=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.CommitResult,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.CommitResult.prototype.toObject=function(opt_includeInstance){return proto.types.CommitResult.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.CommitResult} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.CommitResult.toObject=function(includeInstance,msg){var obj={hash:msg.getHash_asB64(),error:googleProtobuf.Message.getFieldWithDefault(msg,2,0),detail:googleProtobuf.Message.getFieldWithDefault(msg,3,"")};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.CommitResult}
	   */proto.types.CommitResult.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.CommitResult();return proto.types.CommitResult.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.CommitResult} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.CommitResult}
	   */proto.types.CommitResult.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setHash(value);break;case 2:var value=/** @type {!proto.types.CommitStatus} */reader.readEnum();msg.setError(value);break;case 3:var value=/** @type {string} */reader.readString();msg.setDetail(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.CommitResult.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.CommitResult.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.CommitResult} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.CommitResult.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getHash_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getError();if(f!==0.0){writer.writeEnum(2,f);}f=message.getDetail();if(f.length>0){writer.writeString(3,f);}};/**
	   * optional bytes hash = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.CommitResult.prototype.getHash=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes hash = 1;
	   * This is a type-conversion wrapper around `getHash()`
	   * @return {string}
	   */proto.types.CommitResult.prototype.getHash_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getHash()));};/**
	   * optional bytes hash = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getHash()`
	   * @return {!Uint8Array}
	   */proto.types.CommitResult.prototype.getHash_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getHash()));};/** @param {!(string|Uint8Array)} value */proto.types.CommitResult.prototype.setHash=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional CommitStatus error = 2;
	   * @return {!proto.types.CommitStatus}
	   */proto.types.CommitResult.prototype.getError=function(){return(/** @type {!proto.types.CommitStatus} */googleProtobuf.Message.getFieldWithDefault(this,2,0));};/** @param {!proto.types.CommitStatus} value */proto.types.CommitResult.prototype.setError=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional string detail = 3;
	   * @return {string}
	   */proto.types.CommitResult.prototype.getDetail=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,3,""));};/** @param {string} value */proto.types.CommitResult.prototype.setDetail=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.CommitResultList=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.CommitResultList.repeatedFields_,null);};goog.inherits(proto.types.CommitResultList,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.CommitResultList.repeatedFields_=[1];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.CommitResultList.prototype.toObject=function(opt_includeInstance){return proto.types.CommitResultList.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.CommitResultList} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.CommitResultList.toObject=function(includeInstance,msg){var obj={resultsList:googleProtobuf.Message.toObjectList(msg.getResultsList(),proto.types.CommitResult.toObject,includeInstance)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.CommitResultList}
	   */proto.types.CommitResultList.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.CommitResultList();return proto.types.CommitResultList.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.CommitResultList} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.CommitResultList}
	   */proto.types.CommitResultList.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=new proto.types.CommitResult();reader.readMessage(value,proto.types.CommitResult.deserializeBinaryFromReader);msg.addResults(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.CommitResultList.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.CommitResultList.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.CommitResultList} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.CommitResultList.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getResultsList();if(f.length>0){writer.writeRepeatedMessage(1,f,proto.types.CommitResult.serializeBinaryToWriter);}};/**
	   * repeated CommitResult results = 1;
	   * @return {!Array.<!proto.types.CommitResult>}
	   */proto.types.CommitResultList.prototype.getResultsList=function(){return(/** @type{!Array.<!proto.types.CommitResult>} */googleProtobuf.Message.getRepeatedWrapperField(this,proto.types.CommitResult,1));};/** @param {!Array.<!proto.types.CommitResult>} value */proto.types.CommitResultList.prototype.setResultsList=function(value){googleProtobuf.Message.setRepeatedWrapperField(this,1,value);};/**
	   * @param {!proto.types.CommitResult=} opt_value
	   * @param {number=} opt_index
	   * @return {!proto.types.CommitResult}
	   */proto.types.CommitResultList.prototype.addResults=function(opt_value,opt_index){return googleProtobuf.Message.addToRepeatedWrapperField(this,1,opt_value,proto.types.CommitResult,opt_index);};proto.types.CommitResultList.prototype.clearResultsList=function(){this.setResultsList([]);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.VerifyResult=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.VerifyResult,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.VerifyResult.prototype.toObject=function(opt_includeInstance){return proto.types.VerifyResult.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.VerifyResult} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.VerifyResult.toObject=function(includeInstance,msg){var f,obj={tx:(f=msg.getTx())&&blockchain_pb.Tx.toObject(includeInstance,f),error:googleProtobuf.Message.getFieldWithDefault(msg,2,0)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.VerifyResult}
	   */proto.types.VerifyResult.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.VerifyResult();return proto.types.VerifyResult.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.VerifyResult} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.VerifyResult}
	   */proto.types.VerifyResult.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=new blockchain_pb.Tx();reader.readMessage(value,blockchain_pb.Tx.deserializeBinaryFromReader);msg.setTx(value);break;case 2:var value=/** @type {!proto.types.VerifyStatus} */reader.readEnum();msg.setError(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.VerifyResult.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.VerifyResult.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.VerifyResult} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.VerifyResult.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getTx();if(f!=null){writer.writeMessage(1,f,blockchain_pb.Tx.serializeBinaryToWriter);}f=message.getError();if(f!==0.0){writer.writeEnum(2,f);}};/**
	   * optional Tx tx = 1;
	   * @return {?proto.types.Tx}
	   */proto.types.VerifyResult.prototype.getTx=function(){return(/** @type{?proto.types.Tx} */googleProtobuf.Message.getWrapperField(this,blockchain_pb.Tx,1));};/** @param {?proto.types.Tx|undefined} value */proto.types.VerifyResult.prototype.setTx=function(value){googleProtobuf.Message.setWrapperField(this,1,value);};proto.types.VerifyResult.prototype.clearTx=function(){this.setTx(undefined);};/**
	   * Returns whether this field is set.
	   * @return {!boolean}
	   */proto.types.VerifyResult.prototype.hasTx=function(){return googleProtobuf.Message.getField(this,1)!=null;};/**
	   * optional VerifyStatus error = 2;
	   * @return {!proto.types.VerifyStatus}
	   */proto.types.VerifyResult.prototype.getError=function(){return(/** @type {!proto.types.VerifyStatus} */googleProtobuf.Message.getFieldWithDefault(this,2,0));};/** @param {!proto.types.VerifyStatus} value */proto.types.VerifyResult.prototype.setError=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.Personal=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.Personal,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.Personal.prototype.toObject=function(opt_includeInstance){return proto.types.Personal.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.Personal} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.Personal.toObject=function(includeInstance,msg){var f,obj={passphrase:googleProtobuf.Message.getFieldWithDefault(msg,1,""),account:(f=msg.getAccount())&&account_pb.Account.toObject(includeInstance,f)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.Personal}
	   */proto.types.Personal.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.Personal();return proto.types.Personal.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.Personal} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.Personal}
	   */proto.types.Personal.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {string} */reader.readString();msg.setPassphrase(value);break;case 2:var value=new account_pb.Account();reader.readMessage(value,account_pb.Account.deserializeBinaryFromReader);msg.setAccount(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.Personal.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.Personal.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.Personal} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.Personal.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getPassphrase();if(f.length>0){writer.writeString(1,f);}f=message.getAccount();if(f!=null){writer.writeMessage(2,f,account_pb.Account.serializeBinaryToWriter);}};/**
	   * optional string passphrase = 1;
	   * @return {string}
	   */proto.types.Personal.prototype.getPassphrase=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/** @param {string} value */proto.types.Personal.prototype.setPassphrase=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional Account account = 2;
	   * @return {?proto.types.Account}
	   */proto.types.Personal.prototype.getAccount=function(){return(/** @type{?proto.types.Account} */googleProtobuf.Message.getWrapperField(this,account_pb.Account,2));};/** @param {?proto.types.Account|undefined} value */proto.types.Personal.prototype.setAccount=function(value){googleProtobuf.Message.setWrapperField(this,2,value);};proto.types.Personal.prototype.clearAccount=function(){this.setAccount(undefined);};/**
	   * Returns whether this field is set.
	   * @return {!boolean}
	   */proto.types.Personal.prototype.hasAccount=function(){return googleProtobuf.Message.getField(this,2)!=null;};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.ImportFormat=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.ImportFormat,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.ImportFormat.prototype.toObject=function(opt_includeInstance){return proto.types.ImportFormat.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.ImportFormat} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.ImportFormat.toObject=function(includeInstance,msg){var f,obj={wif:(f=msg.getWif())&&proto.types.SingleBytes.toObject(includeInstance,f),oldpass:googleProtobuf.Message.getFieldWithDefault(msg,2,""),newpass:googleProtobuf.Message.getFieldWithDefault(msg,3,"")};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.ImportFormat}
	   */proto.types.ImportFormat.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.ImportFormat();return proto.types.ImportFormat.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.ImportFormat} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.ImportFormat}
	   */proto.types.ImportFormat.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=new proto.types.SingleBytes();reader.readMessage(value,proto.types.SingleBytes.deserializeBinaryFromReader);msg.setWif(value);break;case 2:var value=/** @type {string} */reader.readString();msg.setOldpass(value);break;case 3:var value=/** @type {string} */reader.readString();msg.setNewpass(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.ImportFormat.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.ImportFormat.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.ImportFormat} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.ImportFormat.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getWif();if(f!=null){writer.writeMessage(1,f,proto.types.SingleBytes.serializeBinaryToWriter);}f=message.getOldpass();if(f.length>0){writer.writeString(2,f);}f=message.getNewpass();if(f.length>0){writer.writeString(3,f);}};/**
	   * optional SingleBytes wif = 1;
	   * @return {?proto.types.SingleBytes}
	   */proto.types.ImportFormat.prototype.getWif=function(){return(/** @type{?proto.types.SingleBytes} */googleProtobuf.Message.getWrapperField(this,proto.types.SingleBytes,1));};/** @param {?proto.types.SingleBytes|undefined} value */proto.types.ImportFormat.prototype.setWif=function(value){googleProtobuf.Message.setWrapperField(this,1,value);};proto.types.ImportFormat.prototype.clearWif=function(){this.setWif(undefined);};/**
	   * Returns whether this field is set.
	   * @return {!boolean}
	   */proto.types.ImportFormat.prototype.hasWif=function(){return googleProtobuf.Message.getField(this,1)!=null;};/**
	   * optional string oldpass = 2;
	   * @return {string}
	   */proto.types.ImportFormat.prototype.getOldpass=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,2,""));};/** @param {string} value */proto.types.ImportFormat.prototype.setOldpass=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional string newpass = 3;
	   * @return {string}
	   */proto.types.ImportFormat.prototype.getNewpass=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,3,""));};/** @param {string} value */proto.types.ImportFormat.prototype.setNewpass=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.Staking=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.Staking,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.Staking.prototype.toObject=function(opt_includeInstance){return proto.types.Staking.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.Staking} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.Staking.toObject=function(includeInstance,msg){var obj={amount:msg.getAmount_asB64(),when:googleProtobuf.Message.getFieldWithDefault(msg,2,0)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.Staking}
	   */proto.types.Staking.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.Staking();return proto.types.Staking.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.Staking} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.Staking}
	   */proto.types.Staking.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setAmount(value);break;case 2:var value=/** @type {number} */reader.readUint64();msg.setWhen(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.Staking.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.Staking.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.Staking} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.Staking.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getAmount_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getWhen();if(f!==0){writer.writeUint64(2,f);}};/**
	   * optional bytes amount = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Staking.prototype.getAmount=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes amount = 1;
	   * This is a type-conversion wrapper around `getAmount()`
	   * @return {string}
	   */proto.types.Staking.prototype.getAmount_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getAmount()));};/**
	   * optional bytes amount = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getAmount()`
	   * @return {!Uint8Array}
	   */proto.types.Staking.prototype.getAmount_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getAmount()));};/** @param {!(string|Uint8Array)} value */proto.types.Staking.prototype.setAmount=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional uint64 when = 2;
	   * @return {number}
	   */proto.types.Staking.prototype.getWhen=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,2,0));};/** @param {number} value */proto.types.Staking.prototype.setWhen=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.Vote=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.Vote,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.Vote.prototype.toObject=function(opt_includeInstance){return proto.types.Vote.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.Vote} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.Vote.toObject=function(includeInstance,msg){var obj={candidate:msg.getCandidate_asB64(),amount:msg.getAmount_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.Vote}
	   */proto.types.Vote.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.Vote();return proto.types.Vote.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.Vote} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.Vote}
	   */proto.types.Vote.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setCandidate(value);break;case 2:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setAmount(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.Vote.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.Vote.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.Vote} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.Vote.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getCandidate_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getAmount_asU8();if(f.length>0){writer.writeBytes(2,f);}};/**
	   * optional bytes candidate = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Vote.prototype.getCandidate=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes candidate = 1;
	   * This is a type-conversion wrapper around `getCandidate()`
	   * @return {string}
	   */proto.types.Vote.prototype.getCandidate_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getCandidate()));};/**
	   * optional bytes candidate = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getCandidate()`
	   * @return {!Uint8Array}
	   */proto.types.Vote.prototype.getCandidate_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getCandidate()));};/** @param {!(string|Uint8Array)} value */proto.types.Vote.prototype.setCandidate=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional bytes amount = 2;
	   * @return {!(string|Uint8Array)}
	   */proto.types.Vote.prototype.getAmount=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,2,""));};/**
	   * optional bytes amount = 2;
	   * This is a type-conversion wrapper around `getAmount()`
	   * @return {string}
	   */proto.types.Vote.prototype.getAmount_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getAmount()));};/**
	   * optional bytes amount = 2;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getAmount()`
	   * @return {!Uint8Array}
	   */proto.types.Vote.prototype.getAmount_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getAmount()));};/** @param {!(string|Uint8Array)} value */proto.types.Vote.prototype.setAmount=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.VoteParams=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.VoteParams,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.VoteParams.prototype.toObject=function(opt_includeInstance){return proto.types.VoteParams.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.VoteParams} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.VoteParams.toObject=function(includeInstance,msg){var obj={id:googleProtobuf.Message.getFieldWithDefault(msg,1,""),count:googleProtobuf.Message.getFieldWithDefault(msg,2,0)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.VoteParams}
	   */proto.types.VoteParams.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.VoteParams();return proto.types.VoteParams.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.VoteParams} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.VoteParams}
	   */proto.types.VoteParams.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {string} */reader.readString();msg.setId(value);break;case 2:var value=/** @type {number} */reader.readUint32();msg.setCount(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.VoteParams.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.VoteParams.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.VoteParams} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.VoteParams.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getId();if(f.length>0){writer.writeString(1,f);}f=message.getCount();if(f!==0){writer.writeUint32(2,f);}};/**
	   * optional string id = 1;
	   * @return {string}
	   */proto.types.VoteParams.prototype.getId=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/** @param {string} value */proto.types.VoteParams.prototype.setId=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional uint32 count = 2;
	   * @return {number}
	   */proto.types.VoteParams.prototype.getCount=function(){return(/** @type {number} */googleProtobuf.Message.getFieldWithDefault(this,2,0));};/** @param {number} value */proto.types.VoteParams.prototype.setCount=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.AccountVoteInfo=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.AccountVoteInfo.repeatedFields_,null);};goog.inherits(proto.types.AccountVoteInfo,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.AccountVoteInfo.repeatedFields_=[2];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.AccountVoteInfo.prototype.toObject=function(opt_includeInstance){return proto.types.AccountVoteInfo.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.AccountVoteInfo} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.AccountVoteInfo.toObject=function(includeInstance,msg){var f,obj={staking:(f=msg.getStaking())&&proto.types.Staking.toObject(includeInstance,f),votingList:googleProtobuf.Message.toObjectList(msg.getVotingList(),proto.types.VoteInfo.toObject,includeInstance)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.AccountVoteInfo}
	   */proto.types.AccountVoteInfo.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.AccountVoteInfo();return proto.types.AccountVoteInfo.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.AccountVoteInfo} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.AccountVoteInfo}
	   */proto.types.AccountVoteInfo.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=new proto.types.Staking();reader.readMessage(value,proto.types.Staking.deserializeBinaryFromReader);msg.setStaking(value);break;case 2:var value=new proto.types.VoteInfo();reader.readMessage(value,proto.types.VoteInfo.deserializeBinaryFromReader);msg.addVoting(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.AccountVoteInfo.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.AccountVoteInfo.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.AccountVoteInfo} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.AccountVoteInfo.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getStaking();if(f!=null){writer.writeMessage(1,f,proto.types.Staking.serializeBinaryToWriter);}f=message.getVotingList();if(f.length>0){writer.writeRepeatedMessage(2,f,proto.types.VoteInfo.serializeBinaryToWriter);}};/**
	   * optional Staking staking = 1;
	   * @return {?proto.types.Staking}
	   */proto.types.AccountVoteInfo.prototype.getStaking=function(){return(/** @type{?proto.types.Staking} */googleProtobuf.Message.getWrapperField(this,proto.types.Staking,1));};/** @param {?proto.types.Staking|undefined} value */proto.types.AccountVoteInfo.prototype.setStaking=function(value){googleProtobuf.Message.setWrapperField(this,1,value);};proto.types.AccountVoteInfo.prototype.clearStaking=function(){this.setStaking(undefined);};/**
	   * Returns whether this field is set.
	   * @return {!boolean}
	   */proto.types.AccountVoteInfo.prototype.hasStaking=function(){return googleProtobuf.Message.getField(this,1)!=null;};/**
	   * repeated VoteInfo voting = 2;
	   * @return {!Array.<!proto.types.VoteInfo>}
	   */proto.types.AccountVoteInfo.prototype.getVotingList=function(){return(/** @type{!Array.<!proto.types.VoteInfo>} */googleProtobuf.Message.getRepeatedWrapperField(this,proto.types.VoteInfo,2));};/** @param {!Array.<!proto.types.VoteInfo>} value */proto.types.AccountVoteInfo.prototype.setVotingList=function(value){googleProtobuf.Message.setRepeatedWrapperField(this,2,value);};/**
	   * @param {!proto.types.VoteInfo=} opt_value
	   * @param {number=} opt_index
	   * @return {!proto.types.VoteInfo}
	   */proto.types.AccountVoteInfo.prototype.addVoting=function(opt_value,opt_index){return googleProtobuf.Message.addToRepeatedWrapperField(this,2,opt_value,proto.types.VoteInfo,opt_index);};proto.types.AccountVoteInfo.prototype.clearVotingList=function(){this.setVotingList([]);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.VoteInfo=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.VoteInfo.repeatedFields_,null);};goog.inherits(proto.types.VoteInfo,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.VoteInfo.repeatedFields_=[3];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.VoteInfo.prototype.toObject=function(opt_includeInstance){return proto.types.VoteInfo.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.VoteInfo} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.VoteInfo.toObject=function(includeInstance,msg){var obj={id:googleProtobuf.Message.getFieldWithDefault(msg,2,""),candidatesList:googleProtobuf.Message.getRepeatedField(msg,3)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.VoteInfo}
	   */proto.types.VoteInfo.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.VoteInfo();return proto.types.VoteInfo.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.VoteInfo} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.VoteInfo}
	   */proto.types.VoteInfo.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 2:var value=/** @type {string} */reader.readString();msg.setId(value);break;case 3:var value=/** @type {string} */reader.readString();msg.addCandidates(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.VoteInfo.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.VoteInfo.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.VoteInfo} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.VoteInfo.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getId();if(f.length>0){writer.writeString(2,f);}f=message.getCandidatesList();if(f.length>0){writer.writeRepeatedString(3,f);}};/**
	   * optional string id = 2;
	   * @return {string}
	   */proto.types.VoteInfo.prototype.getId=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,2,""));};/** @param {string} value */proto.types.VoteInfo.prototype.setId=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * repeated string candidates = 3;
	   * @return {!Array.<string>}
	   */proto.types.VoteInfo.prototype.getCandidatesList=function(){return(/** @type {!Array.<string>} */googleProtobuf.Message.getRepeatedField(this,3));};/** @param {!Array.<string>} value */proto.types.VoteInfo.prototype.setCandidatesList=function(value){googleProtobuf.Message.setField(this,3,value||[]);};/**
	   * @param {!string} value
	   * @param {number=} opt_index
	   */proto.types.VoteInfo.prototype.addCandidates=function(value,opt_index){googleProtobuf.Message.addToRepeatedField(this,3,value,opt_index);};proto.types.VoteInfo.prototype.clearCandidatesList=function(){this.setCandidatesList([]);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.VoteList=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.VoteList.repeatedFields_,null);};goog.inherits(proto.types.VoteList,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.VoteList.repeatedFields_=[1];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.VoteList.prototype.toObject=function(opt_includeInstance){return proto.types.VoteList.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.VoteList} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.VoteList.toObject=function(includeInstance,msg){var obj={votesList:googleProtobuf.Message.toObjectList(msg.getVotesList(),proto.types.Vote.toObject,includeInstance),id:googleProtobuf.Message.getFieldWithDefault(msg,2,"")};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.VoteList}
	   */proto.types.VoteList.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.VoteList();return proto.types.VoteList.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.VoteList} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.VoteList}
	   */proto.types.VoteList.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=new proto.types.Vote();reader.readMessage(value,proto.types.Vote.deserializeBinaryFromReader);msg.addVotes(value);break;case 2:var value=/** @type {string} */reader.readString();msg.setId(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.VoteList.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.VoteList.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.VoteList} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.VoteList.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getVotesList();if(f.length>0){writer.writeRepeatedMessage(1,f,proto.types.Vote.serializeBinaryToWriter);}f=message.getId();if(f.length>0){writer.writeString(2,f);}};/**
	   * repeated Vote votes = 1;
	   * @return {!Array.<!proto.types.Vote>}
	   */proto.types.VoteList.prototype.getVotesList=function(){return(/** @type{!Array.<!proto.types.Vote>} */googleProtobuf.Message.getRepeatedWrapperField(this,proto.types.Vote,1));};/** @param {!Array.<!proto.types.Vote>} value */proto.types.VoteList.prototype.setVotesList=function(value){googleProtobuf.Message.setRepeatedWrapperField(this,1,value);};/**
	   * @param {!proto.types.Vote=} opt_value
	   * @param {number=} opt_index
	   * @return {!proto.types.Vote}
	   */proto.types.VoteList.prototype.addVotes=function(opt_value,opt_index){return googleProtobuf.Message.addToRepeatedWrapperField(this,1,opt_value,proto.types.Vote,opt_index);};proto.types.VoteList.prototype.clearVotesList=function(){this.setVotesList([]);};/**
	   * optional string id = 2;
	   * @return {string}
	   */proto.types.VoteList.prototype.getId=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,2,""));};/** @param {string} value */proto.types.VoteList.prototype.setId=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.NodeReq=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.NodeReq,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.NodeReq.prototype.toObject=function(opt_includeInstance){return proto.types.NodeReq.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.NodeReq} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.NodeReq.toObject=function(includeInstance,msg){var obj={timeout:msg.getTimeout_asB64(),component:msg.getComponent_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.NodeReq}
	   */proto.types.NodeReq.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.NodeReq();return proto.types.NodeReq.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.NodeReq} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.NodeReq}
	   */proto.types.NodeReq.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setTimeout(value);break;case 2:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setComponent(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.NodeReq.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.NodeReq.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.NodeReq} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.NodeReq.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getTimeout_asU8();if(f.length>0){writer.writeBytes(1,f);}f=message.getComponent_asU8();if(f.length>0){writer.writeBytes(2,f);}};/**
	   * optional bytes timeout = 1;
	   * @return {!(string|Uint8Array)}
	   */proto.types.NodeReq.prototype.getTimeout=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/**
	   * optional bytes timeout = 1;
	   * This is a type-conversion wrapper around `getTimeout()`
	   * @return {string}
	   */proto.types.NodeReq.prototype.getTimeout_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getTimeout()));};/**
	   * optional bytes timeout = 1;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getTimeout()`
	   * @return {!Uint8Array}
	   */proto.types.NodeReq.prototype.getTimeout_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getTimeout()));};/** @param {!(string|Uint8Array)} value */proto.types.NodeReq.prototype.setTimeout=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional bytes component = 2;
	   * @return {!(string|Uint8Array)}
	   */proto.types.NodeReq.prototype.getComponent=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,2,""));};/**
	   * optional bytes component = 2;
	   * This is a type-conversion wrapper around `getComponent()`
	   * @return {string}
	   */proto.types.NodeReq.prototype.getComponent_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getComponent()));};/**
	   * optional bytes component = 2;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getComponent()`
	   * @return {!Uint8Array}
	   */proto.types.NodeReq.prototype.getComponent_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getComponent()));};/** @param {!(string|Uint8Array)} value */proto.types.NodeReq.prototype.setComponent=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.Name=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.Name,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.Name.prototype.toObject=function(opt_includeInstance){return proto.types.Name.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.Name} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.Name.toObject=function(includeInstance,msg){var obj={name:googleProtobuf.Message.getFieldWithDefault(msg,1,"")};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.Name}
	   */proto.types.Name.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.Name();return proto.types.Name.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.Name} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.Name}
	   */proto.types.Name.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {string} */reader.readString();msg.setName(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.Name.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.Name.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.Name} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.Name.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getName();if(f.length>0){writer.writeString(1,f);}};/**
	   * optional string name = 1;
	   * @return {string}
	   */proto.types.Name.prototype.getName=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/** @param {string} value */proto.types.Name.prototype.setName=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.NameInfo=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.NameInfo,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.NameInfo.prototype.toObject=function(opt_includeInstance){return proto.types.NameInfo.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.NameInfo} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.NameInfo.toObject=function(includeInstance,msg){var f,obj={name:(f=msg.getName())&&proto.types.Name.toObject(includeInstance,f),owner:msg.getOwner_asB64(),destination:msg.getDestination_asB64()};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.NameInfo}
	   */proto.types.NameInfo.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.NameInfo();return proto.types.NameInfo.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.NameInfo} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.NameInfo}
	   */proto.types.NameInfo.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=new proto.types.Name();reader.readMessage(value,proto.types.Name.deserializeBinaryFromReader);msg.setName(value);break;case 2:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setOwner(value);break;case 3:var value=/** @type {!Uint8Array} */reader.readBytes();msg.setDestination(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.NameInfo.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.NameInfo.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.NameInfo} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.NameInfo.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getName();if(f!=null){writer.writeMessage(1,f,proto.types.Name.serializeBinaryToWriter);}f=message.getOwner_asU8();if(f.length>0){writer.writeBytes(2,f);}f=message.getDestination_asU8();if(f.length>0){writer.writeBytes(3,f);}};/**
	   * optional Name name = 1;
	   * @return {?proto.types.Name}
	   */proto.types.NameInfo.prototype.getName=function(){return(/** @type{?proto.types.Name} */googleProtobuf.Message.getWrapperField(this,proto.types.Name,1));};/** @param {?proto.types.Name|undefined} value */proto.types.NameInfo.prototype.setName=function(value){googleProtobuf.Message.setWrapperField(this,1,value);};proto.types.NameInfo.prototype.clearName=function(){this.setName(undefined);};/**
	   * Returns whether this field is set.
	   * @return {!boolean}
	   */proto.types.NameInfo.prototype.hasName=function(){return googleProtobuf.Message.getField(this,1)!=null;};/**
	   * optional bytes owner = 2;
	   * @return {!(string|Uint8Array)}
	   */proto.types.NameInfo.prototype.getOwner=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,2,""));};/**
	   * optional bytes owner = 2;
	   * This is a type-conversion wrapper around `getOwner()`
	   * @return {string}
	   */proto.types.NameInfo.prototype.getOwner_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getOwner()));};/**
	   * optional bytes owner = 2;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getOwner()`
	   * @return {!Uint8Array}
	   */proto.types.NameInfo.prototype.getOwner_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getOwner()));};/** @param {!(string|Uint8Array)} value */proto.types.NameInfo.prototype.setOwner=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * optional bytes destination = 3;
	   * @return {!(string|Uint8Array)}
	   */proto.types.NameInfo.prototype.getDestination=function(){return(/** @type {!(string|Uint8Array)} */googleProtobuf.Message.getFieldWithDefault(this,3,""));};/**
	   * optional bytes destination = 3;
	   * This is a type-conversion wrapper around `getDestination()`
	   * @return {string}
	   */proto.types.NameInfo.prototype.getDestination_asB64=function(){return(/** @type {string} */googleProtobuf.Message.bytesAsB64(this.getDestination()));};/**
	   * optional bytes destination = 3;
	   * Note that Uint8Array is not supported on all browsers.
	   * @see http://caniuse.com/Uint8Array
	   * This is a type-conversion wrapper around `getDestination()`
	   * @return {!Uint8Array}
	   */proto.types.NameInfo.prototype.getDestination_asU8=function(){return(/** @type {!Uint8Array} */googleProtobuf.Message.bytesAsU8(this.getDestination()));};/** @param {!(string|Uint8Array)} value */proto.types.NameInfo.prototype.setDestination=function(value){googleProtobuf.Message.setField(this,3,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.PeersParams=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.PeersParams,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.PeersParams.prototype.toObject=function(opt_includeInstance){return proto.types.PeersParams.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.PeersParams} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.PeersParams.toObject=function(includeInstance,msg){var obj={nohidden:googleProtobuf.Message.getFieldWithDefault(msg,1,false),showself:googleProtobuf.Message.getFieldWithDefault(msg,2,false)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.PeersParams}
	   */proto.types.PeersParams.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.PeersParams();return proto.types.PeersParams.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.PeersParams} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.PeersParams}
	   */proto.types.PeersParams.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {boolean} */reader.readBool();msg.setNohidden(value);break;case 2:var value=/** @type {boolean} */reader.readBool();msg.setShowself(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.PeersParams.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.PeersParams.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.PeersParams} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.PeersParams.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getNohidden();if(f){writer.writeBool(1,f);}f=message.getShowself();if(f){writer.writeBool(2,f);}};/**
	   * optional bool noHidden = 1;
	   * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	   * You should avoid comparisons like {@code val === true/false} in those cases.
	   * @return {boolean}
	   */proto.types.PeersParams.prototype.getNohidden=function(){return(/** @type {boolean} */googleProtobuf.Message.getFieldWithDefault(this,1,false));};/** @param {boolean} value */proto.types.PeersParams.prototype.setNohidden=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional bool showSelf = 2;
	   * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
	   * You should avoid comparisons like {@code val === true/false} in those cases.
	   * @return {boolean}
	   */proto.types.PeersParams.prototype.getShowself=function(){return(/** @type {boolean} */googleProtobuf.Message.getFieldWithDefault(this,2,false));};/** @param {boolean} value */proto.types.PeersParams.prototype.setShowself=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.KeyParams=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.KeyParams.repeatedFields_,null);};goog.inherits(proto.types.KeyParams,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.KeyParams.repeatedFields_=[1];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.KeyParams.prototype.toObject=function(opt_includeInstance){return proto.types.KeyParams.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.KeyParams} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.KeyParams.toObject=function(includeInstance,msg){var obj={keyList:googleProtobuf.Message.getRepeatedField(msg,1)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.KeyParams}
	   */proto.types.KeyParams.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.KeyParams();return proto.types.KeyParams.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.KeyParams} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.KeyParams}
	   */proto.types.KeyParams.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {string} */reader.readString();msg.addKey(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.KeyParams.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.KeyParams.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.KeyParams} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.KeyParams.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getKeyList();if(f.length>0){writer.writeRepeatedString(1,f);}};/**
	   * repeated string key = 1;
	   * @return {!Array.<string>}
	   */proto.types.KeyParams.prototype.getKeyList=function(){return(/** @type {!Array.<string>} */googleProtobuf.Message.getRepeatedField(this,1));};/** @param {!Array.<string>} value */proto.types.KeyParams.prototype.setKeyList=function(value){googleProtobuf.Message.setField(this,1,value||[]);};/**
	   * @param {!string} value
	   * @param {number=} opt_index
	   */proto.types.KeyParams.prototype.addKey=function(value,opt_index){googleProtobuf.Message.addToRepeatedField(this,1,value,opt_index);};proto.types.KeyParams.prototype.clearKeyList=function(){this.setKeyList([]);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.ServerInfo=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.ServerInfo,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.ServerInfo.prototype.toObject=function(opt_includeInstance){return proto.types.ServerInfo.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.ServerInfo} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.ServerInfo.toObject=function(includeInstance,msg){var f,obj={statusMap:(f=msg.getStatusMap())?f.toObject(includeInstance,undefined):[],configMap:(f=msg.getConfigMap())?f.toObject(includeInstance,proto.types.ConfigItem.toObject):[]};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.ServerInfo}
	   */proto.types.ServerInfo.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.ServerInfo();return proto.types.ServerInfo.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.ServerInfo} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.ServerInfo}
	   */proto.types.ServerInfo.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=msg.getStatusMap();reader.readMessage(value,function(message,reader){googleProtobuf.Map.deserializeBinary(message,reader,googleProtobuf.BinaryReader.prototype.readString,googleProtobuf.BinaryReader.prototype.readString);});break;case 2:var value=msg.getConfigMap();reader.readMessage(value,function(message,reader){googleProtobuf.Map.deserializeBinary(message,reader,googleProtobuf.BinaryReader.prototype.readString,googleProtobuf.BinaryReader.prototype.readMessage,proto.types.ConfigItem.deserializeBinaryFromReader);});break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.ServerInfo.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.ServerInfo.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.ServerInfo} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.ServerInfo.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getStatusMap(true);if(f&&f.getLength()>0){f.serializeBinary(1,writer,googleProtobuf.BinaryWriter.prototype.writeString,googleProtobuf.BinaryWriter.prototype.writeString);}f=message.getConfigMap(true);if(f&&f.getLength()>0){f.serializeBinary(2,writer,googleProtobuf.BinaryWriter.prototype.writeString,googleProtobuf.BinaryWriter.prototype.writeMessage,proto.types.ConfigItem.serializeBinaryToWriter);}};/**
	   * map<string, string> status = 1;
	   * @param {boolean=} opt_noLazyCreate Do not create the map if
	   * empty, instead returning `undefined`
	   * @return {!jspb.Map<string,string>}
	   */proto.types.ServerInfo.prototype.getStatusMap=function(opt_noLazyCreate){return(/** @type {!jspb.Map<string,string>} */googleProtobuf.Message.getMapField(this,1,opt_noLazyCreate,null));};proto.types.ServerInfo.prototype.clearStatusMap=function(){this.getStatusMap().clear();};/**
	   * map<string, ConfigItem> config = 2;
	   * @param {boolean=} opt_noLazyCreate Do not create the map if
	   * empty, instead returning `undefined`
	   * @return {!jspb.Map<string,!proto.types.ConfigItem>}
	   */proto.types.ServerInfo.prototype.getConfigMap=function(opt_noLazyCreate){return(/** @type {!jspb.Map<string,!proto.types.ConfigItem>} */googleProtobuf.Message.getMapField(this,2,opt_noLazyCreate,proto.types.ConfigItem));};proto.types.ServerInfo.prototype.clearConfigMap=function(){this.getConfigMap().clear();};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.ConfigItem=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,null,null);};goog.inherits(proto.types.ConfigItem,googleProtobuf.Message);if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.ConfigItem.prototype.toObject=function(opt_includeInstance){return proto.types.ConfigItem.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.ConfigItem} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.ConfigItem.toObject=function(includeInstance,msg){var f,obj={propsMap:(f=msg.getPropsMap())?f.toObject(includeInstance,undefined):[]};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.ConfigItem}
	   */proto.types.ConfigItem.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.ConfigItem();return proto.types.ConfigItem.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.ConfigItem} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.ConfigItem}
	   */proto.types.ConfigItem.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 2:var value=msg.getPropsMap();reader.readMessage(value,function(message,reader){googleProtobuf.Map.deserializeBinary(message,reader,googleProtobuf.BinaryReader.prototype.readString,googleProtobuf.BinaryReader.prototype.readString);});break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.ConfigItem.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.ConfigItem.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.ConfigItem} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.ConfigItem.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getPropsMap(true);if(f&&f.getLength()>0){f.serializeBinary(2,writer,googleProtobuf.BinaryWriter.prototype.writeString,googleProtobuf.BinaryWriter.prototype.writeString);}};/**
	   * map<string, string> props = 2;
	   * @param {boolean=} opt_noLazyCreate Do not create the map if
	   * empty, instead returning `undefined`
	   * @return {!jspb.Map<string,string>}
	   */proto.types.ConfigItem.prototype.getPropsMap=function(opt_noLazyCreate){return(/** @type {!jspb.Map<string,string>} */googleProtobuf.Message.getMapField(this,2,opt_noLazyCreate,null));};proto.types.ConfigItem.prototype.clearPropsMap=function(){this.getPropsMap().clear();};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.EventList=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.EventList.repeatedFields_,null);};goog.inherits(proto.types.EventList,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.EventList.repeatedFields_=[1];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.EventList.prototype.toObject=function(opt_includeInstance){return proto.types.EventList.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.EventList} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.EventList.toObject=function(includeInstance,msg){var obj={eventsList:googleProtobuf.Message.toObjectList(msg.getEventsList(),blockchain_pb.Event.toObject,includeInstance)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.EventList}
	   */proto.types.EventList.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.EventList();return proto.types.EventList.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.EventList} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.EventList}
	   */proto.types.EventList.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=new blockchain_pb.Event();reader.readMessage(value,blockchain_pb.Event.deserializeBinaryFromReader);msg.addEvents(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.EventList.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.EventList.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.EventList} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.EventList.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getEventsList();if(f.length>0){writer.writeRepeatedMessage(1,f,blockchain_pb.Event.serializeBinaryToWriter);}};/**
	   * repeated Event events = 1;
	   * @return {!Array.<!proto.types.Event>}
	   */proto.types.EventList.prototype.getEventsList=function(){return(/** @type{!Array.<!proto.types.Event>} */googleProtobuf.Message.getRepeatedWrapperField(this,blockchain_pb.Event,1));};/** @param {!Array.<!proto.types.Event>} value */proto.types.EventList.prototype.setEventsList=function(value){googleProtobuf.Message.setRepeatedWrapperField(this,1,value);};/**
	   * @param {!proto.types.Event=} opt_value
	   * @param {number=} opt_index
	   * @return {!proto.types.Event}
	   */proto.types.EventList.prototype.addEvents=function(opt_value,opt_index){return googleProtobuf.Message.addToRepeatedWrapperField(this,1,opt_value,proto.types.Event,opt_index);};proto.types.EventList.prototype.clearEventsList=function(){this.setEventsList([]);};/**
	   * Generated by JsPbCodeGenerator.
	   * @param {Array=} opt_data Optional initial data array, typically from a
	   * server response, or constructed directly in Javascript. The array is used
	   * in place and becomes part of the constructed object. It is not cloned.
	   * If no data is provided, the constructed object will be empty, but still
	   * valid.
	   * @extends {jspb.Message}
	   * @constructor
	   */proto.types.ConsensusInfo=function(opt_data){googleProtobuf.Message.initialize(this,opt_data,0,-1,proto.types.ConsensusInfo.repeatedFields_,null);};goog.inherits(proto.types.ConsensusInfo,googleProtobuf.Message);/**
	   * List of repeated fields within this message type.
	   * @private {!Array<number>}
	   * @const
	   */proto.types.ConsensusInfo.repeatedFields_=[3];if(googleProtobuf.Message.GENERATE_TO_OBJECT){/**
	     * Creates an object representation of this proto suitable for use in Soy templates.
	     * Field names that are reserved in JavaScript and will be renamed to pb_name.
	     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
	     * For the list of reserved names please see:
	     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
	     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
	     *     for transitional soy proto support: http://goto/soy-param-migration
	     * @return {!Object}
	     */proto.types.ConsensusInfo.prototype.toObject=function(opt_includeInstance){return proto.types.ConsensusInfo.toObject(opt_includeInstance,this);};/**
	     * Static version of the {@see toObject} method.
	     * @param {boolean|undefined} includeInstance Whether to include the JSPB
	     *     instance for transitional soy proto support:
	     *     http://goto/soy-param-migration
	     * @param {!proto.types.ConsensusInfo} msg The msg instance to transform.
	     * @return {!Object}
	     * @suppress {unusedLocalVariables} f is only used for nested messages
	     */proto.types.ConsensusInfo.toObject=function(includeInstance,msg){var obj={type:googleProtobuf.Message.getFieldWithDefault(msg,1,""),info:googleProtobuf.Message.getFieldWithDefault(msg,2,""),bpsList:googleProtobuf.Message.getRepeatedField(msg,3)};if(includeInstance){obj.$jspbMessageInstance=msg;}return obj;};}/**
	   * Deserializes binary data (in protobuf wire format).
	   * @param {jspb.ByteSource} bytes The bytes to deserialize.
	   * @return {!proto.types.ConsensusInfo}
	   */proto.types.ConsensusInfo.deserializeBinary=function(bytes){var reader=new googleProtobuf.BinaryReader(bytes);var msg=new proto.types.ConsensusInfo();return proto.types.ConsensusInfo.deserializeBinaryFromReader(msg,reader);};/**
	   * Deserializes binary data (in protobuf wire format) from the
	   * given reader into the given message object.
	   * @param {!proto.types.ConsensusInfo} msg The message object to deserialize into.
	   * @param {!jspb.BinaryReader} reader The BinaryReader to use.
	   * @return {!proto.types.ConsensusInfo}
	   */proto.types.ConsensusInfo.deserializeBinaryFromReader=function(msg,reader){while(reader.nextField()){if(reader.isEndGroup()){break;}var field=reader.getFieldNumber();switch(field){case 1:var value=/** @type {string} */reader.readString();msg.setType(value);break;case 2:var value=/** @type {string} */reader.readString();msg.setInfo(value);break;case 3:var value=/** @type {string} */reader.readString();msg.addBps(value);break;default:reader.skipField();break;}}return msg;};/**
	   * Serializes the message to binary data (in protobuf wire format).
	   * @return {!Uint8Array}
	   */proto.types.ConsensusInfo.prototype.serializeBinary=function(){var writer=new googleProtobuf.BinaryWriter();proto.types.ConsensusInfo.serializeBinaryToWriter(this,writer);return writer.getResultBuffer();};/**
	   * Serializes the given message to binary data (in protobuf wire
	   * format), writing to the given BinaryWriter.
	   * @param {!proto.types.ConsensusInfo} message
	   * @param {!jspb.BinaryWriter} writer
	   * @suppress {unusedLocalVariables} f is only used for nested messages
	   */proto.types.ConsensusInfo.serializeBinaryToWriter=function(message,writer){var f=undefined;f=message.getType();if(f.length>0){writer.writeString(1,f);}f=message.getInfo();if(f.length>0){writer.writeString(2,f);}f=message.getBpsList();if(f.length>0){writer.writeRepeatedString(3,f);}};/**
	   * optional string type = 1;
	   * @return {string}
	   */proto.types.ConsensusInfo.prototype.getType=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,1,""));};/** @param {string} value */proto.types.ConsensusInfo.prototype.setType=function(value){googleProtobuf.Message.setField(this,1,value);};/**
	   * optional string info = 2;
	   * @return {string}
	   */proto.types.ConsensusInfo.prototype.getInfo=function(){return(/** @type {string} */googleProtobuf.Message.getFieldWithDefault(this,2,""));};/** @param {string} value */proto.types.ConsensusInfo.prototype.setInfo=function(value){googleProtobuf.Message.setField(this,2,value);};/**
	   * repeated string bps = 3;
	   * @return {!Array.<string>}
	   */proto.types.ConsensusInfo.prototype.getBpsList=function(){return(/** @type {!Array.<string>} */googleProtobuf.Message.getRepeatedField(this,3));};/** @param {!Array.<string>} value */proto.types.ConsensusInfo.prototype.setBpsList=function(value){googleProtobuf.Message.setField(this,3,value||[]);};/**
	   * @param {!string} value
	   * @param {number=} opt_index
	   */proto.types.ConsensusInfo.prototype.addBps=function(value,opt_index){googleProtobuf.Message.addToRepeatedField(this,3,value,opt_index);};proto.types.ConsensusInfo.prototype.clearBpsList=function(){this.setBpsList([]);};/**
	   * @enum {number}
	   */proto.types.CommitStatus={TX_OK:0,TX_NONCE_TOO_LOW:1,TX_ALREADY_EXISTS:2,TX_INVALID_HASH:3,TX_INVALID_SIGN:4,TX_INVALID_FORMAT:5,TX_INSUFFICIENT_BALANCE:6,TX_HAS_SAME_NONCE:7,TX_INTERNAL_ERROR:9};/**
	   * @enum {number}
	   */proto.types.VerifyStatus={VERIFY_STATUS_OK:0,VERIFY_STATUS_SIGN_NOT_MATCH:1,VERIFY_STATUS_INVALID_HASH:2};goog.object.extend(exports,proto.types);});var rpc_pb_1=rpc_pb.Empty;var rpc_pb_2=rpc_pb.Personal;var rpc_pb_3=rpc_pb.SingleBytes;var rpc_pb_4=rpc_pb.TxList;var rpc_pb_5=rpc_pb.TxBody;var rpc_pb_6=rpc_pb.Tx;var rpc_pb_7=rpc_pb.CommitStatus;var rpc_pb_8=rpc_pb.ListParams;var rpc_pb_9=rpc_pb.Query;var rpc_pb_10=rpc_pb.Name;var rpc_pb_11=rpc_pb.PeersParams;var rpc_pb_12=rpc_pb.VoteParams;var rpc_pb_13=rpc_pb.NodeReq;var rpc_pb_14=rpc_pb.KeyParams;var typesNode=/*#__PURE__*/Object.freeze({default:rpc_pb,__moduleExports:rpc_pb,Empty:rpc_pb_1,Personal:rpc_pb_2,SingleBytes:rpc_pb_3,TxList:rpc_pb_4,TxBody:rpc_pb_5,Tx:rpc_pb_6,CommitStatus:rpc_pb_7,ListParams:rpc_pb_8,Query:rpc_pb_9,Name:rpc_pb_10,PeersParams:rpc_pb_11,VoteParams:rpc_pb_12,NodeReq:rpc_pb_13,KeyParams:rpc_pb_14});var safeBuffer=createCommonjsModule(function(module,exports){/* eslint-disable node/no-deprecated-api */var Buffer=bufferEs6.Buffer;// alternative to using Object.keys for old browsers
function copyProps(src,dst){for(var key in src){dst[key]=src[key];}}if(Buffer.from&&Buffer.alloc&&Buffer.allocUnsafe&&Buffer.allocUnsafeSlow){module.exports=bufferEs6;}else{// Copy properties from require('buffer')
copyProps(bufferEs6,exports);exports.Buffer=SafeBuffer;}function SafeBuffer(arg,encodingOrOffset,length){return Buffer(arg,encodingOrOffset,length);}// Copy static methods from Buffer
copyProps(Buffer,SafeBuffer);SafeBuffer.from=function(arg,encodingOrOffset,length){if(typeof arg==='number'){throw new TypeError('Argument must not be a number');}return Buffer(arg,encodingOrOffset,length);};SafeBuffer.alloc=function(size,fill,encoding){if(typeof size!=='number'){throw new TypeError('Argument must be a number');}var buf=Buffer(size);if(fill!==undefined){if(typeof encoding==='string'){buf.fill(fill,encoding);}else{buf.fill(fill);}}else{buf.fill(0);}return buf;};SafeBuffer.allocUnsafe=function(size){if(typeof size!=='number'){throw new TypeError('Argument must be a number');}return Buffer(size);};SafeBuffer.allocUnsafeSlow=function(size){if(typeof size!=='number'){throw new TypeError('Argument must be a number');}return bufferEs6.SlowBuffer(size);};});var safeBuffer_1=safeBuffer.Buffer;// base-x encoding
// Forked from https://github.com/cryptocoinjs/bs58
// Originally written by Mike Hearn for BitcoinJ
// Copyright (c) 2011 Google Inc
// Ported to JavaScript by Stefan Thomas
// Merged Buffer refactorings from base58-native by Stephen Pair
// Copyright (c) 2013 BitPay Inc
var Buffer$2=safeBuffer.Buffer;var baseX=function base(ALPHABET){var ALPHABET_MAP={};var BASE=ALPHABET.length;var LEADER=ALPHABET.charAt(0);// pre-compute lookup table
for(var z=0;z<ALPHABET.length;z++){var x=ALPHABET.charAt(z);if(ALPHABET_MAP[x]!==undefined)throw new TypeError(x+' is ambiguous');ALPHABET_MAP[x]=z;}function encode(source){if(source.length===0)return'';var digits=[0];for(var i=0;i<source.length;++i){for(var j=0,carry=source[i];j<digits.length;++j){carry+=digits[j]<<8;digits[j]=carry%BASE;carry=carry/BASE|0;}while(carry>0){digits.push(carry%BASE);carry=carry/BASE|0;}}var string='';// deal with leading zeros
for(var k=0;source[k]===0&&k<source.length-1;++k){string+=LEADER;}// convert digits to a string
for(var q=digits.length-1;q>=0;--q){string+=ALPHABET[digits[q]];}return string;}function decodeUnsafe(string){if(typeof string!=='string')throw new TypeError('Expected String');if(string.length===0)return Buffer$2.allocUnsafe(0);var bytes=[0];for(var i=0;i<string.length;i++){var value=ALPHABET_MAP[string[i]];if(value===undefined)return;for(var j=0,carry=value;j<bytes.length;++j){carry+=bytes[j]*BASE;bytes[j]=carry&0xff;carry>>=8;}while(carry>0){bytes.push(carry&0xff);carry>>=8;}}// deal with leading zeros
for(var k=0;string[k]===LEADER&&k<string.length-1;++k){bytes.push(0);}return Buffer$2.from(bytes.reverse());}function decode(string){var buffer=decodeUnsafe(string);if(buffer)return buffer;throw new Error('Non-base'+BASE+' character');}return{encode:encode,decodeUnsafe:decodeUnsafe,decode:decode};};var ALPHABET='123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';var bs58=baseX(ALPHABET);function encodeTxHash(bytes){return bs58.encode(Buffer$1.from(bytes));}function decodeTxHash(bs58string){return bs58.decode(bs58string);}var ADDRESS_PREFIXES={ACCOUNT:0x42,CONTRACT:0xC0};var ACCOUNT_NAME_LENGTH=12;var UNITS={NATIVE_TOKEN:{baseLabel:'Aergo',baseLabelShort:'ARG',baseDigits:18,subUnits:[{e:0,label:'aer'},{e:18,label:'aergo'}],unitSize:{'aergo':18,'gaer':9,'aer':0}}};var constants={ADDRESS_PREFIXES:ADDRESS_PREFIXES,UNITS:UNITS,ACCOUNT_NAME_LENGTH:ACCOUNT_NAME_LENGTH};var inherits_browser=createCommonjsModule(function(module){if(typeof Object.create==='function'){// implementation from standard node.js 'util' module
module.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;ctor.prototype=Object.create(superCtor.prototype,{constructor:{value:ctor,enumerable:false,writable:true,configurable:true}});};}else{// old school shim for old browsers
module.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;var TempCtor=function TempCtor(){};TempCtor.prototype=superCtor.prototype;ctor.prototype=new TempCtor();ctor.prototype.constructor=ctor;};}});var domain;// This constructor is used to store event handlers. Instantiating this is
// faster than explicitly calling `Object.create(null)` to get a "clean" empty
// object (tested with v8 v4.9).
function EventHandlers(){}EventHandlers.prototype=Object.create(null);function EventEmitter(){EventEmitter.init.call(this);}// nodejs oddity
// require('events') === require('events').EventEmitter
EventEmitter.EventEmitter=EventEmitter;EventEmitter.usingDomains=false;EventEmitter.prototype.domain=undefined;EventEmitter.prototype._events=undefined;EventEmitter.prototype._maxListeners=undefined;// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners=10;EventEmitter.init=function(){this.domain=null;if(EventEmitter.usingDomains){// if there is an active domain, then attach to it.
if(domain.active&&!(this instanceof domain.Domain));}if(!this._events||this._events===Object.getPrototypeOf(this)._events){this._events=new EventHandlers();this._eventsCount=0;}this._maxListeners=this._maxListeners||undefined;};// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners=function setMaxListeners(n){if(typeof n!=='number'||n<0||isNaN(n))throw new TypeError('"n" argument must be a positive number');this._maxListeners=n;return this;};function $getMaxListeners(that){if(that._maxListeners===undefined)return EventEmitter.defaultMaxListeners;return that._maxListeners;}EventEmitter.prototype.getMaxListeners=function getMaxListeners(){return $getMaxListeners(this);};// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
function emitNone(handler,isFn,self){if(isFn)handler.call(self);else{var len=handler.length;var listeners=arrayClone(handler,len);for(var i=0;i<len;++i){listeners[i].call(self);}}}function emitOne(handler,isFn,self,arg1){if(isFn)handler.call(self,arg1);else{var len=handler.length;var listeners=arrayClone(handler,len);for(var i=0;i<len;++i){listeners[i].call(self,arg1);}}}function emitTwo(handler,isFn,self,arg1,arg2){if(isFn)handler.call(self,arg1,arg2);else{var len=handler.length;var listeners=arrayClone(handler,len);for(var i=0;i<len;++i){listeners[i].call(self,arg1,arg2);}}}function emitThree(handler,isFn,self,arg1,arg2,arg3){if(isFn)handler.call(self,arg1,arg2,arg3);else{var len=handler.length;var listeners=arrayClone(handler,len);for(var i=0;i<len;++i){listeners[i].call(self,arg1,arg2,arg3);}}}function emitMany(handler,isFn,self,args){if(isFn)handler.apply(self,args);else{var len=handler.length;var listeners=arrayClone(handler,len);for(var i=0;i<len;++i){listeners[i].apply(self,args);}}}EventEmitter.prototype.emit=function emit(type){var er,handler,len,args,i,events,domain;var doError=type==='error';events=this._events;if(events)doError=doError&&events.error==null;else if(!doError)return false;domain=this.domain;// If there is no 'error' event listener then throw.
if(doError){er=arguments[1];if(domain){if(!er)er=new Error('Uncaught, unspecified "error" event');er.domainEmitter=this;er.domain=domain;er.domainThrown=false;domain.emit('error',er);}else if(er instanceof Error){throw er;// Unhandled 'error' event
}else{// At least give some kind of context to the user
var err=new Error('Uncaught, unspecified "error" event. ('+er+')');err.context=er;throw err;}return false;}handler=events[type];if(!handler)return false;var isFn=typeof handler==='function';len=arguments.length;switch(len){// fast cases
case 1:emitNone(handler,isFn,this);break;case 2:emitOne(handler,isFn,this,arguments[1]);break;case 3:emitTwo(handler,isFn,this,arguments[1],arguments[2]);break;case 4:emitThree(handler,isFn,this,arguments[1],arguments[2],arguments[3]);break;// slower
default:args=new Array(len-1);for(i=1;i<len;i++){args[i-1]=arguments[i];}emitMany(handler,isFn,this,args);}return true;};function _addListener(target,type,listener,prepend){var m;var events;var existing;if(typeof listener!=='function')throw new TypeError('"listener" argument must be a function');events=target._events;if(!events){events=target._events=new EventHandlers();target._eventsCount=0;}else{// To avoid recursion in the case that type === "newListener"! Before
// adding it to the listeners, first emit "newListener".
if(events.newListener){target.emit('newListener',type,listener.listener?listener.listener:listener);// Re-assign `events` because a newListener handler could have caused the
// this._events to be assigned to a new object
events=target._events;}existing=events[type];}if(!existing){// Optimize the case of one listener. Don't need the extra array object.
existing=events[type]=listener;++target._eventsCount;}else{if(typeof existing==='function'){// Adding the second element, need to change to array.
existing=events[type]=prepend?[listener,existing]:[existing,listener];}else{// If we've already got an array, just append.
if(prepend){existing.unshift(listener);}else{existing.push(listener);}}// Check for listener leak
if(!existing.warned){m=$getMaxListeners(target);if(m&&m>0&&existing.length>m){existing.warned=true;var w=new Error('Possible EventEmitter memory leak detected. '+existing.length+' '+type+' listeners added. '+'Use emitter.setMaxListeners() to increase limit');w.name='MaxListenersExceededWarning';w.emitter=target;w.type=type;w.count=existing.length;emitWarning(w);}}}return target;}function emitWarning(e){typeof console.warn==='function'?console.warn(e):console.log(e);}EventEmitter.prototype.addListener=function addListener(type,listener){return _addListener(this,type,listener,false);};EventEmitter.prototype.on=EventEmitter.prototype.addListener;EventEmitter.prototype.prependListener=function prependListener(type,listener){return _addListener(this,type,listener,true);};function _onceWrap(target,type,listener){var fired=false;function g(){target.removeListener(type,g);if(!fired){fired=true;listener.apply(target,arguments);}}g.listener=listener;return g;}EventEmitter.prototype.once=function once(type,listener){if(typeof listener!=='function')throw new TypeError('"listener" argument must be a function');this.on(type,_onceWrap(this,type,listener));return this;};EventEmitter.prototype.prependOnceListener=function prependOnceListener(type,listener){if(typeof listener!=='function')throw new TypeError('"listener" argument must be a function');this.prependListener(type,_onceWrap(this,type,listener));return this;};// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener=function removeListener(type,listener){var list,events,position,i,originalListener;if(typeof listener!=='function')throw new TypeError('"listener" argument must be a function');events=this._events;if(!events)return this;list=events[type];if(!list)return this;if(list===listener||list.listener&&list.listener===listener){if(--this._eventsCount===0)this._events=new EventHandlers();else{delete events[type];if(events.removeListener)this.emit('removeListener',type,list.listener||listener);}}else if(typeof list!=='function'){position=-1;for(i=list.length;i-->0;){if(list[i]===listener||list[i].listener&&list[i].listener===listener){originalListener=list[i].listener;position=i;break;}}if(position<0)return this;if(list.length===1){list[0]=undefined;if(--this._eventsCount===0){this._events=new EventHandlers();return this;}else{delete events[type];}}else{spliceOne(list,position);}if(events.removeListener)this.emit('removeListener',type,originalListener||listener);}return this;};EventEmitter.prototype.removeAllListeners=function removeAllListeners(type){var listeners,events;events=this._events;if(!events)return this;// not listening for removeListener, no need to emit
if(!events.removeListener){if(arguments.length===0){this._events=new EventHandlers();this._eventsCount=0;}else if(events[type]){if(--this._eventsCount===0)this._events=new EventHandlers();else delete events[type];}return this;}// emit removeListener for all listeners on all events
if(arguments.length===0){var keys=Object.keys(events);for(var i=0,key;i<keys.length;++i){key=keys[i];if(key==='removeListener')continue;this.removeAllListeners(key);}this.removeAllListeners('removeListener');this._events=new EventHandlers();this._eventsCount=0;return this;}listeners=events[type];if(typeof listeners==='function'){this.removeListener(type,listeners);}else if(listeners){// LIFO order
do{this.removeListener(type,listeners[listeners.length-1]);}while(listeners[0]);}return this;};EventEmitter.prototype.listeners=function listeners(type){var evlistener;var ret;var events=this._events;if(!events)ret=[];else{evlistener=events[type];if(!evlistener)ret=[];else if(typeof evlistener==='function')ret=[evlistener.listener||evlistener];else ret=unwrapListeners(evlistener);}return ret;};EventEmitter.listenerCount=function(emitter,type){if(typeof emitter.listenerCount==='function'){return emitter.listenerCount(type);}else{return listenerCount.call(emitter,type);}};EventEmitter.prototype.listenerCount=listenerCount;function listenerCount(type){var events=this._events;if(events){var evlistener=events[type];if(typeof evlistener==='function'){return 1;}else if(evlistener){return evlistener.length;}}return 0;}EventEmitter.prototype.eventNames=function eventNames(){return this._eventsCount>0?Reflect.ownKeys(this._events):[];};// About 1.5x faster than the two-arg version of Array#splice().
function spliceOne(list,index){for(var i=index,k=i+1,n=list.length;k<n;i+=1,k+=1){list[i]=list[k];}list.pop();}function arrayClone(arr,i){var copy=new Array(i);while(i--){copy[i]=arr[i];}return copy;}function unwrapListeners(arr){var ret=new Array(arr.length);for(var i=0;i<ret.length;++i){ret[i]=arr[i].listener||arr[i];}return ret;}// shim for using process in browser
// based off https://github.com/defunctzombie/node-process/blob/master/browser.js
function defaultSetTimout(){throw new Error('setTimeout has not been defined');}function defaultClearTimeout(){throw new Error('clearTimeout has not been defined');}var cachedSetTimeout=defaultSetTimout;var cachedClearTimeout=defaultClearTimeout;if(typeof global$1.setTimeout==='function'){cachedSetTimeout=setTimeout;}if(typeof global$1.clearTimeout==='function'){cachedClearTimeout=clearTimeout;}function runTimeout(fun){if(cachedSetTimeout===setTimeout){//normal enviroments in sane situations
return setTimeout(fun,0);}// if setTimeout wasn't available but was latter defined
if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout){cachedSetTimeout=setTimeout;return setTimeout(fun,0);}try{// when when somebody has screwed with setTimeout but no I.E. maddness
return cachedSetTimeout(fun,0);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
return cachedSetTimeout.call(null,fun,0);}catch(e){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
return cachedSetTimeout.call(this,fun,0);}}}function runClearTimeout(marker){if(cachedClearTimeout===clearTimeout){//normal enviroments in sane situations
return clearTimeout(marker);}// if clearTimeout wasn't available but was latter defined
if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout){cachedClearTimeout=clearTimeout;return clearTimeout(marker);}try{// when when somebody has screwed with setTimeout but no I.E. maddness
return cachedClearTimeout(marker);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
return cachedClearTimeout.call(null,marker);}catch(e){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
// Some versions of I.E. have different rules for clearTimeout vs setTimeout
return cachedClearTimeout.call(this,marker);}}}var queue=[];var draining=false;var currentQueue;var queueIndex=-1;function cleanUpNextTick(){if(!draining||!currentQueue){return;}draining=false;if(currentQueue.length){queue=currentQueue.concat(queue);}else{queueIndex=-1;}if(queue.length){drainQueue();}}function drainQueue(){if(draining){return;}var timeout=runTimeout(cleanUpNextTick);draining=true;var len=queue.length;while(len){currentQueue=queue;queue=[];while(++queueIndex<len){if(currentQueue){currentQueue[queueIndex].run();}}queueIndex=-1;len=queue.length;}currentQueue=null;draining=false;runClearTimeout(timeout);}function nextTick(fun){var args=new Array(arguments.length-1);if(arguments.length>1){for(var i=1;i<arguments.length;i++){args[i-1]=arguments[i];}}queue.push(new Item(fun,args));if(queue.length===1&&!draining){runTimeout(drainQueue);}}// v8 likes predictible objects
function Item(fun,array){this.fun=fun;this.array=array;}Item.prototype.run=function(){this.fun.apply(null,this.array);};var title='browser';var platform='browser';var browser=true;var env={};var argv=[];var version='';// empty string to avoid regexp issues
var versions={};var release={};var config={};function noop(){}var on=noop;var addListener=noop;var once=noop;var off=noop;var removeListener=noop;var removeAllListeners=noop;var emit=noop;function binding(name){throw new Error('process.binding is not supported');}function cwd(){return'/';}function chdir(dir){throw new Error('process.chdir is not supported');}function umask(){return 0;}// from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
var performance=global$1.performance||{};var performanceNow=performance.now||performance.mozNow||performance.msNow||performance.oNow||performance.webkitNow||function(){return new Date().getTime();};// generate timestamp or delta
// see http://nodejs.org/api/process.html#process_process_hrtime
function hrtime(previousTimestamp){var clocktime=performanceNow.call(performance)*1e-3;var seconds=Math.floor(clocktime);var nanoseconds=Math.floor(clocktime%1*1e9);if(previousTimestamp){seconds=seconds-previousTimestamp[0];nanoseconds=nanoseconds-previousTimestamp[1];if(nanoseconds<0){seconds--;nanoseconds+=1e9;}}return[seconds,nanoseconds];}var startTime=new Date();function uptime(){var currentTime=new Date();var dif=currentTime-startTime;return dif/1000;}var process={nextTick:nextTick,title:title,browser:browser,env:env,argv:argv,version:version,versions:versions,on:on,addListener:addListener,once:once,off:off,removeListener:removeListener,removeAllListeners:removeAllListeners,emit:emit,binding:binding,cwd:cwd,chdir:chdir,umask:umask,hrtime:hrtime,platform:platform,release:release,config:config,uptime:uptime};var inherits$1;if(typeof Object.create==='function'){inherits$1=function inherits(ctor,superCtor){// implementation from standard node.js 'util' module
ctor.super_=superCtor;ctor.prototype=Object.create(superCtor.prototype,{constructor:{value:ctor,enumerable:false,writable:true,configurable:true}});};}else{inherits$1=function inherits(ctor,superCtor){ctor.super_=superCtor;var TempCtor=function TempCtor(){};TempCtor.prototype=superCtor.prototype;ctor.prototype=new TempCtor();ctor.prototype.constructor=ctor;};}var inherits$2=inherits$1;var formatRegExp=/%[sdj%]/g;function format(f){if(!isString(f)){var objects=[];for(var i=0;i<arguments.length;i++){objects.push(inspect(arguments[i]));}return objects.join(' ');}var i=1;var args=arguments;var len=args.length;var str=String(f).replace(formatRegExp,function(x){if(x==='%%')return'%';if(i>=len)return x;switch(x){case'%s':return String(args[i++]);case'%d':return Number(args[i++]);case'%j':try{return JSON.stringify(args[i++]);}catch(_){return'[Circular]';}default:return x;}});for(var x=args[i];i<len;x=args[++i]){if(isNull(x)||!isObject(x)){str+=' '+x;}else{str+=' '+inspect(x);}}return str;}// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
function deprecate(fn,msg){// Allow for deprecating things in the process of starting up.
if(isUndefined(global$1.process)){return function(){return deprecate(fn,msg).apply(this,arguments);};}var warned=false;function deprecated(){if(!warned){{console.error(msg);}warned=true;}return fn.apply(this,arguments);}return deprecated;}var debugs={};var debugEnviron;function debuglog(set){if(isUndefined(debugEnviron))debugEnviron=process.env.NODE_DEBUG||'';set=set.toUpperCase();if(!debugs[set]){if(new RegExp('\\b'+set+'\\b','i').test(debugEnviron)){var pid=0;debugs[set]=function(){var msg=format.apply(null,arguments);console.error('%s %d: %s',set,pid,msg);};}else{debugs[set]=function(){};}}return debugs[set];}/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */ /* legacy: obj, showHidden, depth, colors*/function inspect(obj,opts){// default options
var ctx={seen:[],stylize:stylizeNoColor};// legacy...
if(arguments.length>=3)ctx.depth=arguments[2];if(arguments.length>=4)ctx.colors=arguments[3];if(isBoolean(opts)){// legacy...
ctx.showHidden=opts;}else if(opts){// got an "options" object
_extend(ctx,opts);}// set default options
if(isUndefined(ctx.showHidden))ctx.showHidden=false;if(isUndefined(ctx.depth))ctx.depth=2;if(isUndefined(ctx.colors))ctx.colors=false;if(isUndefined(ctx.customInspect))ctx.customInspect=true;if(ctx.colors)ctx.stylize=stylizeWithColor;return formatValue(ctx,obj,ctx.depth);}// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors={'bold':[1,22],'italic':[3,23],'underline':[4,24],'inverse':[7,27],'white':[37,39],'grey':[90,39],'black':[30,39],'blue':[34,39],'cyan':[36,39],'green':[32,39],'magenta':[35,39],'red':[31,39],'yellow':[33,39]};// Don't use 'blue' not visible on cmd.exe
inspect.styles={'special':'cyan','number':'yellow','boolean':'yellow','undefined':'grey','null':'bold','string':'green','date':'magenta',// "name": intentionally not styling
'regexp':'red'};function stylizeWithColor(str,styleType){var style=inspect.styles[styleType];if(style){return"\x1B["+inspect.colors[style][0]+'m'+str+"\x1B["+inspect.colors[style][1]+'m';}else{return str;}}function stylizeNoColor(str,styleType){return str;}function arrayToHash(array){var hash={};array.forEach(function(val,idx){hash[val]=true;});return hash;}function formatValue(ctx,value,recurseTimes){// Provide a hook for user-specified inspect functions.
// Check that value is an object with an inspect function on it
if(ctx.customInspect&&value&&isFunction(value.inspect)&&// Filter out the util module, it's inspect function is special
value.inspect!==inspect&&// Also filter out any prototype objects using the circular check.
!(value.constructor&&value.constructor.prototype===value)){var ret=value.inspect(recurseTimes,ctx);if(!isString(ret)){ret=formatValue(ctx,ret,recurseTimes);}return ret;}// Primitive types cannot have properties
var primitive=formatPrimitive(ctx,value);if(primitive){return primitive;}// Look up the keys of the object.
var keys=Object.keys(value);var visibleKeys=arrayToHash(keys);if(ctx.showHidden){keys=Object.getOwnPropertyNames(value);}// IE doesn't make error fields non-enumerable
// http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
if(isError(value)&&(keys.indexOf('message')>=0||keys.indexOf('description')>=0)){return formatError(value);}// Some type of object without properties can be shortcutted.
if(keys.length===0){if(isFunction(value)){var name=value.name?': '+value.name:'';return ctx.stylize('[Function'+name+']','special');}if(isRegExp(value)){return ctx.stylize(RegExp.prototype.toString.call(value),'regexp');}if(isDate(value)){return ctx.stylize(Date.prototype.toString.call(value),'date');}if(isError(value)){return formatError(value);}}var base='',array=false,braces=['{','}'];// Make Array say that they are Array
if(isArray$1(value)){array=true;braces=['[',']'];}// Make functions say that they are functions
if(isFunction(value)){var n=value.name?': '+value.name:'';base=' [Function'+n+']';}// Make RegExps say that they are RegExps
if(isRegExp(value)){base=' '+RegExp.prototype.toString.call(value);}// Make dates with properties first say the date
if(isDate(value)){base=' '+Date.prototype.toUTCString.call(value);}// Make error with message first say the error
if(isError(value)){base=' '+formatError(value);}if(keys.length===0&&(!array||value.length==0)){return braces[0]+base+braces[1];}if(recurseTimes<0){if(isRegExp(value)){return ctx.stylize(RegExp.prototype.toString.call(value),'regexp');}else{return ctx.stylize('[Object]','special');}}ctx.seen.push(value);var output;if(array){output=formatArray(ctx,value,recurseTimes,visibleKeys,keys);}else{output=keys.map(function(key){return formatProperty(ctx,value,recurseTimes,visibleKeys,key,array);});}ctx.seen.pop();return reduceToSingleString(output,base,braces);}function formatPrimitive(ctx,value){if(isUndefined(value))return ctx.stylize('undefined','undefined');if(isString(value)){var simple='\''+JSON.stringify(value).replace(/^"|"$/g,'').replace(/'/g,"\\'").replace(/\\"/g,'"')+'\'';return ctx.stylize(simple,'string');}if(isNumber(value))return ctx.stylize(''+value,'number');if(isBoolean(value))return ctx.stylize(''+value,'boolean');// For some reason typeof null is "object", so special case here.
if(isNull(value))return ctx.stylize('null','null');}function formatError(value){return'['+Error.prototype.toString.call(value)+']';}function formatArray(ctx,value,recurseTimes,visibleKeys,keys){var output=[];for(var i=0,l=value.length;i<l;++i){if(hasOwnProperty(value,String(i))){output.push(formatProperty(ctx,value,recurseTimes,visibleKeys,String(i),true));}else{output.push('');}}keys.forEach(function(key){if(!key.match(/^\d+$/)){output.push(formatProperty(ctx,value,recurseTimes,visibleKeys,key,true));}});return output;}function formatProperty(ctx,value,recurseTimes,visibleKeys,key,array){var name,str,desc;desc=Object.getOwnPropertyDescriptor(value,key)||{value:value[key]};if(desc.get){if(desc.set){str=ctx.stylize('[Getter/Setter]','special');}else{str=ctx.stylize('[Getter]','special');}}else{if(desc.set){str=ctx.stylize('[Setter]','special');}}if(!hasOwnProperty(visibleKeys,key)){name='['+key+']';}if(!str){if(ctx.seen.indexOf(desc.value)<0){if(isNull(recurseTimes)){str=formatValue(ctx,desc.value,null);}else{str=formatValue(ctx,desc.value,recurseTimes-1);}if(str.indexOf('\n')>-1){if(array){str=str.split('\n').map(function(line){return'  '+line;}).join('\n').substr(2);}else{str='\n'+str.split('\n').map(function(line){return'   '+line;}).join('\n');}}}else{str=ctx.stylize('[Circular]','special');}}if(isUndefined(name)){if(array&&key.match(/^\d+$/)){return str;}name=JSON.stringify(''+key);if(name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)){name=name.substr(1,name.length-2);name=ctx.stylize(name,'name');}else{name=name.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'");name=ctx.stylize(name,'string');}}return name+': '+str;}function reduceToSingleString(output,base,braces){var length=output.reduce(function(prev,cur){if(cur.indexOf('\n')>=0);return prev+cur.replace(/\u001b\[\d\d?m/g,'').length+1;},0);if(length>60){return braces[0]+(base===''?'':base+'\n ')+' '+output.join(',\n  ')+' '+braces[1];}return braces[0]+base+' '+output.join(', ')+' '+braces[1];}// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray$1(ar){return Array.isArray(ar);}function isBoolean(arg){return typeof arg==='boolean';}function isNull(arg){return arg===null;}function isNumber(arg){return typeof arg==='number';}function isString(arg){return typeof arg==='string';}function isUndefined(arg){return arg===void 0;}function isRegExp(re){return isObject(re)&&objectToString(re)==='[object RegExp]';}function isObject(arg){return _typeof2(arg)==='object'&&arg!==null;}function isDate(d){return isObject(d)&&objectToString(d)==='[object Date]';}function isError(e){return isObject(e)&&(objectToString(e)==='[object Error]'||e instanceof Error);}function isFunction(arg){return typeof arg==='function';}function objectToString(o){return Object.prototype.toString.call(o);}function _extend(origin,add){// Don't do anything if add isn't an object
if(!add||!isObject(add))return origin;var keys=Object.keys(add);var i=keys.length;while(i--){origin[keys[i]]=add[keys[i]];}return origin;}function hasOwnProperty(obj,prop){return Object.prototype.hasOwnProperty.call(obj,prop);}function BufferList(){this.head=null;this.tail=null;this.length=0;}BufferList.prototype.push=function(v){var entry={data:v,next:null};if(this.length>0)this.tail.next=entry;else this.head=entry;this.tail=entry;++this.length;};BufferList.prototype.unshift=function(v){var entry={data:v,next:this.head};if(this.length===0)this.tail=entry;this.head=entry;++this.length;};BufferList.prototype.shift=function(){if(this.length===0)return;var ret=this.head.data;if(this.length===1)this.head=this.tail=null;else this.head=this.head.next;--this.length;return ret;};BufferList.prototype.clear=function(){this.head=this.tail=null;this.length=0;};BufferList.prototype.join=function(s){if(this.length===0)return'';var p=this.head;var ret=''+p.data;while(p=p.next){ret+=s+p.data;}return ret;};BufferList.prototype.concat=function(n){if(this.length===0)return Buffer$1.alloc(0);if(this.length===1)return this.head.data;var ret=Buffer$1.allocUnsafe(n>>>0);var p=this.head;var i=0;while(p){p.data.copy(ret,i);i+=p.data.length;p=p.next;}return ret;};// Copyright Joyent, Inc. and other Node contributors.
var isBufferEncoding=Buffer$1.isEncoding||function(encoding){switch(encoding&&encoding.toLowerCase()){case'hex':case'utf8':case'utf-8':case'ascii':case'binary':case'base64':case'ucs2':case'ucs-2':case'utf16le':case'utf-16le':case'raw':return true;default:return false;}};function assertEncoding(encoding){if(encoding&&!isBufferEncoding(encoding)){throw new Error('Unknown encoding: '+encoding);}}// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
function StringDecoder(encoding){this.encoding=(encoding||'utf8').toLowerCase().replace(/[-_]/,'');assertEncoding(encoding);switch(this.encoding){case'utf8':// CESU-8 represents each of Surrogate Pair by 3-bytes
this.surrogateSize=3;break;case'ucs2':case'utf16le':// UTF-16 represents each of Surrogate Pair by 2-bytes
this.surrogateSize=2;this.detectIncompleteChar=utf16DetectIncompleteChar;break;case'base64':// Base-64 stores 3 bytes in 4 chars, and pads the remainder.
this.surrogateSize=3;this.detectIncompleteChar=base64DetectIncompleteChar;break;default:this.write=passThroughWrite;return;}// Enough space to store all bytes of a single character. UTF-8 needs 4
// bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
this.charBuffer=new Buffer$1(6);// Number of bytes received for the current incomplete multi-byte character.
this.charReceived=0;// Number of bytes expected for the current incomplete multi-byte character.
this.charLength=0;}// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write=function(buffer){var charStr='';// if our last write ended with an incomplete multibyte character
while(this.charLength){// determine how many remaining bytes this buffer has to offer for this char
var available=buffer.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:buffer.length;// add the new bytes to the char buffer
buffer.copy(this.charBuffer,this.charReceived,0,available);this.charReceived+=available;if(this.charReceived<this.charLength){// still not enough chars in this buffer? wait for more ...
return'';}// remove bytes belonging to the current character from the buffer
buffer=buffer.slice(available,buffer.length);// get the character that was split
charStr=this.charBuffer.slice(0,this.charLength).toString(this.encoding);// CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
var charCode=charStr.charCodeAt(charStr.length-1);if(charCode>=0xD800&&charCode<=0xDBFF){this.charLength+=this.surrogateSize;charStr='';continue;}this.charReceived=this.charLength=0;// if there are no more bytes in this buffer, just emit our char
if(buffer.length===0){return charStr;}break;}// determine and set charLength / charReceived
this.detectIncompleteChar(buffer);var end=buffer.length;if(this.charLength){// buffer the incomplete character bytes we got
buffer.copy(this.charBuffer,0,buffer.length-this.charReceived,end);end-=this.charReceived;}charStr+=buffer.toString(this.encoding,0,end);var end=charStr.length-1;var charCode=charStr.charCodeAt(end);// CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
if(charCode>=0xD800&&charCode<=0xDBFF){var size=this.surrogateSize;this.charLength+=size;this.charReceived+=size;this.charBuffer.copy(this.charBuffer,size,0,size);buffer.copy(this.charBuffer,0,0,size);return charStr.substring(0,end);}// or just emit the charStr
return charStr;};// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar=function(buffer){// determine how many bytes we have to check at the end of this buffer
var i=buffer.length>=3?3:buffer.length;// Figure out if one of the last i bytes of our buffer announces an
// incomplete char.
for(;i>0;i--){var c=buffer[buffer.length-i];// See http://en.wikipedia.org/wiki/UTF-8#Description
// 110XXXXX
if(i==1&&c>>5==0x06){this.charLength=2;break;}// 1110XXXX
if(i<=2&&c>>4==0x0E){this.charLength=3;break;}// 11110XXX
if(i<=3&&c>>3==0x1E){this.charLength=4;break;}}this.charReceived=i;};StringDecoder.prototype.end=function(buffer){var res='';if(buffer&&buffer.length)res=this.write(buffer);if(this.charReceived){var cr=this.charReceived;var buf=this.charBuffer;var enc=this.encoding;res+=buf.slice(0,cr).toString(enc);}return res;};function passThroughWrite(buffer){return buffer.toString(this.encoding);}function utf16DetectIncompleteChar(buffer){this.charReceived=buffer.length%2;this.charLength=this.charReceived?2:0;}function base64DetectIncompleteChar(buffer){this.charReceived=buffer.length%3;this.charLength=this.charReceived?3:0;}var stringDecoder=/*#__PURE__*/Object.freeze({StringDecoder:StringDecoder});Readable.ReadableState=ReadableState;var debug=debuglog('stream');inherits$2(Readable,EventEmitter);function prependListener(emitter,event,fn){// Sadly this is not cacheable as some libraries bundle their own
// event emitter implementation with them.
if(typeof emitter.prependListener==='function'){return emitter.prependListener(event,fn);}else{// This is a hack to make sure that our error handler is attached before any
// userland ones.  NEVER DO THIS. This is here only because this code needs
// to continue to work with older versions of Node.js that do not include
// the prependListener() method. The goal is to eventually remove this hack.
if(!emitter._events||!emitter._events[event])emitter.on(event,fn);else if(Array.isArray(emitter._events[event]))emitter._events[event].unshift(fn);else emitter._events[event]=[fn,emitter._events[event]];}}function listenerCount$1(emitter,type){return emitter.listeners(type).length;}function ReadableState(options,stream){options=options||{};// object stream flag. Used to make read(n) ignore n and to
// make all the buffer merging and length checks go away
this.objectMode=!!options.objectMode;if(stream instanceof Duplex)this.objectMode=this.objectMode||!!options.readableObjectMode;// the point at which it stops calling _read() to fill the buffer
// Note: 0 is a valid value, means "don't call _read preemptively ever"
var hwm=options.highWaterMark;var defaultHwm=this.objectMode?16:16*1024;this.highWaterMark=hwm||hwm===0?hwm:defaultHwm;// cast to ints.
this.highWaterMark=~~this.highWaterMark;// A linked list is used to store data chunks instead of an array because the
// linked list can remove elements from the beginning faster than
// array.shift()
this.buffer=new BufferList();this.length=0;this.pipes=null;this.pipesCount=0;this.flowing=null;this.ended=false;this.endEmitted=false;this.reading=false;// a flag to be able to tell if the onwrite cb is called immediately,
// or on a later tick.  We set this to true at first, because any
// actions that shouldn't happen until "later" should generally also
// not happen before the first write call.
this.sync=true;// whenever we return null, then we set a flag to say
// that we're awaiting a 'readable' event emission.
this.needReadable=false;this.emittedReadable=false;this.readableListening=false;this.resumeScheduled=false;// Crypto is kind of old and crusty.  Historically, its default string
// encoding is 'binary' so we have to make this configurable.
// Everything else in the universe uses 'utf8', though.
this.defaultEncoding=options.defaultEncoding||'utf8';// when piping, we only care about 'readable' events that happen
// after read()ing all the bytes and not getting any pushback.
this.ranOut=false;// the number of writers that are awaiting a drain event in .pipe()s
this.awaitDrain=0;// if true, a maybeReadMore has been scheduled
this.readingMore=false;this.decoder=null;this.encoding=null;if(options.encoding){this.decoder=new StringDecoder(options.encoding);this.encoding=options.encoding;}}function Readable(options){if(!(this instanceof Readable))return new Readable(options);this._readableState=new ReadableState(options,this);// legacy
this.readable=true;if(options&&typeof options.read==='function')this._read=options.read;EventEmitter.call(this);}// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push=function(chunk,encoding){var state=this._readableState;if(!state.objectMode&&typeof chunk==='string'){encoding=encoding||state.defaultEncoding;if(encoding!==state.encoding){chunk=Buffer$1.from(chunk,encoding);encoding='';}}return readableAddChunk(this,state,chunk,encoding,false);};// Unshift should *always* be something directly out of read()
Readable.prototype.unshift=function(chunk){var state=this._readableState;return readableAddChunk(this,state,chunk,'',true);};Readable.prototype.isPaused=function(){return this._readableState.flowing===false;};function readableAddChunk(stream,state,chunk,encoding,addToFront){var er=chunkInvalid(state,chunk);if(er){stream.emit('error',er);}else if(chunk===null){state.reading=false;onEofChunk(stream,state);}else if(state.objectMode||chunk&&chunk.length>0){if(state.ended&&!addToFront){var e=new Error('stream.push() after EOF');stream.emit('error',e);}else if(state.endEmitted&&addToFront){var _e=new Error('stream.unshift() after end event');stream.emit('error',_e);}else{var skipAdd;if(state.decoder&&!addToFront&&!encoding){chunk=state.decoder.write(chunk);skipAdd=!state.objectMode&&chunk.length===0;}if(!addToFront)state.reading=false;// Don't add to the buffer if we've decoded to an empty string chunk and
// we're not in object mode
if(!skipAdd){// if we want the data now, just emit it.
if(state.flowing&&state.length===0&&!state.sync){stream.emit('data',chunk);stream.read(0);}else{// update the buffer info.
state.length+=state.objectMode?1:chunk.length;if(addToFront)state.buffer.unshift(chunk);else state.buffer.push(chunk);if(state.needReadable)emitReadable(stream);}}maybeReadMore(stream,state);}}else if(!addToFront){state.reading=false;}return needMoreData(state);}// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state){return!state.ended&&(state.needReadable||state.length<state.highWaterMark||state.length===0);}// backwards compatibility.
Readable.prototype.setEncoding=function(enc){this._readableState.decoder=new StringDecoder(enc);this._readableState.encoding=enc;return this;};// Don't raise the hwm > 8MB
var MAX_HWM=0x800000;function computeNewHighWaterMark(n){if(n>=MAX_HWM){n=MAX_HWM;}else{// Get the next highest power of 2 to prevent increasing hwm excessively in
// tiny amounts
n--;n|=n>>>1;n|=n>>>2;n|=n>>>4;n|=n>>>8;n|=n>>>16;n++;}return n;}// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n,state){if(n<=0||state.length===0&&state.ended)return 0;if(state.objectMode)return 1;if(n!==n){// Only flow one buffer at a time
if(state.flowing&&state.length)return state.buffer.head.data.length;else return state.length;}// If we're asking for more than the current hwm, then raise the hwm.
if(n>state.highWaterMark)state.highWaterMark=computeNewHighWaterMark(n);if(n<=state.length)return n;// Don't have enough
if(!state.ended){state.needReadable=true;return 0;}return state.length;}// you can override either this method, or the async _read(n) below.
Readable.prototype.read=function(n){debug('read',n);n=parseInt(n,10);var state=this._readableState;var nOrig=n;if(n!==0)state.emittedReadable=false;// if we're doing read(0) to trigger a readable event, but we
// already have a bunch of data in the buffer, then just trigger
// the 'readable' event and move on.
if(n===0&&state.needReadable&&(state.length>=state.highWaterMark||state.ended)){debug('read: emitReadable',state.length,state.ended);if(state.length===0&&state.ended)endReadable(this);else emitReadable(this);return null;}n=howMuchToRead(n,state);// if we've ended, and we're now clear, then finish it up.
if(n===0&&state.ended){if(state.length===0)endReadable(this);return null;}// All the actual chunk generation logic needs to be
// *below* the call to _read.  The reason is that in certain
// synthetic stream cases, such as passthrough streams, _read
// may be a completely synchronous operation which may change
// the state of the read buffer, providing enough data when
// before there was *not* enough.
//
// So, the steps are:
// 1. Figure out what the state of things will be after we do
// a read from the buffer.
//
// 2. If that resulting state will trigger a _read, then call _read.
// Note that this may be asynchronous, or synchronous.  Yes, it is
// deeply ugly to write APIs this way, but that still doesn't mean
// that the Readable class should behave improperly, as streams are
// designed to be sync/async agnostic.
// Take note if the _read call is sync or async (ie, if the read call
// has returned yet), so that we know whether or not it's safe to emit
// 'readable' etc.
//
// 3. Actually pull the requested chunks out of the buffer and return.
// if we need a readable event, then we need to do some reading.
var doRead=state.needReadable;debug('need readable',doRead);// if we currently have less than the highWaterMark, then also read some
if(state.length===0||state.length-n<state.highWaterMark){doRead=true;debug('length less than watermark',doRead);}// however, if we've ended, then there's no point, and if we're already
// reading, then it's unnecessary.
if(state.ended||state.reading){doRead=false;debug('reading or ended',doRead);}else if(doRead){debug('do read');state.reading=true;state.sync=true;// if the length is currently zero, then we *need* a readable event.
if(state.length===0)state.needReadable=true;// call internal read method
this._read(state.highWaterMark);state.sync=false;// If _read pushed data synchronously, then `reading` will be false,
// and we need to re-evaluate how much data we can return to the user.
if(!state.reading)n=howMuchToRead(nOrig,state);}var ret;if(n>0)ret=fromList(n,state);else ret=null;if(ret===null){state.needReadable=true;n=0;}else{state.length-=n;}if(state.length===0){// If we have nothing in the buffer, then we want to know
// as soon as we *do* get something into the buffer.
if(!state.ended)state.needReadable=true;// If we tried to read() past the EOF, then emit end on the next tick.
if(nOrig!==n&&state.ended)endReadable(this);}if(ret!==null)this.emit('data',ret);return ret;};function chunkInvalid(state,chunk){var er=null;if(!isBuffer(chunk)&&typeof chunk!=='string'&&chunk!==null&&chunk!==undefined&&!state.objectMode){er=new TypeError('Invalid non-string/buffer chunk');}return er;}function onEofChunk(stream,state){if(state.ended)return;if(state.decoder){var chunk=state.decoder.end();if(chunk&&chunk.length){state.buffer.push(chunk);state.length+=state.objectMode?1:chunk.length;}}state.ended=true;// emit 'readable' now to make sure it gets picked up.
emitReadable(stream);}// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream){var state=stream._readableState;state.needReadable=false;if(!state.emittedReadable){debug('emitReadable',state.flowing);state.emittedReadable=true;if(state.sync)nextTick(emitReadable_,stream);else emitReadable_(stream);}}function emitReadable_(stream){debug('emit readable');stream.emit('readable');flow(stream);}// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream,state){if(!state.readingMore){state.readingMore=true;nextTick(maybeReadMore_,stream,state);}}function maybeReadMore_(stream,state){var len=state.length;while(!state.reading&&!state.flowing&&!state.ended&&state.length<state.highWaterMark){debug('maybeReadMore read 0');stream.read(0);if(len===state.length)// didn't get any data, stop spinning.
break;else len=state.length;}state.readingMore=false;}// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read=function(n){this.emit('error',new Error('not implemented'));};Readable.prototype.pipe=function(dest,pipeOpts){var src=this;var state=this._readableState;switch(state.pipesCount){case 0:state.pipes=dest;break;case 1:state.pipes=[state.pipes,dest];break;default:state.pipes.push(dest);break;}state.pipesCount+=1;debug('pipe count=%d opts=%j',state.pipesCount,pipeOpts);var doEnd=!pipeOpts||pipeOpts.end!==false;var endFn=doEnd?onend:cleanup;if(state.endEmitted)nextTick(endFn);else src.once('end',endFn);dest.on('unpipe',onunpipe);function onunpipe(readable){debug('onunpipe');if(readable===src){cleanup();}}function onend(){debug('onend');dest.end();}// when the dest drains, it reduces the awaitDrain counter
// on the source.  This would be more elegant with a .once()
// handler in flow(), but adding and removing repeatedly is
// too slow.
var ondrain=pipeOnDrain(src);dest.on('drain',ondrain);var cleanedUp=false;function cleanup(){debug('cleanup');// cleanup event handlers once the pipe is broken
dest.removeListener('close',onclose);dest.removeListener('finish',onfinish);dest.removeListener('drain',ondrain);dest.removeListener('error',onerror);dest.removeListener('unpipe',onunpipe);src.removeListener('end',onend);src.removeListener('end',cleanup);src.removeListener('data',ondata);cleanedUp=true;// if the reader is waiting for a drain event from this
// specific writer, then it would cause it to never start
// flowing again.
// So, if this is awaiting a drain, then we just call it now.
// If we don't know, then assume that we are waiting for one.
if(state.awaitDrain&&(!dest._writableState||dest._writableState.needDrain))ondrain();}// If the user pushes more data while we're writing to dest then we'll end up
// in ondata again. However, we only want to increase awaitDrain once because
// dest will only emit one 'drain' event for the multiple writes.
// => Introduce a guard on increasing awaitDrain.
var increasedAwaitDrain=false;src.on('data',ondata);function ondata(chunk){debug('ondata');increasedAwaitDrain=false;var ret=dest.write(chunk);if(false===ret&&!increasedAwaitDrain){// If the user unpiped during `dest.write()`, it is possible
// to get stuck in a permanently paused state if that write
// also returned false.
// => Check whether `dest` is still a piping destination.
if((state.pipesCount===1&&state.pipes===dest||state.pipesCount>1&&indexOf(state.pipes,dest)!==-1)&&!cleanedUp){debug('false write response, pause',src._readableState.awaitDrain);src._readableState.awaitDrain++;increasedAwaitDrain=true;}src.pause();}}// if the dest has an error, then stop piping into it.
// however, don't suppress the throwing behavior for this.
function onerror(er){debug('onerror',er);unpipe();dest.removeListener('error',onerror);if(listenerCount$1(dest,'error')===0)dest.emit('error',er);}// Make sure our error handler is attached before userland ones.
prependListener(dest,'error',onerror);// Both close and finish should trigger unpipe, but only once.
function onclose(){dest.removeListener('finish',onfinish);unpipe();}dest.once('close',onclose);function onfinish(){debug('onfinish');dest.removeListener('close',onclose);unpipe();}dest.once('finish',onfinish);function unpipe(){debug('unpipe');src.unpipe(dest);}// tell the dest that it's being piped to
dest.emit('pipe',src);// start the flow if it hasn't been started already.
if(!state.flowing){debug('pipe resume');src.resume();}return dest;};function pipeOnDrain(src){return function(){var state=src._readableState;debug('pipeOnDrain',state.awaitDrain);if(state.awaitDrain)state.awaitDrain--;if(state.awaitDrain===0&&src.listeners('data').length){state.flowing=true;flow(src);}};}Readable.prototype.unpipe=function(dest){var state=this._readableState;// if we're not piping anywhere, then do nothing.
if(state.pipesCount===0)return this;// just one destination.  most common case.
if(state.pipesCount===1){// passed in one, but it's not the right one.
if(dest&&dest!==state.pipes)return this;if(!dest)dest=state.pipes;// got a match.
state.pipes=null;state.pipesCount=0;state.flowing=false;if(dest)dest.emit('unpipe',this);return this;}// slow case. multiple pipe destinations.
if(!dest){// remove all.
var dests=state.pipes;var len=state.pipesCount;state.pipes=null;state.pipesCount=0;state.flowing=false;for(var _i=0;_i<len;_i++){dests[_i].emit('unpipe',this);}return this;}// try to find the right one.
var i=indexOf(state.pipes,dest);if(i===-1)return this;state.pipes.splice(i,1);state.pipesCount-=1;if(state.pipesCount===1)state.pipes=state.pipes[0];dest.emit('unpipe',this);return this;};// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on=function(ev,fn){var res=EventEmitter.prototype.on.call(this,ev,fn);if(ev==='data'){// Start flowing on next tick if stream isn't explicitly paused
if(this._readableState.flowing!==false)this.resume();}else if(ev==='readable'){var state=this._readableState;if(!state.endEmitted&&!state.readableListening){state.readableListening=state.needReadable=true;state.emittedReadable=false;if(!state.reading){nextTick(nReadingNextTick,this);}else if(state.length){emitReadable(this,state);}}}return res;};Readable.prototype.addListener=Readable.prototype.on;function nReadingNextTick(self){debug('readable nexttick read 0');self.read(0);}// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume=function(){var state=this._readableState;if(!state.flowing){debug('resume');state.flowing=true;resume(this,state);}return this;};function resume(stream,state){if(!state.resumeScheduled){state.resumeScheduled=true;nextTick(resume_,stream,state);}}function resume_(stream,state){if(!state.reading){debug('resume read 0');stream.read(0);}state.resumeScheduled=false;state.awaitDrain=0;stream.emit('resume');flow(stream);if(state.flowing&&!state.reading)stream.read(0);}Readable.prototype.pause=function(){debug('call pause flowing=%j',this._readableState.flowing);if(false!==this._readableState.flowing){debug('pause');this._readableState.flowing=false;this.emit('pause');}return this;};function flow(stream){var state=stream._readableState;debug('flow',state.flowing);while(state.flowing&&stream.read()!==null){}}// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap=function(stream){var state=this._readableState;var paused=false;var self=this;stream.on('end',function(){debug('wrapped end');if(state.decoder&&!state.ended){var chunk=state.decoder.end();if(chunk&&chunk.length)self.push(chunk);}self.push(null);});stream.on('data',function(chunk){debug('wrapped data');if(state.decoder)chunk=state.decoder.write(chunk);// don't skip over falsy values in objectMode
if(state.objectMode&&(chunk===null||chunk===undefined))return;else if(!state.objectMode&&(!chunk||!chunk.length))return;var ret=self.push(chunk);if(!ret){paused=true;stream.pause();}});// proxy all the other methods.
// important when wrapping filters and duplexes.
for(var i in stream){if(this[i]===undefined&&typeof stream[i]==='function'){this[i]=function(method){return function(){return stream[method].apply(stream,arguments);};}(i);}}// proxy certain important events.
var events=['error','close','destroy','pause','resume'];forEach(events,function(ev){stream.on(ev,self.emit.bind(self,ev));});// when we try to consume some more bytes, simply unpause the
// underlying stream.
self._read=function(n){debug('wrapped _read',n);if(paused){paused=false;stream.resume();}};return self;};// exposed for testing purposes only.
Readable._fromList=fromList;// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n,state){// nothing buffered
if(state.length===0)return null;var ret;if(state.objectMode)ret=state.buffer.shift();else if(!n||n>=state.length){// read it all, truncate the list
if(state.decoder)ret=state.buffer.join('');else if(state.buffer.length===1)ret=state.buffer.head.data;else ret=state.buffer.concat(state.length);state.buffer.clear();}else{// read part of list
ret=fromListPartial(n,state.buffer,state.decoder);}return ret;}// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n,list,hasStrings){var ret;if(n<list.head.data.length){// slice is the same for buffers and strings
ret=list.head.data.slice(0,n);list.head.data=list.head.data.slice(n);}else if(n===list.head.data.length){// first chunk is a perfect match
ret=list.shift();}else{// result spans more than one buffer
ret=hasStrings?copyFromBufferString(n,list):copyFromBuffer(n,list);}return ret;}// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n,list){var p=list.head;var c=1;var ret=p.data;n-=ret.length;while(p=p.next){var str=p.data;var nb=n>str.length?str.length:n;if(nb===str.length)ret+=str;else ret+=str.slice(0,n);n-=nb;if(n===0){if(nb===str.length){++c;if(p.next)list.head=p.next;else list.head=list.tail=null;}else{list.head=p;p.data=str.slice(nb);}break;}++c;}list.length-=c;return ret;}// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n,list){var ret=Buffer$1.allocUnsafe(n);var p=list.head;var c=1;p.data.copy(ret);n-=p.data.length;while(p=p.next){var buf=p.data;var nb=n>buf.length?buf.length:n;buf.copy(ret,ret.length-n,0,nb);n-=nb;if(n===0){if(nb===buf.length){++c;if(p.next)list.head=p.next;else list.head=list.tail=null;}else{list.head=p;p.data=buf.slice(nb);}break;}++c;}list.length-=c;return ret;}function endReadable(stream){var state=stream._readableState;// If we get here before consuming all the bytes, then that is a
// bug in node.  Should never happen.
if(state.length>0)throw new Error('"endReadable()" called on non-empty stream');if(!state.endEmitted){state.ended=true;nextTick(endReadableNT,state,stream);}}function endReadableNT(state,stream){// Check that we didn't get one last unshift.
if(!state.endEmitted&&state.length===0){state.endEmitted=true;stream.readable=false;stream.emit('end');}}function forEach(xs,f){for(var i=0,l=xs.length;i<l;i++){f(xs[i],i);}}function indexOf(xs,x){for(var i=0,l=xs.length;i<l;i++){if(xs[i]===x)return i;}return-1;}// A bit simpler than readable streams.
Writable.WritableState=WritableState;inherits$2(Writable,EventEmitter);function nop(){}function WriteReq(chunk,encoding,cb){this.chunk=chunk;this.encoding=encoding;this.callback=cb;this.next=null;}function WritableState(options,stream){Object.defineProperty(this,'buffer',{get:deprecate(function(){return this.getBuffer();},'_writableState.buffer is deprecated. Use _writableState.getBuffer '+'instead.')});options=options||{};// object stream flag to indicate whether or not this stream
// contains buffers or objects.
this.objectMode=!!options.objectMode;if(stream instanceof Duplex)this.objectMode=this.objectMode||!!options.writableObjectMode;// the point at which write() starts returning false
// Note: 0 is a valid value, means that we always return false if
// the entire buffer is not flushed immediately on write()
var hwm=options.highWaterMark;var defaultHwm=this.objectMode?16:16*1024;this.highWaterMark=hwm||hwm===0?hwm:defaultHwm;// cast to ints.
this.highWaterMark=~~this.highWaterMark;this.needDrain=false;// at the start of calling end()
this.ending=false;// when end() has been called, and returned
this.ended=false;// when 'finish' is emitted
this.finished=false;// should we decode strings into buffers before passing to _write?
// this is here so that some node-core streams can optimize string
// handling at a lower level.
var noDecode=options.decodeStrings===false;this.decodeStrings=!noDecode;// Crypto is kind of old and crusty.  Historically, its default string
// encoding is 'binary' so we have to make this configurable.
// Everything else in the universe uses 'utf8', though.
this.defaultEncoding=options.defaultEncoding||'utf8';// not an actual buffer we keep track of, but a measurement
// of how much we're waiting to get pushed to some underlying
// socket or file.
this.length=0;// a flag to see when we're in the middle of a write.
this.writing=false;// when true all writes will be buffered until .uncork() call
this.corked=0;// a flag to be able to tell if the onwrite cb is called immediately,
// or on a later tick.  We set this to true at first, because any
// actions that shouldn't happen until "later" should generally also
// not happen before the first write call.
this.sync=true;// a flag to know if we're processing previously buffered items, which
// may call the _write() callback in the same tick, so that we don't
// end up in an overlapped onwrite situation.
this.bufferProcessing=false;// the callback that's passed to _write(chunk,cb)
this.onwrite=function(er){onwrite(stream,er);};// the callback that the user supplies to write(chunk,encoding,cb)
this.writecb=null;// the amount that is being written when _write is called.
this.writelen=0;this.bufferedRequest=null;this.lastBufferedRequest=null;// number of pending user-supplied write callbacks
// this must be 0 before 'finish' can be emitted
this.pendingcb=0;// emit prefinish if the only thing we're waiting for is _write cbs
// This is relevant for synchronous Transform streams
this.prefinished=false;// True if the error was already emitted and should not be thrown again
this.errorEmitted=false;// count buffered requests
this.bufferedRequestCount=0;// allocate the first CorkedRequest, there is always
// one allocated and free to use, and we maintain at most two
this.corkedRequestsFree=new CorkedRequest(this);}WritableState.prototype.getBuffer=function writableStateGetBuffer(){var current=this.bufferedRequest;var out=[];while(current){out.push(current);current=current.next;}return out;};function Writable(options){// Writable ctor is applied to Duplexes, though they're not
// instanceof Writable, they're instanceof Readable.
if(!(this instanceof Writable)&&!(this instanceof Duplex))return new Writable(options);this._writableState=new WritableState(options,this);// legacy.
this.writable=true;if(options){if(typeof options.write==='function')this._write=options.write;if(typeof options.writev==='function')this._writev=options.writev;}EventEmitter.call(this);}// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe=function(){this.emit('error',new Error('Cannot pipe, not readable'));};function writeAfterEnd(stream,cb){var er=new Error('write after end');// TODO: defer error events consistently everywhere, not just the cb
stream.emit('error',er);nextTick(cb,er);}// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream,state,chunk,cb){var valid=true;var er=false;// Always throw error if a null is written
// if we are not in object mode then throw
// if it is not a buffer, string, or undefined.
if(chunk===null){er=new TypeError('May not write null values to stream');}else if(!Buffer$1.isBuffer(chunk)&&typeof chunk!=='string'&&chunk!==undefined&&!state.objectMode){er=new TypeError('Invalid non-string/buffer chunk');}if(er){stream.emit('error',er);nextTick(cb,er);valid=false;}return valid;}Writable.prototype.write=function(chunk,encoding,cb){var state=this._writableState;var ret=false;if(typeof encoding==='function'){cb=encoding;encoding=null;}if(Buffer$1.isBuffer(chunk))encoding='buffer';else if(!encoding)encoding=state.defaultEncoding;if(typeof cb!=='function')cb=nop;if(state.ended)writeAfterEnd(this,cb);else if(validChunk(this,state,chunk,cb)){state.pendingcb++;ret=writeOrBuffer(this,state,chunk,encoding,cb);}return ret;};Writable.prototype.cork=function(){var state=this._writableState;state.corked++;};Writable.prototype.uncork=function(){var state=this._writableState;if(state.corked){state.corked--;if(!state.writing&&!state.corked&&!state.finished&&!state.bufferProcessing&&state.bufferedRequest)clearBuffer(this,state);}};Writable.prototype.setDefaultEncoding=function setDefaultEncoding(encoding){// node::ParseEncoding() requires lower case.
if(typeof encoding==='string')encoding=encoding.toLowerCase();if(!(['hex','utf8','utf-8','ascii','binary','base64','ucs2','ucs-2','utf16le','utf-16le','raw'].indexOf((encoding+'').toLowerCase())>-1))throw new TypeError('Unknown encoding: '+encoding);this._writableState.defaultEncoding=encoding;return this;};function decodeChunk(state,chunk,encoding){if(!state.objectMode&&state.decodeStrings!==false&&typeof chunk==='string'){chunk=Buffer$1.from(chunk,encoding);}return chunk;}// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream,state,chunk,encoding,cb){chunk=decodeChunk(state,chunk,encoding);if(Buffer$1.isBuffer(chunk))encoding='buffer';var len=state.objectMode?1:chunk.length;state.length+=len;var ret=state.length<state.highWaterMark;// we must ensure that previous needDrain will not be reset to false.
if(!ret)state.needDrain=true;if(state.writing||state.corked){var last=state.lastBufferedRequest;state.lastBufferedRequest=new WriteReq(chunk,encoding,cb);if(last){last.next=state.lastBufferedRequest;}else{state.bufferedRequest=state.lastBufferedRequest;}state.bufferedRequestCount+=1;}else{doWrite(stream,state,false,len,chunk,encoding,cb);}return ret;}function doWrite(stream,state,writev,len,chunk,encoding,cb){state.writelen=len;state.writecb=cb;state.writing=true;state.sync=true;if(writev)stream._writev(chunk,state.onwrite);else stream._write(chunk,encoding,state.onwrite);state.sync=false;}function onwriteError(stream,state,sync,er,cb){--state.pendingcb;if(sync)nextTick(cb,er);else cb(er);stream._writableState.errorEmitted=true;stream.emit('error',er);}function onwriteStateUpdate(state){state.writing=false;state.writecb=null;state.length-=state.writelen;state.writelen=0;}function onwrite(stream,er){var state=stream._writableState;var sync=state.sync;var cb=state.writecb;onwriteStateUpdate(state);if(er)onwriteError(stream,state,sync,er,cb);else{// Check if we're actually ready to finish, but don't emit yet
var finished=needFinish(state);if(!finished&&!state.corked&&!state.bufferProcessing&&state.bufferedRequest){clearBuffer(stream,state);}if(sync){/*<replacement>*/nextTick(afterWrite,stream,state,finished,cb);/*</replacement>*/}else{afterWrite(stream,state,finished,cb);}}}function afterWrite(stream,state,finished,cb){if(!finished)onwriteDrain(stream,state);state.pendingcb--;cb();finishMaybe(stream,state);}// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream,state){if(state.length===0&&state.needDrain){state.needDrain=false;stream.emit('drain');}}// if there's something in the buffer waiting, then process it
function clearBuffer(stream,state){state.bufferProcessing=true;var entry=state.bufferedRequest;if(stream._writev&&entry&&entry.next){// Fast case, write everything using _writev()
var l=state.bufferedRequestCount;var buffer=new Array(l);var holder=state.corkedRequestsFree;holder.entry=entry;var count=0;while(entry){buffer[count]=entry;entry=entry.next;count+=1;}doWrite(stream,state,true,state.length,buffer,'',holder.finish);// doWrite is almost always async, defer these to save a bit of time
// as the hot path ends with doWrite
state.pendingcb++;state.lastBufferedRequest=null;if(holder.next){state.corkedRequestsFree=holder.next;holder.next=null;}else{state.corkedRequestsFree=new CorkedRequest(state);}}else{// Slow case, write chunks one-by-one
while(entry){var chunk=entry.chunk;var encoding=entry.encoding;var cb=entry.callback;var len=state.objectMode?1:chunk.length;doWrite(stream,state,false,len,chunk,encoding,cb);entry=entry.next;// if we didn't call the onwrite immediately, then
// it means that we need to wait until it does.
// also, that means that the chunk and cb are currently
// being processed, so move the buffer counter past them.
if(state.writing){break;}}if(entry===null)state.lastBufferedRequest=null;}state.bufferedRequestCount=0;state.bufferedRequest=entry;state.bufferProcessing=false;}Writable.prototype._write=function(chunk,encoding,cb){cb(new Error('not implemented'));};Writable.prototype._writev=null;Writable.prototype.end=function(chunk,encoding,cb){var state=this._writableState;if(typeof chunk==='function'){cb=chunk;chunk=null;encoding=null;}else if(typeof encoding==='function'){cb=encoding;encoding=null;}if(chunk!==null&&chunk!==undefined)this.write(chunk,encoding);// .end() fully uncorks
if(state.corked){state.corked=1;this.uncork();}// ignore unnecessary end() calls.
if(!state.ending&&!state.finished)endWritable(this,state,cb);};function needFinish(state){return state.ending&&state.length===0&&state.bufferedRequest===null&&!state.finished&&!state.writing;}function prefinish(stream,state){if(!state.prefinished){state.prefinished=true;stream.emit('prefinish');}}function finishMaybe(stream,state){var need=needFinish(state);if(need){if(state.pendingcb===0){prefinish(stream,state);state.finished=true;stream.emit('finish');}else{prefinish(stream,state);}}return need;}function endWritable(stream,state,cb){state.ending=true;finishMaybe(stream,state);if(cb){if(state.finished)nextTick(cb);else stream.once('finish',cb);}state.ended=true;stream.writable=false;}// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state){var _this=this;this.next=null;this.entry=null;this.finish=function(err){var entry=_this.entry;_this.entry=null;while(entry){var cb=entry.callback;state.pendingcb--;cb(err);entry=entry.next;}if(state.corkedRequestsFree){state.corkedRequestsFree.next=_this;}else{state.corkedRequestsFree=_this;}};}inherits$2(Duplex,Readable);var keys=Object.keys(Writable.prototype);for(var v=0;v<keys.length;v++){var method=keys[v];if(!Duplex.prototype[method])Duplex.prototype[method]=Writable.prototype[method];}function Duplex(options){if(!(this instanceof Duplex))return new Duplex(options);Readable.call(this,options);Writable.call(this,options);if(options&&options.readable===false)this.readable=false;if(options&&options.writable===false)this.writable=false;this.allowHalfOpen=true;if(options&&options.allowHalfOpen===false)this.allowHalfOpen=false;this.once('end',onend);}// the no-half-open enforcer
function onend(){// if we allow half-open state, or if the writable side ended,
// then we're ok.
if(this.allowHalfOpen||this._writableState.ended)return;// no more data can be written.
// But allow more writes to happen in this tick.
nextTick(onEndNT,this);}function onEndNT(self){self.end();}// a transform stream is a readable/writable stream where you do
inherits$2(Transform,Duplex);function TransformState(stream){this.afterTransform=function(er,data){return afterTransform(stream,er,data);};this.needTransform=false;this.transforming=false;this.writecb=null;this.writechunk=null;this.writeencoding=null;}function afterTransform(stream,er,data){var ts=stream._transformState;ts.transforming=false;var cb=ts.writecb;if(!cb)return stream.emit('error',new Error('no writecb in Transform class'));ts.writechunk=null;ts.writecb=null;if(data!==null&&data!==undefined)stream.push(data);cb(er);var rs=stream._readableState;rs.reading=false;if(rs.needReadable||rs.length<rs.highWaterMark){stream._read(rs.highWaterMark);}}function Transform(options){if(!(this instanceof Transform))return new Transform(options);Duplex.call(this,options);this._transformState=new TransformState(this);// when the writable side finishes, then flush out anything remaining.
var stream=this;// start out asking for a readable event once data is transformed.
this._readableState.needReadable=true;// we have implemented the _read method, and done the other things
// that Readable wants before the first _read call, so unset the
// sync guard flag.
this._readableState.sync=false;if(options){if(typeof options.transform==='function')this._transform=options.transform;if(typeof options.flush==='function')this._flush=options.flush;}this.once('prefinish',function(){if(typeof this._flush==='function')this._flush(function(er){done(stream,er);});else done(stream);});}Transform.prototype.push=function(chunk,encoding){this._transformState.needTransform=false;return Duplex.prototype.push.call(this,chunk,encoding);};// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform=function(chunk,encoding,cb){throw new Error('Not implemented');};Transform.prototype._write=function(chunk,encoding,cb){var ts=this._transformState;ts.writecb=cb;ts.writechunk=chunk;ts.writeencoding=encoding;if(!ts.transforming){var rs=this._readableState;if(ts.needTransform||rs.needReadable||rs.length<rs.highWaterMark)this._read(rs.highWaterMark);}};// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read=function(n){var ts=this._transformState;if(ts.writechunk!==null&&ts.writecb&&!ts.transforming){ts.transforming=true;this._transform(ts.writechunk,ts.writeencoding,ts.afterTransform);}else{// mark that we need a transform, so that any data that comes in
// will get processed, now that we've asked for it.
ts.needTransform=true;}};function done(stream,er){if(er)return stream.emit('error',er);// if there's nothing in the write buffer, then that means
// that nothing more will ever be provided
var ws=stream._writableState;var ts=stream._transformState;if(ws.length)throw new Error('Calling transform done when ws.length != 0');if(ts.transforming)throw new Error('Calling transform done when still transforming');return stream.push(null);}inherits$2(PassThrough,Transform);function PassThrough(options){if(!(this instanceof PassThrough))return new PassThrough(options);Transform.call(this,options);}PassThrough.prototype._transform=function(chunk,encoding,cb){cb(null,chunk);};inherits$2(Stream,EventEmitter);Stream.Readable=Readable;Stream.Writable=Writable;Stream.Duplex=Duplex;Stream.Transform=Transform;Stream.PassThrough=PassThrough;// Backwards-compat with node 0.4.x
Stream.Stream=Stream;// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.
function Stream(){EventEmitter.call(this);}Stream.prototype.pipe=function(dest,options){var source=this;function ondata(chunk){if(dest.writable){if(false===dest.write(chunk)&&source.pause){source.pause();}}}source.on('data',ondata);function ondrain(){if(source.readable&&source.resume){source.resume();}}dest.on('drain',ondrain);// If the 'end' option is not supplied, dest.end() will be called when
// source gets the 'end' or 'close' events.  Only dest.end() once.
if(!dest._isStdio&&(!options||options.end!==false)){source.on('end',onend);source.on('close',onclose);}var didOnEnd=false;function onend(){if(didOnEnd)return;didOnEnd=true;dest.end();}function onclose(){if(didOnEnd)return;didOnEnd=true;if(typeof dest.destroy==='function')dest.destroy();}// don't leave dangling pipes when there are errors.
function onerror(er){cleanup();if(EventEmitter.listenerCount(this,'error')===0){throw er;// Unhandled stream error in pipe.
}}source.on('error',onerror);dest.on('error',onerror);// remove all the event listeners that were added.
function cleanup(){source.removeListener('data',ondata);dest.removeListener('drain',ondrain);source.removeListener('end',onend);source.removeListener('close',onclose);source.removeListener('error',onerror);dest.removeListener('error',onerror);source.removeListener('end',cleanup);source.removeListener('close',cleanup);dest.removeListener('close',cleanup);}source.on('end',cleanup);source.on('close',cleanup);dest.on('close',cleanup);dest.emit('pipe',source);// Allow for unix-like usage: A.pipe(B).pipe(C)
return dest;};var stream=/*#__PURE__*/Object.freeze({default:Stream,Readable:Readable,Writable:Writable,Duplex:Duplex,Transform:Transform,PassThrough:PassThrough,Stream:Stream});var require$$1=stream&&Stream||stream;var Buffer$3=safeBuffer.Buffer;var Transform$1=require$$1.Transform;function throwIfNotStringOrBuffer(val,prefix){if(!Buffer$3.isBuffer(val)&&typeof val!=='string'){throw new TypeError(prefix+' must be a string or a buffer');}}function HashBase(blockSize){Transform$1.call(this);this._block=Buffer$3.allocUnsafe(blockSize);this._blockSize=blockSize;this._blockOffset=0;this._length=[0,0,0,0];this._finalized=false;}inherits_browser(HashBase,Transform$1);HashBase.prototype._transform=function(chunk,encoding,callback){var error=null;try{this.update(chunk,encoding);}catch(err){error=err;}callback(error);};HashBase.prototype._flush=function(callback){var error=null;try{this.push(this.digest());}catch(err){error=err;}callback(error);};HashBase.prototype.update=function(data,encoding){throwIfNotStringOrBuffer(data,'Data');if(this._finalized)throw new Error('Digest already called');if(!Buffer$3.isBuffer(data))data=Buffer$3.from(data,encoding);// consume data
var block=this._block;var offset=0;while(this._blockOffset+data.length-offset>=this._blockSize){for(var i=this._blockOffset;i<this._blockSize;){block[i++]=data[offset++];}this._update();this._blockOffset=0;}while(offset<data.length){block[this._blockOffset++]=data[offset++];}// update length
for(var j=0,carry=data.length*8;carry>0;++j){this._length[j]+=carry;carry=this._length[j]/0x0100000000|0;if(carry>0)this._length[j]-=0x0100000000*carry;}return this;};HashBase.prototype._update=function(){throw new Error('_update is not implemented');};HashBase.prototype.digest=function(encoding){if(this._finalized)throw new Error('Digest already called');this._finalized=true;var digest=this._digest();if(encoding!==undefined)digest=digest.toString(encoding);// reset state
this._block.fill(0);this._blockOffset=0;for(var i=0;i<4;++i){this._length[i]=0;}return digest;};HashBase.prototype._digest=function(){throw new Error('_digest is not implemented');};var hashBase=HashBase;var ARRAY16=new Array(16);function MD5(){hashBase.call(this,64);// state
this._a=0x67452301;this._b=0xefcdab89;this._c=0x98badcfe;this._d=0x10325476;}inherits_browser(MD5,hashBase);MD5.prototype._update=function(){var M=ARRAY16;for(var i=0;i<16;++i){M[i]=this._block.readInt32LE(i*4);}var a=this._a;var b=this._b;var c=this._c;var d=this._d;a=fnF(a,b,c,d,M[0],0xd76aa478,7);d=fnF(d,a,b,c,M[1],0xe8c7b756,12);c=fnF(c,d,a,b,M[2],0x242070db,17);b=fnF(b,c,d,a,M[3],0xc1bdceee,22);a=fnF(a,b,c,d,M[4],0xf57c0faf,7);d=fnF(d,a,b,c,M[5],0x4787c62a,12);c=fnF(c,d,a,b,M[6],0xa8304613,17);b=fnF(b,c,d,a,M[7],0xfd469501,22);a=fnF(a,b,c,d,M[8],0x698098d8,7);d=fnF(d,a,b,c,M[9],0x8b44f7af,12);c=fnF(c,d,a,b,M[10],0xffff5bb1,17);b=fnF(b,c,d,a,M[11],0x895cd7be,22);a=fnF(a,b,c,d,M[12],0x6b901122,7);d=fnF(d,a,b,c,M[13],0xfd987193,12);c=fnF(c,d,a,b,M[14],0xa679438e,17);b=fnF(b,c,d,a,M[15],0x49b40821,22);a=fnG(a,b,c,d,M[1],0xf61e2562,5);d=fnG(d,a,b,c,M[6],0xc040b340,9);c=fnG(c,d,a,b,M[11],0x265e5a51,14);b=fnG(b,c,d,a,M[0],0xe9b6c7aa,20);a=fnG(a,b,c,d,M[5],0xd62f105d,5);d=fnG(d,a,b,c,M[10],0x02441453,9);c=fnG(c,d,a,b,M[15],0xd8a1e681,14);b=fnG(b,c,d,a,M[4],0xe7d3fbc8,20);a=fnG(a,b,c,d,M[9],0x21e1cde6,5);d=fnG(d,a,b,c,M[14],0xc33707d6,9);c=fnG(c,d,a,b,M[3],0xf4d50d87,14);b=fnG(b,c,d,a,M[8],0x455a14ed,20);a=fnG(a,b,c,d,M[13],0xa9e3e905,5);d=fnG(d,a,b,c,M[2],0xfcefa3f8,9);c=fnG(c,d,a,b,M[7],0x676f02d9,14);b=fnG(b,c,d,a,M[12],0x8d2a4c8a,20);a=fnH(a,b,c,d,M[5],0xfffa3942,4);d=fnH(d,a,b,c,M[8],0x8771f681,11);c=fnH(c,d,a,b,M[11],0x6d9d6122,16);b=fnH(b,c,d,a,M[14],0xfde5380c,23);a=fnH(a,b,c,d,M[1],0xa4beea44,4);d=fnH(d,a,b,c,M[4],0x4bdecfa9,11);c=fnH(c,d,a,b,M[7],0xf6bb4b60,16);b=fnH(b,c,d,a,M[10],0xbebfbc70,23);a=fnH(a,b,c,d,M[13],0x289b7ec6,4);d=fnH(d,a,b,c,M[0],0xeaa127fa,11);c=fnH(c,d,a,b,M[3],0xd4ef3085,16);b=fnH(b,c,d,a,M[6],0x04881d05,23);a=fnH(a,b,c,d,M[9],0xd9d4d039,4);d=fnH(d,a,b,c,M[12],0xe6db99e5,11);c=fnH(c,d,a,b,M[15],0x1fa27cf8,16);b=fnH(b,c,d,a,M[2],0xc4ac5665,23);a=fnI(a,b,c,d,M[0],0xf4292244,6);d=fnI(d,a,b,c,M[7],0x432aff97,10);c=fnI(c,d,a,b,M[14],0xab9423a7,15);b=fnI(b,c,d,a,M[5],0xfc93a039,21);a=fnI(a,b,c,d,M[12],0x655b59c3,6);d=fnI(d,a,b,c,M[3],0x8f0ccc92,10);c=fnI(c,d,a,b,M[10],0xffeff47d,15);b=fnI(b,c,d,a,M[1],0x85845dd1,21);a=fnI(a,b,c,d,M[8],0x6fa87e4f,6);d=fnI(d,a,b,c,M[15],0xfe2ce6e0,10);c=fnI(c,d,a,b,M[6],0xa3014314,15);b=fnI(b,c,d,a,M[13],0x4e0811a1,21);a=fnI(a,b,c,d,M[4],0xf7537e82,6);d=fnI(d,a,b,c,M[11],0xbd3af235,10);c=fnI(c,d,a,b,M[2],0x2ad7d2bb,15);b=fnI(b,c,d,a,M[9],0xeb86d391,21);this._a=this._a+a|0;this._b=this._b+b|0;this._c=this._c+c|0;this._d=this._d+d|0;};MD5.prototype._digest=function(){// create padding and handle blocks
this._block[this._blockOffset++]=0x80;if(this._blockOffset>56){this._block.fill(0,this._blockOffset,64);this._update();this._blockOffset=0;}this._block.fill(0,this._blockOffset,56);this._block.writeUInt32LE(this._length[0],56);this._block.writeUInt32LE(this._length[1],60);this._update();// produce result
var buffer=new Buffer$1(16);buffer.writeInt32LE(this._a,0);buffer.writeInt32LE(this._b,4);buffer.writeInt32LE(this._c,8);buffer.writeInt32LE(this._d,12);return buffer;};function rotl(x,n){return x<<n|x>>>32-n;}function fnF(a,b,c,d,m,k,s){return rotl(a+(b&c|~b&d)+m+k|0,s)+b|0;}function fnG(a,b,c,d,m,k,s){return rotl(a+(b&d|c&~d)+m+k|0,s)+b|0;}function fnH(a,b,c,d,m,k,s){return rotl(a+(b^c^d)+m+k|0,s)+b|0;}function fnI(a,b,c,d,m,k,s){return rotl(a+(c^(b|~d))+m+k|0,s)+b|0;}var md5_js=MD5;var Buffer$4=bufferEs6.Buffer;var ARRAY16$1=new Array(16);var zl=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13];var zr=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11];var sl=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6];var sr=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11];var hl=[0x00000000,0x5a827999,0x6ed9eba1,0x8f1bbcdc,0xa953fd4e];var hr=[0x50a28be6,0x5c4dd124,0x6d703ef3,0x7a6d76e9,0x00000000];function RIPEMD160(){hashBase.call(this,64);// state
this._a=0x67452301;this._b=0xefcdab89;this._c=0x98badcfe;this._d=0x10325476;this._e=0xc3d2e1f0;}inherits_browser(RIPEMD160,hashBase);RIPEMD160.prototype._update=function(){var words=ARRAY16$1;for(var j=0;j<16;++j){words[j]=this._block.readInt32LE(j*4);}var al=this._a|0;var bl=this._b|0;var cl=this._c|0;var dl=this._d|0;var el=this._e|0;var ar=this._a|0;var br=this._b|0;var cr=this._c|0;var dr=this._d|0;var er=this._e|0;// computation
for(var i=0;i<80;i+=1){var tl;var tr;if(i<16){tl=fn1(al,bl,cl,dl,el,words[zl[i]],hl[0],sl[i]);tr=fn5(ar,br,cr,dr,er,words[zr[i]],hr[0],sr[i]);}else if(i<32){tl=fn2(al,bl,cl,dl,el,words[zl[i]],hl[1],sl[i]);tr=fn4(ar,br,cr,dr,er,words[zr[i]],hr[1],sr[i]);}else if(i<48){tl=fn3(al,bl,cl,dl,el,words[zl[i]],hl[2],sl[i]);tr=fn3(ar,br,cr,dr,er,words[zr[i]],hr[2],sr[i]);}else if(i<64){tl=fn4(al,bl,cl,dl,el,words[zl[i]],hl[3],sl[i]);tr=fn2(ar,br,cr,dr,er,words[zr[i]],hr[3],sr[i]);}else{// if (i<80) {
tl=fn5(al,bl,cl,dl,el,words[zl[i]],hl[4],sl[i]);tr=fn1(ar,br,cr,dr,er,words[zr[i]],hr[4],sr[i]);}al=el;el=dl;dl=rotl$1(cl,10);cl=bl;bl=tl;ar=er;er=dr;dr=rotl$1(cr,10);cr=br;br=tr;}// update state
var t=this._b+cl+dr|0;this._b=this._c+dl+er|0;this._c=this._d+el+ar|0;this._d=this._e+al+br|0;this._e=this._a+bl+cr|0;this._a=t;};RIPEMD160.prototype._digest=function(){// create padding and handle blocks
this._block[this._blockOffset++]=0x80;if(this._blockOffset>56){this._block.fill(0,this._blockOffset,64);this._update();this._blockOffset=0;}this._block.fill(0,this._blockOffset,56);this._block.writeUInt32LE(this._length[0],56);this._block.writeUInt32LE(this._length[1],60);this._update();// produce result
var buffer=Buffer$4.alloc?Buffer$4.alloc(20):new Buffer$4(20);buffer.writeInt32LE(this._a,0);buffer.writeInt32LE(this._b,4);buffer.writeInt32LE(this._c,8);buffer.writeInt32LE(this._d,12);buffer.writeInt32LE(this._e,16);return buffer;};function rotl$1(x,n){return x<<n|x>>>32-n;}function fn1(a,b,c,d,e,m,k,s){return rotl$1(a+(b^c^d)+m+k|0,s)+e|0;}function fn2(a,b,c,d,e,m,k,s){return rotl$1(a+(b&c|~b&d)+m+k|0,s)+e|0;}function fn3(a,b,c,d,e,m,k,s){return rotl$1(a+((b|~c)^d)+m+k|0,s)+e|0;}function fn4(a,b,c,d,e,m,k,s){return rotl$1(a+(b&d|c&~d)+m+k|0,s)+e|0;}function fn5(a,b,c,d,e,m,k,s){return rotl$1(a+(b^(c|~d))+m+k|0,s)+e|0;}var ripemd160=RIPEMD160;var Buffer$5=safeBuffer.Buffer;// prototype class for hash functions
function Hash(blockSize,finalSize){this._block=Buffer$5.alloc(blockSize);this._finalSize=finalSize;this._blockSize=blockSize;this._len=0;}Hash.prototype.update=function(data,enc){if(typeof data==='string'){enc=enc||'utf8';data=Buffer$5.from(data,enc);}var block=this._block;var blockSize=this._blockSize;var length=data.length;var accum=this._len;for(var offset=0;offset<length;){var assigned=accum%blockSize;var remainder=Math.min(length-offset,blockSize-assigned);for(var i=0;i<remainder;i++){block[assigned+i]=data[offset+i];}accum+=remainder;offset+=remainder;if(accum%blockSize===0){this._update(block);}}this._len+=length;return this;};Hash.prototype.digest=function(enc){var rem=this._len%this._blockSize;this._block[rem]=0x80;// zero (rem + 1) trailing bits, where (rem + 1) is the smallest
// non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
this._block.fill(0,rem+1);if(rem>=this._finalSize){this._update(this._block);this._block.fill(0);}var bits=this._len*8;// uint32
if(bits<=0xffffffff){this._block.writeUInt32BE(bits,this._blockSize-4);// uint64
}else{var lowBits=(bits&0xffffffff)>>>0;var highBits=(bits-lowBits)/0x100000000;this._block.writeUInt32BE(highBits,this._blockSize-8);this._block.writeUInt32BE(lowBits,this._blockSize-4);}this._update(this._block);var hash=this._hash();return enc?hash.toString(enc):hash;};Hash.prototype._update=function(){throw new Error('_update must be implemented by subclass');};var hash=Hash;/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
	 * in FIPS PUB 180-1
	 * This source code is derived from sha1.js of the same repository.
	 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
	 * operation was added.
	 */var Buffer$6=safeBuffer.Buffer;var K=[0x5a827999,0x6ed9eba1,0x8f1bbcdc|0,0xca62c1d6|0];var W=new Array(80);function Sha(){this.init();this._w=W;hash.call(this,64,56);}inherits_browser(Sha,hash);Sha.prototype.init=function(){this._a=0x67452301;this._b=0xefcdab89;this._c=0x98badcfe;this._d=0x10325476;this._e=0xc3d2e1f0;return this;};function rotl5(num){return num<<5|num>>>27;}function rotl30(num){return num<<30|num>>>2;}function ft(s,b,c,d){if(s===0)return b&c|~b&d;if(s===2)return b&c|b&d|c&d;return b^c^d;}Sha.prototype._update=function(M){var W=this._w;var a=this._a|0;var b=this._b|0;var c=this._c|0;var d=this._d|0;var e=this._e|0;for(var i=0;i<16;++i){W[i]=M.readInt32BE(i*4);}for(;i<80;++i){W[i]=W[i-3]^W[i-8]^W[i-14]^W[i-16];}for(var j=0;j<80;++j){var s=~~(j/20);var t=rotl5(a)+ft(s,b,c,d)+e+W[j]+K[s]|0;e=d;d=c;c=rotl30(b);b=a;a=t;}this._a=a+this._a|0;this._b=b+this._b|0;this._c=c+this._c|0;this._d=d+this._d|0;this._e=e+this._e|0;};Sha.prototype._hash=function(){var H=Buffer$6.allocUnsafe(20);H.writeInt32BE(this._a|0,0);H.writeInt32BE(this._b|0,4);H.writeInt32BE(this._c|0,8);H.writeInt32BE(this._d|0,12);H.writeInt32BE(this._e|0,16);return H;};var sha=Sha;/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */var Buffer$7=safeBuffer.Buffer;var K$1=[0x5a827999,0x6ed9eba1,0x8f1bbcdc|0,0xca62c1d6|0];var W$1=new Array(80);function Sha1(){this.init();this._w=W$1;hash.call(this,64,56);}inherits_browser(Sha1,hash);Sha1.prototype.init=function(){this._a=0x67452301;this._b=0xefcdab89;this._c=0x98badcfe;this._d=0x10325476;this._e=0xc3d2e1f0;return this;};function rotl1(num){return num<<1|num>>>31;}function rotl5$1(num){return num<<5|num>>>27;}function rotl30$1(num){return num<<30|num>>>2;}function ft$1(s,b,c,d){if(s===0)return b&c|~b&d;if(s===2)return b&c|b&d|c&d;return b^c^d;}Sha1.prototype._update=function(M){var W=this._w;var a=this._a|0;var b=this._b|0;var c=this._c|0;var d=this._d|0;var e=this._e|0;for(var i=0;i<16;++i){W[i]=M.readInt32BE(i*4);}for(;i<80;++i){W[i]=rotl1(W[i-3]^W[i-8]^W[i-14]^W[i-16]);}for(var j=0;j<80;++j){var s=~~(j/20);var t=rotl5$1(a)+ft$1(s,b,c,d)+e+W[j]+K$1[s]|0;e=d;d=c;c=rotl30$1(b);b=a;a=t;}this._a=a+this._a|0;this._b=b+this._b|0;this._c=c+this._c|0;this._d=d+this._d|0;this._e=e+this._e|0;};Sha1.prototype._hash=function(){var H=Buffer$7.allocUnsafe(20);H.writeInt32BE(this._a|0,0);H.writeInt32BE(this._b|0,4);H.writeInt32BE(this._c|0,8);H.writeInt32BE(this._d|0,12);H.writeInt32BE(this._e|0,16);return H;};var sha1=Sha1;/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */var Buffer$8=safeBuffer.Buffer;var K$2=[0x428A2F98,0x71374491,0xB5C0FBCF,0xE9B5DBA5,0x3956C25B,0x59F111F1,0x923F82A4,0xAB1C5ED5,0xD807AA98,0x12835B01,0x243185BE,0x550C7DC3,0x72BE5D74,0x80DEB1FE,0x9BDC06A7,0xC19BF174,0xE49B69C1,0xEFBE4786,0x0FC19DC6,0x240CA1CC,0x2DE92C6F,0x4A7484AA,0x5CB0A9DC,0x76F988DA,0x983E5152,0xA831C66D,0xB00327C8,0xBF597FC7,0xC6E00BF3,0xD5A79147,0x06CA6351,0x14292967,0x27B70A85,0x2E1B2138,0x4D2C6DFC,0x53380D13,0x650A7354,0x766A0ABB,0x81C2C92E,0x92722C85,0xA2BFE8A1,0xA81A664B,0xC24B8B70,0xC76C51A3,0xD192E819,0xD6990624,0xF40E3585,0x106AA070,0x19A4C116,0x1E376C08,0x2748774C,0x34B0BCB5,0x391C0CB3,0x4ED8AA4A,0x5B9CCA4F,0x682E6FF3,0x748F82EE,0x78A5636F,0x84C87814,0x8CC70208,0x90BEFFFA,0xA4506CEB,0xBEF9A3F7,0xC67178F2];var W$2=new Array(64);function Sha256(){this.init();this._w=W$2;// new Array(64)
hash.call(this,64,56);}inherits_browser(Sha256,hash);Sha256.prototype.init=function(){this._a=0x6a09e667;this._b=0xbb67ae85;this._c=0x3c6ef372;this._d=0xa54ff53a;this._e=0x510e527f;this._f=0x9b05688c;this._g=0x1f83d9ab;this._h=0x5be0cd19;return this;};function ch(x,y,z){return z^x&(y^z);}function maj(x,y,z){return x&y|z&(x|y);}function sigma0(x){return(x>>>2|x<<30)^(x>>>13|x<<19)^(x>>>22|x<<10);}function sigma1(x){return(x>>>6|x<<26)^(x>>>11|x<<21)^(x>>>25|x<<7);}function gamma0(x){return(x>>>7|x<<25)^(x>>>18|x<<14)^x>>>3;}function gamma1(x){return(x>>>17|x<<15)^(x>>>19|x<<13)^x>>>10;}Sha256.prototype._update=function(M){var W=this._w;var a=this._a|0;var b=this._b|0;var c=this._c|0;var d=this._d|0;var e=this._e|0;var f=this._f|0;var g=this._g|0;var h=this._h|0;for(var i=0;i<16;++i){W[i]=M.readInt32BE(i*4);}for(;i<64;++i){W[i]=gamma1(W[i-2])+W[i-7]+gamma0(W[i-15])+W[i-16]|0;}for(var j=0;j<64;++j){var T1=h+sigma1(e)+ch(e,f,g)+K$2[j]+W[j]|0;var T2=sigma0(a)+maj(a,b,c)|0;h=g;g=f;f=e;e=d+T1|0;d=c;c=b;b=a;a=T1+T2|0;}this._a=a+this._a|0;this._b=b+this._b|0;this._c=c+this._c|0;this._d=d+this._d|0;this._e=e+this._e|0;this._f=f+this._f|0;this._g=g+this._g|0;this._h=h+this._h|0;};Sha256.prototype._hash=function(){var H=Buffer$8.allocUnsafe(32);H.writeInt32BE(this._a,0);H.writeInt32BE(this._b,4);H.writeInt32BE(this._c,8);H.writeInt32BE(this._d,12);H.writeInt32BE(this._e,16);H.writeInt32BE(this._f,20);H.writeInt32BE(this._g,24);H.writeInt32BE(this._h,28);return H;};var sha256=Sha256;/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */var Buffer$9=safeBuffer.Buffer;var W$3=new Array(64);function Sha224(){this.init();this._w=W$3;// new Array(64)
hash.call(this,64,56);}inherits_browser(Sha224,sha256);Sha224.prototype.init=function(){this._a=0xc1059ed8;this._b=0x367cd507;this._c=0x3070dd17;this._d=0xf70e5939;this._e=0xffc00b31;this._f=0x68581511;this._g=0x64f98fa7;this._h=0xbefa4fa4;return this;};Sha224.prototype._hash=function(){var H=Buffer$9.allocUnsafe(28);H.writeInt32BE(this._a,0);H.writeInt32BE(this._b,4);H.writeInt32BE(this._c,8);H.writeInt32BE(this._d,12);H.writeInt32BE(this._e,16);H.writeInt32BE(this._f,20);H.writeInt32BE(this._g,24);return H;};var sha224=Sha224;var Buffer$a=safeBuffer.Buffer;var K$3=[0x428a2f98,0xd728ae22,0x71374491,0x23ef65cd,0xb5c0fbcf,0xec4d3b2f,0xe9b5dba5,0x8189dbbc,0x3956c25b,0xf348b538,0x59f111f1,0xb605d019,0x923f82a4,0xaf194f9b,0xab1c5ed5,0xda6d8118,0xd807aa98,0xa3030242,0x12835b01,0x45706fbe,0x243185be,0x4ee4b28c,0x550c7dc3,0xd5ffb4e2,0x72be5d74,0xf27b896f,0x80deb1fe,0x3b1696b1,0x9bdc06a7,0x25c71235,0xc19bf174,0xcf692694,0xe49b69c1,0x9ef14ad2,0xefbe4786,0x384f25e3,0x0fc19dc6,0x8b8cd5b5,0x240ca1cc,0x77ac9c65,0x2de92c6f,0x592b0275,0x4a7484aa,0x6ea6e483,0x5cb0a9dc,0xbd41fbd4,0x76f988da,0x831153b5,0x983e5152,0xee66dfab,0xa831c66d,0x2db43210,0xb00327c8,0x98fb213f,0xbf597fc7,0xbeef0ee4,0xc6e00bf3,0x3da88fc2,0xd5a79147,0x930aa725,0x06ca6351,0xe003826f,0x14292967,0x0a0e6e70,0x27b70a85,0x46d22ffc,0x2e1b2138,0x5c26c926,0x4d2c6dfc,0x5ac42aed,0x53380d13,0x9d95b3df,0x650a7354,0x8baf63de,0x766a0abb,0x3c77b2a8,0x81c2c92e,0x47edaee6,0x92722c85,0x1482353b,0xa2bfe8a1,0x4cf10364,0xa81a664b,0xbc423001,0xc24b8b70,0xd0f89791,0xc76c51a3,0x0654be30,0xd192e819,0xd6ef5218,0xd6990624,0x5565a910,0xf40e3585,0x5771202a,0x106aa070,0x32bbd1b8,0x19a4c116,0xb8d2d0c8,0x1e376c08,0x5141ab53,0x2748774c,0xdf8eeb99,0x34b0bcb5,0xe19b48a8,0x391c0cb3,0xc5c95a63,0x4ed8aa4a,0xe3418acb,0x5b9cca4f,0x7763e373,0x682e6ff3,0xd6b2b8a3,0x748f82ee,0x5defb2fc,0x78a5636f,0x43172f60,0x84c87814,0xa1f0ab72,0x8cc70208,0x1a6439ec,0x90befffa,0x23631e28,0xa4506ceb,0xde82bde9,0xbef9a3f7,0xb2c67915,0xc67178f2,0xe372532b,0xca273ece,0xea26619c,0xd186b8c7,0x21c0c207,0xeada7dd6,0xcde0eb1e,0xf57d4f7f,0xee6ed178,0x06f067aa,0x72176fba,0x0a637dc5,0xa2c898a6,0x113f9804,0xbef90dae,0x1b710b35,0x131c471b,0x28db77f5,0x23047d84,0x32caab7b,0x40c72493,0x3c9ebe0a,0x15c9bebc,0x431d67c4,0x9c100d4c,0x4cc5d4be,0xcb3e42b6,0x597f299c,0xfc657e2a,0x5fcb6fab,0x3ad6faec,0x6c44198c,0x4a475817];var W$4=new Array(160);function Sha512(){this.init();this._w=W$4;hash.call(this,128,112);}inherits_browser(Sha512,hash);Sha512.prototype.init=function(){this._ah=0x6a09e667;this._bh=0xbb67ae85;this._ch=0x3c6ef372;this._dh=0xa54ff53a;this._eh=0x510e527f;this._fh=0x9b05688c;this._gh=0x1f83d9ab;this._hh=0x5be0cd19;this._al=0xf3bcc908;this._bl=0x84caa73b;this._cl=0xfe94f82b;this._dl=0x5f1d36f1;this._el=0xade682d1;this._fl=0x2b3e6c1f;this._gl=0xfb41bd6b;this._hl=0x137e2179;return this;};function Ch(x,y,z){return z^x&(y^z);}function maj$1(x,y,z){return x&y|z&(x|y);}function sigma0$1(x,xl){return(x>>>28|xl<<4)^(xl>>>2|x<<30)^(xl>>>7|x<<25);}function sigma1$1(x,xl){return(x>>>14|xl<<18)^(x>>>18|xl<<14)^(xl>>>9|x<<23);}function Gamma0(x,xl){return(x>>>1|xl<<31)^(x>>>8|xl<<24)^x>>>7;}function Gamma0l(x,xl){return(x>>>1|xl<<31)^(x>>>8|xl<<24)^(x>>>7|xl<<25);}function Gamma1(x,xl){return(x>>>19|xl<<13)^(xl>>>29|x<<3)^x>>>6;}function Gamma1l(x,xl){return(x>>>19|xl<<13)^(xl>>>29|x<<3)^(x>>>6|xl<<26);}function getCarry(a,b){return a>>>0<b>>>0?1:0;}Sha512.prototype._update=function(M){var W=this._w;var ah=this._ah|0;var bh=this._bh|0;var ch=this._ch|0;var dh=this._dh|0;var eh=this._eh|0;var fh=this._fh|0;var gh=this._gh|0;var hh=this._hh|0;var al=this._al|0;var bl=this._bl|0;var cl=this._cl|0;var dl=this._dl|0;var el=this._el|0;var fl=this._fl|0;var gl=this._gl|0;var hl=this._hl|0;for(var i=0;i<32;i+=2){W[i]=M.readInt32BE(i*4);W[i+1]=M.readInt32BE(i*4+4);}for(;i<160;i+=2){var xh=W[i-15*2];var xl=W[i-15*2+1];var gamma0=Gamma0(xh,xl);var gamma0l=Gamma0l(xl,xh);xh=W[i-2*2];xl=W[i-2*2+1];var gamma1=Gamma1(xh,xl);var gamma1l=Gamma1l(xl,xh);// W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
var Wi7h=W[i-7*2];var Wi7l=W[i-7*2+1];var Wi16h=W[i-16*2];var Wi16l=W[i-16*2+1];var Wil=gamma0l+Wi7l|0;var Wih=gamma0+Wi7h+getCarry(Wil,gamma0l)|0;Wil=Wil+gamma1l|0;Wih=Wih+gamma1+getCarry(Wil,gamma1l)|0;Wil=Wil+Wi16l|0;Wih=Wih+Wi16h+getCarry(Wil,Wi16l)|0;W[i]=Wih;W[i+1]=Wil;}for(var j=0;j<160;j+=2){Wih=W[j];Wil=W[j+1];var majh=maj$1(ah,bh,ch);var majl=maj$1(al,bl,cl);var sigma0h=sigma0$1(ah,al);var sigma0l=sigma0$1(al,ah);var sigma1h=sigma1$1(eh,el);var sigma1l=sigma1$1(el,eh);// t1 = h + sigma1 + ch + K[j] + W[j]
var Kih=K$3[j];var Kil=K$3[j+1];var chh=Ch(eh,fh,gh);var chl=Ch(el,fl,gl);var t1l=hl+sigma1l|0;var t1h=hh+sigma1h+getCarry(t1l,hl)|0;t1l=t1l+chl|0;t1h=t1h+chh+getCarry(t1l,chl)|0;t1l=t1l+Kil|0;t1h=t1h+Kih+getCarry(t1l,Kil)|0;t1l=t1l+Wil|0;t1h=t1h+Wih+getCarry(t1l,Wil)|0;// t2 = sigma0 + maj
var t2l=sigma0l+majl|0;var t2h=sigma0h+majh+getCarry(t2l,sigma0l)|0;hh=gh;hl=gl;gh=fh;gl=fl;fh=eh;fl=el;el=dl+t1l|0;eh=dh+t1h+getCarry(el,dl)|0;dh=ch;dl=cl;ch=bh;cl=bl;bh=ah;bl=al;al=t1l+t2l|0;ah=t1h+t2h+getCarry(al,t1l)|0;}this._al=this._al+al|0;this._bl=this._bl+bl|0;this._cl=this._cl+cl|0;this._dl=this._dl+dl|0;this._el=this._el+el|0;this._fl=this._fl+fl|0;this._gl=this._gl+gl|0;this._hl=this._hl+hl|0;this._ah=this._ah+ah+getCarry(this._al,al)|0;this._bh=this._bh+bh+getCarry(this._bl,bl)|0;this._ch=this._ch+ch+getCarry(this._cl,cl)|0;this._dh=this._dh+dh+getCarry(this._dl,dl)|0;this._eh=this._eh+eh+getCarry(this._el,el)|0;this._fh=this._fh+fh+getCarry(this._fl,fl)|0;this._gh=this._gh+gh+getCarry(this._gl,gl)|0;this._hh=this._hh+hh+getCarry(this._hl,hl)|0;};Sha512.prototype._hash=function(){var H=Buffer$a.allocUnsafe(64);function writeInt64BE(h,l,offset){H.writeInt32BE(h,offset);H.writeInt32BE(l,offset+4);}writeInt64BE(this._ah,this._al,0);writeInt64BE(this._bh,this._bl,8);writeInt64BE(this._ch,this._cl,16);writeInt64BE(this._dh,this._dl,24);writeInt64BE(this._eh,this._el,32);writeInt64BE(this._fh,this._fl,40);writeInt64BE(this._gh,this._gl,48);writeInt64BE(this._hh,this._hl,56);return H;};var sha512=Sha512;var Buffer$b=safeBuffer.Buffer;var W$5=new Array(160);function Sha384(){this.init();this._w=W$5;hash.call(this,128,112);}inherits_browser(Sha384,sha512);Sha384.prototype.init=function(){this._ah=0xcbbb9d5d;this._bh=0x629a292a;this._ch=0x9159015a;this._dh=0x152fecd8;this._eh=0x67332667;this._fh=0x8eb44a87;this._gh=0xdb0c2e0d;this._hh=0x47b5481d;this._al=0xc1059ed8;this._bl=0x367cd507;this._cl=0x3070dd17;this._dl=0xf70e5939;this._el=0xffc00b31;this._fl=0x68581511;this._gl=0x64f98fa7;this._hl=0xbefa4fa4;return this;};Sha384.prototype._hash=function(){var H=Buffer$b.allocUnsafe(48);function writeInt64BE(h,l,offset){H.writeInt32BE(h,offset);H.writeInt32BE(l,offset+4);}writeInt64BE(this._ah,this._al,0);writeInt64BE(this._bh,this._bl,8);writeInt64BE(this._ch,this._cl,16);writeInt64BE(this._dh,this._dl,24);writeInt64BE(this._eh,this._el,32);writeInt64BE(this._fh,this._fl,40);return H;};var sha384=Sha384;var sha_js=createCommonjsModule(function(module){var exports=module.exports=function SHA(algorithm){algorithm=algorithm.toLowerCase();var Algorithm=exports[algorithm];if(!Algorithm)throw new Error(algorithm+' is not supported (we accept pull requests)');return new Algorithm();};exports.sha=sha;exports.sha1=sha1;exports.sha224=sha224;exports.sha256=sha256;exports.sha384=sha384;exports.sha512=sha512;});var Buffer$c=safeBuffer.Buffer;var Transform$2=require$$1.Transform;var StringDecoder$1=stringDecoder.StringDecoder;function CipherBase(hashMode){Transform$2.call(this);this.hashMode=typeof hashMode==='string';if(this.hashMode){this[hashMode]=this._finalOrDigest;}else{this.final=this._finalOrDigest;}if(this._final){this.__final=this._final;this._final=null;}this._decoder=null;this._encoding=null;}inherits_browser(CipherBase,Transform$2);CipherBase.prototype.update=function(data,inputEnc,outputEnc){if(typeof data==='string'){data=Buffer$c.from(data,inputEnc);}var outData=this._update(data);if(this.hashMode)return this;if(outputEnc){outData=this._toString(outData,outputEnc);}return outData;};CipherBase.prototype.setAutoPadding=function(){};CipherBase.prototype.getAuthTag=function(){throw new Error('trying to get auth tag in unsupported state');};CipherBase.prototype.setAuthTag=function(){throw new Error('trying to set auth tag in unsupported state');};CipherBase.prototype.setAAD=function(){throw new Error('trying to set aad in unsupported state');};CipherBase.prototype._transform=function(data,_,next){var err;try{if(this.hashMode){this._update(data);}else{this.push(this._update(data));}}catch(e){err=e;}finally{next(err);}};CipherBase.prototype._flush=function(done){var err;try{this.push(this.__final());}catch(e){err=e;}done(err);};CipherBase.prototype._finalOrDigest=function(outputEnc){var outData=this.__final()||Buffer$c.alloc(0);if(outputEnc){outData=this._toString(outData,outputEnc,true);}return outData;};CipherBase.prototype._toString=function(value,enc,fin){if(!this._decoder){this._decoder=new StringDecoder$1(enc);this._encoding=enc;}if(this._encoding!==enc)throw new Error('can\'t switch encodings');var out=this._decoder.write(value);if(fin){out+=this._decoder.end();}return out;};var cipherBase=CipherBase;function Hash$1(hash){cipherBase.call(this,'digest');this._hash=hash;}inherits_browser(Hash$1,cipherBase);Hash$1.prototype._update=function(data){this._hash.update(data);};Hash$1.prototype._final=function(){return this._hash.digest();};var browser$1=function createHash(alg){alg=alg.toLowerCase();if(alg==='md5')return new md5_js();if(alg==='rmd160'||alg==='ripemd160')return new ripemd160();return new Hash$1(sha_js(alg));};// base-x encoding
// Forked from https://github.com/cryptocoinjs/bs58
// Originally written by Mike Hearn for BitcoinJ
// Copyright (c) 2011 Google Inc
// Ported to JavaScript by Stefan Thomas
// Merged Buffer refactorings from base58-native by Stephen Pair
// Copyright (c) 2013 BitPay Inc
var Buffer$d=safeBuffer.Buffer;var baseX$1=function base(ALPHABET){var ALPHABET_MAP={};var BASE=ALPHABET.length;var LEADER=ALPHABET.charAt(0);// pre-compute lookup table
for(var z=0;z<ALPHABET.length;z++){var x=ALPHABET.charAt(z);if(ALPHABET_MAP[x]!==undefined)throw new TypeError(x+' is ambiguous');ALPHABET_MAP[x]=z;}function encode(source){if(source.length===0)return'';var digits=[0];for(var i=0;i<source.length;++i){for(var j=0,carry=source[i];j<digits.length;++j){carry+=digits[j]<<8;digits[j]=carry%BASE;carry=carry/BASE|0;}while(carry>0){digits.push(carry%BASE);carry=carry/BASE|0;}}var string='';// deal with leading zeros
for(var k=0;source[k]===0&&k<source.length-1;++k){string+=LEADER;}// convert digits to a string
for(var q=digits.length-1;q>=0;--q){string+=ALPHABET[digits[q]];}return string;}function decodeUnsafe(string){if(typeof string!=='string')throw new TypeError('Expected String');if(string.length===0)return Buffer$d.allocUnsafe(0);var bytes=[0];for(var i=0;i<string.length;i++){var value=ALPHABET_MAP[string[i]];if(value===undefined)return;for(var j=0,carry=value;j<bytes.length;++j){carry+=bytes[j]*BASE;bytes[j]=carry&0xff;carry>>=8;}while(carry>0){bytes.push(carry&0xff);carry>>=8;}}// deal with leading zeros
for(var k=0;string[k]===LEADER&&k<string.length-1;++k){bytes.push(0);}return Buffer$d.from(bytes.reverse());}function decode(string){var buffer=decodeUnsafe(string);if(buffer)return buffer;throw new Error('Non-base'+BASE+' character');}return{encode:encode,decodeUnsafe:decodeUnsafe,decode:decode};};var ALPHABET$1='123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';var bs58$1=baseX$1(ALPHABET$1);var Buffer$e=safeBuffer.Buffer;var base=function base(checksumFn){// Encode a buffer as a base58-check encoded string
function encode(payload){var checksum=checksumFn(payload);return bs58$1.encode(Buffer$e.concat([payload,checksum],payload.length+4));}function decodeRaw(buffer){var payload=buffer.slice(0,-4);var checksum=buffer.slice(-4);var newChecksum=checksumFn(payload);if(checksum[0]^newChecksum[0]|checksum[1]^newChecksum[1]|checksum[2]^newChecksum[2]|checksum[3]^newChecksum[3])return;return payload;}// Decode a base58-check encoded string to a buffer, no result if checksum is wrong
function decodeUnsafe(string){var buffer=bs58$1.decodeUnsafe(string);if(!buffer)return;return decodeRaw(buffer);}function decode(string){var buffer=bs58$1.decode(string);var payload=decodeRaw(buffer,checksumFn);if(!payload)throw new Error('Invalid checksum');return payload;}return{encode:encode,decode:decode,decodeUnsafe:decodeUnsafe};};// SHA256(SHA256(buffer))
function sha256x2(buffer){var tmp=browser$1('sha256').update(buffer).digest();return browser$1('sha256').update(tmp).digest();}var bs58check=base(sha256x2);/**
	 * A wrapper around addresses. Internally addresses are stored and sent as raw bytes,
	 * but client-side they are displayed as base58-check encoded strings.
	 * The encoding requires some computation, so you should only convert address objects to strings when needed.
	 */var Address=/*#__PURE__*/function(){function Address(address){_classCallCheck(this,Address);_defineProperty(this,"value",void 0);_defineProperty(this,"encoded",void 0);_defineProperty(this,"isName",void 0);if(address instanceof Address){// Copy buffer
this.value=Buffer$1.from(address.value);}else if(typeof address==='string'){if(address.length<=ACCOUNT_NAME_LENGTH){this.value=Buffer$1.from(address);// .padEnd(ACCOUNT_NAME_LENGTH, "\0")
}else{this.value=Address.decode(address);}this.encoded=address;}else if(address instanceof Buffer$1){// Treat array-like as buffer
this.value=address;}else if(address instanceof Uint8Array){// Treat array-like as buffer
this.value=Buffer$1.from(address);}else{throw new Error('Instantiate Address with raw bytes or string in base58-check encoding, not '+address);}// Test if this is a name
this.isName=false;var arrValue=Array.from(this.value);while(arrValue[arrValue.length-1]===0){arrValue.pop();// remove trailing 0
}if(arrValue.length<=ACCOUNT_NAME_LENGTH){this.isName=true;this.value=Buffer$1.from(arrValue);}}_createClass(Address,[{key:"asBytes",value:function asBytes(){return new Uint8Array(this.value);}},{key:"toJSON",value:function toJSON(){return this.toString();}},{key:"toString",value:function toString(){if(typeof this.encoded!=='undefined'&&this.encoded!==null){return this.encoded;}// Account name
if(this.isName){this.encoded=Buffer$1.from(this.value).toString();return this.encoded;}// Account address
this.encoded=Address.encode(this.value);return this.encoded;}},{key:"equal",value:function equal(_otherAddress){var otherAddress=_otherAddress instanceof Address?_otherAddress:new Address(_otherAddress);return Address.valueEqual(this.value,otherAddress.value);}}],[{key:"decode",value:function decode(bs58string){var decoded=bs58check.decode(bs58string);if(decoded[0]!==ADDRESS_PREFIXES.ACCOUNT)throw new Error("invalid address prefix (".concat(decoded[0],")"));if(decoded.length!==33+1)throw new Error("invalid address length (".concat(decoded.length-1,")"));return Buffer$1.from(decoded.slice(1));}},{key:"encode",value:function encode(byteArray){if(!byteArray||byteArray.length===0)return'';// return empty string for null address
var buf=Buffer$1.from([ADDRESS_PREFIXES.ACCOUNT].concat(_toConsumableArray(byteArray)));return bs58check.encode(buf);}},{key:"valueEqual",value:function valueEqual(a,b){return a.length==b.length&&a.every(function(a_i,i){return a_i===b[i];});}}]);return Address;}();var jsbiUmd=createCommonjsModule(function(module,exports){(function(a,b){module.exports=b();})(commonjsGlobal,function(){var a=Math.imul,b=Math.abs,c=Math.max,d=Math.clz32;var e=/*#__PURE__*/function(_Array){_inherits2(e,_Array);function e(a,b){var _this5;_classCallCheck2(this,e);if(a>e.__kMaxLength)throw new RangeError("Maximum BigInt size exceeded");_this5=_possibleConstructorReturn2(this,_getPrototypeOf2(e).call(this,a)),_this5.sign=b;return _this5;}_createClass2(e,[{key:"toDebugString",value:function toDebugString(){var a=["BigInt["];var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{for(var _iterator3=this[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3=(_step3=_iterator3.next()).done);_iteratorNormalCompletion3=true){var _b=_step3.value;a.push((_b?(_b>>>0).toString(16):_b)+", ");}}catch(err){_didIteratorError3=true;_iteratorError3=err;}finally{try{if(!_iteratorNormalCompletion3&&_iterator3.return!=null){_iterator3.return();}}finally{if(_didIteratorError3){throw _iteratorError3;}}}return a.push("]"),a.join("");}},{key:"toString",value:function toString(){var a=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;if(2>a||36<a)throw new RangeError("toString() radix argument must be between 2 and 36");return 0===this.length?"0":0==(a&a-1)?e.__toStringBasePowerOfTwo(this,a):e.__toStringGeneric(this,a,!1);}},{key:"__copy",value:function __copy(){var a=new e(this.length,this.sign);for(var _b2=0;_b2<this.length;_b2++){a[_b2]=this[_b2];}return a;}},{key:"__trim",value:function __trim(){var a=this.length,b=this[a-1];for(;0===b;){a--,b=this[a-1],this.pop();}return 0===a&&(this.sign=!1),this;}},{key:"__initializeDigits",value:function __initializeDigits(){for(var _a=0;_a<this.length;_a++){this[_a]=0;}}},{key:"__clzmsd",value:function __clzmsd(){return d(this[this.length-1]);}},{key:"__inplaceMultiplyAdd",value:function __inplaceMultiplyAdd(b,c,d){d>this.length&&(d=this.length);var e=65535&b,f=b>>>16;var g=0,h=65535&c,j=c>>>16;for(var k=0;k<d;k++){var _b3=this.__digit(k),_c=65535&_b3,_d2=_b3>>>16,i=a(_c,e),l=a(_c,f),m=a(_d2,e),n=a(_d2,f),o=h+(65535&i),p=j+g+(o>>>16)+(i>>>16)+(65535&l)+(65535&m);h=(l>>>16)+(m>>>16)+(65535&n)+(p>>>16),g=h>>>16,h&=65535,j=n>>>16;this.__setDigit(k,65535&o|p<<16);}if(0!=g||0!==h||0!==j)throw new Error("implementation bug");}},{key:"__inplaceAdd",value:function __inplaceAdd(a,b,c){var d=0;for(var _e2=0;_e2<c;_e2++){var _c2=this.__halfDigit(b+_e2)+a.__halfDigit(_e2)+d;d=_c2>>>16,this.__setHalfDigit(b+_e2,_c2);}return d;}},{key:"__inplaceSub",value:function __inplaceSub(a,b,c){var d=0;if(1&b){b>>=1;var _e3=this.__digit(b),f=65535&_e3,g=0;for(;g<c-1>>>1;g++){var _c3=a.__digit(g),_h=(_e3>>>16)-(65535&_c3)-d;d=1&_h>>>16,this.__setDigit(b+g,_h<<16|65535&f),_e3=this.__digit(b+g+1),f=(65535&_e3)-(_c3>>>16)-d,d=1&f>>>16;}var h=a.__digit(g),i=(_e3>>>16)-(65535&h)-d;d=1&i>>>16,this.__setDigit(b+g,i<<16|65535&f);if(b+g+1>=this.length)throw new RangeError("out of bounds");0==(1&c)&&(_e3=this.__digit(b+g+1),f=(65535&_e3)-(h>>>16)-d,d=1&f>>>16,this.__setDigit(b+a.length,4294901760&_e3|65535&f));}else{b>>=1;var _e4=0;for(;_e4<a.length-1;_e4++){var _c4=this.__digit(b+_e4),_f2=a.__digit(_e4),_g2=(65535&_c4)-(65535&_f2)-d;d=1&_g2>>>16;var _h3=(_c4>>>16)-(_f2>>>16)-d;d=1&_h3>>>16,this.__setDigit(b+_e4,_h3<<16|65535&_g2);}var _f=this.__digit(b+_e4),_g=a.__digit(_e4),_h2=(65535&_f)-(65535&_g)-d;d=1&_h2>>>16;var _i2=0;0==(1&c)&&(_i2=(_f>>>16)-(_g>>>16)-d,d=1&_i2>>>16),this.__setDigit(b+_e4,_i2<<16|65535&_h2);}return d;}},{key:"__inplaceRightShift",value:function __inplaceRightShift(a){if(0===a)return;var b=this.__digit(0)>>>a;var c=this.length-1;for(var _e5=0;_e5<c;_e5++){var _c5=this.__digit(_e5+1);this.__setDigit(_e5,_c5<<32-a|b),b=_c5>>>a;}this.__setDigit(c,b);}},{key:"__digit",value:function __digit(a){return this[a];}},{key:"__unsignedDigit",value:function __unsignedDigit(a){return this[a]>>>0;}},{key:"__setDigit",value:function __setDigit(a,b){this[a]=0|b;}},{key:"__setDigitGrow",value:function __setDigitGrow(a,b){this[a]=0|b;}},{key:"__halfDigitLength",value:function __halfDigitLength(){var a=this.length;return 65535>=this.__unsignedDigit(a-1)?2*a-1:2*a;}},{key:"__halfDigit",value:function __halfDigit(a){return 65535&this[a>>>1]>>>((1&a)<<4);}},{key:"__setHalfDigit",value:function __setHalfDigit(a,b){var c=a>>>1,d=this.__digit(c),e=1&a?65535&d|b<<16:4294901760&d|65535&b;this.__setDigit(c,e);}}],[{key:"BigInt",value:function BigInt(a){var b=Math.floor,c=Number.isFinite;if("number"==typeof a){if(0===a)return e.__zero();if((0|a)===a)return 0>a?e.__oneDigit(-a,!0):e.__oneDigit(a,!1);if(!c(a)||b(a)!==a)throw new RangeError("The number "+a+" cannot be converted to BigInt because it is not an integer");return e.__fromDouble(a);}if("string"==typeof a){var _b4=e.__fromString(a);if(null===_b4)throw new SyntaxError("Cannot convert "+a+" to a BigInt");return _b4;}if("boolean"==typeof a)return!0===a?e.__oneDigit(1,!1):e.__zero();if("object"==_typeof2(a)){if(a.constructor===e)return a;var _b5=e.__toPrimitive(a);return e.BigInt(_b5);}throw new TypeError("Cannot convert "+a+" to a BigInt");}},{key:"toNumber",value:function toNumber(a){var b=a.length;if(0===b)return 0;if(1===b){var _b6=a.__unsignedDigit(0);return a.sign?-_b6:_b6;}var c=a.__digit(b-1),f=d(c),g=32*b-f;if(1024<g)return a.sign?-Infinity:1/0;var h=g-1,i=c,j=b-1;var k=f+1;var l=32===k?0:i<<k;l>>>=12;var m=k-12;var n=12<=k?0:i<<20+k,o=20+k;0<m&&0<j&&(j--,i=a.__digit(j),l|=i>>>32-m,n=i<<m,o=m),0<o&&0<j&&(j--,i=a.__digit(j),n|=i>>>32-o,o-=32);var p=e.__decideRounding(a,o,j,i);if((1===p||0===p&&1==(1&n))&&(n=n+1>>>0,0==n&&(l++,0!=l>>>20&&(l=0,h++,1023<h))))return a.sign?-Infinity:1/0;var q=a.sign?-2147483648:0;return h=h+1023<<20,e.__kBitConversionInts[1]=q|h|l,e.__kBitConversionInts[0]=n,e.__kBitConversionDouble[0];}},{key:"unaryMinus",value:function unaryMinus(a){if(0===a.length)return a;var b=a.__copy();return b.sign=!a.sign,b;}},{key:"bitwiseNot",value:function bitwiseNot(a){return a.sign?e.__absoluteSubOne(a).__trim():e.__absoluteAddOne(a,!0);}},{key:"exponentiate",value:function exponentiate(a,b){if(b.sign)throw new RangeError("Exponent must be positive");if(0===b.length)return e.__oneDigit(1,!1);if(0===a.length)return a;if(1===a.length&&1===a.__digit(0))return a.sign&&0==(1&b.__digit(0))?e.unaryMinus(a):a;if(1<b.length)throw new RangeError("BigInt too big");var c=b.__unsignedDigit(0);if(1===c)return a;if(c>=e.__kMaxLengthBits)throw new RangeError("BigInt too big");if(1===a.length&&2===a.__digit(0)){var _b7=1+(c>>>5),_d3=a.sign&&0!=(1&c),_f3=new e(_b7,_d3);_f3.__initializeDigits();var g=1<<(31&c);return _f3.__setDigit(_b7-1,g),_f3;}var d=null,f=a;for(0!=(1&c)&&(d=a),c>>=1;0!==c;c>>=1){f=e.multiply(f,f),0!=(1&c)&&(null===d?d=f:d=e.multiply(d,f));}return d;}},{key:"multiply",value:function multiply(a,b){if(0===a.length)return a;if(0===b.length)return b;var c=a.length+b.length;32<=a.__clzmsd()+b.__clzmsd()&&c--;var d=new e(c,a.sign!==b.sign);d.__initializeDigits();for(var _c6=0;_c6<a.length;_c6++){e.__multiplyAccumulate(b,a.__digit(_c6),d,_c6);}return d.__trim();}},{key:"divide",value:function divide(a,b){if(0===b.length)throw new RangeError("Division by zero");if(0>e.__absoluteCompare(a,b))return e.__zero();var c=a.sign!==b.sign,d=b.__unsignedDigit(0);var f;if(1===b.length&&65535>=d){if(1===d)return c===a.sign?a:e.unaryMinus(a);f=e.__absoluteDivSmall(a,d,null);}else f=e.__absoluteDivLarge(a,b,!0,!1);return f.sign=c,f.__trim();}},{key:"remainder",value:function remainder(a,b){if(0===b.length)throw new RangeError("Division by zero");if(0>e.__absoluteCompare(a,b))return a;var c=b.__unsignedDigit(0);if(1===b.length&&65535>=c){if(1===c)return e.__zero();var _b8=e.__absoluteModSmall(a,c);return 0===_b8?e.__zero():e.__oneDigit(_b8,a.sign);}var d=e.__absoluteDivLarge(a,b,!1,!0);return d.sign=a.sign,d.__trim();}},{key:"add",value:function add(a,b){var c=a.sign;return c===b.sign?e.__absoluteAdd(a,b,c):0<=e.__absoluteCompare(a,b)?e.__absoluteSub(a,b,c):e.__absoluteSub(b,a,!c);}},{key:"subtract",value:function subtract(a,b){var c=a.sign;return c===b.sign?0<=e.__absoluteCompare(a,b)?e.__absoluteSub(a,b,c):e.__absoluteSub(b,a,!c):e.__absoluteAdd(a,b,c);}},{key:"leftShift",value:function leftShift(a,b){return 0===b.length||0===a.length?a:b.sign?e.__rightShiftByAbsolute(a,b):e.__leftShiftByAbsolute(a,b);}},{key:"signedRightShift",value:function signedRightShift(a,b){return 0===b.length||0===a.length?a:b.sign?e.__leftShiftByAbsolute(a,b):e.__rightShiftByAbsolute(a,b);}},{key:"unsignedRightShift",value:function unsignedRightShift(){throw new TypeError("BigInts have no unsigned right shift; use >> instead");}},{key:"lessThan",value:function lessThan(a,b){return 0>e.__compareToBigInt(a,b);}},{key:"lessThanOrEqual",value:function lessThanOrEqual(a,b){return 0>=e.__compareToBigInt(a,b);}},{key:"greaterThan",value:function greaterThan(a,b){return 0<e.__compareToBigInt(a,b);}},{key:"greaterThanOrEqual",value:function greaterThanOrEqual(a,b){return 0<=e.__compareToBigInt(a,b);}},{key:"equal",value:function equal(a,b){if(a.sign!==b.sign)return!1;if(a.length!==b.length)return!1;for(var _c7=0;_c7<a.length;_c7++){if(a.__digit(_c7)!==b.__digit(_c7))return!1;}return!0;}},{key:"bitwiseAnd",value:function bitwiseAnd(a,b){var _ref3;if(!a.sign&&!b.sign)return e.__absoluteAnd(a,b).__trim();if(a.sign&&b.sign){var _d4=c(a.length,b.length)+1;var f=e.__absoluteSubOne(a,_d4);var g=e.__absoluteSubOne(b);return f=e.__absoluteOr(f,g,f),e.__absoluteAddOne(f,!0,f).__trim();}return a.sign&&(_ref3=[b,a],a=_ref3[0],b=_ref3[1],_ref3),e.__absoluteAndNot(a,e.__absoluteSubOne(b)).__trim();}},{key:"bitwiseXor",value:function bitwiseXor(a,b){var _ref4;if(!a.sign&&!b.sign)return e.__absoluteXor(a,b).__trim();if(a.sign&&b.sign){var _d5=c(a.length,b.length),_f4=e.__absoluteSubOne(a,_d5),g=e.__absoluteSubOne(b);return e.__absoluteXor(_f4,g,_f4).__trim();}var d=c(a.length,b.length)+1;a.sign&&(_ref4=[b,a],a=_ref4[0],b=_ref4[1],_ref4);var f=e.__absoluteSubOne(b,d);return f=e.__absoluteXor(f,a,f),e.__absoluteAddOne(f,!0,f).__trim();}},{key:"bitwiseOr",value:function bitwiseOr(a,b){var _ref5;var d=c(a.length,b.length);if(!a.sign&&!b.sign)return e.__absoluteOr(a,b).__trim();if(a.sign&&b.sign){var _c8=e.__absoluteSubOne(a,d);var _f5=e.__absoluteSubOne(b);return _c8=e.__absoluteAnd(_c8,_f5,_c8),e.__absoluteAddOne(_c8,!0,_c8).__trim();}a.sign&&(_ref5=[b,a],a=_ref5[0],b=_ref5[1],_ref5);var f=e.__absoluteSubOne(b,d);return f=e.__absoluteAndNot(f,a,f),e.__absoluteAddOne(f,!0,f).__trim();}},{key:"ADD",value:function ADD(a,b){if(a=e.__toPrimitive(a),b=e.__toPrimitive(b),"string"==typeof a)return"string"!=typeof b&&(b=b.toString()),a+b;if("string"==typeof b)return a.toString()+b;if(a=e.__toNumeric(a),b=e.__toNumeric(b),e.__isBigInt(a)&&e.__isBigInt(b))return e.add(a,b);if("number"==typeof a&&"number"==typeof b)return a+b;throw new TypeError("Cannot mix BigInt and other types, use explicit conversions");}},{key:"LT",value:function LT(a,b){return e.__compare(a,b,0);}},{key:"LE",value:function LE(a,b){return e.__compare(a,b,1);}},{key:"GT",value:function GT(a,b){return e.__compare(a,b,2);}},{key:"GE",value:function GE(a,b){return e.__compare(a,b,3);}},{key:"EQ",value:function EQ(a,b){for(;;){if(e.__isBigInt(a))return e.__isBigInt(b)?e.equal(a,b):e.EQ(b,a);if("number"==typeof a){if(e.__isBigInt(b))return e.__equalToNumber(b,a);if("object"!=_typeof2(b))return a==b;b=e.__toPrimitive(b);}else if("string"==typeof a){if(e.__isBigInt(b))return a=e.__fromString(a),null!==a&&e.equal(a,b);if("object"!=_typeof2(b))return a==b;b=e.__toPrimitive(b);}else if("boolean"==typeof a){if(e.__isBigInt(b))return e.__equalToNumber(b,+a);if("object"!=_typeof2(b))return a==b;b=e.__toPrimitive(b);}else if("symbol"==_typeof2(a)){if(e.__isBigInt(b))return!1;if("object"!=_typeof2(b))return a==b;b=e.__toPrimitive(b);}else if("object"==_typeof2(a)){if("object"==_typeof2(b)&&b.constructor!==e)return a==b;a=e.__toPrimitive(a);}else return a==b;}}},{key:"__zero",value:function __zero(){return new e(0,!1);}},{key:"__oneDigit",value:function __oneDigit(a,b){var c=new e(1,b);return c.__setDigit(0,a),c;}},{key:"__decideRounding",value:function __decideRounding(a,b,c,d){if(0<b)return-1;var e;if(0>b)e=-b-1;else{if(0===c)return-1;c--,d=a.__digit(c),e=31;}var f=1<<e;if(0==(d&f))return-1;if(f-=1,0!=(d&f))return 1;for(;0<c;){if(c--,0!==a.__digit(c))return 1;}return 0;}},{key:"__fromDouble",value:function __fromDouble(a){e.__kBitConversionDouble[0]=a;var b=2047&e.__kBitConversionInts[1]>>>20,c=b-1023,d=(c>>>5)+1,f=new e(d,0>a);var g=1048575&e.__kBitConversionInts[1]|1048576,h=e.__kBitConversionInts[0];var i=20,j=31&c;var k,l=0;if(20>j){var _a2=i-j;l=_a2+32,k=g>>>_a2,g=g<<32-_a2|h>>>_a2,h<<=32-_a2;}else if(20===j)l=32,k=g,g=h;else{var _a3=j-i;l=32-_a3,k=g<<_a3|h>>>32-_a3,g=h<<_a3;}f.__setDigit(d-1,k);for(var _b9=d-2;0<=_b9;_b9--){0<l?(l-=32,k=g,g=h):k=0,f.__setDigit(_b9,k);}return f.__trim();}},{key:"__isWhitespace",value:function __isWhitespace(a){return!!(13>=a&&9<=a)||(159>=a?32==a:131071>=a?160==a||5760==a:196607>=a?(a&=131071,10>=a||40==a||41==a||47==a||95==a||4096==a):65279==a);}},{key:"__fromString",value:function __fromString(a){var b=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var c=0;var f=a.length;var g=0;if(g===f)return e.__zero();var h=a.charCodeAt(g);for(;e.__isWhitespace(h);){if(++g===f)return e.__zero();h=a.charCodeAt(g);}if(43===h){if(++g===f)return null;h=a.charCodeAt(g),c=1;}else if(45===h){if(++g===f)return null;h=a.charCodeAt(g),c=-1;}if(0===b){if(b=10,48===h){if(++g===f)return e.__zero();if(h=a.charCodeAt(g),88===h||120===h){if(b=16,++g===f)return null;h=a.charCodeAt(g);}else if(79===h||111===h){if(b=8,++g===f)return null;h=a.charCodeAt(g);}else if(66===h||98===h){if(b=2,++g===f)return null;h=a.charCodeAt(g);}}}else if(16===b&&48===h){if(++g===f)return e.__zero();if(h=a.charCodeAt(g),88===h||120===h){if(++g===f)return null;h=a.charCodeAt(g);}}for(;48===h;){if(++g===f)return e.__zero();h=a.charCodeAt(g);}var i=f-g;var j=e.__kMaxBitsPerChar[b],k=e.__kBitsPerCharTableMultiplier-1;if(i>1073741824/j)return null;var l=j*i+k>>>e.__kBitsPerCharTableShift,m=new e(l+31>>>5,!1),n=10>b?b:10,o=10<b?b-10:0;if(0==(b&b-1)){j>>=e.__kBitsPerCharTableShift;var _b10=[],_c9=[];var _d6=!1;do{var _e6=0,_i3=0;for(;;){var _b11=void 0;if(h-48>>>0<n)_b11=h-48;else if((32|h)-97>>>0<o)_b11=(32|h)-87;else{_d6=!0;break;}if(_i3+=j,_e6=_e6<<j|_b11,++g===f){_d6=!0;break;}if(h=a.charCodeAt(g),32<_i3+j)break;}_b10.push(_e6),_c9.push(_i3);}while(!_d6);e.__fillFromParts(m,_b10,_c9);}else{m.__initializeDigits();var _c10=!1,_i4=0;do{var _l=0,p=1;for(;;){var _e7=void 0;if(h-48>>>0<n)_e7=h-48;else if((32|h)-97>>>0<o)_e7=(32|h)-87;else{_c10=!0;break;}var _d7=p*b;if(4294967295<_d7)break;if(p=_d7,_l=_l*b+_e7,_i4++,++g===f){_c10=!0;break;}h=a.charCodeAt(g);}k=32*e.__kBitsPerCharTableMultiplier-1;var q=j*_i4+k>>>e.__kBitsPerCharTableShift+5;m.__inplaceMultiplyAdd(p,_l,q);}while(!_c10);}for(;g!==f;){if(!e.__isWhitespace(h))return null;h=a.charCodeAt(g++);}return 0!=c&&10!==b?null:(m.sign=-1==c,m.__trim());}},{key:"__fillFromParts",value:function __fillFromParts(a,b,c){var d=0,e=0,f=0;for(var g=b.length-1;0<=g;g--){var h=b[g],i=c[g];e|=h<<f,f+=i,32===f?(a.__setDigit(d++,e),f=0,e=0):32<f&&(a.__setDigit(d++,e),f-=32,e=h>>>i-f);}if(0!==e){if(d>=a.length)throw new Error("implementation bug");a.__setDigit(d++,e);}for(;d<a.length;d++){a.__setDigit(d,0);}}},{key:"__toStringBasePowerOfTwo",value:function __toStringBasePowerOfTwo(a,b){var c=a.length;var f=b-1;f=(85&f>>>1)+(85&f),f=(51&f>>>2)+(51&f),f=(15&f>>>4)+(15&f);var g=f,h=b-1,i=a.__digit(c-1),j=d(i);var k=0|(32*c-j+g-1)/g;if(a.sign&&k++,268435456<k)throw new Error("string too long");var l=Array(k);var m=k-1,n=0,o=0;for(var _d8=0;_d8<c-1;_d8++){var _b12=a.__digit(_d8),_c11=(n|_b12<<o)&h;l[m--]=e.__kConversionChars[_c11];var _f6=g-o;for(n=_b12>>>_f6,o=32-_f6;o>=g;){l[m--]=e.__kConversionChars[n&h],n>>>=g,o-=g;}}var p=(n|i<<o)&h;for(l[m--]=e.__kConversionChars[p],n=i>>>g-o;0!==n;){l[m--]=e.__kConversionChars[n&h],n>>>=g;}if(a.sign&&(l[m--]="-"),-1!=m)throw new Error("implementation bug");return l.join("");}},{key:"__toStringGeneric",value:function __toStringGeneric(a,b,c){var f=a.length;if(0===f)return"";if(1===f){var _d9=a.__unsignedDigit(0).toString(b);return!1===c&&a.sign&&(_d9="-"+_d9),_d9;}var g=32*f-d(a.__digit(f-1)),h=e.__kMaxBitsPerChar[b],i=h-1;var j=g*e.__kBitsPerCharTableMultiplier;j+=i-1,j=0|j/i;var k=j+1>>1,l=e.exponentiate(e.__oneDigit(b,!1),e.__oneDigit(k,!1));var m,n;var o=l.__unsignedDigit(0);if(1===l.length&&65535>=o){m=new e(a.length,!1),m.__initializeDigits();var _c12=0;for(var _b13=2*a.length-1;0<=_b13;_b13--){var _d10=_c12<<16|a.__halfDigit(_b13);m.__setHalfDigit(_b13,0|_d10/o),_c12=0|_d10%o;}n=_c12.toString(b);}else{var _c13=e.__absoluteDivLarge(a,l,!0,!0);m=_c13.quotient;var _d11=_c13.remainder.__trim();n=e.__toStringGeneric(_d11,b,!0);}m.__trim();var p=e.__toStringGeneric(m,b,!0);for(;n.length<k;){n="0"+n;}return!1===c&&a.sign&&(p="-"+p),p+n;}},{key:"__unequalSign",value:function __unequalSign(a){return a?-1:1;}},{key:"__absoluteGreater",value:function __absoluteGreater(a){return a?-1:1;}},{key:"__absoluteLess",value:function __absoluteLess(a){return a?1:-1;}},{key:"__compareToBigInt",value:function __compareToBigInt(a,b){var c=a.sign;if(c!==b.sign)return e.__unequalSign(c);var d=e.__absoluteCompare(a,b);return 0<d?e.__absoluteGreater(c):0>d?e.__absoluteLess(c):0;}},{key:"__compareToNumber",value:function __compareToNumber(a,c){if(!0|c){var _d12=a.sign,f=0>c;if(_d12!==f)return e.__unequalSign(_d12);if(0===a.length){if(f)throw new Error("implementation bug");return 0===c?0:-1;}if(1<a.length)return e.__absoluteGreater(_d12);var g=b(c),h=a.__unsignedDigit(0);return h>g?e.__absoluteGreater(_d12):h<g?e.__absoluteLess(_d12):0;}return e.__compareToDouble(a,c);}},{key:"__compareToDouble",value:function __compareToDouble(a,b){if(b!==b)return b;if(b===1/0)return-1;if(b===-Infinity)return 1;var c=a.sign;if(c!==0>b)return e.__unequalSign(c);if(0===b)throw new Error("implementation bug: should be handled elsewhere");if(0===a.length)return-1;e.__kBitConversionDouble[0]=b;var f=2047&e.__kBitConversionInts[1]>>>20;if(2047==f)throw new Error("implementation bug: handled elsewhere");var g=f-1023;if(0>g)return e.__absoluteGreater(c);var h=a.length;var i=a.__digit(h-1);var j=d(i),k=32*h-j,l=g+1;if(k<l)return e.__absoluteLess(c);if(k>l)return e.__absoluteGreater(c);var m=1048576|1048575&e.__kBitConversionInts[1],n=e.__kBitConversionInts[0];var o=20,p=31-j;if(p!==(k-1)%31)throw new Error("implementation bug");var q,r=0;if(20>p){var _a4=o-p;r=_a4+32,q=m>>>_a4,m=m<<32-_a4|n>>>_a4,n<<=32-_a4;}else if(20===p)r=32,q=m,m=n;else{var _a5=p-o;r=32-_a5,q=m<<_a5|n>>>32-_a5,m=n<<_a5;}if(i>>>=0,q>>>=0,i>q)return e.__absoluteGreater(c);if(i<q)return e.__absoluteLess(c);for(var _d13=h-2;0<=_d13;_d13--){0<r?(r-=32,q=m>>>0,m=n,n=0):q=0;var _b14=a.__unsignedDigit(_d13);if(_b14>q)return e.__absoluteGreater(c);if(_b14<q)return e.__absoluteLess(c);}if(0!==m||0!==n){if(0===r)throw new Error("implementation bug");return e.__absoluteLess(c);}return 0;}},{key:"__equalToNumber",value:function __equalToNumber(a,c){return c|0===c?0===c?0===a.length:1===a.length&&a.sign===0>c&&a.__unsignedDigit(0)===b(c):0===e.__compareToDouble(a,c);}},{key:"__comparisonResultToBool",value:function __comparisonResultToBool(a,b){switch(b){case 0:return 0>a;case 1:return 0>=a;case 2:return 0<a;case 3:return 0<=a;}throw new Error("unreachable");}},{key:"__compare",value:function __compare(a,b,c){if(a=e.__toPrimitive(a),b=e.__toPrimitive(b),"string"==typeof a&&"string"==typeof b)switch(c){case 0:return a<b;case 1:return a<=b;case 2:return a>b;case 3:return a>=b;}if(e.__isBigInt(a)&&"string"==typeof b)return b=e.__fromString(b),null!==b&&e.__comparisonResultToBool(e.__compareToBigInt(a,b),c);if("string"==typeof a&&e.__isBigInt(b))return a=e.__fromString(a),null!==a&&e.__comparisonResultToBool(e.__compareToBigInt(a,b),c);if(a=e.__toNumeric(a),b=e.__toNumeric(b),e.__isBigInt(a)){if(e.__isBigInt(b))return e.__comparisonResultToBool(e.__compareToBigInt(a,b),c);if("number"!=typeof b)throw new Error("implementation bug");return e.__comparisonResultToBool(e.__compareToNumber(a,b),c);}if("number"!=typeof a)throw new Error("implementation bug");if(e.__isBigInt(b))return e.__comparisonResultToBool(e.__compareToNumber(b,a),2^c);if("number"!=typeof b)throw new Error("implementation bug");return 0===c?a<b:1===c?a<=b:2===c?a>b:3===c?a>=b:void 0;}},{key:"__absoluteAdd",value:function __absoluteAdd(a,b,c){if(a.length<b.length)return e.__absoluteAdd(b,a,c);if(0===a.length)return a;if(0===b.length)return a.sign===c?a:e.unaryMinus(a);var d=a.length;(0===a.__clzmsd()||b.length===a.length&&0===b.__clzmsd())&&d++;var f=new e(d,c);var g=0,h=0;for(;h<b.length;h++){var _c14=b.__digit(h),_d14=a.__digit(h),_e8=(65535&_d14)+(65535&_c14)+g,i=(_d14>>>16)+(_c14>>>16)+(_e8>>>16);g=i>>>16,f.__setDigit(h,65535&_e8|i<<16);}for(;h<a.length;h++){var _b15=a.__digit(h),_c15=(65535&_b15)+g,_d15=(_b15>>>16)+(_c15>>>16);g=_d15>>>16,f.__setDigit(h,65535&_c15|_d15<<16);}return h<f.length&&f.__setDigit(h,g),f.__trim();}},{key:"__absoluteSub",value:function __absoluteSub(a,b,c){if(0===a.length)return a;if(0===b.length)return a.sign===c?a:e.unaryMinus(a);var d=new e(a.length,c);var f=0,g=0;for(;g<b.length;g++){var _c16=a.__digit(g),_e9=b.__digit(g),h=(65535&_c16)-(65535&_e9)-f;f=1&h>>>16;var i=(_c16>>>16)-(_e9>>>16)-f;f=1&i>>>16,d.__setDigit(g,65535&h|i<<16);}for(;g<a.length;g++){var _b16=a.__digit(g),_c17=(65535&_b16)-f;f=1&_c17>>>16;var _e10=(_b16>>>16)-f;f=1&_e10>>>16,d.__setDigit(g,65535&_c17|_e10<<16);}return d.__trim();}},{key:"__absoluteAddOne",value:function __absoluteAddOne(a,b){var c=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var d=a.length;null===c?c=new e(d,b):c.sign=b;var f=!0;for(var _e11,g=0;g<d;g++){_e11=a.__digit(g);var _b17=-1===_e11;f&&(_e11=0|_e11+1),f=_b17,c.__setDigit(g,_e11);}return f&&c.__setDigitGrow(d,1),c;}},{key:"__absoluteSubOne",value:function __absoluteSubOne(a,b){var c=a.length;b=b||c;var d=new e(b,!1);var f=!0;for(var _e12,g=0;g<c;g++){_e12=a.__digit(g);var _b18=0===_e12;f&&(_e12=0|_e12-1),f=_b18,d.__setDigit(g,_e12);}for(var _e13=c;_e13<b;_e13++){d.__setDigit(_e13,0);}return d;}},{key:"__absoluteAnd",value:function __absoluteAnd(a,b){var c=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var d=a.length,f=b.length,g=f;if(d<f){g=d;var _c18=a,_e14=d;a=b,d=f,b=_c18,f=_e14;}var h=g;null===c?c=new e(h,!1):h=c.length;var j=0;for(;j<g;j++){c.__setDigit(j,a.__digit(j)&b.__digit(j));}for(;j<h;j++){c.__setDigit(j,0);}return c;}},{key:"__absoluteAndNot",value:function __absoluteAndNot(a,b){var c=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var d=a.length,f=b.length;var g=f;d<f&&(g=d);var h=d;null===c?c=new e(h,!1):h=c.length;var j=0;for(;j<g;j++){c.__setDigit(j,a.__digit(j)&~b.__digit(j));}for(;j<d;j++){c.__setDigit(j,a.__digit(j));}for(;j<h;j++){c.__setDigit(j,0);}return c;}},{key:"__absoluteOr",value:function __absoluteOr(a,b){var c=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var d=a.length,f=b.length,g=f;if(d<f){g=d;var _c19=a,_e15=d;a=b,d=f,b=_c19,f=_e15;}var h=d;null===c?c=new e(h,!1):h=c.length;var j=0;for(;j<g;j++){c.__setDigit(j,a.__digit(j)|b.__digit(j));}for(;j<d;j++){c.__setDigit(j,a.__digit(j));}for(;j<h;j++){c.__setDigit(j,0);}return c;}},{key:"__absoluteXor",value:function __absoluteXor(a,b){var c=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var d=a.length,f=b.length,g=f;if(d<f){g=d;var _c20=a,_e16=d;a=b,d=f,b=_c20,f=_e16;}var h=d;null===c?c=new e(h,!1):h=c.length;var j=0;for(;j<g;j++){c.__setDigit(j,a.__digit(j)^b.__digit(j));}for(;j<d;j++){c.__setDigit(j,a.__digit(j));}for(;j<h;j++){c.__setDigit(j,0);}return c;}},{key:"__absoluteCompare",value:function __absoluteCompare(a,b){var c=a.length-b.length;if(0!=c)return c;var d=a.length-1;for(;0<=d&&a.__digit(d)===b.__digit(d);){d--;}return 0>d?0:a.__unsignedDigit(d)>b.__unsignedDigit(d)?1:-1;}},{key:"__multiplyAccumulate",value:function __multiplyAccumulate(b,c,d,e){if(0===c)return;var f=65535&c,g=c>>>16;var h=0,j=0,k=0;for(var l=0;l<b.length;l++,e++){var _c21=d.__digit(e),i=65535&_c21,m=_c21>>>16;var n=b.__digit(l),o=65535&n,p=n>>>16,q=a(o,f),r=a(o,g),s=a(p,f),t=a(p,g);i+=j+(65535&q),m+=k+h+(i>>>16)+(q>>>16)+(65535&r)+(65535&s),h=m>>>16,j=(r>>>16)+(s>>>16)+(65535&t)+h,h=j>>>16,j&=65535,k=t>>>16,_c21=65535&i|m<<16,d.__setDigit(e,_c21);}for(;0!=h||0!==j||0!==k;e++){var _a6=d.__digit(e);var _b19=(65535&_a6)+j,_c22=(_a6>>>16)+(_b19>>>16)+k+h;j=0,k=0,h=_c22>>>16,_a6=65535&_b19|_c22<<16,d.__setDigit(e,_a6);}}},{key:"__internalMultiplyAdd",value:function __internalMultiplyAdd(b,c,d,e,f){var g=d,h=0;for(var j=0;j<e;j++){var _d16=b.__digit(j),_e17=a(65535&_d16,c),i=(65535&_e17)+h+g;g=i>>>16;var k=a(_d16>>>16,c),l=(65535&k)+(_e17>>>16)+g;g=l>>>16,h=k>>>16,f.__setDigit(j,l<<16|65535&i);}if(f.length>e)for(f.__setDigit(e++,g+h);e<f.length;){f.__setDigit(e++,0);}else if(0!==g+h)throw new Error("implementation bug");}},{key:"__absoluteDivSmall",value:function __absoluteDivSmall(a,b,c){null===c&&(c=new e(a.length,!1));var d=0;for(var _e18,f=2*a.length-1;0<=f;f-=2){_e18=(d<<16|a.__halfDigit(f))>>>0;var g=0|_e18/b;d=0|_e18%b,_e18=(d<<16|a.__halfDigit(f-1))>>>0;var h=0|_e18/b;d=0|_e18%b,c.__setDigit(f>>>1,g<<16|h);}return c;}},{key:"__absoluteModSmall",value:function __absoluteModSmall(a,b){var c=0;for(var _d17=2*a.length-1;0<=_d17;_d17--){var _e19=(c<<16|a.__halfDigit(_d17))>>>0;c=0|_e19%b;}return c;}},{key:"__absoluteDivLarge",value:function __absoluteDivLarge(b,d,f,g){var h=d.__halfDigitLength(),i=d.length,c=b.__halfDigitLength()-h;var k=null;f&&(k=new e(c+2>>>1,!1),k.__initializeDigits());var l=new e(h+2>>>1,!1);l.__initializeDigits();var m=e.__clz16(d.__halfDigit(h-1));0<m&&(d=e.__specialLeftShift(d,m,0));var n=e.__specialLeftShift(b,m,1),o=d.__halfDigit(h-1);var p=0;for(var _m,q=c;0<=q;q--){_m=65535;var _b20=n.__halfDigit(q+h);if(_b20!==o){var _c23=(_b20<<16|n.__halfDigit(q+h-1))>>>0;_m=0|_c23/o;var _e20=0|_c23%o;var _f7=d.__halfDigit(h-2),_g4=n.__halfDigit(q+h-2);for(;a(_m,_f7)>>>0>(_e20<<16|_g4)>>>0&&(_m--,_e20+=o,!(65535<_e20));){;}}e.__internalMultiplyAdd(d,_m,0,i,l);var _g3=n.__inplaceSub(l,q,h+1);0!==_g3&&(_g3=n.__inplaceAdd(d,q,h),n.__setHalfDigit(q+h,n.__halfDigit(q+h)+_g3),_m--),f&&(1&q?p=_m<<16:k.__setDigit(q>>>1,p|_m));}return g?(n.__inplaceRightShift(m),f?{quotient:k,remainder:n}:n):f?k:void 0;}},{key:"__clz16",value:function __clz16(a){return d(a)-16;}},{key:"__specialLeftShift",value:function __specialLeftShift(a,b,c){var d=a.length,f=new e(d+c,!1);if(0===b){for(var _b21=0;_b21<d;_b21++){f.__setDigit(_b21,a.__digit(_b21));}return 0<c&&f.__setDigit(d,0),f;}var g=0;for(var _e21=0;_e21<d;_e21++){var _c24=a.__digit(_e21);f.__setDigit(_e21,_c24<<b|g),g=_c24>>>32-b;}return 0<c&&f.__setDigit(d,g),f;}},{key:"__leftShiftByAbsolute",value:function __leftShiftByAbsolute(a,b){var c=e.__toShiftAmount(b);if(0>c)throw new RangeError("BigInt too big");var f=c>>>5,g=31&c,h=a.length,i=0!==g&&0!=a.__digit(h-1)>>>32-g,j=h+f+(i?1:0),k=new e(j,a.sign);if(0===g){var _b22=0;for(;_b22<f;_b22++){k.__setDigit(_b22,0);}for(;_b22<j;_b22++){k.__setDigit(_b22,a.__digit(_b22-f));}}else{var _b23=0;for(var _a7=0;_a7<f;_a7++){k.__setDigit(_a7,0);}for(var _c25=0;_c25<h;_c25++){var _e22=a.__digit(_c25);k.__setDigit(_c25+f,_e22<<g|_b23),_b23=_e22>>>32-g;}if(i)k.__setDigit(h+f,_b23);else if(0!=_b23)throw new Error("implementation bug");}return k.__trim();}},{key:"__rightShiftByAbsolute",value:function __rightShiftByAbsolute(a,b){var c=a.length,d=a.sign,f=e.__toShiftAmount(b);if(0>f)return e.__rightShiftByMaximum(d);var g=f>>>5,h=31&f;var i=c-g;if(0>=i)return e.__rightShiftByMaximum(d);var j=!1;if(d){if(0!=(a.__digit(g)&(1<<h)-1))j=!0;else for(var _b24=0;_b24<g;_b24++){if(0!==a.__digit(_b24)){j=!0;break;}}}if(j&&0===h){var _b25=a.__digit(c-1);0==~_b25&&i++;}var k=new e(i,d);if(0===h)for(var _b26=g;_b26<c;_b26++){k.__setDigit(_b26-g,a.__digit(_b26));}else{var _b27=a.__digit(g)>>>h;var _d18=c-g-1;for(var _c26=0;_c26<_d18;_c26++){var _e23=a.__digit(_c26+g+1);k.__setDigit(_c26,_e23<<32-h|_b27),_b27=_e23>>>h;}k.__setDigit(_d18,_b27);}return j&&(k=e.__absoluteAddOne(k,!0,k)),k.__trim();}},{key:"__rightShiftByMaximum",value:function __rightShiftByMaximum(a){return a?e.__oneDigit(1,!0):e.__zero();}},{key:"__toShiftAmount",value:function __toShiftAmount(a){if(1<a.length)return-1;var b=a.__unsignedDigit(0);return b>e.__kMaxLengthBits?-1:b;}},{key:"__toPrimitive",value:function __toPrimitive(a){var b=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"default";if("object"!=_typeof2(a))return a;if(a.constructor===e)return a;var c=a[Symbol.toPrimitive];if(c){var _a8=c(b);if("object"!=_typeof2(_a8))return _a8;throw new TypeError("Cannot convert object to primitive value");}var d=a.valueOf;if(d){var _b28=d.call(a);if("object"!=_typeof2(_b28))return _b28;}var f=a.toString;if(f){var _b29=f.call(a);if("object"!=_typeof2(_b29))return _b29;}throw new TypeError("Cannot convert object to primitive value");}},{key:"__toNumeric",value:function __toNumeric(a){return e.__isBigInt(a)?a:+a;}},{key:"__isBigInt",value:function __isBigInt(a){return"object"==_typeof2(a)&&a.constructor===e;}},{key:"__digitPow",value:function __digitPow(a,b){var c=1;for(;0<b;){1&b&&(c*=a),b>>>=1,a*=a;}return c;}}]);return e;}(_wrapNativeSuper2(Array));return e.__kMaxLength=33554432,e.__kMaxLengthBits=e.__kMaxLength<<5,e.__kMaxBitsPerChar=[0,0,32,51,64,75,83,90,96,102,107,111,115,119,122,126,128,131,134,136,139,141,143,145,147,149,151,153,154,156,158,159,160,162,163,165,166],e.__kBitsPerCharTableShift=5,e.__kBitsPerCharTableMultiplier=1<<e.__kBitsPerCharTableShift,e.__kConversionChars=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"],e.__kBitConversionBuffer=new ArrayBuffer(8),e.__kBitConversionDouble=new Float64Array(e.__kBitConversionBuffer),e.__kBitConversionInts=new Int32Array(e.__kBitConversionBuffer),e;});});var CommitStatus=typesNode.CommitStatus;var fromHexString=function fromHexString(hexString){if(hexString.length%2===1)hexString='0'+hexString;return new Uint8Array(hexString.match(/.{1,2}/g).map(function(byte){return parseInt(byte,16);}));};var toHexString=function toHexString(bytes){var format=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;var result=bytes.reduce(function(str,byte){return str+byte.toString(16).padStart(2,'0');},'');if(!format)return result;if(result==='00'||result==='')return'0x0';return'0x'+result;};var fromNumber=function fromNumber(d){var length=arguments.length>1&&arguments[1]!==undefined?arguments[1]:8;if(d>=Math.pow(2,length*8)){throw new Error('Number exeeds range');}var arr=new Uint8Array(length);for(var i=0,j=1;i<8;i++,j*=0x100){arr[i]=d/j&0xff;}return arr;};var errorMessageForCode=function errorMessageForCode(code){var errorMessage='UNDEFINED_ERROR';if(code&&code<Object.values(CommitStatus).length){errorMessage=Object.keys(CommitStatus)[Object.values(CommitStatus).indexOf(code)];}return errorMessage;};var DEFAULT_USER_UNIT='aergo';var DEFAULT_NETWORK_UNIT='aer';/**
	 * A wrapper around amounts with units.
	 * Over the network, amounts are sent as raw bytes.
	 * In the client, they are exposed as BigInts, but also compatible with plain strings or numbers (if smaller than 2^31-1)
	 * Uses 'aergo' as default unit when passing strings or numbers.
	 * Uses 'aer' as default unit when passing BigInts, buffers or byte arrays.
	 * Whenever you pass amounts to other functions, they will try to coerce them using this class.
	 */var Amount=/*#__PURE__*/function(){_createClass(Amount,null,[{key:"_valueFromString",// value in base unit
// unit for displaying
value:function _valueFromString(value){var unit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';if(unit===''){unit=DEFAULT_USER_UNIT;}if(!UNITS.NATIVE_TOKEN.unitSize.hasOwnProperty(unit)){throw new TypeError("unrecognized unit: ".concat(unit));}var prec=UNITS.NATIVE_TOKEN.unitSize[unit];if(prec>0){value=Amount.moveDecimalPoint(value,prec);}return jsbiUmd.BigInt(value);}}]);function Amount(value){var unit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';var newUnit=arguments.length>2?arguments[2]:undefined;_classCallCheck(this,Amount);_defineProperty(this,"value",void 0);_defineProperty(this,"unit",void 0);if(value instanceof Amount){return value;}if(typeof value==='string'){var _value$split=value.split(' ',2),_value$split2=_slicedToArray(_value$split,2),amount=_value$split2[0],_unit=_value$split2[1];unit=unit||_unit;this.value=Amount._valueFromString(amount,unit);}else if(typeof value==='number'){this.value=Amount._valueFromString(''+value,unit);}else if(value instanceof jsbiUmd){if(typeof unit==='undefined'||unit===''){unit=DEFAULT_NETWORK_UNIT;}this.value=jsbiUmd.BigInt(value);}else if(value instanceof Buffer||value instanceof Uint8Array){if(typeof unit==='undefined'||unit===''){unit=DEFAULT_NETWORK_UNIT;}this.value=jsbiUmd.BigInt(toHexString(value,true));}else{throw new Error("Instantiate Amount with JSBI|number|string|Buffer|Uint8Array, not ".concat(value," (").concat(_typeof(value),")"));}if(typeof this.unit==='undefined'){this.unit=unit;}if(typeof this.unit==='undefined'||this.unit===''){this.unit=DEFAULT_USER_UNIT;}// Set new unit for displaying
if(typeof newUnit!=='undefined'){this.unit=newUnit;}}/**
	   * Returns value as byte buffer
	   */_createClass(Amount,[{key:"asBytes",value:function asBytes(){return fromHexString(this.value.toString(16));}},{key:"toJSON",value:function toJSON(){return this.value.toString();}/**
	     * Returns formatted string including unit
	     */},{key:"toString",value:function toString(){return"".concat(this.formatNumber()," ").concat(this.unit);}/**
	     * Move decimal point in string by digits, positive to the right, negative to the left.
	     * This extends the string if necessary.
	     * Example: ("0.0001", 4 => "1"), ("0.0001", -4 => "0.00000001")
	     * @param str 
	     * @param digits 
	     */},{key:"formatNumber",value:function formatNumber(){var unit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';if(unit==='')unit=this.unit;if(!UNITS.NATIVE_TOKEN.unitSize.hasOwnProperty(unit)){throw new TypeError("unrecognized unit: ".concat(unit));}var prec=UNITS.NATIVE_TOKEN.unitSize[this.unit];return Amount.moveDecimalPoint(this.value.toString(),-prec);}/**
	     * Convert to another unit
	     * @param unit string (aer, gaer, aergo)
	     */},{key:"toUnit",value:function toUnit(unit){return new Amount(this.value,'',unit);}},{key:"compare",value:function compare(otherAmount){if(!(otherAmount instanceof Amount))otherAmount=new Amount(otherAmount);var _ref=[this.toUnit('aer').value,otherAmount.toUnit('aer').value],a=_ref[0],b=_ref[1];return jsbiUmd.lessThan(a,b)?-1:jsbiUmd.equal(a,b)?0:1;}},{key:"equal",value:function equal(otherAmount){return this.compare(otherAmount)===0;}},{key:"add",value:function add(otherAmount){var otherValue=otherAmount instanceof Amount?jsbiUmd.BigInt(otherAmount.value):jsbiUmd.BigInt(otherAmount);var sum=jsbiUmd.add(this.value,otherValue);return new Amount(sum,this.unit);}},{key:"sub",value:function sub(otherAmount){var otherValue=otherAmount instanceof Amount?jsbiUmd.BigInt(otherAmount.value):jsbiUmd.BigInt(otherAmount);var sum=jsbiUmd.subtract(this.value,otherValue);return new Amount(sum,this.unit);}}],[{key:"moveDecimalPoint",value:function moveDecimalPoint(str,digits){if(digits===0||str==='0')return str;if(str.indexOf('.')===-1){str=str+'.';}var idx=str.indexOf('.');// Extend string to have enough space to move decimal point
if(digits>str.length-idx){str=str.padEnd(digits+idx+1,'0');}if(digits<-idx){str=str.padStart(str.length-idx-digits,'0');}// remove decimal point and reinsert at new location
idx=str.indexOf('.');str=str.replace('.','');str=str.substr(0,idx+digits)+'.'+str.substr(idx+digits);// remove trailing 0 and .
str=str.replace(/\.?0*$/,'');// remove leading 0
str=str.replace(/^0+/,'');// add leading 0 before .
str=str.replace(/^\./,'0.');return str;}}]);return Amount;}();var Block=/*#__PURE__*/function(){function Block(data){_classCallCheck(this,Block);_defineProperty(this,"hash",void 0);_defineProperty(this,"header",void 0);_defineProperty(this,"body",void 0);Object.assign(this,data);}_createClass(Block,[{key:"toGrpc",value:function toGrpc(){throw new Error('Not implemented');}}],[{key:"fromGrpc",value:function fromGrpc(grpcObject){var obj=grpcObject.toObject();if(obj.body){obj.body.txsList=grpcObject.getBody().getTxsList().map(function(tx){return Tx.fromGrpc(tx);});}return new Block({hash:Block.encodeHash(grpcObject.getHash_asU8()),header:_objectSpread({},obj.header,{chainid:Buffer$1.from(grpcObject.getHeader().getChainid_asU8()).toString('utf8'),prevblockhash:Block.encodeHash(grpcObject.getHeader().getPrevblockhash_asU8()),coinbaseaccount:new Address(grpcObject.getHeader().getCoinbaseaccount_asU8()),pubkey:Block.encodeHash(grpcObject.getHeader().getPubkey_asU8())}),body:obj.body});}},{key:"encodeHash",value:function encodeHash(bytes){return bs58.encode(Buffer$1.from(bytes));}},{key:"decodeHash",value:function decodeHash(bs58string){return bs58.decode(bs58string);}}]);return Block;}();var Tx=/*#__PURE__*/function(){function Tx(data){_classCallCheck(this,Tx);_defineProperty(this,"hash",void 0);_defineProperty(this,"nonce",void 0);_defineProperty(this,"from",void 0);_defineProperty(this,"to",void 0);_defineProperty(this,"amount",void 0);_defineProperty(this,"payload",void 0);_defineProperty(this,"sign",void 0);_defineProperty(this,"type",void 0);_defineProperty(this,"limit",void 0);_defineProperty(this,"price",void 0);_defineProperty(this,"chainIdHash",void 0);Object.assign(this,data);this.amount=new Amount(this.amount||0);this.price=new Amount(this.price||0);}_createClass(Tx,[{key:"toGrpc",value:function toGrpc(){var msgtxbody=new blockchain_pb_2();msgtxbody.setNonce(this.nonce);if(typeof this.from==='undefined'||!this.from){throw new Error('Missing required transaction parameter \'from\'');}msgtxbody.setAccount(new Address(this.from).asBytes());if(typeof this.to!=='undefined'&&this.to!==null){msgtxbody.setRecipient(new Address(this.to).asBytes());}msgtxbody.setAmount(this.amount.asBytes());if(this.payload!=null){msgtxbody.setPayload(Buffer$1.from(this.payload));}if(typeof this.sign==='string'){msgtxbody.setSign(Buffer$1.from(this.sign,'base64'));}else{msgtxbody.setSign(this.sign);}msgtxbody.setType(this.type);if(typeof this.limit!=='undefined'){msgtxbody.setGaslimit(this.limit);}if(typeof this.price!=='undefined'){msgtxbody.setGasprice(this.price.asBytes());}if(typeof this.chainIdHash==='undefined'||!this.chainIdHash){var msg='Missing required transaction parameter \'chainIdHash\'. '+'Use aergoClient.getChainIdHash() to retrieve from connected node, '+'or hard-code for increased security and performance.';throw new Error(msg);}var hashBuffer;if(typeof this.chainIdHash==='string'){hashBuffer=new Uint8Array(Block.decodeHash(this.chainIdHash));}else{hashBuffer=new Uint8Array(Buffer$1.from(this.chainIdHash));}msgtxbody.setChainidhash(hashBuffer);var msgtx=new blockchain_pb_3();if(this.hash!=null){var hash=this.hash;var _hashBuffer;if(typeof hash==='string'){_hashBuffer=new Uint8Array(Buffer$1.from(decodeTxHash(hash)));}else{_hashBuffer=new Uint8Array(Buffer$1.from(hash));}msgtx.setHash(_hashBuffer);}msgtx.setBody(msgtxbody);return msgtx;}}],[{key:"fromGrpc",value:function fromGrpc(grpcObject){return new Tx({hash:encodeTxHash(grpcObject.getHash_asU8()),nonce:grpcObject.getBody().getNonce(),from:new Address(grpcObject.getBody().getAccount_asU8()),to:new Address(grpcObject.getBody().getRecipient_asU8()),amount:new Amount(grpcObject.getBody().getAmount_asU8()),payload:grpcObject.getBody().getPayload_asU8(),sign:grpcObject.getBody().getSign_asB64(),type:grpcObject.getBody().getType(),limit:grpcObject.getBody().getGaslimit(),price:new Amount(grpcObject.getBody().getGasprice_asU8()),chainIdHash:Block.encodeHash(grpcObject.getBody().getChainidhash_asU8())});}}]);return Tx;}();var getOwnPropertyDescriptors=function getOwnPropertyDescriptors(originalObject){return Object.getOwnPropertyNames(originalObject).reduce(function(descriptors,name){descriptors[name]=Object.getOwnPropertyDescriptor(originalObject,name);return descriptors;},{});};var kCustomPromisifiedSymbol=Symbol('util.promisify.custom');function promisify(original,context){if(typeof context==='undefined'){context=this;}if(typeof original!=='function'){throw new Error('original is not a function','Function',original);}function fn(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return new Promise(function(resolve,reject){original.call.apply(original,[context].concat(args,[function(err,value){if(err){return reject(err);}resolve(value);}]));});}Object.setPrototypeOf(fn,Object.getPrototypeOf(original));Object.defineProperty(fn,kCustomPromisifiedSymbol,{value:fn,enumerable:false,writable:false,configurable:true});return Object.defineProperties(fn,getOwnPropertyDescriptors(original));}/**
	 * Accounts controller. It is exposed at `aergoClient.accounts`.
	 */var Accounts=/*#__PURE__*/function(){function Accounts(aergo){_classCallCheck(this,Accounts);_defineProperty(this,"client",void 0);this.client=aergo.client;}/**
	   * Create a new account in the node.
	   * @param {string} passphrase 
	   * @returns {Promise<Address>} newly created account address
	   */_createClass(Accounts,[{key:"create",value:function create(passphrase){var _this=this;return new Promise(function(resolve,reject){var personal=new rpc_pb_2();personal.setPassphrase(passphrase);try{_this.client.client.createAccount(personal,function(err,rsp){if(err){reject(err);}else{var createdAddress=rsp.getAddress_asU8();resolve(new Address(createdAddress));}});}catch(exception){reject(exception);}});}/**
	     * Get list of accounts.
	     * @returns {Promise<Address[]>} list of account addresses
	     */},{key:"get",value:function get(){var _this2=this;return new Promise(function(resolve,reject){var empty=new rpc_pb_1();try{_this2.client.client.getAccounts(empty,function(err,rsp){if(err){reject(err);}else{var accounts=rsp.getAccountsList();var addresses=accounts.map(function(account){return new Address(account.getAddress_asU8());});resolve(addresses);}});}catch(exception){reject(exception);}});}/**
	     * Unlock account.
	     * @param {Address|string} address 
	     * @param {Address|string} passphrase 
	     * @returns {Promise<Address>} unlocked account address
	     */},{key:"unlock",value:function unlock(address,passphrase){var _this3=this;return new Promise(function(resolve,reject){var account=new account_pb_1();account.setAddress(new Address(address).asBytes());var personal=new rpc_pb_2();personal.setPassphrase(passphrase);personal.setAccount(account);try{_this3.client.client.unlockAccount(personal,function(err,rsp){if(err){reject(err);}else{var createdAddress=rsp.getAddress_asU8();resolve(new Address(createdAddress));}});}catch(exception){reject(exception);}});}/**
	     * Lock account.
	     * @param {Address|string} address 
	     * @param {Address|string} passphrase 
	     * @returns {Promise<Address>} locked account address
	     */},{key:"lock",value:function lock(address,passphrase){var _this4=this;return new Promise(function(resolve,reject){var account=new account_pb_1();account.setAddress(new Address(address).asBytes());var personal=new rpc_pb_2();personal.setPassphrase(passphrase);personal.setAccount(account);try{_this4.client.client.lockAccount(personal,function(err,rsp){if(err){reject(err);}else{var createdAddress=rsp.getAddress_asU8();resolve(new Address(createdAddress));}});}catch(exception){reject(exception);}});}/**
	     * Convenience method to send transaction from account.
	     * This method automatically retrieves the nonce, signs the transaction, and sends it to the network.
	     * @param {Tx} tx transaction data
	     * @returns {Promise<string>} transaction hash
	     */},{key:"sendTransaction",value:function sendTransaction(tx){if(!(tx instanceof Tx)){tx=new Tx(tx);}return promisify(this.client.client.sendTX,this.client.client)(tx.toGrpc()).then(function(result){var obj=result.toObject();if(obj.error&&obj.detail){throw new Error(errorMessageForCode(obj.error)+': '+obj.detail);}return encodeTxHash(result.getHash_asU8());});}/**
	     * Sign transaction.
	     * @param {Tx} tx transaction data
	     * @returns {Promise<Tx>} transaction data including signature
	     */},{key:"signTransaction",value:function signTransaction(_tx){var tx;if(!(_tx instanceof Tx)){tx=new Tx(_tx);}else{tx=_tx;}return promisify(this.client.client.signTX,this.client.client)(tx.toGrpc()).then(function(signedtx){return Tx.fromGrpc(signedtx);});}}]);return Accounts;}();var BlockMetadata=/*#__PURE__*/function(){function BlockMetadata(data){_classCallCheck(this,BlockMetadata);_defineProperty(this,"hash",void 0);_defineProperty(this,"header",void 0);_defineProperty(this,"txcount",void 0);Object.assign(this,data);}_createClass(BlockMetadata,[{key:"toGrpc",value:function toGrpc(){throw new Error('Not implemented');}}],[{key:"fromGrpc",value:function fromGrpc(grpcObject){var obj=grpcObject.toObject();return new BlockMetadata({hash:Block.encodeHash(grpcObject.getHash_asU8()),header:_objectSpread({},obj.header,{chainid:Buffer$1.from(grpcObject.getHeader().getChainid_asU8()).toString('utf8'),prevblockhash:Block.encodeHash(grpcObject.getHeader().getPrevblockhash_asU8()),coinbaseaccount:new Address(grpcObject.getHeader().getCoinbaseaccount_asU8()),pubkey:Block.encodeHash(grpcObject.getHeader().getPubkey_asU8())}),txcount:obj.txcount});}}]);return BlockMetadata;}();var Peer=/*#__PURE__*/function(){function Peer(data){_classCallCheck(this,Peer);Object.assign(this,data);}_createClass(Peer,[{key:"toGrpc",value:function toGrpc(){throw new Error('Not implemented');}}],[{key:"fromGrpc",value:function fromGrpc(grpcObject){var obj=grpcObject.toObject();var bestblock=grpcObject.getBestblock();if(bestblock){obj.bestblock.blockhash=Block.encodeHash(bestblock.getBlockhash_asU8());}obj.address={address:obj.address.address,port:obj.address.port,peerid:bs58.encode(Buffer.from(grpcObject.getAddress().getPeerid_asU8()))};return new Peer(obj);}}]);return Peer;}();var State=/*#__PURE__*/function(){function State(data){_classCallCheck(this,State);_defineProperty(this,"nonce",void 0);_defineProperty(this,"balance",void 0);_defineProperty(this,"codehash",void 0);_defineProperty(this,"storageroot",void 0);_defineProperty(this,"sqlrecoverypoint",void 0);Object.assign(this,data);}_createClass(State,[{key:"toGrpc",value:function toGrpc(){throw new Error('not implemented');}}],[{key:"fromGrpc",value:function fromGrpc(grpcObject){return new State({nonce:grpcObject.getNonce(),balance:new Amount(grpcObject.getBalance_asU8()),codehash:grpcObject.getCodehash_asB64(),storageroot:grpcObject.getStorageroot_asB64(),sqlrecoverypoint:grpcObject.getSqlrecoverypoint()});}}]);return State;}();var ChainInfo=/*#__PURE__*/function(){function ChainInfo(data){_classCallCheck(this,ChainInfo);_defineProperty(this,"chainid",void 0);_defineProperty(this,"bpnumber",void 0);_defineProperty(this,"maxblocksize",void 0);_defineProperty(this,"maxtokens",void 0);_defineProperty(this,"stakingminimum",void 0);Object.assign(this,data);}_createClass(ChainInfo,[{key:"toGrpc",value:function toGrpc(){throw new Error('Not implemented');}}],[{key:"fromGrpc",value:function fromGrpc(grpcObject){var chainid=grpcObject.getId();return new ChainInfo({chainid:{magic:chainid.getMagic(),public:chainid.getPublic(),mainnet:chainid.getMainnet(),consensus:chainid.getConsensus()},bpnumber:grpcObject.getBpnumber(),maxblocksize:grpcObject.getMaxblocksize(),maxtokens:new Amount(grpcObject.getMaxtokens_asU8()),stakingminimum:new Amount(grpcObject.getStakingminimum_asU8())});}}]);return ChainInfo;}();var Event=/*#__PURE__*/function(){function Event(data){_classCallCheck(this,Event);_defineProperty(this,"address",void 0);_defineProperty(this,"args",void 0);_defineProperty(this,"eventName",void 0);_defineProperty(this,"eventidx",void 0);_defineProperty(this,"blockhash",void 0);_defineProperty(this,"txhash",void 0);_defineProperty(this,"blockno",void 0);_defineProperty(this,"txidx",void 0);Object.assign(this,data);this.address=new Address(this.address);}_createClass(Event,[{key:"toGrpc",value:function toGrpc(){throw new Error('Not implemented');}}],[{key:"fromGrpc",value:function fromGrpc(grpcObject){return new Event({args:JSON.parse(grpcObject.getJsonargs()),address:new Address(grpcObject.getContractaddress_asU8()),eventName:grpcObject.getEventname(),blockhash:Block.encodeHash(grpcObject.getBlockhash_asU8()),txhash:Block.encodeHash(grpcObject.getTxhash_asU8()),txidx:grpcObject.getTxindex(),eventidx:grpcObject.getEventidx(),blockno:grpcObject.getBlockno()});}}]);return Event;}();function isArgMap(obj){return obj instanceof Map;}var FilterInfo=/*#__PURE__*/function(){function FilterInfo(data){_classCallCheck(this,FilterInfo);_defineProperty(this,"address",void 0);_defineProperty(this,"args",void 0);_defineProperty(this,"eventName",void 0);_defineProperty(this,"blockfrom",0);_defineProperty(this,"blockto",0);_defineProperty(this,"desc",true);Object.assign(this,data);this.address=new Address(this.address);}_createClass(FilterInfo,[{key:"toGrpc",value:function toGrpc(){var fi=new blockchain_pb_7();fi.setContractaddress(this.address.asBytes());if(this.args){// The RPC handler only understands maps, not simple arrays
// The advantage of this is that you can query positional arguments directly
// Herajs supports both, so pass args either as a Map([[idx, value]]) or 0-indexes array [value]
var argsAsObj;if(isArgMap(this.args)){argsAsObj=Array.from(this.args).reduce(function(obj,_ref){var _ref2=_slicedToArray(_ref,2),idx=_ref2[0],value=_ref2[1];obj[''+idx]=value;return obj;},{});}else{argsAsObj=this.args.reduce(function(obj,value,idx){obj[''+idx]=value;return obj;},{});}var argsAsJson=JSON.stringify(argsAsObj);fi.setArgfilter(Buffer$1.from(argsAsJson));}if(this.eventName){fi.setEventname(this.eventName);}fi.setBlockfrom(this.blockfrom);fi.setBlockto(this.blockto);fi.setDesc(this.desc);return fi;}}],[{key:"fromGrpc",value:function fromGrpc(grpcObject){return new FilterInfo({args:JSON.parse(Buffer$1.from(grpcObject.getArgfilter_asU8()).toString()),address:new Address(grpcObject.getContractaddress_asU8()),eventName:grpcObject.getEventname(),blockfrom:grpcObject.getBlockfrom(),blockto:grpcObject.getBlockto(),desc:grpcObject.getDesc()});}}]);return FilterInfo;}();var TransactionError=/*#__PURE__*/function(_Error){_inherits(TransactionError,_Error);function TransactionError(){_classCallCheck(this,TransactionError);return _possibleConstructorReturn(this,_getPrototypeOf(TransactionError).apply(this,arguments));}return TransactionError;}(_wrapNativeSuper(Error));var CommitStatus$1=typesNode.CommitStatus;function waterfall(fns){return(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee(input){var result,_iteratorNormalCompletion,_didIteratorError,_iteratorError,_iterator,_step,fn;return regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:result=input;_iteratorNormalCompletion=true;_didIteratorError=false;_iteratorError=undefined;_context.prev=4;_iterator=fns[Symbol.iterator]();case 6:if(_iteratorNormalCompletion=(_step=_iterator.next()).done){_context.next=14;break;}fn=_step.value;_context.next=10;return fn(result);case 10:result=_context.sent;case 11:_iteratorNormalCompletion=true;_context.next=6;break;case 14:_context.next=20;break;case 16:_context.prev=16;_context.t0=_context["catch"](4);_didIteratorError=true;_iteratorError=_context.t0;case 20:_context.prev=20;_context.prev=21;if(!_iteratorNormalCompletion&&_iterator.return!=null){_iterator.return();}case 23:_context.prev=23;if(!_didIteratorError){_context.next=26;break;}throw _iteratorError;case 26:return _context.finish(23);case 27:return _context.finish(20);case 28:return _context.abrupt("return",result);case 29:case"end":return _context.stop();}}},_callee,this,[[4,16,20,28],[21,,23,27]]);}));return function(_x){return _ref.apply(this,arguments);};}());}function marshalEmpty(){return _marshalEmpty.apply(this,arguments);}function _marshalEmpty(){_marshalEmpty=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee2(){return regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:return _context2.abrupt("return",new rpc_pb_1());case 1:case"end":return _context2.stop();}}},_callee2,this);}));return _marshalEmpty.apply(this,arguments);}/**
	 * Main aergo client controller.
	 */var AergoClient=/*#__PURE__*/function(){/**
	   * Create a new auto-configured client with:
	   * 
	   * .. code-block:: javascript
	   * 
	   *     import AergoClient from '@herajs/client';
	   *     const aergo = new AergoClient();
	   * 
	   * @param [object] configuration. Unused at the moment.
	   * @param [Provider] custom configured provider. By default a provider is configured automatically depending on the environment.
	   */function AergoClient(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var provider=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;_classCallCheck(this,AergoClient);_defineProperty(this,"config",void 0);_defineProperty(this,"client",void 0);_defineProperty(this,"accounts",void 0);_defineProperty(this,"target",void 0);_defineProperty(this,"chainIdHash",void 0);this.config=_objectSpread({},config);this.client=provider||this.defaultProvider();this.accounts=new Accounts(this);}_createClass(AergoClient,[{key:"defaultProvider",value:function defaultProvider(){// returns a new instance of defaultProviderClass
// which will be overriden during build according to platform
return new AergoClient.defaultProviderClass();}/**
	     * Set a new provider
	     * @param {Provider} provider
	     */},{key:"setProvider",value:function setProvider(provider){this.client=provider;this.chainIdHash=undefined;}},{key:"getConfig",value:function getConfig(){return this.config;}},{key:"isConnected",value:function isConnected(){// FIXME
return false;}},{key:"grpcMethod",value:function grpcMethod(method){var _this2=this;return function(request){return promisify(method,_this2.client.client)(request);};}/**
	     * Set the chain id hash to use for subsequent transactions.
	     * @param hash string (base58 encoded) or byte array
	     */},{key:"setChainIdHash",value:function setChainIdHash(hash){if(typeof hash==='string'){this.chainIdHash=bs58.decode(hash);}else{this.chainIdHash=hash;}}/**
	     * Request chain id hash. This automatically gathers the chain id hash
	     * from the current node if not specified.
	     * @param enc set to 'base58' to retrieve the hash encoded in base58. Otherwise returns a Uint8Array.
	     * @returns {Promise<Uint8Array | string>} Uint8Array by default, base58 encoded string if enc = 'base58'.
	     */ //async getChainIdHash(enc?: 'base58'): Promise<string>;
//async getChainIdHash(enc?: '' | undefined): Promise<Uint8Array>;
},{key:"getChainIdHash",value:function(){var _getChainIdHash=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee3(enc){var hash;return regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!(typeof this.chainIdHash==='undefined')){_context3.next=3;break;}_context3.next=3;return this.blockchain();case 3:hash=this.chainIdHash;if(!(enc==='base58')){_context3.next=6;break;}return _context3.abrupt("return",bs58.encode(Buffer$1.from(hash)));case 6:return _context3.abrupt("return",hash);case 7:case"end":return _context3.stop();}}},_callee3,this);}));return function getChainIdHash(_x2){return _getChainIdHash.apply(this,arguments);};}()/**
	     * Request current status of blockchain.
	     * @returns {Promise<object>} an object detailing the current status
	     */},{key:"blockchain",value:function blockchain(){var _this=this;return waterfall([marshalEmpty,this.grpcMethod(this.client.client.blockchain),/*#__PURE__*/function(){var _unmarshal=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee4(response){return regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:if(typeof _this.chainIdHash==='undefined'){// set chainIdHash automatically
_this.setChainIdHash(Buffer$1.from(response.getBestChainIdHash_asU8()));}return _context4.abrupt("return",_objectSpread({},response.toObject(),{bestBlockHash:Block.encodeHash(response.getBestBlockHash_asU8()),bestChainIdHash:Block.encodeHash(response.getBestChainIdHash_asU8())}));case 2:case"end":return _context4.stop();}}},_callee4,this);}));return function unmarshal(_x3){return _unmarshal.apply(this,arguments);};}()])(null);}/**
	     * Request current status of blockchain.
	     * @returns {Promise<object>} an object detailing the current status
	     */},{key:"getChainInfo",value:function getChainInfo(){return waterfall([marshalEmpty,this.grpcMethod(this.client.client.getChainInfo),/*#__PURE__*/function(){var _unmarshal2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee5(response){return regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:return _context5.abrupt("return",ChainInfo.fromGrpc(response));case 1:case"end":return _context5.stop();}}},_callee5,this);}));return function unmarshal(_x4){return _unmarshal2.apply(this,arguments);};}()])(null);}/**
	     * Request current status of node.
	     * @returns {Promise<any>} an object detailing the state of various node components
	     */},{key:"getNodeState",value:function getNodeState(component){var timeout=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5;return waterfall([/*#__PURE__*/function(){var _marshal=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee6(component){var params;return regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:params=new rpc_pb_13();params.setTimeout(fromNumber(timeout));if(typeof component!=='undefined'){params.setComponent(Buffer$1.from(component));}return _context6.abrupt("return",params);case 4:case"end":return _context6.stop();}}},_callee6,this);}));return function marshal(_x5){return _marshal.apply(this,arguments);};}(),this.grpcMethod(this.client.client.nodeState),/*#__PURE__*/function(){var _unmarshal3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee7(response){return regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:return _context7.abrupt("return",JSON.parse(Buffer$1.from(response.getValue_asU8()).toString()));case 1:case"end":return _context7.stop();}}},_callee7,this);}));return function unmarshal(_x6){return _unmarshal3.apply(this,arguments);};}()])(component);}/**
	     * Get transaction information in the aergo node. 
	     * If transaction is in the block return result with block hash and index.
	     * @param {string} txhash transaction hash
	     * @returns {Promise<object>} transaction details, object of tx: <Tx> and block: { hash, idx }
	     */},{key:"getTransaction",value:function getTransaction(txhash){var _this3=this;var singleBytes=new typesNode.SingleBytes();singleBytes.setValue(Uint8Array.from(decodeTxHash(txhash)));return new Promise(function(resolve,reject){_this3.client.client.getBlockTX(singleBytes,function(err,result){if(err){_this3.client.client.getTX(singleBytes,function(err,result){if(err){reject(err);}else{var res={};res.tx=Tx.fromGrpc(result);resolve(res);}});}else{var res={};res.block={hash:Block.encodeHash(result.getTxidx().getBlockhash_asU8()),idx:result.getTxidx().getIdx()};res.tx=Tx.fromGrpc(result.getTx());resolve(res);}});});}/**
	     * Retrieve information about a block.
	     * 
	     * @param hashOrNumber either 32-byte block hash encoded as a bs58 string or block height as a number.
	     * @returns block details
	     */},{key:"getBlock",value:function getBlock(hashOrNumber){return waterfall([/*#__PURE__*/function(){var _marshal2=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee8(hashOrNumber){var input,singleBytes;return regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:if(!(typeof hashOrNumber==='undefined')){_context8.next=2;break;}throw new Error('Missing argument block hash or number');case 2:if(typeof hashOrNumber==='string'){input=Block.decodeHash(hashOrNumber);}else if(typeof hashOrNumber==='number'){input=fromNumber(hashOrNumber);}if(!(input.length!=32&&input.length!=8)){_context8.next=5;break;}throw new Error('Invalid block hash. Must be 32 byte encoded in bs58. Did you mean to pass a block number?');case 5:singleBytes=new rpc_pb_3();singleBytes.setValue(Uint8Array.from(input));return _context8.abrupt("return",singleBytes);case 8:case"end":return _context8.stop();}}},_callee8,this);}));return function marshal(_x7){return _marshal2.apply(this,arguments);};}(),this.grpcMethod(this.client.client.getBlock),/*#__PURE__*/function(){var _unmarshal4=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee9(response){return regeneratorRuntime.wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:return _context9.abrupt("return",Block.fromGrpc(response));case 1:case"end":return _context9.stop();}}},_callee9,this);}));return function unmarshal(_x8){return _unmarshal4.apply(this,arguments);};}()])(hashOrNumber);}/**
	     * Retrieve the last n blocks, beginning from given block .
	     * 
	     * @param {string|number} hashOrNumber either 32-byte block hash encoded as a bs58 string or block height as a number.
	     * @param {number} size number of blocks to return
	     * @returns {Promise<Block[]>} list of block headers (blocks without body)
	     */},{key:"getBlockHeaders",value:function getBlockHeaders(hashOrNumber){var size=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;var offset=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var desc=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;var params=new typesNode.ListParams();if(typeof hashOrNumber==='string'){hashOrNumber=Block.decodeHash(hashOrNumber);if(hashOrNumber.length!=32){throw new Error('Invalid block hash. Must be 32 byte encoded in bs58. Did you mean to pass a block number?');}params.setHash(Uint8Array.from(hashOrNumber));}else if(typeof hashOrNumber==='number'){params.setHeight(hashOrNumber);}else{throw new Error('Block hash or number required.');}params.setSize(size);params.setOffset(offset);params.setAsc(!desc);return promisify(this.client.client.listBlockHeaders,this.client.client)(params).then(function(result){return result.getBlocksList().map(function(item){return Block.fromGrpc(item);});});}},{key:"getBlockStream",value:function getBlockStream(){var empty=new typesNode.Empty();var stream=this.client.client.listBlockStream(empty);try{stream.on('error',function(error){if(error.code===1){// grpc.status.CANCELLED
return;}});}catch(e){// ignore. 'error' does not work on grpc-web implementation
}return{_stream:stream,on:function on(ev,callback){return stream.on(ev,function(data){return callback(Block.fromGrpc(data));});},cancel:function cancel(){return stream.cancel();}};}},{key:"getBlockMetadataStream",value:function getBlockMetadataStream(){var empty=new typesNode.Empty();var stream=this.client.client.listBlockMetadataStream(empty);try{stream.on('error',function(error){if(error.code===1){// grpc.status.CANCELLED
return;}});}catch(e){// ignore. 'error' does not work on grpc-web implementation
}return{_stream:stream,on:function on(ev,callback){return stream.on(ev,function(data){return callback(BlockMetadata.fromGrpc(data));});},cancel:function cancel(){return stream.cancel();}};}/**
	     * Returns a stream that yields new events matching the specified filter in real-time.
	     * 
	     * .. code-block:: javascript
	     * 
	     *      const stream = aergo.getEventStream({
	     *          address: 'Am....'
	     *      });
	     *      stream.on('data', (event) => {
	     *         console.log(event);
	     *         stream.cancel();
	     *      });
	     * 
	     * @param {FilterInfo} filter :class:`FilterInfo`
	     * @returns {Stream<Event>} event stream
	     */},{key:"getEventStream",value:function getEventStream(filter){var fi=new FilterInfo(filter);var query=fi.toGrpc();var stream=this.client.client.listEventStream(query);try{stream.on('error',function(error){if(error.code===1){// grpc.status.CANCELLED
return;}});}catch(e){// ignore. 'error' does not work on grpc-web implementation
}return{_stream:stream,on:function on(ev,callback){return stream.on(ev,function(data){return callback(Event.fromGrpc(data));});},cancel:function cancel(){return stream.cancel();}};}/**
	     * Retrieve account state, including current balance and nonce.
	     * @param {string} address Account address encoded in Base58check
	     * @returns {Promise<object>} account state
	     */},{key:"getState",value:function getState(address){var singleBytes=new typesNode.SingleBytes();singleBytes.setValue(Uint8Array.from(new Address(address).asBytes()));return promisify(this.client.client.getState,this.client.client)(singleBytes).then(function(grpcObject){return State.fromGrpc(grpcObject);});}},{key:"getNonce",value:function getNonce(address){var singleBytes=new typesNode.SingleBytes();singleBytes.setValue(Uint8Array.from(new Address(address).asBytes()));return promisify(this.client.client.getState,this.client.client)(singleBytes).then(function(grpcObject){return grpcObject.getNonce();});}},{key:"verifyTransaction",value:function verifyTransaction()/*tx*/{// Untested
return promisify(this.client.client.verifyTX,this.client.client)()(function(grpcObject){return Tx.fromGrpc(grpcObject);});}/**
	     * Send a signed transaction to the network.
	     * @param {Tx} tx signed transaction
	     * @returns {Promise<string>} transaction hash
	     */},{key:"sendSignedTransaction",value:function sendSignedTransaction(tx){var _this4=this;return new Promise(function(resolve,reject){var txs=new typesNode.TxList();if(!(tx instanceof Tx)){tx=new Tx(tx);}txs.addTxs(tx.toGrpc(),0);_this4.client.client.commitTX(txs,function(err,result){if(err==null&&result.getResultsList()[0].getError()){var obj=result.getResultsList()[0].toObject();err=new TransactionError(errorMessageForCode(obj.error)+': '+obj.detail);}if(err){reject(new TransactionError(err.message));}else{resolve(encodeTxHash(result.getResultsList()[0].getHash_asU8()));}});});}/**
	     * Return the top voted-for block producer
	     * @param count number
	     */},{key:"getTopVotes",value:function getTopVotes(count){var id=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"voteBP";var params=new rpc_pb_12();params.setCount(count);params.setId(id);return promisify(this.client.client.getVotes,this.client.client)(params).then(function(state){return state.getVotesList().map(function(item){return{amount:new Amount(item.getAmount_asU8()),candidate:bs58.encode(Buffer$1.from(item.getCandidate_asU8()))};});});}/**
	     * Return information for account name
	     * @param {string} address Account address encoded in Base58check
	     */},{key:"getStaking",value:function getStaking(address){var singleBytes=new typesNode.SingleBytes();singleBytes.setValue(Uint8Array.from(new Address(address).asBytes()));return promisify(this.client.client.getStaking,this.client.client)(singleBytes).then(function(grpcObject){return{amount:new Amount(grpcObject.getAmount_asU8()),when:grpcObject.getWhen()};});}/**
	     * Retrieve the transaction receipt for a transaction
	     * @param {string} txhash transaction hash
	     * @return {Promise<object>} transaction receipt
	     */},{key:"getTransactionReceipt",value:function getTransactionReceipt(txhash){var singleBytes=new typesNode.SingleBytes();singleBytes.setValue(Uint8Array.from(decodeTxHash(txhash)));return promisify(this.client.client.getReceipt,this.client.client)(singleBytes).then(function(grpcObject){var obj=grpcObject.toObject();return{contractaddress:new Address(grpcObject.getContractaddress_asU8()),result:obj.ret,status:obj.status,fee:new Amount(grpcObject.getFeeused_asU8()),cumulativefee:new Amount(grpcObject.getCumulativefeeused_asU8()),blockno:obj.blockno,blockhash:Block.encodeHash(grpcObject.getBlockhash_asU8())};});}/**
	     * Query contract ABI
	     * @param {FunctionCall} functionCall call details
	     * @returns {Promise<object>} result of query
	     */},{key:"queryContract",value:function queryContract(functionCall){var query=functionCall.toGrpc();return promisify(this.client.client.queryContract,this.client.client)(query).then(function(grpcObject){return JSON.parse(Buffer$1.from(grpcObject.getValue()).toString());});}/**
	     * Query contract state
	     * This only works vor variables explicitly defines as state variables.
	     * @param {StateQuery} stateQuery query details obtained from contract.queryState()
	     * @returns {Promise<object>} result of query
	     */},{key:"queryContractState",value:function queryContractState(stateQuery){var query=stateQuery.toGrpc();return promisify(this.client.client.queryContractState,this.client.client)(query).then(function(grpcObject){var list=grpcObject.getVarproofsList();if(list.length===0)return null;if(list.length===1){var varProof=list[0];if(varProof.getInclusion()===false){var addr=new Address(query.getContractaddress_asU8());throw Error("queried variable ".concat(query.getStoragekeysList()[0]," does not exist in state at address ").concat(addr.toString()));}var value=varProof.getValue_asU8();if(value.length>0){return JSON.parse(Buffer$1.from(value).toString());}}return list.map(function(varProof){var value=varProof.getValue_asU8();if(value.length>0){return JSON.parse(Buffer$1.from(value).toString());}return void 0;});});}/**
	     * Query contract state
	     * This only works vor variables explicitly defines as state variables.
	     * @param {FilterInfo} filter :class:`FilterInfo`
	     * @returns {Event[]} list of events
	     */},{key:"getEvents",value:function getEvents(filter){var fi=new FilterInfo(filter);var query=fi.toGrpc();return promisify(this.client.client.listEvents,this.client.client)(query).then(function(grpcObject){var list=grpcObject.getEventsList();return list.map(function(item){return Event.fromGrpc(item);});});}/**
	     * Query contract ABI
	     * @param {string} address of contract
	     * @returns {Promise<object>} abi
	     */},{key:"getABI",value:function getABI(address){var singleBytes=new typesNode.SingleBytes();singleBytes.setValue(Uint8Array.from(new Address(address).asBytes()));return promisify(this.client.client.getABI,this.client.client)(singleBytes).then(function(grpcObject){var obj=grpcObject.toObject();return{language:obj.language,version:obj.version,functions:obj.functionsList.map(function(item){return{name:item.name,arguments:item.argumentsList,view:item.view,payable:item.payable};}),state_variables:obj.stateVariablesList};});}/**
	     * Get list of peers of connected node
	     */},{key:"getPeers",value:function getPeers(){var showself=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;var showhidden=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var query=new rpc_pb_11();query.setNohidden(!showhidden);query.setShowself(showself);return promisify(this.client.client.getPeers,this.client.client)(query).then(function(grpcObject){return grpcObject.getPeersList().map(function(peer){return Peer.fromGrpc(peer);});});}/**
	     * Return information for account name
	     * @param name 
	     */},{key:"getNameInfo",value:function getNameInfo(name){var nameObj=new rpc_pb_10();nameObj.setName(name);return promisify(this.client.client.getNameInfo,this.client.client)(nameObj).then(function(grpcObject){var obj=grpcObject.toObject();return{name:obj.name.name,owner:new Address(grpcObject.getOwner_asU8()),destination:new Address(grpcObject.getDestination_asU8())};});}/**
	     * Return consensus info. The included fields can differ by consensus type.
	     */},{key:"getConsensusInfo",value:function getConsensusInfo(){return waterfall([marshalEmpty,this.grpcMethod(this.client.client.getConsensusInfo),/*#__PURE__*/function(){var _unmarshal5=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee10(response){var obj,result;return regeneratorRuntime.wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:obj=response.toObject();result={type:obj.type,info:obj.info?JSON.parse(obj.info):{},bpsList:obj.bpsList.map(function(info){return JSON.parse(info);})};return _context10.abrupt("return",result);case 3:case"end":return _context10.stop();}}},_callee10,this);}));return function unmarshal(_x9){return _unmarshal5.apply(this,arguments);};}()])(null);}/**
	     * Return server info
	     */},{key:"getServerInfo",value:function getServerInfo(keys){return waterfall([/*#__PURE__*/function(){var _marshal3=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee11(keys){var params;return regeneratorRuntime.wrap(function _callee11$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:params=new rpc_pb_14();if(typeof keys!=='undefined'){params.setKeyList(keys);}return _context11.abrupt("return",params);case 3:case"end":return _context11.stop();}}},_callee11,this);}));return function marshal(_x10){return _marshal3.apply(this,arguments);};}(),this.grpcMethod(this.client.client.getServerInfo),/*#__PURE__*/function(){var _unmarshal6=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee12(response){var obj,result,configMap,_iteratorNormalCompletion2,_didIteratorError2,_iteratorError2,_iterator2,_step2,_step2$value,key,item;return regeneratorRuntime.wrap(function _callee12$(_context12){while(1){switch(_context12.prev=_context12.next){case 0:obj=response.toObject();result={configMap:new Map(),statusMap:new Map(obj.statusMap)};configMap=new Map(obj.configMap);_iteratorNormalCompletion2=true;_didIteratorError2=false;_iteratorError2=undefined;_context12.prev=6;for(_iterator2=configMap[Symbol.iterator]();!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=true){_step2$value=_slicedToArray(_step2.value,2),key=_step2$value[0],item=_step2$value[1];result.configMap.set(key,new Map(item.propsMap));}_context12.next=14;break;case 10:_context12.prev=10;_context12.t0=_context12["catch"](6);_didIteratorError2=true;_iteratorError2=_context12.t0;case 14:_context12.prev=14;_context12.prev=15;if(!_iteratorNormalCompletion2&&_iterator2.return!=null){_iterator2.return();}case 17:_context12.prev=17;if(!_didIteratorError2){_context12.next=20;break;}throw _iteratorError2;case 20:return _context12.finish(17);case 21:return _context12.finish(14);case 22:return _context12.abrupt("return",result);case 23:case"end":return _context12.stop();}}},_callee12,this,[[6,10,14,22],[15,,17,21]]);}));return function unmarshal(_x11){return _unmarshal6.apply(this,arguments);};}()])(keys);}}]);return AergoClient;}();_defineProperty(AergoClient,"defaultProviderClass",void 0);_defineProperty(AergoClient,"platform",'');var grpcWebClient_umd=createCommonjsModule(function(module,exports){!function(e,t){module.exports=t();}(window,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports;}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r});},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0});},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==_typeof2(e)&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e){n.d(r,o,function(t){return e[t];}.bind(null,o));}return r;},n.n=function(e){var t=e&&e.__esModule?function(){return e.default;}:function(){return e;};return n.d(t,"a",t),t;},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t);},n.p="",n(n.s=11);}([function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=n(4);t.Metadata=r.BrowserHeaders;},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.debug=function(){for(var e=[],t=0;t<arguments.length;t++){e[t]=arguments[t];}console.debug?console.debug.apply(null,e):console.log.apply(null,e);};},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=null;t.default=function(e){null===r?(r=[e],setTimeout(function(){!function e(){if(r){var t=r;r=null;for(var n=0;n<t.length;n++){try{t[n]();}catch(s){null===r&&(r=[],setTimeout(function(){e();},0));for(var o=t.length-1;o>n;o--){r.unshift(t[o]);}throw s;}}}}();},0)):r.push(e);};},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(9),s=n(10),i=n(1),a=n(2),u=n(5),d=n(18);t.client=function(e,t){return new c(e,t);};var c=function(){function e(e,t){this.started=!1,this.sentFirstMessage=!1,this.completed=!1,this.closed=!1,this.finishedSending=!1,this.onHeadersCallbacks=[],this.onMessageCallbacks=[],this.onEndCallbacks=[],this.parser=new o.ChunkParser(),this.methodDefinition=e,this.props=t,this.createTransport();}return e.prototype.createTransport=function(){var e=this.props.host+"/"+this.methodDefinition.service.serviceName+"/"+this.methodDefinition.methodName,t={methodDefinition:this.methodDefinition,debug:this.props.debug||!1,url:e,onHeaders:this.onTransportHeaders.bind(this),onChunk:this.onTransportChunk.bind(this),onEnd:this.onTransportEnd.bind(this)};this.props.transport?this.transport=this.props.transport(t):this.transport=u.makeDefaultTransport(t);},e.prototype.onTransportHeaders=function(e,t){if(this.props.debug&&i.debug("onHeaders",e,t),this.closed)this.props.debug&&i.debug("grpc.onHeaders received after request was closed - ignoring");else if(0===t);else{this.responseHeaders=e,this.props.debug&&i.debug("onHeaders.responseHeaders",JSON.stringify(this.responseHeaders,null,2));var n=p(e);this.props.debug&&i.debug("onHeaders.gRPCStatus",n);var r=n&&n>=0?n:s.httpStatusToCode(t);this.props.debug&&i.debug("onHeaders.code",r);var o=e.get("grpc-message")||[];if(this.props.debug&&i.debug("onHeaders.gRPCMessage",o),this.rawOnHeaders(e),r!==s.Code.OK){var a=this.decodeGRPCStatus(o[0]);this.rawOnError(r,a,e);}}},e.prototype.onTransportChunk=function(e){var t=this;if(this.closed)this.props.debug&&i.debug("grpc.onChunk received after request was closed - ignoring");else{var n=[];try{n=this.parser.parse(e);}catch(e){return this.props.debug&&i.debug("onChunk.parsing error",e,e.message),void this.rawOnError(s.Code.Internal,"parsing error: "+e.message);}n.forEach(function(e){if(e.chunkType===o.ChunkType.MESSAGE){var n=t.methodDefinition.responseType.deserializeBinary(e.data);t.rawOnMessage(n);}else e.chunkType===o.ChunkType.TRAILERS&&(t.responseHeaders?(t.responseTrailers=new r.Metadata(e.trailers),t.props.debug&&i.debug("onChunk.trailers",t.responseTrailers)):(t.responseHeaders=new r.Metadata(e.trailers),t.rawOnHeaders(t.responseHeaders)));});}},e.prototype.onTransportEnd=function(){if(this.props.debug&&i.debug("grpc.onEnd"),this.closed)this.props.debug&&i.debug("grpc.onEnd received after request was closed - ignoring");else if(void 0!==this.responseTrailers){var e=p(this.responseTrailers);if(null!==e){var t=this.responseTrailers.get("grpc-message"),n=this.decodeGRPCStatus(t[0]);this.rawOnEnd(e,n,this.responseTrailers);}else this.rawOnError(s.Code.Internal,"Response closed without grpc-status (Trailers provided)");}else{if(void 0===this.responseHeaders)return void this.rawOnError(s.Code.Unknown,"Response closed without headers");var r=p(this.responseHeaders),o=this.responseHeaders.get("grpc-message");if(this.props.debug&&i.debug("grpc.headers only response ",r,o),null===r)return void this.rawOnEnd(s.Code.Unknown,"Response closed without grpc-status (Headers only)",this.responseHeaders);var a=this.decodeGRPCStatus(o[0]);this.rawOnEnd(r,a,this.responseHeaders);}},e.prototype.decodeGRPCStatus=function(e){if(!e)return"";try{return decodeURIComponent(e);}catch(t){return e;}},e.prototype.rawOnEnd=function(e,t,n){var r=this;this.props.debug&&i.debug("rawOnEnd",e,t,n),this.completed||(this.completed=!0,this.onEndCallbacks.forEach(function(o){a.default(function(){r.closed||o(e,t,n);});}));},e.prototype.rawOnHeaders=function(e){this.props.debug&&i.debug("rawOnHeaders",e),this.completed||this.onHeadersCallbacks.forEach(function(t){a.default(function(){t(e);});});},e.prototype.rawOnError=function(e,t,n){var o=this;void 0===n&&(n=new r.Metadata()),this.props.debug&&i.debug("rawOnError",e,t),this.completed||(this.completed=!0,this.onEndCallbacks.forEach(function(r){a.default(function(){o.closed||r(e,t,n);});}));},e.prototype.rawOnMessage=function(e){var t=this;this.props.debug&&i.debug("rawOnMessage",e.toObject()),this.completed||this.closed||this.onMessageCallbacks.forEach(function(n){a.default(function(){t.closed||n(e);});});},e.prototype.onHeaders=function(e){this.onHeadersCallbacks.push(e);},e.prototype.onMessage=function(e){this.onMessageCallbacks.push(e);},e.prototype.onEnd=function(e){this.onEndCallbacks.push(e);},e.prototype.start=function(e){if(this.started)throw new Error("Client already started - cannot .start()");this.started=!0;var t=new r.Metadata(e||{});t.set("content-type","application/grpc-web+proto"),t.set("x-grpc-web","1"),this.transport.start(t);},e.prototype.send=function(e){if(!this.started)throw new Error("Client not started - .start() must be called before .send()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .send()");if(!this.methodDefinition.requestStream&&this.sentFirstMessage)throw new Error("Message already sent for non-client-streaming method - cannot .send()");this.sentFirstMessage=!0;var t=d.frameRequest(e);this.transport.sendMessage(t);},e.prototype.finishSend=function(){if(!this.started)throw new Error("Client not started - .finishSend() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .finishSend()");this.finishedSending=!0,this.transport.finishSend();},e.prototype.close=function(){if(!this.started)throw new Error("Client not started - .start() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .close()");this.closed=!0,this.props.debug&&i.debug("request.abort aborting request"),this.transport.cancel();},e;}();function p(e){var t=e.get("grpc-status")||[];if(t.length>0)try{var n=t[0];return parseInt(n,10);}catch(e){return null;}return null;}},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=n(12);t.BrowserHeaders=r.BrowserHeaders;},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=n(6),o=function o(e){return r.CrossBrowserHttpTransport({withCredentials:!1})(e);};t.setDefaultTransportFactory=function(e){o=e;},t.makeDefaultTransport=function(e){return o(e);};},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=n(7),o=n(8);t.CrossBrowserHttpTransport=function(e){if(r.detectFetchSupport()){var t={credentials:e.withCredentials?"include":"same-origin"};return r.FetchReadableStreamTransport(t);}return o.XhrTransport({withCredentials:e.withCredentials});};},function(e,t,n){var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++){for(var o in t=arguments[n]){Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);}}return e;}).apply(this,arguments);};Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),s=n(1),i=n(2);t.FetchReadableStreamTransport=function(e){return function(t){return function(e,t){return e.debug&&s.debug("fetchRequest",e),new a(e,t);}(t,e);};};var a=function(){function e(e,t){this.cancelled=!1,this.controller=window.AbortController&&new AbortController(),this.options=e,this.init=t;}return e.prototype.pump=function(e,t){var n=this;if(this.reader=e,this.cancelled)return this.options.debug&&s.debug("Fetch.pump.cancel at first pump"),void this.reader.cancel();this.reader.read().then(function(e){if(e.done)return i.default(function(){n.options.onEnd();}),t;i.default(function(){n.options.onChunk(e.value);}),n.pump(n.reader,t);}).catch(function(e){n.cancelled?n.options.debug&&s.debug("Fetch.catch - request cancelled"):(n.cancelled=!0,n.options.debug&&s.debug("Fetch.catch",e.message),i.default(function(){n.options.onEnd(e);}));});},e.prototype.send=function(e){var t=this;fetch(this.options.url,r({},this.init,{headers:this.metadata.toHeaders(),method:"POST",body:e,signal:this.controller&&this.controller.signal})).then(function(e){if(t.options.debug&&s.debug("Fetch.response",e),i.default(function(){t.options.onHeaders(new o.Metadata(e.headers),e.status);}),!e.body)return e;t.pump(e.body.getReader(),e);}).catch(function(e){t.cancelled?t.options.debug&&s.debug("Fetch.catch - request cancelled"):(t.cancelled=!0,t.options.debug&&s.debug("Fetch.catch",e.message),i.default(function(){t.options.onEnd(e);}));});},e.prototype.sendMessage=function(e){this.send(e);},e.prototype.finishSend=function(){},e.prototype.start=function(e){this.metadata=e;},e.prototype.cancel=function(){this.cancelled?this.options.debug&&s.debug("Fetch.abort.cancel already cancelled"):(this.cancelled=!0,this.reader?(this.options.debug&&s.debug("Fetch.abort.cancel"),this.reader.cancel()):this.options.debug&&s.debug("Fetch.abort.cancel before reader"),this.controller&&this.controller.abort());},e;}();t.detectFetchSupport=function(){return"undefined"!=typeof Response&&Response.prototype.hasOwnProperty("body")&&"function"==typeof Headers;};},function(e,t,n){var _r,o=this&&this.__extends||(_r=function r(e,t){return(_r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t;}||function(e,t){for(var n in t){t.hasOwnProperty(n)&&(e[n]=t[n]);}})(e,t);},function(e,t){function n(){this.constructor=e;}_r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n());});Object.defineProperty(t,"__esModule",{value:!0});var s=n(0),i=n(1),a=n(2),u=n(15);t.XhrTransport=function(e){return function(t){if(u.detectMozXHRSupport())return new c(t,e);if(u.detectXHROverrideMimeTypeSupport())return new d(t,e);throw new Error("This environment's XHR implementation cannot support binary transfer.");};};var d=function(){function e(e,t){this.options=e,this.init=t;}return e.prototype.onProgressEvent=function(){var e=this;this.options.debug&&i.debug("XHR.onProgressEvent.length: ",this.xhr.response.length);var t=this.xhr.response.substr(this.index);this.index=this.xhr.response.length;var n=f(t);a.default(function(){e.options.onChunk(n);});},e.prototype.onLoadEvent=function(){var e=this;this.options.debug&&i.debug("XHR.onLoadEvent"),a.default(function(){e.options.onEnd();});},e.prototype.onStateChange=function(){var e=this;this.options.debug&&i.debug("XHR.onStateChange",this.xhr.readyState),this.xhr.readyState===XMLHttpRequest.HEADERS_RECEIVED&&a.default(function(){e.options.onHeaders(new s.Metadata(e.xhr.getAllResponseHeaders()),e.xhr.status);});},e.prototype.sendMessage=function(e){this.xhr.send(e);},e.prototype.finishSend=function(){},e.prototype.start=function(e){var t=this;this.metadata=e;var n=new XMLHttpRequest();this.xhr=n,n.open("POST",this.options.url),this.configureXhr(),this.metadata.forEach(function(e,t){n.setRequestHeader(e,t.join(", "));}),n.withCredentials=Boolean(this.init.withCredentials),n.addEventListener("readystatechange",this.onStateChange.bind(this)),n.addEventListener("progress",this.onProgressEvent.bind(this)),n.addEventListener("loadend",this.onLoadEvent.bind(this)),n.addEventListener("error",function(e){t.options.debug&&i.debug("XHR.error",e),a.default(function(){t.options.onEnd(e.error);});});},e.prototype.configureXhr=function(){this.xhr.responseType="text",this.xhr.overrideMimeType("text/plain; charset=x-user-defined");},e.prototype.cancel=function(){this.options.debug&&i.debug("XHR.abort"),this.xhr.abort();},e;}();t.XHR=d;var c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this;}return o(t,e),t.prototype.configureXhr=function(){this.options.debug&&i.debug("MozXHR.configureXhr: setting responseType to 'moz-chunked-arraybuffer'"),this.xhr.responseType="moz-chunked-arraybuffer";},t.prototype.onProgressEvent=function(){var e=this,t=this.xhr.response;this.options.debug&&i.debug("MozXHR.onProgressEvent: ",new Uint8Array(t)),a.default(function(){e.options.onChunk(new Uint8Array(t));});},t;}(d);function p(e,t){var n=e.charCodeAt(t);if(n>=55296&&n<=56319){var r=e.charCodeAt(t+1);r>=56320&&r<=57343&&(n=65536+(n-55296<<10)+(r-56320));}return n;}function f(e){for(var t=new Uint8Array(e.length),n=0,r=0;r<e.length;r++){var o=String.prototype.codePointAt?e.codePointAt(r):p(e,r);t[n++]=255&o;}return t;}t.MozChunkedArrayBufferXHR=c,t.stringToArrayBuffer=f;},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(0),s=function s(e){return 9===e||10===e||13===e;};function i(e){return s(e)||e>=32&&e<=126;}function a(e){for(var t=0;t!==e.length;++t){if(!i(e[t]))throw new Error("Metadata is not valid (printable) ASCII");}return String.fromCharCode.apply(String,Array.prototype.slice.call(e));}function u(e){return 128==(128&e.getUint8(0));}function d(e){return e.getUint32(1,!1);}function c(e,t,n){return e.byteLength-t>=n;}function p(e,t,n){if(e.slice)return e.slice(t,n);var r=e.length;void 0!==n&&(r=n);for(var o=new Uint8Array(r-t),s=0,i=t;i<r;i++){o[s++]=e[i];}return o;}t.decodeASCII=a,t.encodeASCII=function(e){for(var t=new Uint8Array(e.length),n=0;n!==e.length;++n){var r=e.charCodeAt(n);if(!i(r))throw new Error("Metadata contains invalid ASCII");t[n]=r;}return t;},function(e){e[e.MESSAGE=1]="MESSAGE",e[e.TRAILERS=2]="TRAILERS";}(r=t.ChunkType||(t.ChunkType={}));var f=function(){function e(){this.buffer=null,this.position=0;}return e.prototype.parse=function(e,t){if(0===e.length&&t)return[];var n,s=[];if(null==this.buffer)this.buffer=e,this.position=0;else if(this.position===this.buffer.byteLength)this.buffer=e,this.position=0;else{var i=this.buffer.byteLength-this.position,f=new Uint8Array(i+e.byteLength),h=p(this.buffer,this.position);f.set(h,0);var l=new Uint8Array(e);f.set(l,i),this.buffer=f,this.position=0;}for(;;){if(!c(this.buffer,this.position,5))return s;var g=p(this.buffer,this.position,this.position+5),b=new DataView(g.buffer,g.byteOffset,g.byteLength),y=d(b);if(!c(this.buffer,this.position,5+y))return s;var v=p(this.buffer,this.position+5,this.position+5+y);if(this.position+=5+y,u(b))return s.push({chunkType:r.TRAILERS,trailers:(n=v,new o.Metadata(a(n)))}),s;s.push({chunkType:r.MESSAGE,data:v});}},e;}();t.ChunkParser=f;},function(e,t,n){var r;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.OK=0]="OK",e[e.Canceled=1]="Canceled",e[e.Unknown=2]="Unknown",e[e.InvalidArgument=3]="InvalidArgument",e[e.DeadlineExceeded=4]="DeadlineExceeded",e[e.NotFound=5]="NotFound",e[e.AlreadyExists=6]="AlreadyExists",e[e.PermissionDenied=7]="PermissionDenied",e[e.ResourceExhausted=8]="ResourceExhausted",e[e.FailedPrecondition=9]="FailedPrecondition",e[e.Aborted=10]="Aborted",e[e.OutOfRange=11]="OutOfRange",e[e.Unimplemented=12]="Unimplemented",e[e.Internal=13]="Internal",e[e.Unavailable=14]="Unavailable",e[e.DataLoss=15]="DataLoss",e[e.Unauthenticated=16]="Unauthenticated";}(r=t.Code||(t.Code={})),t.httpStatusToCode=function(e){switch(e){case 0:return r.Internal;case 200:return r.OK;case 400:return r.InvalidArgument;case 401:return r.Unauthenticated;case 403:return r.PermissionDenied;case 404:return r.NotFound;case 409:return r.Aborted;case 412:return r.FailedPrecondition;case 429:return r.ResourceExhausted;case 499:return r.Canceled;case 500:return r.Unknown;case 501:return r.Unimplemented;case 503:return r.Unavailable;case 504:return r.DeadlineExceeded;default:return r.Unknown;}};},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),o=n(5),s=n(7),i=n(16),a=n(8),u=n(6),d=n(10),c=n(17),p=n(19),f=n(3);!function(e){e.setDefaultTransport=o.setDefaultTransportFactory,e.CrossBrowserHttpTransport=u.CrossBrowserHttpTransport,e.FetchReadableStreamTransport=s.FetchReadableStreamTransport,e.XhrTransport=a.XhrTransport,e.WebsocketTransport=i.WebsocketTransport,e.Code=d.Code,e.Metadata=r.BrowserHeaders,e.client=function(e,t){return f.client(e,t);},e.invoke=c.invoke,e.unary=p.unary;}(t.grpc||(t.grpc={}));},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=n(13);var o=function(){function e(e,t){void 0===e&&(e={}),void 0===t&&(t={splitValues:!1});var n,o=this;if(this.headersMap={},e)if("undefined"!=typeof Headers&&e instanceof Headers)r.getHeaderKeys(e).forEach(function(n){r.getHeaderValues(e,n).forEach(function(e){t.splitValues?o.append(n,r.splitHeaderValue(e)):o.append(n,e);});});else if("object"==_typeof2(n=e)&&"object"==_typeof2(n.headersMap)&&"function"==typeof n.forEach)e.forEach(function(e,t){o.append(e,t);});else if("undefined"!=typeof Map&&e instanceof Map){e.forEach(function(e,t){o.append(t,e);});}else"string"==typeof e?this.appendFromString(e):"object"==_typeof2(e)&&Object.getOwnPropertyNames(e).forEach(function(t){var n=e[t];Array.isArray(n)?n.forEach(function(e){o.append(t,e);}):o.append(t,n);});}return e.prototype.appendFromString=function(e){for(var t=e.split("\r\n"),n=0;n<t.length;n++){var r=t[n],o=r.indexOf(":");if(o>0){var s=r.substring(0,o).trim(),i=r.substring(o+1).trim();this.append(s,i);}}},e.prototype.delete=function(e,t){var n=r.normalizeName(e);if(void 0===t)delete this.headersMap[n];else{var o=this.headersMap[n];if(o){var s=o.indexOf(t);s>=0&&o.splice(s,1),0===o.length&&delete this.headersMap[n];}}},e.prototype.append=function(e,t){var n=this,o=r.normalizeName(e);Array.isArray(this.headersMap[o])||(this.headersMap[o]=[]),Array.isArray(t)?t.forEach(function(e){n.headersMap[o].push(r.normalizeValue(e));}):this.headersMap[o].push(r.normalizeValue(t));},e.prototype.set=function(e,t){var n=r.normalizeName(e);if(Array.isArray(t)){var o=[];t.forEach(function(e){o.push(r.normalizeValue(e));}),this.headersMap[n]=o;}else this.headersMap[n]=[r.normalizeValue(t)];},e.prototype.has=function(e,t){var n=this.headersMap[r.normalizeName(e)];if(!Array.isArray(n))return!1;if(void 0!==t){var o=r.normalizeValue(t);return n.indexOf(o)>=0;}return!0;},e.prototype.get=function(e){var t=this.headersMap[r.normalizeName(e)];return void 0!==t?t.concat():[];},e.prototype.forEach=function(e){var t=this;Object.getOwnPropertyNames(this.headersMap).forEach(function(n){e(n,t.headersMap[n]);},this);},e.prototype.toHeaders=function(){if("undefined"!=typeof Headers){var e=new Headers();return this.forEach(function(t,n){n.forEach(function(n){e.append(t,n);});}),e;}throw new Error("Headers class is not defined");},e;}();t.BrowserHeaders=o;},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=n(14);function o(e){return e;}t.normalizeName=function(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase();},t.normalizeValue=function(e){return"string"!=typeof e&&(e=String(e)),e;},t.getHeaderValues=function(e,t){var n=o(e);if(n instanceof Headers&&n.getAll)return n.getAll(t);var r=n.get(t);return r&&"string"==typeof r?[r]:r;},t.getHeaderKeys=function(e){var t=o(e),n={},s=[];return t.keys?r.iterateHeadersKeys(t,function(e){n[e]||(n[e]=!0,s.push(e));}):t.forEach?t.forEach(function(e,t){n[t]||(n[t]=!0,s.push(t));}):r.iterateHeaders(t,function(e){var t=e[0];n[t]||(n[t]=!0,s.push(t));}),s;},t.splitHeaderValue=function(e){var t=[];return e.split(", ").forEach(function(e){e.split(",").forEach(function(e){t.push(e);});}),t;};},function(e,t){e.exports={iterateHeaders:function iterateHeaders(e,t){for(var n=e[Symbol.iterator](),r=n.next();!r.done;){t(r.value[0]),r=n.next();}},iterateHeadersKeys:function iterateHeadersKeys(e,t){for(var n=e.keys(),r=n.next();!r.done;){t(r.value),r=n.next();}}};},function(e,t,n){var r;function o(){if(void 0!==r)return r;if(XMLHttpRequest){r=new XMLHttpRequest();try{r.open("GET","https://localhost");}catch(e){}}return r;}function s(e){var t=o();if(!t)return!1;try{return t.responseType=e,t.responseType===e;}catch(e){}return!1;}Object.defineProperty(t,"__esModule",{value:!0}),t.xhrSupportsResponseType=s,t.detectMozXHRSupport=function(){return"undefined"!=typeof XMLHttpRequest&&s("moz-chunked-arraybuffer");},t.detectXHROverrideMimeTypeSupport=function(){return"undefined"!=typeof XMLHttpRequest&&XMLHttpRequest.prototype.hasOwnProperty("overrideMimeType");};},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(1),s=n(2),i=n(9);!function(e){e[e.FINISH_SEND=1]="FINISH_SEND";}(r||(r={}));var a=new Uint8Array([1]);t.WebsocketTransport=function(){return function(e){return function(e){e.debug&&o.debug("websocketRequest",e);var t,n=function(e){if("https://"===e.substr(0,8))return"wss://"+e.substr(8);if("http://"===e.substr(0,7))return"ws://"+e.substr(7);throw new Error("Websocket transport constructed with non-https:// or http:// host.");}(e.url),u=[];function d(e){if(e===r.FINISH_SEND)t.send(a);else{var n=e,o=new Int8Array(n.byteLength+1);o.set(new Uint8Array([0])),o.set(n,1),t.send(o);}}return{sendMessage:function sendMessage(e){t&&t.readyState!==t.CONNECTING?d(e):u.push(e);},finishSend:function finishSend(){t&&t.readyState!==t.CONNECTING?d(r.FINISH_SEND):u.push(r.FINISH_SEND);},start:function start(r){(t=new WebSocket(n,["grpc-websockets"])).binaryType="arraybuffer",t.onopen=function(){var n;e.debug&&o.debug("websocketRequest.onopen"),t.send((n="",r.forEach(function(e,t){n+=e+": "+t.join(", ")+"\r\n";}),i.encodeASCII(n))),u.forEach(function(e){d(e);});},t.onclose=function(t){e.debug&&o.debug("websocketRequest.onclose",t),s.default(function(){e.onEnd();});},t.onerror=function(t){e.debug&&o.debug("websocketRequest.onerror",t);},t.onmessage=function(t){s.default(function(){e.onChunk(new Uint8Array(t.data));});};},cancel:function cancel(){e.debug&&o.debug("websocket.abort"),s.default(function(){t.close();});}};}(e);};};},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=n(3);t.invoke=function(e,t){if(e.requestStream)throw new Error(".invoke cannot be used with client-streaming methods. Use .client instead.");var n=r.client(e,{host:t.host,transport:t.transport,debug:t.debug});return t.onHeaders&&n.onHeaders(t.onHeaders),t.onMessage&&n.onMessage(t.onMessage),t.onEnd&&n.onEnd(t.onEnd),n.start(t.metadata),n.send(t.request),n.finishSend(),{close:function close(){n.close();}};};},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0}),t.frameRequest=function(e){var t=e.serializeBinary(),n=new ArrayBuffer(t.byteLength+5);return new DataView(n,1,4).setUint32(0,t.length,!1),new Uint8Array(n,5).set(t),new Uint8Array(n);};},function(e,t,n){Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(3);t.unary=function(e,t){if(e.responseStream)throw new Error(".unary cannot be used with server-streaming methods. Use .invoke or .client instead.");if(e.requestStream)throw new Error(".unary cannot be used with client-streaming methods. Use .client instead.");var n=null,s=null,i=o.client(e,{host:t.host,transport:t.transport,debug:t.debug});return i.onHeaders(function(e){n=e;}),i.onMessage(function(e){s=e;}),i.onEnd(function(e,o,i){t.onEnd({status:e,statusMessage:o,headers:n||new r.Metadata(),message:s,trailers:i});}),i.start(t.metadata),i.send(t.request),i.finishSend(),{close:function close(){i.close();}};};}]);});});unwrapExports(grpcWebClient_umd);var grpcWebClient_umd_1=grpcWebClient_umd.grpc;// file: rpc.proto
var grpc=grpcWebClient_umd.grpc;var AergoRPCService=function(){function AergoRPCService(){}AergoRPCService.serviceName="types.AergoRPCService";return AergoRPCService;}();AergoRPCService.NodeState={methodName:"NodeState",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.NodeReq,responseType:rpc_pb.SingleBytes};AergoRPCService.Metric={methodName:"Metric",service:AergoRPCService,requestStream:false,responseStream:false,requestType:metric_pb.MetricsRequest,responseType:metric_pb.Metrics};AergoRPCService.Blockchain={methodName:"Blockchain",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.Empty,responseType:rpc_pb.BlockchainStatus};AergoRPCService.GetChainInfo={methodName:"GetChainInfo",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.Empty,responseType:rpc_pb.ChainInfo};AergoRPCService.ListBlockHeaders={methodName:"ListBlockHeaders",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.ListParams,responseType:rpc_pb.BlockHeaderList};AergoRPCService.ListBlockMetadata={methodName:"ListBlockMetadata",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.ListParams,responseType:rpc_pb.BlockMetadataList};AergoRPCService.ListBlockStream={methodName:"ListBlockStream",service:AergoRPCService,requestStream:false,responseStream:true,requestType:rpc_pb.Empty,responseType:blockchain_pb.Block};AergoRPCService.ListBlockMetadataStream={methodName:"ListBlockMetadataStream",service:AergoRPCService,requestStream:false,responseStream:true,requestType:rpc_pb.Empty,responseType:rpc_pb.BlockMetadata};AergoRPCService.GetBlock={methodName:"GetBlock",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.SingleBytes,responseType:blockchain_pb.Block};AergoRPCService.GetBlockMetadata={methodName:"GetBlockMetadata",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.SingleBytes,responseType:rpc_pb.BlockMetadata};AergoRPCService.GetBlockBody={methodName:"GetBlockBody",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.BlockBodyParams,responseType:rpc_pb.BlockBodyPaged};AergoRPCService.GetTX={methodName:"GetTX",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.SingleBytes,responseType:blockchain_pb.Tx};AergoRPCService.GetBlockTX={methodName:"GetBlockTX",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.SingleBytes,responseType:blockchain_pb.TxInBlock};AergoRPCService.GetReceipt={methodName:"GetReceipt",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.SingleBytes,responseType:blockchain_pb.Receipt};AergoRPCService.GetABI={methodName:"GetABI",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.SingleBytes,responseType:blockchain_pb.ABI};AergoRPCService.SendTX={methodName:"SendTX",service:AergoRPCService,requestStream:false,responseStream:false,requestType:blockchain_pb.Tx,responseType:rpc_pb.CommitResult};AergoRPCService.SignTX={methodName:"SignTX",service:AergoRPCService,requestStream:false,responseStream:false,requestType:blockchain_pb.Tx,responseType:blockchain_pb.Tx};AergoRPCService.VerifyTX={methodName:"VerifyTX",service:AergoRPCService,requestStream:false,responseStream:false,requestType:blockchain_pb.Tx,responseType:rpc_pb.VerifyResult};AergoRPCService.CommitTX={methodName:"CommitTX",service:AergoRPCService,requestStream:false,responseStream:false,requestType:blockchain_pb.TxList,responseType:rpc_pb.CommitResultList};AergoRPCService.GetState={methodName:"GetState",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.SingleBytes,responseType:blockchain_pb.State};AergoRPCService.GetStateAndProof={methodName:"GetStateAndProof",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.AccountAndRoot,responseType:blockchain_pb.AccountProof};AergoRPCService.CreateAccount={methodName:"CreateAccount",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.Personal,responseType:account_pb.Account};AergoRPCService.GetAccounts={methodName:"GetAccounts",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.Empty,responseType:account_pb.AccountList};AergoRPCService.LockAccount={methodName:"LockAccount",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.Personal,responseType:account_pb.Account};AergoRPCService.UnlockAccount={methodName:"UnlockAccount",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.Personal,responseType:account_pb.Account};AergoRPCService.ImportAccount={methodName:"ImportAccount",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.ImportFormat,responseType:account_pb.Account};AergoRPCService.ExportAccount={methodName:"ExportAccount",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.Personal,responseType:rpc_pb.SingleBytes};AergoRPCService.QueryContract={methodName:"QueryContract",service:AergoRPCService,requestStream:false,responseStream:false,requestType:blockchain_pb.Query,responseType:rpc_pb.SingleBytes};AergoRPCService.QueryContractState={methodName:"QueryContractState",service:AergoRPCService,requestStream:false,responseStream:false,requestType:blockchain_pb.StateQuery,responseType:blockchain_pb.StateQueryProof};AergoRPCService.GetPeers={methodName:"GetPeers",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.PeersParams,responseType:rpc_pb.PeerList};AergoRPCService.GetVotes={methodName:"GetVotes",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.VoteParams,responseType:rpc_pb.VoteList};AergoRPCService.GetAccountVotes={methodName:"GetAccountVotes",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.AccountAddress,responseType:rpc_pb.AccountVoteInfo};AergoRPCService.GetStaking={methodName:"GetStaking",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.AccountAddress,responseType:rpc_pb.Staking};AergoRPCService.GetNameInfo={methodName:"GetNameInfo",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.Name,responseType:rpc_pb.NameInfo};AergoRPCService.ListEventStream={methodName:"ListEventStream",service:AergoRPCService,requestStream:false,responseStream:true,requestType:blockchain_pb.FilterInfo,responseType:blockchain_pb.Event};AergoRPCService.ListEvents={methodName:"ListEvents",service:AergoRPCService,requestStream:false,responseStream:false,requestType:blockchain_pb.FilterInfo,responseType:rpc_pb.EventList};AergoRPCService.GetServerInfo={methodName:"GetServerInfo",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.KeyParams,responseType:rpc_pb.ServerInfo};AergoRPCService.GetConsensusInfo={methodName:"GetConsensusInfo",service:AergoRPCService,requestStream:false,responseStream:false,requestType:rpc_pb.Empty,responseType:rpc_pb.ConsensusInfo};function AergoRPCServiceClient(serviceHost,options){this.serviceHost=serviceHost;this.options=options||{};}AergoRPCServiceClient.prototype.nodeState=function nodeState(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.NodeState,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.metric=function metric(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.Metric,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.blockchain=function blockchain(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.Blockchain,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.getChainInfo=function getChainInfo(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.GetChainInfo,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.listBlockHeaders=function listBlockHeaders(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.ListBlockHeaders,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.listBlockMetadata=function listBlockMetadata(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.ListBlockMetadata,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.listBlockStream=function listBlockStream(requestMessage,metadata){var listeners={data:[],end:[],status:[]};var client=grpc.invoke(AergoRPCService.ListBlockStream,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onMessage:function onMessage(responseMessage){listeners.data.forEach(function(handler){handler(responseMessage);});},onEnd:function onEnd(status,statusMessage,trailers){listeners.end.forEach(function(handler){handler();});listeners.status.forEach(function(handler){handler({code:status,details:statusMessage,metadata:trailers});});listeners=null;}});return{on:function on(type,handler){listeners[type].push(handler);return this;},cancel:function cancel(){listeners=null;client.close();}};};AergoRPCServiceClient.prototype.listBlockMetadataStream=function listBlockMetadataStream(requestMessage,metadata){var listeners={data:[],end:[],status:[]};var client=grpc.invoke(AergoRPCService.ListBlockMetadataStream,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onMessage:function onMessage(responseMessage){listeners.data.forEach(function(handler){handler(responseMessage);});},onEnd:function onEnd(status,statusMessage,trailers){listeners.end.forEach(function(handler){handler();});listeners.status.forEach(function(handler){handler({code:status,details:statusMessage,metadata:trailers});});listeners=null;}});return{on:function on(type,handler){listeners[type].push(handler);return this;},cancel:function cancel(){listeners=null;client.close();}};};AergoRPCServiceClient.prototype.getBlock=function getBlock(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.GetBlock,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.getBlockMetadata=function getBlockMetadata(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.GetBlockMetadata,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.getBlockBody=function getBlockBody(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.GetBlockBody,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.getTX=function getTX(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.GetTX,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.getBlockTX=function getBlockTX(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.GetBlockTX,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.getReceipt=function getReceipt(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.GetReceipt,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.getABI=function getABI(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.GetABI,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.sendTX=function sendTX(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.SendTX,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.signTX=function signTX(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.SignTX,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.verifyTX=function verifyTX(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.VerifyTX,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.commitTX=function commitTX(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.CommitTX,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.getState=function getState(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.GetState,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.getStateAndProof=function getStateAndProof(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.GetStateAndProof,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.createAccount=function createAccount(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.CreateAccount,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.getAccounts=function getAccounts(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.GetAccounts,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.lockAccount=function lockAccount(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.LockAccount,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.unlockAccount=function unlockAccount(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.UnlockAccount,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.importAccount=function importAccount(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.ImportAccount,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.exportAccount=function exportAccount(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.ExportAccount,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.queryContract=function queryContract(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.QueryContract,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.queryContractState=function queryContractState(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.QueryContractState,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.getPeers=function getPeers(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.GetPeers,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.getVotes=function getVotes(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.GetVotes,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.getAccountVotes=function getAccountVotes(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.GetAccountVotes,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.getStaking=function getStaking(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.GetStaking,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.getNameInfo=function getNameInfo(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.GetNameInfo,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.listEventStream=function listEventStream(requestMessage,metadata){var listeners={data:[],end:[],status:[]};var client=grpc.invoke(AergoRPCService.ListEventStream,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onMessage:function onMessage(responseMessage){listeners.data.forEach(function(handler){handler(responseMessage);});},onEnd:function onEnd(status,statusMessage,trailers){listeners.end.forEach(function(handler){handler();});listeners.status.forEach(function(handler){handler({code:status,details:statusMessage,metadata:trailers});});listeners=null;}});return{on:function on(type,handler){listeners[type].push(handler);return this;},cancel:function cancel(){listeners=null;client.close();}};};AergoRPCServiceClient.prototype.listEvents=function listEvents(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.ListEvents,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.getServerInfo=function getServerInfo(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.GetServerInfo,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};AergoRPCServiceClient.prototype.getConsensusInfo=function getConsensusInfo(requestMessage,metadata,callback){if(arguments.length===2){callback=arguments[1];}var client=grpc.unary(AergoRPCService.GetConsensusInfo,{request:requestMessage,host:this.serviceHost,metadata:metadata,transport:this.options.transport,debug:this.options.debug,onEnd:function onEnd(response){if(callback){if(response.status!==grpc.Code.OK){var err=new Error(response.statusMessage);err.code=response.status;err.metadata=response.trailers;callback(err,null);}else{callback(null,response.message);}}}});return{cancel:function cancel(){callback=null;client.close();}};};var AergoRPCServiceClient_1=AergoRPCServiceClient;/**
	 * Provider for GRPC-WEB connections over HTTP.
	 * This is compatible with Web browsers.
	 * Note that the transport is considerably slower than over standard GRPC.
	 */var GrpcWebProvider=/*#__PURE__*/function(){/**
	   * .. code-block:: javascript
	   * 
	   *     import { GrpcWebProvider } from '@herajs/client';
	   *     const provider = new GrpcWebProvider({url: 'http://localhost:7845'});
	   * 
	   * @param {GrpcWebProviderConfig} config
	   */function GrpcWebProvider(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_classCallCheck(this,GrpcWebProvider);_defineProperty(this,"client",void 0);_defineProperty(this,"config",void 0);this.config=_objectSpread({},this.defaultConfig,config);var options={transport:grpcWebClient_umd_1.WebsocketTransport()};this.client=new AergoRPCServiceClient_1(this.config.url,options);}_createClass(GrpcWebProvider,[{key:"defaultConfig",get:function get(){return{url:'http://localhost:7845'};}}]);return GrpcWebProvider;}();/**
	 * Data structure for contract function calls.
	 * You should not need to build these yourself, they are returned from contract instance functions and
	 * can be passed to the client.
	 */var FunctionCall=/*#__PURE__*/function(){function FunctionCall(contractInstance,definition,args){_classCallCheck(this,FunctionCall);_defineProperty(this,"definition",void 0);_defineProperty(this,"args",void 0);_defineProperty(this,"contractInstance",void 0);this.definition=definition;this.args=args;this.contractInstance=contractInstance;}/**
	   * Generate transaction object that can be passed to :meth:`aergoClient.accounts.sendTrasaction`
	   * 
	   * .. code-block:: javascript
	   * 
	   *     import { Contract } from '@herajs/client';
	   *     const contract = Contract.fromAbi(abi).atAddress(address);
	   *     const functionCall = contract.someAbiFunction();
	   *     aergo.accounts.sendTransaction(functionCall.asTransaction({
	   *         from: myAddress
	   *     })).then(result => {
	   *         console.log(result);
	   *     })
	   * @param {obj} extraArgs
	   * @param {string} extraArgs.from set from address for the transaction
	   * @return {obj} transaction data
	   */_createClass(FunctionCall,[{key:"asTransaction",value:function asTransaction(extraArgs){var payload=JSON.stringify({Name:this.definition.name,Args:this.args});if(!this.contractInstance.address)throw new Error('Set address of contract before creating transactions');if(typeof extraArgs==='undefined'||!extraArgs.from||extraArgs.from.length===0){throw new Error('Missing required transaction parameter \'from\'. Call with asTransaction({from: ...})');}return _objectSpread({to:this.contractInstance.address,amount:0,payload:payload},extraArgs);}/**
	     * Generate query info that can be passed to the API.
	     * You usually do not need to call this function yourself, :meth:`AergoClient.queryContract` takes care of that.
	     * 
	     * .. code-block:: javascript
	     * 
	     *     import { Contract } from '@herajs/client';
	     *     const contract = Contract.fromAbi(abi).atAddress(address);
	     *     const functionCall = contract.someAbiFunction();
	     *     aergo.queryContract(functionCall).then(result => {
	     *         console.log(result);
	     *     })
	     * 
	     * @return {obj} queryInfo data
	     */},{key:"asQueryInfo",value:function asQueryInfo(){return{Name:this.definition.name,Args:this.args};}},{key:"toGrpc",value:function toGrpc(){var q=new blockchain_pb_5();q.setContractaddress(Uint8Array.from(new Address(this.contractInstance.address).asBytes()));q.setQueryinfo(Uint8Array.from(Buffer.from(JSON.stringify(this.asQueryInfo()))));return q;}}]);return FunctionCall;}();/**
	 * Query contract state directlty without using ABI methods.
	 * 
	 * .. code-block:: javascript
	 * 
	 *     import { Contract } from '@herajs/client';
	 *     const contract = Contract.fromAbi(abi).atAddress(address);
	 *     const query = contract.queryState('stateVariableName');
	 *     aergo.queryContractState(query).then(result => {
	 *         console.log(result);
	 *     })
	 */var StateQuery=/*#__PURE__*/function(){function StateQuery(contractInstance,storageKeys){_classCallCheck(this,StateQuery);_defineProperty(this,"contractInstance",void 0);_defineProperty(this,"storageKeys",void 0);this.contractInstance=contractInstance;this.storageKeys=storageKeys;}_createClass(StateQuery,[{key:"toGrpc",value:function toGrpc(){var q=new blockchain_pb_6();q.setContractaddress(this.contractInstance.address.asBytes());q.setStoragekeysList(this.storageKeys);return q;}}]);return StateQuery;}();/**
	 * Smart contract interface.
	 * You usually instantiante this class by using one of the static methods.
	 * Most of the instance methods return the contract so they can be chained.
	 * When an ABI is loaded, its functions will be added to the instance and can be called directly.
	 * ABI functions return `FunctionCall` objects that can be queried or called.
	 * 
	 * .. code-block:: javascript
	 * 
	 *     import { Contract } from '@herajs/client';
	 *     const contract = Contract.fromAbi(abi).setAddress(address);
	 *     aergo.queryContract(contract.someAbiFunction()).then(result => {
	 *         console.log(result);
	 *     })
	 * 
	 */var Contract=/*#__PURE__*/function(){function Contract(data){_classCallCheck(this,Contract);_defineProperty(this,"code",void 0);_defineProperty(this,"address",void 0);_defineProperty(this,"functions",void 0);Object.assign(this,data);this.functions={};// This class acts as a proxy that passes ABI method calls
return new Proxy(this,{get:function get(obj,field){if(field in obj)return obj[field];if(field in obj.functions)return obj.functions[field];return undefined;}});}/**
	   * Create contract instance from code
	   * @param {string} bs58checkCode base58-check encoded code
	   * @return {Contract} contract instance
	   */_createClass(Contract,[{key:"setAddress",/**
	     * Set address of contract instance
	     * @param {Address|string} address 
	     * @return {Contract} contract instance
	     */value:function setAddress(address){this.address=new Address(address);return this;}/**
	     * Load contract ABI
	     * @param {obj} abi parsed JSON ABI
	     * @return {Contract} contract instance
	     */},{key:"loadAbi",value:function loadAbi(abi){var _this=this;var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{var _loop=function _loop(){var definition=_step.value;_this.functions[definition.name]=function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return new FunctionCall(_this,definition,args);};};for(var _iterator=abi.functions[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){_loop();}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return!=null){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}return this;}/**
	     * Return contract code as payload for transaction
	     * @param {args}
	     * @return {Buffer} a byte buffer
	     */},{key:"asPayload",value:function asPayload(args){if(!this.code||!this.code.length){throw new Error('Code is required to generate payload');}// First 4 bytes are the length of code (incl. ABI)
var len=Buffer.from(fromNumber(4+this.code.length,4));if(typeof args!=='undefined'){var argsDecoded=Buffer.from(JSON.stringify(args));return Buffer.concat([len,this.code,argsDecoded]);}return Buffer.concat([len,this.code]);}/**
	     * Create query object to query contract state.
	     * @param varname 
	     * @param varindex 
	     */},{key:"queryState",value:function queryState(){for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}return new StateQuery(this,args);}}],[{key:"fromCode",value:function fromCode(bs58checkCode){var decoded=Contract.decodeCode(bs58checkCode);return new Contract({code:decoded});}/**
	     * Create contract instance and set address
	     * @param {Address} address 
	     * @return {Contract} contract instance 
	     */},{key:"atAddress",value:function atAddress(address){var contract=new Contract({});contract.setAddress(address);return contract;}/**
	     * Create contract instance from ABI
	     * @param {obj} abi parsed JSON ABI
	     * @return {Contract} contract instance
	     */},{key:"fromAbi",value:function fromAbi(abi){var contract=new Contract({});contract.loadAbi(abi);return contract;}},{key:"encodeCode",value:function encodeCode(byteArray){var buf=Buffer.from([ADDRESS_PREFIXES.CONTRACT].concat(_toConsumableArray(byteArray)));return bs58check.encode(buf);}},{key:"decodeCode",value:function decodeCode(bs58checkCode){return bs58check.decode(bs58checkCode).slice(1);//return bs58.decode(bs58checkCode);
}}]);return Contract;}();AergoClient.platform='web';AergoClient.defaultProviderClass=GrpcWebProvider;exports.AergoClient=AergoClient;exports.default=AergoClient;exports.GrpcWebProvider=GrpcWebProvider;exports.constants=constants;exports.Contract=Contract;exports.Address=Address;exports.Amount=Amount;exports.Tx=Tx;Object.defineProperty(exports,'__esModule',{value:true});});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/@herajs/crypto/dist/herajs-crypto.umd.js":
/*!***************************************************************!*\
  !*** ./node_modules/@herajs/crypto/dist/herajs-crypto.umd.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (global, factory) {
  ( false ? undefined : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports, __webpack_require__(/*! bs58check */ "./node_modules/bs58check/index.js"), __webpack_require__(/*! jsbi */ "./node_modules/jsbi/dist/jsbi-umd.js"), __webpack_require__(/*! bs58 */ "./node_modules/bs58/index.js"), __webpack_require__(/*! elliptic */ "./node_modules/elliptic/lib/elliptic.js"), __webpack_require__(/*! asmcrypto.js */ "./node_modules/asmcrypto.js/asmcrypto.all.es8.js")) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! bs58check */ "./node_modules/bs58check/index.js"), __webpack_require__(/*! jsbi */ "./node_modules/jsbi/dist/jsbi-umd.js"), __webpack_require__(/*! bs58 */ "./node_modules/bs58/index.js"), __webpack_require__(/*! elliptic */ "./node_modules/elliptic/lib/elliptic.js"), __webpack_require__(/*! asmcrypto.js */ "./node_modules/asmcrypto.js/asmcrypto.all.es8.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : (undefined);
})(this, function (exports, bs58check, JSBI, bs58, elliptic, asmcrypto_js) {
  'use strict';

  bs58check = bs58check && bs58check.hasOwnProperty('default') ? bs58check['default'] : bs58check;
  JSBI = JSBI && JSBI.hasOwnProperty('default') ? JSBI['default'] : JSBI;
  bs58 = bs58 && bs58.hasOwnProperty('default') ? bs58['default'] : bs58;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }

      return arr2;
    }
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  var ADDRESS_PREFIXES = {
    ACCOUNT: 0x42,
    PRIVATE_KEY: 0xAA
  };
  var ACCOUNT_NAME_LENGTH = 12;
  /**
   * Convert Uint8 array to hex string
   * @param {string} hexString
   * @return {Uint8Array} 
   */

  var fromHexString = function fromHexString(hexString) {
    if (hexString.length % 2 === 1) hexString = '0' + hexString;
    var m = hexString.match(/.{1,2}/g);
    if (!m) return new Uint8Array([]);
    return new Uint8Array(m.map(function (byte) {
      return parseInt(byte, 16);
    }));
  };
  /**
   * Convert number to Uint8 array
   * @param {number} d 
   * @param {number} bitLength default 64, can also use 32
   */


  var fromNumber = function fromNumber(d) {
    var bitLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 64;
    var bytes = bitLength / 8;

    if (d >= Math.pow(2, bitLength)) {
      throw new Error('Number exeeds uint64 range');
    }

    var arr = new Uint8Array(bytes);

    for (var i = 0, j = 1; i < bytes; i++, j *= 0x100) {
      arr[i] = d / j & 0xff;
    }

    return arr;
  };
  /**
   * Convert BigInt to Uint8 array
   * @param {JSBI} d 
   */


  var fromBigInt = function fromBigInt(d) {
    return fromHexString(JSBI.BigInt(d).toString(16));
  };
  /**
   * Encodes address form byte array to string.
   * @param {number[]} byteArray 
   * @param {string} address
   */


  var encodeAddress = function encodeAddress(byteArray) {
    if (byteArray.length <= ACCOUNT_NAME_LENGTH) {
      return Buffer.from(byteArray).toString();
    }

    var buf = Buffer.from([ADDRESS_PREFIXES.ACCOUNT].concat(_toConsumableArray(byteArray)));
    return bs58check.encode(buf);
  };
  /**
   * Decodes address from string to byte array.
   * @param {string} address base58check encoded address or name
   * @return {number[]} byte array
   */


  var decodeAddress = function decodeAddress(address) {
    if (address.length <= ACCOUNT_NAME_LENGTH) {
      return Buffer.from(address);
    }

    return bs58check.decode(address).slice(1);
  };
  /**
   * Encodes address form byte array to string.
   * @param {number[]} byteArray 
   * @param {string} address
   */


  var encodePrivateKey = function encodePrivateKey(byteArray) {
    var buf = Buffer.from([ADDRESS_PREFIXES.PRIVATE_KEY].concat(_toConsumableArray(byteArray)));
    return bs58check.encode(buf);
  };
  /**
   * Decodes address from string to byte array.
   * @param {string} address base58check encoded privkey 
   * @return {number[]} byte array
   */


  var decodePrivateKey = function decodePrivateKey(key) {
    return bs58check.decode(key).slice(1);
  };

  function encodeTxHash(bytes) {
    return bs58.encode(Buffer.from(Uint8Array.from(bytes)));
  }

  var ecdsa = new elliptic.ec('secp256k1');
  /**
   * Encode public key as address
   * @param {ECPoint} publicKey
   * @return {string} base58check encoded address
   */

  function addressFromPublicKey(publicKey) {
    var len = publicKey.curve.p.byteLength();
    var x = publicKey.getX().toArray('be', len);
    var address = Uint8Array.from([publicKey.getY().isEven() ? 0x02 : 0x03].concat(x));
    return encodeAddress(address);
  }
  /**
   * Encodes a key pair into an identity object
   * @param {KeyPair} keyPair 
   * @return {object}
   */


  function encodeIdentity(keyPair) {
    //@ts-ignore
    var privateKey = Buffer.from(keyPair.getPrivate().toArray());
    var publicKey = keyPair.getPublic();
    var address = addressFromPublicKey(publicKey);
    return {
      address: address,
      publicKey: publicKey,
      privateKey: privateKey,
      keyPair: keyPair
    };
  }
  /**
   * Shortcut function to create a new random private key and
   * return keys and address as encoded strings.
   */


  function createIdentity() {
    var keyPair = ecdsa.genKeyPair();
    return encodeIdentity(keyPair);
  }
  /**
   * Returns identity associated with private key
   * @param {Buffer} privKeyBytes 
   */


  function identifyFromPrivateKey(privKeyBytes) {
    var keyPair = ecdsa.keyFromPrivate(Buffer.from(privKeyBytes));
    return encodeIdentity(keyPair);
  }
  /**
   * Retrieve public key from address
   * @param {ECPoint} publicKey
   * @return {string} base58check encoded address
   */


  function publicKeyFromAddress(address) {
    var pubkey = decodeAddress(address);
    return ecdsa.keyFromPublic(pubkey);
  }

  var _keyAndNonceFromPassword = function _keyAndNonceFromPassword(password) {
    // Make a key from double hashing the password
    var hash = ecdsa.hash();
    hash.update(password);
    var addr = hash.digest();
    var rehash = ecdsa.hash();
    rehash.update(password);
    rehash.update(addr);
    var key = Buffer.from(rehash.digest());
    var nonce = Buffer.from(addr.slice(4, 16));
    return [key, nonce];
  };

  function decryptPrivateKey(encryptedBytes, password) {
    var _keyAndNonceFromPassw = _keyAndNonceFromPassword(password),
        _keyAndNonceFromPassw2 = _slicedToArray(_keyAndNonceFromPassw, 2),
        key = _keyAndNonceFromPassw2[0],
        nonce = _keyAndNonceFromPassw2[1];

    return asmcrypto_js.AES_GCM.decrypt(Uint8Array.from(encryptedBytes), key, nonce);
  }

  function encryptPrivateKey(clearBytes, password) {
    var _keyAndNonceFromPassw3 = _keyAndNonceFromPassword(password),
        _keyAndNonceFromPassw4 = _slicedToArray(_keyAndNonceFromPassw3, 2),
        key = _keyAndNonceFromPassw4[0],
        nonce = _keyAndNonceFromPassw4[1];

    return asmcrypto_js.AES_GCM.encrypt(Uint8Array.from(clearBytes), key, nonce);
  }

  var ecdsa$1 = new elliptic.ec('secp256k1');

  function bufferOrB58(input) {
    if (typeof input === 'string') {
      return bs58.decode(input);
    }

    if (typeof input === 'undefined') {
      return new Uint8Array([]);
    }

    return input;
  }

  function hash(data) {
    var h = ecdsa$1.hash();
    h.update(data);
    return h.digest();
  }

  function hashTransaction(_x) {
    return _hashTransaction.apply(this, arguments);
  }

  function _hashTransaction() {
    _hashTransaction = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee(tx) {
      var encoding,
          includeSign,
          amountUnit,
          items,
          data,
          result,
          _args = arguments;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              encoding = _args.length > 1 && _args[1] !== undefined ? _args[1] : 'base64';
              includeSign = _args.length > 2 && _args[2] !== undefined ? _args[2] : true; // check amount format

              tx.amount = '' + tx.amount;

              if (!(typeof tx.amount !== 'string')) {
                _context.next = 5;
                break;
              }

              throw new Error();

            case 5:
              // this is a type-hint for ts
              amountUnit = tx.amount.match(/\s*([^0-9]+)\s*/);

              if (!(amountUnit && amountUnit[1] !== 'aer')) {
                _context.next = 8;
                break;
              }

              throw Error("Can only hash amounts provided in the base unit (aer), not ".concat(tx.amount, ". Convert to aer or remove unit."));

            case 8:
              tx.amount = tx.amount.replace(/[^0-9]/g, '');
              items = [fromNumber(tx.nonce, 64), decodeAddress(tx.from.toString()), tx.to ? decodeAddress(tx.to.toString()) : Buffer.from([]), fromBigInt(tx.amount ? tx.amount.toString() : 0), tx.payload ? Buffer.from(tx.payload) : Buffer.from([]), fromNumber(tx.limit || 0, 64), fromBigInt(tx.price ? tx.price.toString() : 0), fromNumber(tx.type || 0, 32), Buffer.from(bufferOrB58(tx.chainIdHash))];
              data = Buffer.concat(items.map(function (item) {
                return Buffer.from(item);
              }));

              if (includeSign && typeof tx.sign !== 'undefined') {
                data = Buffer.concat([data, Buffer.from(tx.sign, 'base64')]);
              }

              result = hash(data);

              if (!(encoding == 'base64')) {
                _context.next = 17;
                break;
              }

              return _context.abrupt("return", Buffer.from(result).toString('base64'));

            case 17:
              if (!(encoding == 'base58')) {
                _context.next = 21;
                break;
              }

              return _context.abrupt("return", encodeTxHash(Buffer.from(result)));

            case 21:
              return _context.abrupt("return", result);

            case 22:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));
    return _hashTransaction.apply(this, arguments);
  }
  /**
   * Returns signature encoded in DER format in base64.
   * @param sig 
   */


  var encodeSignature = function encodeSignature(sig) {
    var enc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'base64';
    return Buffer.from(sig.toDER()).toString(enc);
  };
  /**
   * Sign transaction with key.
   * @param {object} tx transaction
   * @param {BN} key key pair or private key
   */


  var signMessage =
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee2(msgHash, key) {
      var enc,
          sig,
          _args2 = arguments;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              enc = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : 'base64';
              sig = key.sign(msgHash);
              return _context2.abrupt("return", encodeSignature(sig, enc));

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function signMessage(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
  /**
   * Sign transaction with key.
   * @param {object} tx transaction
   * @param {BN} key key pair or private key
   */


  var signTransaction =
  /*#__PURE__*/
  function () {
    var _ref2 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee3(tx, key) {
      var enc,
          msgHash,
          _args3 = arguments;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              enc = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : 'base64';
              _context3.next = 3;
              return hashTransaction(tx, 'bytes', false);

            case 3:
              msgHash = _context3.sent;
              return _context3.abrupt("return", signMessage(msgHash, key, enc));

            case 5:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    return function signTransaction(_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   * Verify that a signature for msg was generated by key
   * @param key key pair or public key
   */


  var verifySignature =
  /*#__PURE__*/
  function () {
    var _ref3 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee4(msg, key, signature) {
      var enc,
          sign,
          _args4 = arguments;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              enc = _args4.length > 3 && _args4[3] !== undefined ? _args4[3] : 'base64';
              _context4.prev = 1;
              sign = Buffer.from(signature, enc); // @ts-ignore: the typedef is wrong, a Buffer is an allowed input

              return _context4.abrupt("return", key.verify(msg, sign));

            case 6:
              _context4.prev = 6;
              _context4.t0 = _context4["catch"](1);
              throw Error('could not decode signature: ' + _context4.t0);

            case 9:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this, [[1, 6]]);
    }));

    return function verifySignature(_x5, _x6, _x7) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * Verify that a signature for tx was generated by key
   */


  var verifyTxSignature =
  /*#__PURE__*/
  function () {
    var _ref4 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee5(tx, key, signature) {
      var msg;
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return hashTransaction(tx, 'bytes', false);

            case 2:
              msg = _context5.sent;
              _context5.next = 5;
              return verifySignature(msg, key, signature);

            case 5:
              return _context5.abrupt("return", _context5.sent);

            case 6:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));

    return function verifyTxSignature(_x8, _x9, _x10) {
      return _ref4.apply(this, arguments);
    };
  }();

  exports.encodeAddress = encodeAddress;
  exports.decodeAddress = decodeAddress;
  exports.encodePrivateKey = encodePrivateKey;
  exports.decodePrivateKey = decodePrivateKey;
  exports.createIdentity = createIdentity;
  exports.identifyFromPrivateKey = identifyFromPrivateKey;
  exports.addressFromPublicKey = addressFromPublicKey;
  exports.publicKeyFromAddress = publicKeyFromAddress;
  exports.decryptPrivateKey = decryptPrivateKey;
  exports.encryptPrivateKey = encryptPrivateKey;
  exports.signMessage = signMessage;
  exports.signTransaction = signTransaction;
  exports.verifySignature = verifySignature;
  exports.verifyTxSignature = verifyTxSignature;
  exports.hashTransaction = hashTransaction;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/@herajs/wallet/dist/herajs-wallet.iife.js":
/*!****************************************************************!*\
  !*** ./node_modules/@herajs/wallet/dist/herajs-wallet.iife.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

(function (global, factory) {
  ( false ? undefined : _typeof2(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports, __webpack_require__(/*! @elderapo/typed-event-emitter */ "./node_modules/@elderapo/typed-event-emitter/dist/index.es5.js"), __webpack_require__(/*! @herajs/client */ "./node_modules/@herajs/client/dist/herajs.js"), __webpack_require__(/*! @herajs/crypto */ "./node_modules/@herajs/crypto/dist/herajs-crypto.umd.js"), __webpack_require__(/*! idb */ "./node_modules/idb/build/esm/index.js")) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(/*! @elderapo/typed-event-emitter */ "./node_modules/@elderapo/typed-event-emitter/dist/index.es5.js"), __webpack_require__(/*! @herajs/client */ "./node_modules/@herajs/client/dist/herajs.js"), __webpack_require__(/*! @herajs/crypto */ "./node_modules/@herajs/crypto/dist/herajs-crypto.umd.js"), __webpack_require__(/*! idb */ "./node_modules/idb/build/esm/index.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : (undefined);
})(this, function (exports, typedEventEmitter, client, crypto, idb) {
  'use strict';

  function _typeof(obj) {
    if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
      _typeof = function _typeof(obj) {
        return _typeof2(obj);
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
      };
    }

    return _typeof(obj);
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (_typeof2(call) === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  var Middleware = function Middleware() {
    _classCallCheck(this, Middleware);
  };

  function isMiddlewareConstructor(arg) {
    return typeof arg === 'function';
  }

  var MiddlewareConsumer =
  /*#__PURE__*/
  function () {
    function MiddlewareConsumer() {
      _classCallCheck(this, MiddlewareConsumer);

      _defineProperty(this, "middlewares", []);
    }

    _createClass(MiddlewareConsumer, [{
      key: "use",
      value: function use(middleware) {
        if (isMiddlewareConstructor(middleware)) {
          middleware = new middleware();
        }

        this.middlewares.push(middleware);
      }
    }, {
      key: "applyMiddlewares",
      value: function applyMiddlewares(functionName) {
        var _this = this;

        return function (next) {
          var fn;

          if (typeof next === 'undefined') {
            fn = function fn() {
              throw new Error("Method ".concat(functionName, " has no fallback implementation. Did you forget to load a middleware?"));
            };
          } else {
            fn = next;
          }

          if (_this.middlewares) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = _this.middlewares[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var middleware = _step.value;

                if (typeof middleware[functionName] === 'function') {
                  fn = middleware[functionName](_this)(fn);
                }
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          }

          return fn;
        };
      }
    }]);

    return MiddlewareConsumer;
  }();
  /**
   * A Record is a basic object that only contains a key and data as primitive types, arrays, and objects.
   * The data field is serializable and should be compatabile with any kind of storage.
   * Sub-classes can add non-serializable fields.
   */


  var Record = function Record(key, data) {
    _classCallCheck(this, Record);

    _defineProperty(this, "key", void 0);

    _defineProperty(this, "data", void 0);

    this.key = key;
    this.data = data;
  };

  var Status;

  (function (Status) {
    Status["Pending"] = "pending";
    Status["Confirmed"] = "confirmed";
    Status["Error"] = "error";
    Status["Timeout"] = "timeout";
  })(Status || (Status = {}));

  var Transaction =
  /*#__PURE__*/
  function (_Record) {
    _inherits(Transaction, _Record);

    function Transaction(key, data, txBody) {
      var _this;

      _classCallCheck(this, Transaction);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Transaction).call(this, key, data));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "txBody", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_unsignedHash", void 0);

      _this.txBody = txBody;
      return _this;
    }

    _createClass(Transaction, [{
      key: "getUnsignedHash",

      /**
       * Calculate the hash excluding any signature
       */
      value: function getUnsignedHash() {
        // TODO calc hash
        return '';
      }
    }, {
      key: "unsignedHash",
      get: function get() {
        if (typeof this._unsignedHash === 'undefined') {
          this._unsignedHash = this.getUnsignedHash();
        }

        return this._unsignedHash;
      }
    }, {
      key: "amount",
      get: function get() {
        return new client.Amount(this.data.amount);
      }
    }]);

    return Transaction;
  }(Record);

  _defineProperty(Transaction, "Status", Status);

  var SignedTransaction =
  /*#__PURE__*/
  function (_Transaction) {
    _inherits(SignedTransaction, _Transaction);

    function SignedTransaction(key, data, txBody, signature) {
      var _this2;

      _classCallCheck(this, SignedTransaction);

      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(SignedTransaction).call(this, key, data));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "_signedHash", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "signature", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "txBody", void 0);

      _this2.txBody = txBody;

      if (_this2.data.hash !== null) {
        _this2._signedHash = _this2.data.hash;
      }

      _this2.signature = signature;
      return _this2;
    }

    _createClass(SignedTransaction, [{
      key: "getHash",

      /**
       * Calculate the hash, including all present body
       */
      value: function () {
        var _getHash = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee() {
          var hash;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!(typeof this.txBody.nonce !== 'number')) {
                    _context.next = 2;
                    break;
                  }

                  throw new Error('missing required parameter `nonce`');

                case 2:
                  _context.next = 4;
                  return crypto.hashTransaction(_objectSpread({}, this.txBody, {
                    nonce: this.txBody.nonce || 0
                  }), 'base58');

                case 4:
                  hash = _context.sent;
                  this._signedHash = hash;
                  return _context.abrupt("return", hash);

                case 7:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function getHash() {
          return _getHash.apply(this, arguments);
        }

        return getHash;
      }()
    }, {
      key: "status",
      get: function get() {
        return this.data.status;
      }
    }, {
      key: "isPending",
      get: function get() {
        return this.status === Transaction.Status.Pending;
      }
    }, {
      key: "isConfirmed",
      get: function get() {
        return this.status === Transaction.Status.Confirmed;
      }
    }, {
      key: "hash",
      get: function get() {
        if (typeof this._signedHash === 'undefined') throw new Error('transaction is missing hash, either supply or compute with getHash()');
        return this._signedHash;
      }
    }], [{
      key: "fromTxBody",
      value: function fromTxBody(txBody, chainId) {
        return new SignedTransaction(txBody.hash ? txBody.hash : '', {
          chainId: chainId,
          from: '' + txBody.from,
          to: '' + txBody.to,
          hash: '' + txBody.hash,
          ts: '',
          blockhash: null,
          blockno: null,
          amount: '' + txBody.amount,
          type: txBody.type ? txBody.type : 0,
          status: Transaction.Status.Confirmed
        }, txBody, txBody.sign ? txBody.sign : '');
      }
    }]);

    return SignedTransaction;
  }(Transaction);

  var Key =
  /*#__PURE__*/
  function (_Record) {
    _inherits(Key, _Record);

    function Key() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, Key);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Key)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "_keyPair", void 0);

      return _this;
    }

    _createClass(Key, [{
      key: "signTransaction",
      value: function () {
        var _signTransaction2 = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee2(tx) {
          var signature, signedTx;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!(typeof tx.txBody === 'undefined')) {
                    _context2.next = 2;
                    break;
                  }

                  throw new Error('cannot sign transaction without txBody. Did you use prepareTransaction?');

                case 2:
                  _context2.next = 4;
                  return crypto.signTransaction(_objectSpread({}, tx.txBody), this.keyPair);

                case 4:
                  signature = _context2.sent;
                  signedTx = new SignedTransaction(tx.key, tx.data, _objectSpread({}, tx.txBody), signature);
                  signedTx.txBody.sign = signature;
                  _context2.next = 9;
                  return signedTx.getHash();

                case 9:
                  signedTx.txBody.hash = _context2.sent;
                  return _context2.abrupt("return", signedTx);

                case 11:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function signTransaction(_x) {
          return _signTransaction2.apply(this, arguments);
        }

        return signTransaction;
      }()
    }, {
      key: "signMessage",
      value: function () {
        var _signMessage2 = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee3(message) {
          var enc,
              _args3 = arguments;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  enc = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : 'hex';
                  _context3.next = 3;
                  return crypto.signMessage(message, this.keyPair, enc);

                case 3:
                  return _context3.abrupt("return", _context3.sent);

                case 4:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function signMessage(_x2) {
          return _signMessage2.apply(this, arguments);
        }

        return signMessage;
      }()
    }, {
      key: "unlock",
      value: function unlock(passphrase) {
        if (this.data.privateKey && this.data.privateKey.length) return; // already unlocked

        if (!passphrase) throw new Error('unlock wallet before using key');
        if (!this.data.privateKeyEncrypted) throw new Error('missing encrypted private key');
        this.data.privateKey = Array.from(crypto.decryptPrivateKey(Uint8Array.from(this.data.privateKeyEncrypted), passphrase));
      }
    }, {
      key: "keyPair",
      get: function get() {
        if (!this._keyPair) {
          if (!this.data.privateKey || !this.data.privateKey.length) throw new Error('missing private key, did you forget to unlock?');
          var identity = crypto.identifyFromPrivateKey(Uint8Array.from(this.data.privateKey));
          this._keyPair = identity.keyPair;
        }

        return this._keyPair;
      }
    }], [{
      key: "fromRecord",
      value: function fromRecord(record) {
        return new Key(record.key, record.data);
      }
    }]);

    return Key;
  }(Record);

  var EncryptedIdSetting =
  /*#__PURE__*/
  function (_Record) {
    _inherits(EncryptedIdSetting, _Record);

    function EncryptedIdSetting() {
      _classCallCheck(this, EncryptedIdSetting);

      return _possibleConstructorReturn(this, _getPrototypeOf(EncryptedIdSetting).apply(this, arguments));
    }

    return EncryptedIdSetting;
  }(Record);
  /**
   * Returns the next interval to use for exponential backoff.
   * This curve yields every value 4 times before doubling in the next step.
   * The intervals reach ca. 1 minute (total time elapsed ca. 4 minutes) after step 24,
   * so it is advised to declare a timeout after a certain number of steps.
   * @param n step on the interval curve
   */


  function backoffIntervalStep(n) {
    var multiplier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
    return multiplier * Math.pow(2, Math.floor(n / 4));
  }

  function serializeAccountSpec(accountSpec) {
    var chainId = typeof accountSpec.chainId === 'undefined' ? '' : accountSpec.chainId;
    return "".concat(chainId, "/").concat(accountSpec.address);
  }
  /**
   * A simple extension of the native Map using stringified objects as keys.
   * The order of object properties matters.
   */


  var HashMap =
  /*#__PURE__*/
  function () {
    function HashMap() {
      _classCallCheck(this, HashMap);

      _defineProperty(this, "map", new Map());
    }

    _createClass(HashMap, [{
      key: "hash",
      value: function hash(key) {
        return typeof key === 'string' ? key : JSON.stringify(key);
      }
    }, {
      key: "set",
      value: function set(key, value) {
        this.map.set(this.hash(key), value);
        return this;
      }
    }, {
      key: "get",
      value: function get(key) {
        return this.map.get(this.hash(key));
      }
    }, {
      key: "has",
      value: function has(key) {
        return this.map.has(this.hash(key));
      }
    }, {
      key: "delete",
      value: function _delete(key) {
        return this.map.delete(this.hash(key));
      }
    }, {
      key: "clear",
      value: function clear() {
        this.map.clear();
      }
    }, {
      key: "values",
      value: function values() {
        return this.map.values();
      }
    }, {
      key: "keys",
      value: function keys() {
        return this.map.keys();
      }
    }, {
      key: "size",
      get: function get() {
        return this.map.size;
      }
    }]);

    return HashMap;
  }();

  var PausableTypedEventEmitter =
  /*#__PURE__*/
  function (_TypedEventEmitter) {
    _inherits(PausableTypedEventEmitter, _TypedEventEmitter);

    function PausableTypedEventEmitter() {
      var _getPrototypeOf2;

      var _this;

      _classCallCheck(this, PausableTypedEventEmitter);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PausableTypedEventEmitter)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "paused", true);

      return _this;
    }

    _createClass(PausableTypedEventEmitter, [{
      key: "resume",
      value: function resume() {
        if (!this.paused) return;
        this.paused = false;
      }
    }, {
      key: "pause",
      value: function pause() {
        if (this.paused) return;
        this.paused = true;
      }
    }]);

    return PausableTypedEventEmitter;
  }(typedEventEmitter.TypedEventEmitter);

  function isConstructor(arg) {
    return typeof arg === 'function';
  }
  /**
   * Access a property using dot syntax
   * Example: propPath({ a: { b: 1 }}, 'a.b') => 1
   * @param obj 
   * @param path 
   */


  function propPath(obj, path) {
    if (typeof obj === 'undefined') return undefined;
    var dotIndex = path.indexOf('.');

    if (dotIndex !== -1) {
      if (_typeof(obj) !== 'object') return undefined;
      var _ref = [path.slice(0, dotIndex), path.slice(dotIndex + 1)],
          firstSegment = _ref[0],
          rest = _ref[1];
      return propPath(obj[firstSegment], rest);
    }

    return obj[path];
  }
  /**
   * KeyManager manages and tracks keys for accounts
   */


  var KeyManager =
  /*#__PURE__*/
  function (_TypedEventEmitter) {
    _inherits(KeyManager, _TypedEventEmitter);

    function KeyManager(wallet) {
      var _this;

      _classCallCheck(this, KeyManager);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(KeyManager).call(this));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "wallet", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "keys", new HashMap());

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "masterPassphrase", void 0);

      _this.wallet = wallet;
      return _this;
    }

    _createClass(KeyManager, [{
      key: "addKey",
      value: function addKey(account, privateKey) {
        var address = account.data.spec.address;
        var key = new Key(address, {
          privateKey: Array.from(privateKey),
          address: address,
          privateKeyEncrypted: null
        });
        this.keys.set(address, key);

        if (this.wallet.keystore) {
          if (!this.masterPassphrase) throw new Error('unlock wallet before adding key');
          var privateKeyEncrypted = crypto.encryptPrivateKey(Uint8Array.from(privateKey), this.masterPassphrase);
          key.data.privateKeyEncrypted = Array.from(privateKeyEncrypted);
          key.data.privateKey = null;
          this.wallet.keystore.getIndex('keys').put(key);
        }

        return key;
      }
    }, {
      key: "getKey",
      value: function () {
        var _getKey = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee4(account) {
          var address, keyRecord, key;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  address = account.data.spec.address;

                  if (!(!this.keys.has(address) && this.wallet.keystore)) {
                    _context4.next = 14;
                    break;
                  }

                  _context4.prev = 2;
                  _context4.next = 5;
                  return this.wallet.keystore.getIndex('keys').get(address);

                case 5:
                  keyRecord = _context4.sent;
                  key = Key.fromRecord(keyRecord);
                  this.keys.set(address, key);
                  return _context4.abrupt("return", key);

                case 11:
                  _context4.prev = 11;
                  _context4.t0 = _context4["catch"](2);
                  throw new Error("missing key for account ".concat(address));

                case 14:
                  return _context4.abrupt("return", this.keys.get(address));

                case 15:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this, [[2, 11]]);
        }));

        function getKey(_x) {
          return _getKey.apply(this, arguments);
        }

        return getKey;
      }()
    }, {
      key: "getUnlockedKey",
      value: function () {
        var _getUnlockedKey = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee5(account) {
          var key;
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _context5.next = 2;
                  return this.getKey(account);

                case 2:
                  key = _context5.sent;
                  key.unlock(this.masterPassphrase);
                  return _context5.abrupt("return", key);

                case 5:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function getUnlockedKey(_x2) {
          return _getUnlockedKey.apply(this, arguments);
        }

        return getUnlockedKey;
      }()
    }, {
      key: "removeKey",
      value: function () {
        var _removeKey = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee6(address) {
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  if (this.keys.has(address)) {
                    this.keys.delete(address);
                  }

                  if (!this.wallet.keystore) {
                    _context6.next = 4;
                    break;
                  }

                  _context6.next = 4;
                  return this.wallet.keystore.getIndex('keys').delete(address);

                case 4:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function removeKey(_x3) {
          return _removeKey.apply(this, arguments);
        }

        return removeKey;
      }()
    }, {
      key: "signTransaction",
      value: function () {
        var _signTransaction = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee7(account, transaction) {
          var key;
          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _context7.next = 2;
                  return this.getUnlockedKey(account);

                case 2:
                  key = _context7.sent;
                  return _context7.abrupt("return", key.signTransaction(transaction));

                case 4:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));

        function signTransaction(_x4, _x5) {
          return _signTransaction.apply(this, arguments);
        }

        return signTransaction;
      }()
    }, {
      key: "signMessage",
      value: function () {
        var _signMessage = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee8(account, message) {
          var enc,
              key,
              _args8 = arguments;
          return regeneratorRuntime.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  enc = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : 'hex';
                  _context8.next = 3;
                  return this.getUnlockedKey(account);

                case 3:
                  key = _context8.sent;
                  _context8.next = 6;
                  return key.signMessage(message, enc);

                case 6:
                  return _context8.abrupt("return", _context8.sent);

                case 7:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this);
        }));

        function signMessage(_x6, _x7) {
          return _signMessage.apply(this, arguments);
        }

        return signMessage;
      }()
    }, {
      key: "importKey",
      value: function () {
        var _importKey = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee9(importSpec) {
          var rawKey, encryptedKey;
          return regeneratorRuntime.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  rawKey = new Uint8Array([]);

                  if (!(typeof importSpec.b58encrypted === 'string' && typeof importSpec.password === 'string')) {
                    _context9.next = 6;
                    break;
                  }

                  encryptedKey = crypto.decodePrivateKey(importSpec.b58encrypted);
                  _context9.next = 5;
                  return crypto.decryptPrivateKey(encryptedKey, importSpec.password);

                case 5:
                  rawKey = _context9.sent;

                case 6:
                  if (typeof importSpec.privateKey !== 'undefined') {
                    rawKey = importSpec.privateKey;
                  }

                  if (rawKey.length) {
                    _context9.next = 9;
                    break;
                  }

                  throw new Error('no key provided. Supply b58encrypted and password or privateKey');

                case 9:
                  return _context9.abrupt("return", this.addKey(importSpec.account, rawKey));

                case 10:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this);
        }));

        function importKey(_x8) {
          return _importKey.apply(this, arguments);
        }

        return importKey;
      }()
      /*
      import
       export
      */

    }, {
      key: "unlock",
      value: function () {
        var _unlock = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee10(passphrase) {
          var encryptedId;
          return regeneratorRuntime.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  if (this.wallet.datastore) {
                    _context10.next = 2;
                    break;
                  }

                  throw new Error('configure storage before accessing keystore');

                case 2:
                  _context10.next = 4;
                  return this.wallet.datastore.getIndex('settings').get('encryptedId');

                case 4:
                  encryptedId = _context10.sent;
                  _context10.prev = 5;
                  _context10.next = 8;
                  return crypto.decryptPrivateKey(Uint8Array.from(encryptedId.data.value), passphrase);

                case 8:
                  _context10.next = 13;
                  break;

                case 10:
                  _context10.prev = 10;
                  _context10.t0 = _context10["catch"](5);
                  throw new Error('invalid passphrase');

                case 13:
                  this.masterPassphrase = passphrase;
                  this.emit('unlock', null);

                case 15:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10, this, [[5, 10]]);
        }));

        function unlock(_x9) {
          return _unlock.apply(this, arguments);
        }

        return unlock;
      }()
    }, {
      key: "setupAndUnlock",
      value: function () {
        var _setupAndUnlock = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee11(appId, passphrase) {
          var encryptedId;
          return regeneratorRuntime.wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  if (this.wallet.datastore) {
                    _context11.next = 2;
                    break;
                  }

                  throw new Error('configure storage before accessing keystore');

                case 2:
                  _context11.t0 = EncryptedIdSetting;
                  _context11.t1 = Array;
                  _context11.next = 6;
                  return crypto.encryptPrivateKey(Buffer.from(appId), passphrase);

                case 6:
                  _context11.t2 = _context11.sent;
                  _context11.t3 = _context11.t1.from.call(_context11.t1, _context11.t2);
                  _context11.t4 = {
                    value: _context11.t3
                  };
                  encryptedId = new _context11.t0('encryptedId', _context11.t4);
                  _context11.next = 12;
                  return this.wallet.datastore.getIndex('settings').put(encryptedId);

                case 12:
                  _context11.next = 14;
                  return this.unlock(passphrase);

                case 14:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee11, this);
        }));

        function setupAndUnlock(_x10, _x11) {
          return _setupAndUnlock.apply(this, arguments);
        }

        return setupAndUnlock;
      }()
    }, {
      key: "clearKeys",
      value: function () {
        var _clearKeys = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee12() {
          return regeneratorRuntime.wrap(function _callee12$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  this.keys.clear();

                  if (!this.wallet.keystore) {
                    _context12.next = 4;
                    break;
                  }

                  _context12.next = 4;
                  return this.wallet.keystore.getIndex('keys').clear();

                case 4:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee12, this);
        }));

        function clearKeys() {
          return _clearKeys.apply(this, arguments);
        }

        return clearKeys;
      }()
    }, {
      key: "lock",
      value: function lock() {
        this.masterPassphrase = undefined;
        this.emit('lock', null);
      }
    }, {
      key: "unlocked",
      get: function get() {
        return typeof this.masterPassphrase !== 'undefined';
      }
    }]);

    return KeyManager;
  }(typedEventEmitter.TypedEventEmitter);

  var Account =
  /*#__PURE__*/
  function (_Record) {
    _inherits(Account, _Record);

    function Account() {
      _classCallCheck(this, Account);

      return _possibleConstructorReturn(this, _getPrototypeOf(Account).apply(this, arguments));
    }

    _createClass(Account, [{
      key: "balance",
      get: function get() {
        return new client.Amount(this.data.balance);
      }
    }, {
      key: "nonce",
      get: function get() {
        return this.data.nonce;
      }
    }, {
      key: "address",
      get: function get() {
        return new client.Address(this.data.spec.address);
      }
    }]);

    return Account;
  }(Record);

  var DEFAULT_CHAIN = 'testnet.aergo.io';
  var ACCOUNT_UPDATE_INTERVAL = 10000;

  var AccountTracker =
  /*#__PURE__*/
  function (_PausableTypedEventEm) {
    _inherits(AccountTracker, _PausableTypedEventEm);

    function AccountTracker(manager, account) {
      var _this;

      _classCallCheck(this, AccountTracker);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AccountTracker).call(this));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "manager", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "intervalId", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "account", void 0);

      _this.manager = manager;
      _this.account = account;
      return _this;
    }

    _createClass(AccountTracker, [{
      key: "load",
      value: function () {
        var _load = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee13() {
          var client, state;
          return regeneratorRuntime.wrap(function _callee13$(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  client = this.manager.wallet.getClient(this.account.data.spec.chainId);
                  _context13.next = 3;
                  return client.getState(this.account.data.spec.address);

                case 3:
                  state = _context13.sent;

                  if (this.account.data.balance !== state.balance.toString() || this.account.data.nonce !== state.nonce) {
                    this.account.data.balance = state.balance.toString();
                    this.account.data.nonce = state.nonce;
                    this.emit('update', this.account);
                    this.manager.wallet.datastore && this.manager.wallet.datastore.getIndex('accounts').put(this.account);
                  }

                  return _context13.abrupt("return", this.account);

                case 6:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee13, this);
        }));

        function load() {
          return _load.apply(this, arguments);
        }

        return load;
      }()
    }, {
      key: "resume",
      value: function resume() {
        var _this2 = this;

        this.load();
        this.pause();
        this.intervalId = setInterval(function () {
          _this2.load();
        }, ACCOUNT_UPDATE_INTERVAL);
      }
    }, {
      key: "pause",
      value: function pause() {
        if (this.intervalId) {
          clearInterval(this.intervalId);
        }
      }
    }]);

    return AccountTracker;
  }(PausableTypedEventEmitter);
  /**
   * AccountManager manages and tracks single accounts
   */


  var AccountManager =
  /*#__PURE__*/
  function (_PausableTypedEventEm2) {
    _inherits(AccountManager, _PausableTypedEventEm2);

    function AccountManager(wallet) {
      var _this3;

      _classCallCheck(this, AccountManager);

      _this3 = _possibleConstructorReturn(this, _getPrototypeOf(AccountManager).call(this));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this3)), "wallet", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this3)), "accounts", new HashMap());

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this3)), "trackers", new HashMap());

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this3)), "loadedFromStore", false);

      _this3.wallet = wallet;
      return _this3;
    }

    _createClass(AccountManager, [{
      key: "resume",
      value: function resume() {
        if (!this.paused) return;
        this.paused = false;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this.trackers.values()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var tracker = _step.value;
            tracker.resume();
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    }, {
      key: "pause",
      value: function pause() {
        if (this.paused) return;
        this.paused = true;
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = this.trackers.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var tracker = _step2.value;
            tracker.pause();
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    }, {
      key: "getCompleteAccountSpec",
      value: function getCompleteAccountSpec(accountSpec) {
        var chainId = typeof accountSpec.chainId !== 'undefined' ? accountSpec.chainId : this.wallet.defaultChainId;
        return {
          address: accountSpec.address,
          chainId: chainId
        };
      }
    }, {
      key: "addAccount",
      value: function addAccount(accountSpec) {
        var _this4 = this;

        var completeAccountSpec = this.getCompleteAccountSpec(accountSpec);

        if (this.accounts.has(completeAccountSpec)) {
          throw new Error('Account has already been added.');
        } // console.log('addAccount', completeAccountSpec);


        var accountPromise = this.loadAccount(completeAccountSpec);
        this.accounts.set(completeAccountSpec, accountPromise);
        accountPromise.then(function (account) {
          _this4.emit('add', account);

          _this4.wallet.datastore && _this4.wallet.datastore.getIndex('accounts').put(account);
        });
        return accountPromise;
      }
    }, {
      key: "removeAccount",
      value: function () {
        var _removeAccount = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee14(accountSpec) {
          var completeAccountSpec, index, remainingAccounts;
          return regeneratorRuntime.wrap(function _callee14$(_context14) {
            while (1) {
              switch (_context14.prev = _context14.next) {
                case 0:
                  completeAccountSpec = this.getCompleteAccountSpec(accountSpec);

                  if (this.accounts.has(completeAccountSpec)) {
                    // Remove account from local cache
                    this.accounts.delete(completeAccountSpec);
                  }

                  if (!this.wallet.datastore) {
                    _context14.next = 15;
                    break;
                  }

                  // Remove account from store
                  index = this.wallet.datastore.getIndex('accounts');
                  _context14.next = 6;
                  return index.delete(serializeAccountSpec(completeAccountSpec));

                case 6:
                  if (!this.wallet.keystore) {
                    _context14.next = 15;
                    break;
                  }

                  _context14.t0 = Array;
                  _context14.next = 10;
                  return index.getAll(completeAccountSpec.address.toString(), 'spec.address');

                case 10:
                  _context14.t1 = _context14.sent;
                  remainingAccounts = _context14.t0.from.call(_context14.t0, _context14.t1);

                  if (!(remainingAccounts.length === 0)) {
                    _context14.next = 15;
                    break;
                  }

                  _context14.next = 15;
                  return this.wallet.keyManager.removeKey(completeAccountSpec.address.toString());

                case 15:
                  this.emit('remove', completeAccountSpec);

                case 16:
                case "end":
                  return _context14.stop();
              }
            }
          }, _callee14, this);
        }));

        function removeAccount(_x) {
          return _removeAccount.apply(this, arguments);
        }

        return removeAccount;
      }()
    }, {
      key: "clearAccounts",
      value: function () {
        var _clearAccounts = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee15() {
          return regeneratorRuntime.wrap(function _callee15$(_context15) {
            while (1) {
              switch (_context15.prev = _context15.next) {
                case 0:
                  this.accounts.clear();

                  if (!this.wallet.datastore) {
                    _context15.next = 4;
                    break;
                  }

                  _context15.next = 4;
                  return this.wallet.datastore.getIndex('accounts').clear();

                case 4:
                case "end":
                  return _context15.stop();
              }
            }
          }, _callee15, this);
        }));

        function clearAccounts() {
          return _clearAccounts.apply(this, arguments);
        }

        return clearAccounts;
      }()
    }, {
      key: "createAccount",
      value: function () {
        var _createAccount = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee16(chainId) {
          var identity, address, account;
          return regeneratorRuntime.wrap(function _callee16$(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  identity = crypto.createIdentity();
                  address = identity.address;
                  _context16.next = 4;
                  return this.addAccount({
                    address: address,
                    chainId: chainId
                  });

                case 4:
                  account = _context16.sent;
                  _context16.next = 7;
                  return this.wallet.keyManager.importKey({
                    account: account,
                    privateKey: identity.privateKey
                  });

                case 7:
                  return _context16.abrupt("return", account);

                case 8:
                case "end":
                  return _context16.stop();
              }
            }
          }, _callee16, this);
        }));

        function createAccount(_x2) {
          return _createAccount.apply(this, arguments);
        }

        return createAccount;
      }()
    }, {
      key: "getAccounts",
      value: function () {
        var _getAccounts = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee17() {
          var records, accounts, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, account, promises;

          return regeneratorRuntime.wrap(function _callee17$(_context17) {
            while (1) {
              switch (_context17.prev = _context17.next) {
                case 0:
                  if (!(!this.loadedFromStore && this.wallet.datastore)) {
                    _context17.next = 28;
                    break;
                  }

                  _context17.t0 = Array;
                  _context17.next = 4;
                  return this.wallet.datastore.getIndex('accounts').getAll();

                case 4:
                  _context17.t1 = _context17.sent;
                  records = _context17.t0.from.call(_context17.t0, _context17.t1);
                  accounts = records.map(function (record) {
                    return new Account(record.key, record.data);
                  });
                  _iteratorNormalCompletion3 = true;
                  _didIteratorError3 = false;
                  _iteratorError3 = undefined;
                  _context17.prev = 10;

                  for (_iterator3 = accounts[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    account = _step3.value;
                    this.accounts.set(this.getCompleteAccountSpec(account.data.spec), Promise.resolve(account));
                  }

                  _context17.next = 18;
                  break;

                case 14:
                  _context17.prev = 14;
                  _context17.t2 = _context17["catch"](10);
                  _didIteratorError3 = true;
                  _iteratorError3 = _context17.t2;

                case 18:
                  _context17.prev = 18;
                  _context17.prev = 19;

                  if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                    _iterator3.return();
                  }

                case 21:
                  _context17.prev = 21;

                  if (!_didIteratorError3) {
                    _context17.next = 24;
                    break;
                  }

                  throw _iteratorError3;

                case 24:
                  return _context17.finish(21);

                case 25:
                  return _context17.finish(18);

                case 26:
                  this.loadedFromStore = true;
                  return _context17.abrupt("return", accounts);

                case 28:
                  _context17.next = 30;
                  return this.accounts.values();

                case 30:
                  promises = _context17.sent;
                  return _context17.abrupt("return", Promise.all(promises));

                case 32:
                case "end":
                  return _context17.stop();
              }
            }
          }, _callee17, this, [[10, 14, 18, 26], [19,, 21, 25]]);
        }));

        function getAccounts() {
          return _getAccounts.apply(this, arguments);
        }

        return getAccounts;
      }()
    }, {
      key: "getOrAddAccount",
      value: function () {
        var _getOrAddAccount = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee18(accountSpec) {
          var completeAccountSpec, account;
          return regeneratorRuntime.wrap(function _callee18$(_context18) {
            while (1) {
              switch (_context18.prev = _context18.next) {
                case 0:
                  completeAccountSpec = this.getCompleteAccountSpec(accountSpec);

                  if (this.accounts.has(completeAccountSpec)) {
                    _context18.next = 7;
                    break;
                  }

                  _context18.next = 4;
                  return this.addAccount(completeAccountSpec);

                case 4:
                  account = _context18.sent;
                  _context18.next = 10;
                  break;

                case 7:
                  _context18.next = 9;
                  return this.accounts.get(completeAccountSpec);

                case 9:
                  account = _context18.sent;

                case 10:
                  return _context18.abrupt("return", account);

                case 11:
                case "end":
                  return _context18.stop();
              }
            }
          }, _callee18, this);
        }));

        function getOrAddAccount(_x3) {
          return _getOrAddAccount.apply(this, arguments);
        }

        return getOrAddAccount;
      }()
    }, {
      key: "trackAccount",
      value: function () {
        var _trackAccount = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee19(accountOrSpec) {
          var account, tracker;
          return regeneratorRuntime.wrap(function _callee19$(_context19) {
            while (1) {
              switch (_context19.prev = _context19.next) {
                case 0:
                  if (accountOrSpec.data) {
                    _context19.next = 6;
                    break;
                  }

                  _context19.next = 3;
                  return this.getOrAddAccount(accountOrSpec);

                case 3:
                  account = _context19.sent;
                  _context19.next = 7;
                  break;

                case 6:
                  account = accountOrSpec;

                case 7:
                  this.resume();

                  if (!this.trackers.has(account.data.spec)) {
                    _context19.next = 10;
                    break;
                  }

                  return _context19.abrupt("return", this.trackers.get(account.data.spec));

                case 10:
                  //console.log('[accountManager] track account', account.data.spec);
                  tracker = new AccountTracker(this, account);
                  tracker.resume();
                  this.trackers.set(account.data.spec, tracker);
                  return _context19.abrupt("return", tracker);

                case 14:
                case "end":
                  return _context19.stop();
              }
            }
          }, _callee19, this);
        }));

        function trackAccount(_x4) {
          return _trackAccount.apply(this, arguments);
        }

        return trackAccount;
      }()
    }, {
      key: "loadAccount",
      value: function () {
        var _loadAccount = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee20(accountSpec) {
          var record;
          return regeneratorRuntime.wrap(function _callee20$(_context20) {
            while (1) {
              switch (_context20.prev = _context20.next) {
                case 0:
                  if (!this.wallet.datastore) {
                    _context20.next = 10;
                    break;
                  }

                  _context20.prev = 1;
                  _context20.next = 4;
                  return this.wallet.datastore.getIndex('accounts').get(serializeAccountSpec(accountSpec));

                case 4:
                  record = _context20.sent;
                  return _context20.abrupt("return", new Account(record.key, record.data));

                case 8:
                  _context20.prev = 8;
                  _context20.t0 = _context20["catch"](1);

                case 10:
                  return _context20.abrupt("return", new Account(serializeAccountSpec(accountSpec), {
                    spec: {
                      chainId: accountSpec.chainId,
                      address: accountSpec.address.toString()
                    },
                    privateKey: [],
                    publicKey: [],
                    balance: '',
                    nonce: 0,
                    name: '',
                    lastSync: null
                  }));

                case 11:
                case "end":
                  return _context20.stop();
              }
            }
          }, _callee20, this, [[1, 8]]);
        }));

        function loadAccount(_x5) {
          return _loadAccount.apply(this, arguments);
        }

        return loadAccount;
      }()
    }, {
      key: "getNonceForAccount",
      value: function () {
        var _getNonceForAccount = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee21(account) {
          var client;
          return regeneratorRuntime.wrap(function _callee21$(_context21) {
            while (1) {
              switch (_context21.prev = _context21.next) {
                case 0:
                  // TODO: smart caching of last used nonce
                  client = this.wallet.getClient(account.data.spec.chainId);
                  _context21.next = 3;
                  return client.getNonce(account.data.spec.address);

                case 3:
                  _context21.t0 = _context21.sent;
                  return _context21.abrupt("return", 1 + _context21.t0);

                case 5:
                case "end":
                  return _context21.stop();
              }
            }
          }, _callee21, this);
        }));

        function getNonceForAccount(_x6) {
          return _getNonceForAccount.apply(this, arguments);
        }

        return getNonceForAccount;
      }()
    }, {
      key: "getChainIdHashForAccount",
      value: function () {
        var _getChainIdHashForAccount = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee22(account) {
          return regeneratorRuntime.wrap(function _callee22$(_context22) {
            while (1) {
              switch (_context22.prev = _context22.next) {
                case 0:
                  _context22.next = 2;
                  return this.wallet.getClient(account.data.spec.chainId).getChainIdHash('base58');

                case 2:
                  return _context22.abrupt("return", _context22.sent);

                case 3:
                case "end":
                  return _context22.stop();
              }
            }
          }, _callee22, this);
        }));

        function getChainIdHashForAccount(_x7) {
          return _getChainIdHashForAccount.apply(this, arguments);
        }

        return getChainIdHashForAccount;
      }()
      /**
       * Calculates nonce and converts transaction body into tx ready for signing
       * @param account 
       * @param tx 
       */

    }, {
      key: "prepareTransaction",
      value: function () {
        var _prepareTransaction = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee23(account, tx) {
          return regeneratorRuntime.wrap(function _callee23$(_context23) {
            while (1) {
              switch (_context23.prev = _context23.next) {
                case 0:
                  if (tx.from) {
                    _context23.next = 2;
                    break;
                  }

                  throw new Error('missing required transaction parameter `from` (address or name)');

                case 2:
                  if (new client.Address(account.data.spec.address).equal(tx.from)) {
                    _context23.next = 4;
                    break;
                  }

                  throw new Error('transaction parameter `from` does not match account address');

                case 4:
                  if (!(typeof tx.to === 'undefined')) {
                    _context23.next = 6;
                    break;
                  }

                  throw new Error('missing required transaction parameter `to` (address, name, or explicit null)');

                case 6:
                  if (!(typeof tx.amount === 'undefined')) {
                    _context23.next = 8;
                    break;
                  }

                  throw new Error('missing required transaction parameter amount');

                case 8:
                  tx.amount = new client.Amount(tx.amount).toUnit('aer').toString();

                  if (typeof tx.payload === 'string') {
                    tx.payload = Uint8Array.from(Buffer.from(tx.payload));
                  } else {
                    tx.payload = Uint8Array.from(tx.payload || []);
                  }

                  if (!(typeof tx.nonce === 'undefined')) {
                    _context23.next = 14;
                    break;
                  }

                  _context23.next = 13;
                  return this.getNonceForAccount(account);

                case 13:
                  tx.nonce = _context23.sent;

                case 14:
                  if (!(typeof tx.chainIdHash === 'undefined')) {
                    _context23.next = 18;
                    break;
                  }

                  _context23.next = 17;
                  return this.getChainIdHashForAccount(account);

                case 17:
                  tx.chainIdHash = _context23.sent;

                case 18:
                  return _context23.abrupt("return", new Transaction('', {
                    chainId: account.data.spec.chainId,
                    from: tx.from.toString(),
                    to: tx.to ? tx.to.toString() : '',
                    hash: '',
                    ts: new Date().toISOString(),
                    blockhash: null,
                    blockno: null,
                    amount: new client.Amount(tx.amount).toString(),
                    type: 0,
                    status: Transaction.Status.Pending
                  }, tx));

                case 19:
                case "end":
                  return _context23.stop();
              }
            }
          }, _callee23, this);
        }));

        function prepareTransaction(_x8, _x9) {
          return _prepareTransaction.apply(this, arguments);
        }

        return prepareTransaction;
      }()
    }]);

    return AccountManager;
  }(PausableTypedEventEmitter);

  var TransactionTracker =
  /*#__PURE__*/
  function (_PausableTypedEventEm) {
    _inherits(TransactionTracker, _PausableTypedEventEm);

    function TransactionTracker(manager, transaction) {
      var _this;

      _classCallCheck(this, TransactionTracker);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(TransactionTracker).call(this));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "transaction", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "manager", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "timeoutId", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "retryCount", 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "maxRetryCount", 10);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "started", void 0);

      _this.manager = manager;
      _this.transaction = transaction;
      _this.started = new Date();

      _this.retryLoad();

      return _this;
    }

    _createClass(TransactionTracker, [{
      key: "retryLoad",
      value: function retryLoad() {
        var _this2 = this;

        if (this.retryCount >= this.maxRetryCount) {
          this.transaction.data.status = Transaction.Status.Timeout;
          var elapsed = Math.round((+new Date() - +this.started) / 1000);
          this.emit('timeout', new Error("timeout after ".concat(elapsed, "s")));
          return;
        }

        var interval = backoffIntervalStep(this.retryCount++);
        this.timeoutId = setTimeout(function () {
          _this2.load();
        }, interval);
      }
      /**
       * Attempt to retrieve transaction data from node.
       * Emits events according to changed status.
       */

    }, {
      key: "load",
      value: function () {
        var _load = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee24() {
          var _this3, client, _result;

          return regeneratorRuntime.wrap(function _callee24$(_context24) {
            while (1) {
              switch (_context24.prev = _context24.next) {
                case 0:
                  _this3 = this; //console.log('[transactionManager] load', this.transaction.data.chainId, this.transaction.data.hash);

                  client = this.manager.wallet.getClient(this.transaction.data.chainId);
                  _context24.prev = 2;
                  _context24.next = 5;
                  return client.getTransaction(this.transaction.data.hash);

                case 5:
                  _result = _context24.sent;

                  if (!(typeof _result.block !== 'undefined')) {
                    _context24.next = 14;
                    break;
                  }

                  this.transaction.data.status = Transaction.Status.Confirmed;
                  this.transaction.data.blockhash = _result.block.hash;
                  this.manager.addTransaction(this.transaction);
                  this.emit('block', this.transaction);

                  if (this.listeners('receipt').length) {
                    client.getTransactionReceipt(this.transaction.data.hash).then(function (receipt) {
                      _this3.emit('receipt', receipt);
                    });
                  }

                  this.cancel();
                  return _context24.abrupt("return");

                case 14:
                  _context24.next = 21;
                  break;

                case 16:
                  _context24.prev = 16;
                  _context24.t0 = _context24["catch"](2);
                  this.emit('error', _context24.t0);
                  this.cancel();
                  return _context24.abrupt("return");

                case 21:
                  this.retryLoad();

                case 22:
                case "end":
                  return _context24.stop();
              }
            }
          }, _callee24, this, [[2, 16]]);
        }));

        function load() {
          return _load.apply(this, arguments);
        }

        return load;
      }()
    }, {
      key: "getReceipt",
      value: function () {
        var _getReceipt = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee25() {
          var _this4;

          return regeneratorRuntime.wrap(function _callee25$(_context25) {
            while (1) {
              switch (_context25.prev = _context25.next) {
                case 0:
                  _this4 = this;
                  return _context25.abrupt("return", new Promise(function (resolve, reject) {
                    _this4.once('receipt', resolve);

                    _this4.once('error', reject);

                    _this4.once('timeout', reject);
                  }));

                case 2:
                case "end":
                  return _context25.stop();
              }
            }
          }, _callee25, this);
        }));

        function getReceipt() {
          return _getReceipt.apply(this, arguments);
        }

        return getReceipt;
      }()
    }, {
      key: "cancel",
      value: function cancel() {
        if (typeof this.timeoutId === 'undefined') return;
        clearTimeout(this.timeoutId);
        this.timeoutId = undefined;
      }
    }, {
      key: "hash",
      get: function get() {
        return this.transaction.hash;
      }
    }]);

    return TransactionTracker;
  }(PausableTypedEventEmitter);

  var AccountTransactionTracker =
  /*#__PURE__*/
  function (_PausableTypedEventEm2) {
    _inherits(AccountTransactionTracker, _PausableTypedEventEm2);

    function AccountTransactionTracker(manager, account) {
      var _this5;

      _classCallCheck(this, AccountTransactionTracker);

      _this5 = _possibleConstructorReturn(this, _getPrototypeOf(AccountTransactionTracker).call(this));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this5)), "manager", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this5)), "intervalId", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this5)), "account", void 0);

      _this5.manager = manager;
      _this5.account = account;
      return _this5;
    }

    _createClass(AccountTransactionTracker, [{
      key: "load",
      value: function () {
        var _load2 = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee26() {
          var client, lastSyncBlockno, _ref, bestHeight, transactions, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _tx;

          return regeneratorRuntime.wrap(function _callee26$(_context26) {
            while (1) {
              switch (_context26.prev = _context26.next) {
                case 0:
                  client = this.manager.wallet.getClient(this.account.data.spec.chainId);
                  lastSyncBlockno = this.account.data.lastSync ? this.account.data.lastSync.blockno + 1 : 0;
                  _context26.next = 4;
                  return client.blockchain();

                case 4:
                  _ref = _context26.sent;
                  bestHeight = _ref.bestHeight;

                  if (!(lastSyncBlockno >= bestHeight)) {
                    _context26.next = 8;
                    break;
                  }

                  return _context26.abrupt("return", this.account);

                case 8:
                  _context26.next = 10;
                  return this.manager.fetchAccountTransactionsAfter(this.account, lastSyncBlockno, bestHeight);

                case 10:
                  transactions = _context26.sent;
                  _iteratorNormalCompletion = true;
                  _didIteratorError = false;
                  _iteratorError = undefined;
                  _context26.prev = 14;

                  for (_iterator = transactions[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    _tx = _step.value;
                    this.emit('transaction', _tx);
                    this.manager.addTransaction(_tx);
                  }

                  _context26.next = 22;
                  break;

                case 18:
                  _context26.prev = 18;
                  _context26.t0 = _context26["catch"](14);
                  _didIteratorError = true;
                  _iteratorError = _context26.t0;

                case 22:
                  _context26.prev = 22;
                  _context26.prev = 23;

                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }

                case 25:
                  _context26.prev = 25;

                  if (!_didIteratorError) {
                    _context26.next = 28;
                    break;
                  }

                  throw _iteratorError;

                case 28:
                  return _context26.finish(25);

                case 29:
                  return _context26.finish(22);

                case 30:
                  if (transactions.length) {
                    this.emit('transactions', transactions);
                  }

                  this.account.data.lastSync = {
                    blockno: bestHeight,
                    timestamp: +new Date()
                  };
                  return _context26.abrupt("return", this.account);

                case 33:
                case "end":
                  return _context26.stop();
              }
            }
          }, _callee26, this, [[14, 18, 22, 30], [23,, 25, 29]]);
        }));

        function load() {
          return _load2.apply(this, arguments);
        }

        return load;
      }()
    }, {
      key: "resume",
      value: function resume() {
        var _this6 = this;

        this.load().catch(function (e) {
          console.error('Loading account tx failed, pausing tracker', e);

          _this6.pause();
        });
        this.intervalId = setInterval(function () {
          _this6.load();
        }, ACCOUNT_UPDATE_INTERVAL);
      }
    }, {
      key: "pause",
      value: function pause() {
        if (this.intervalId) {
          clearInterval(this.intervalId);
        }
      }
    }]);

    return AccountTransactionTracker;
  }(PausableTypedEventEmitter);
  /**
   * TransactionManager manages and tracks single transactions
   */


  var TransactionManager =
  /*#__PURE__*/
  function (_PausableTypedEventEm3) {
    _inherits(TransactionManager, _PausableTypedEventEm3);

    function TransactionManager(wallet) {
      var _this7;

      _classCallCheck(this, TransactionManager);

      _this7 = _possibleConstructorReturn(this, _getPrototypeOf(TransactionManager).call(this));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this7)), "wallet", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this7)), "accountTxTrackers", new HashMap());

      _this7.wallet = wallet;
      return _this7;
    }

    _createClass(TransactionManager, [{
      key: "addTransaction",
      value: function () {
        var _addTransaction = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee27(transaction) {
          return regeneratorRuntime.wrap(function _callee27$(_context27) {
            while (1) {
              switch (_context27.prev = _context27.next) {
                case 0:
                  if (!this.wallet.datastore) {
                    _context27.next = 3;
                    break;
                  }

                  _context27.next = 3;
                  return this.wallet.datastore.getIndex('transactions').put(transaction);

                case 3:
                case "end":
                  return _context27.stop();
              }
            }
          }, _callee27, this);
        }));

        function addTransaction(_x) {
          return _addTransaction.apply(this, arguments);
        }

        return addTransaction;
      }()
    }, {
      key: "trackTransaction",
      value: function () {
        var _trackTransaction = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee28(transaction) {
          return regeneratorRuntime.wrap(function _callee28$(_context28) {
            while (1) {
              switch (_context28.prev = _context28.next) {
                case 0:
                  return _context28.abrupt("return", new TransactionTracker(this, transaction));

                case 1:
                case "end":
                  return _context28.stop();
              }
            }
          }, _callee28, this);
        }));

        function trackTransaction(_x2) {
          return _trackTransaction.apply(this, arguments);
        }

        return trackTransaction;
      }()
    }, {
      key: "resume",
      value: function resume() {
        if (!this.paused) return;
        this.paused = false;
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = this.accountTxTrackers.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var tracker = _step2.value;
            tracker.resume();
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    }, {
      key: "pause",
      value: function pause() {
        if (this.paused) return;
        this.paused = true;
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = this.accountTxTrackers.values()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var tracker = _step3.value;
            tracker.pause();
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      }
      /**
       * Track transactions for account.
       * There is no default implementation for this. The only generally available
       * method would be to scan the entire blockchain which is highly inefficient.
       * If you want that, use your own full node and add the data source using
       * wallet.use(NodeTransactionScanner);
       * @param account 
       */

    }, {
      key: "trackAccount",
      value: function trackAccount(account) {
        this.resume();

        if (this.accountTxTrackers.has(account.data.spec)) {
          return this.accountTxTrackers.get(account.data.spec);
        }

        var tracker = new AccountTransactionTracker(this, account);
        tracker.resume();
        this.accountTxTrackers.set(account.data.spec, tracker);
        return tracker;
      }
    }, {
      key: "fetchAccountTransactions",
      value: function () {
        var _fetchAccountTransactions = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee29(account) {
          return regeneratorRuntime.wrap(function _callee29$(_context29) {
            while (1) {
              switch (_context29.prev = _context29.next) {
                case 0:
                  _context29.next = 2;
                  return this.wallet.applyMiddlewares('fetchAccountTransactions')(function () {
                    throw new Error('no data source for account transactions. Please configure a data source such as NodeTransactionScanner.');
                  })(account);

                case 2:
                  return _context29.abrupt("return", _context29.sent);

                case 3:
                case "end":
                  return _context29.stop();
              }
            }
          }, _callee29, this);
        }));

        function fetchAccountTransactions(_x3) {
          return _fetchAccountTransactions.apply(this, arguments);
        }

        return fetchAccountTransactions;
      }()
    }, {
      key: "fetchAccountTransactionsAfter",
      value: function () {
        var _fetchAccountTransactionsAfter = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee30(account, blockno, limit) {
          return regeneratorRuntime.wrap(function _callee30$(_context30) {
            while (1) {
              switch (_context30.prev = _context30.next) {
                case 0:
                  _context30.next = 2;
                  return this.wallet.applyMiddlewares('fetchAccountTransactionsAfter')(function () {
                    throw new Error('no data source for account transactions. Please configure a data source such as NodeTransactionScanner.');
                  })({
                    account: account,
                    blockno: blockno,
                    limit: limit
                  });

                case 2:
                  return _context30.abrupt("return", _context30.sent);

                case 3:
                case "end":
                  return _context30.stop();
              }
            }
          }, _callee30, this);
        }));

        function fetchAccountTransactionsAfter(_x4, _x5, _x6) {
          return _fetchAccountTransactionsAfter.apply(this, arguments);
        }

        return fetchAccountTransactionsAfter;
      }()
    }, {
      key: "fetchAccountTransactionsBefore",
      value: function () {
        var _fetchAccountTransactionsBefore = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee31(account, blockno, limit) {
          return regeneratorRuntime.wrap(function _callee31$(_context31) {
            while (1) {
              switch (_context31.prev = _context31.next) {
                case 0:
                  _context31.next = 2;
                  return this.wallet.applyMiddlewares('fetchAccountTransactionsBefore')(function () {
                    throw new Error('no data source for account transactions. Please configure a data source such as NodeTransactionScanner.');
                  })({
                    account: account,
                    blockno: blockno,
                    limit: limit
                  });

                case 2:
                  return _context31.abrupt("return", _context31.sent);

                case 3:
                case "end":
                  return _context31.stop();
              }
            }
          }, _callee31, this);
        }));

        function fetchAccountTransactionsBefore(_x7, _x8, _x9) {
          return _fetchAccountTransactionsBefore.apply(this, arguments);
        }

        return fetchAccountTransactionsBefore;
      }()
      /**
       * Returns transactions stored for an account
       * @param account 
       */

    }, {
      key: "getAccountTransactions",
      value: function () {
        var _getAccountTransactions = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee32(accountOrSpec) {
          var account, index, txsFrom, txsTo, hashSet, allTxs, txs;
          return regeneratorRuntime.wrap(function _callee32$(_context32) {
            while (1) {
              switch (_context32.prev = _context32.next) {
                case 0:
                  if (this.wallet.datastore) {
                    _context32.next = 2;
                    break;
                  }

                  throw new Error('configure storage before accessing transactions');

                case 2:
                  if (accountOrSpec.data) {
                    _context32.next = 8;
                    break;
                  }

                  _context32.next = 5;
                  return this.wallet.accountManager.getOrAddAccount(accountOrSpec);

                case 5:
                  account = _context32.sent;
                  _context32.next = 9;
                  break;

                case 8:
                  account = accountOrSpec;

                case 9:
                  index = this.wallet.datastore.getIndex('transactions');
                  _context32.t0 = Array;
                  _context32.next = 13;
                  return index.getAll(account.address.toString(), 'from');

                case 13:
                  _context32.t1 = _context32.sent;
                  txsFrom = _context32.t0.from.call(_context32.t0, _context32.t1);
                  _context32.t2 = Array;
                  _context32.next = 18;
                  return index.getAll(account.address.toString(), 'to');

                case 18:
                  _context32.t3 = _context32.sent;
                  txsTo = _context32.t2.from.call(_context32.t2, _context32.t3);
                  // unique txs by hash
                  hashSet = new Set();
                  allTxs = txsFrom.concat(txsTo);
                  txs = allTxs.filter(function (o) {
                    return hashSet.has(o.data.hash) ? false : !!hashSet.add(o.data.hash);
                  });
                  return _context32.abrupt("return", txs);

                case 24:
                case "end":
                  return _context32.stop();
              }
            }
          }, _callee32, this);
        }));

        function getAccountTransactions(_x10) {
          return _getAccountTransactions.apply(this, arguments);
        }

        return getAccountTransactions;
      }()
    }, {
      key: "sendTransaction",
      value: function () {
        var _sendTransaction = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee33(transaction) {
          var client, txhash;
          return regeneratorRuntime.wrap(function _callee33$(_context33) {
            while (1) {
              switch (_context33.prev = _context33.next) {
                case 0:
                  // implicit send, add, and track
                  client = this.wallet.getClient(transaction.data.chainId);
                  _context33.next = 3;
                  return client.sendSignedTransaction(transaction.txBody);

                case 3:
                  txhash = _context33.sent;
                  transaction.key = txhash;
                  transaction.data.hash = txhash;
                  this.addTransaction(transaction);
                  return _context33.abrupt("return", this.trackTransaction(transaction));

                case 8:
                case "end":
                  return _context33.stop();
              }
            }
          }, _callee33, this);
        }));

        function sendTransaction(_x11) {
          return _sendTransaction.apply(this, arguments);
        }

        return sendTransaction;
      }()
    }]);

    return TransactionManager;
  }(PausableTypedEventEmitter);

  var DB_VERSION = 1;

  var Wallet =
  /*#__PURE__*/
  function (_MiddlewareConsumer) {
    _inherits(Wallet, _MiddlewareConsumer);

    function Wallet(config) {
      var _this;

      _classCallCheck(this, Wallet);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Wallet).call(this));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "defaultChainId", DEFAULT_CHAIN);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "chainConfigs", new HashMap());

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "keyManager", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "transactionManager", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "accountManager", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "config", {
        appName: 'herajs-wallet',
        appVersion: 1,
        instanceId: ''
      });

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "datastore", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "keystore", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "clients", new Map());

      _this.keyManager = new KeyManager(_assertThisInitialized(_assertThisInitialized(_this)));
      _this.transactionManager = new TransactionManager(_assertThisInitialized(_assertThisInitialized(_this)));
      _this.accountManager = new AccountManager(_assertThisInitialized(_assertThisInitialized(_this)));
      _this.config = _objectSpread({}, _this.config, config);
      return _this;
    }

    _createClass(Wallet, [{
      key: "set",
      value: function set(configKey, value) {
        this.config[configKey] = value;
      }
      /**
       * Add a chain configuration.
       * Sets new chain as default if first to be added and default chain was unchanged.
       * @param chainConfig 
       */

    }, {
      key: "useChain",
      value: function useChain(chainConfig) {
        if (typeof chainConfig.provider === 'undefined') {
          chainConfig.provider = client.AergoClient.defaultProviderClass;
        }

        if (typeof chainConfig.provider === 'function' && typeof chainConfig.nodeUrl === 'undefined') {
          throw new Error('supply nodeUrl in chain config or instantiate provider manually');
        }

        this.chainConfigs.set(chainConfig.chainId, chainConfig);

        if (this.chainConfigs.size === 1 && this.defaultChainId === DEFAULT_CHAIN && chainConfig.chainId !== DEFAULT_CHAIN) {
          this.setDefaultChain(chainConfig.chainId);
        }
      }
      /**
       * Set the default chain for subsequent actions.
       * @param chainId 
       */

    }, {
      key: "setDefaultChain",
      value: function setDefaultChain(chainId) {
        if (!this.chainConfigs.has(chainId)) {
          throw new Error("configure chain ".concat(chainId, " using useChain() before setting it as default"));
        }

        this.defaultChainId = chainId;
      }
      /**
       * Get AergoClient for chainId.
       * If called the first time, create AergoClient instance.
       * @param chainId optional chainId, use default chainId when undefined
       */

    }, {
      key: "getClient",
      value: function getClient(chainId) {
        if (typeof chainId === 'undefined') {
          chainId = this.defaultChainId;
        }

        if (!this.chainConfigs.has(chainId)) {
          throw new Error("trying to use not configured chainId ".concat(chainId));
        }

        var chainConfig = this.chainConfigs.get(chainId);

        if (!this.clients.has(chainId)) {
          var _provider = chainConfig.provider;

          if (typeof _provider === 'function') {
            _provider = new _provider({
              url: chainConfig.nodeUrl
            });
          }

          var client$1 = new client.AergoClient({}, _provider);
          this.clients.set(chainId, client$1);
          return client$1;
        }

        return this.clients.get(chainId);
      }
      /**
       * Prepare a transaction from given account specified by simple TxBody.
       * @param account 
       * @param transaction 
       */

    }, {
      key: "prepareTransaction",
      value: function () {
        var _prepareTransaction = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee34(account, transaction) {
          var preparedTx, signedTx;
          return regeneratorRuntime.wrap(function _callee34$(_context34) {
            while (1) {
              switch (_context34.prev = _context34.next) {
                case 0:
                  if (account.data) {
                    _context34.next = 4;
                    break;
                  }

                  _context34.next = 3;
                  return this.accountManager.getOrAddAccount(account);

                case 3:
                  account = _context34.sent;

                case 4:
                  _context34.next = 6;
                  return this.accountManager.prepareTransaction(account, transaction);

                case 6:
                  preparedTx = _context34.sent;
                  _context34.next = 9;
                  return this.keyManager.signTransaction(account, preparedTx);

                case 9:
                  signedTx = _context34.sent;
                  return _context34.abrupt("return", signedTx);

                case 11:
                case "end":
                  return _context34.stop();
              }
            }
          }, _callee34, this);
        }));

        function prepareTransaction(_x, _x2) {
          return _prepareTransaction.apply(this, arguments);
        }

        return prepareTransaction;
      }()
      /**
       * Send a transaction to the network using the specified account.
       * Prepares TxBody if not already prepared.
       * @param account 
       * @param transaction 
       */

    }, {
      key: "sendTransaction",
      value: function () {
        var _sendTransaction = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee35(account, transaction) {
          var signedTransaction;
          return regeneratorRuntime.wrap(function _callee35$(_context35) {
            while (1) {
              switch (_context35.prev = _context35.next) {
                case 0:
                  if (!(transaction instanceof SignedTransaction)) {
                    _context35.next = 4;
                    break;
                  }

                  signedTransaction = transaction;
                  _context35.next = 7;
                  break;

                case 4:
                  _context35.next = 6;
                  return this.prepareTransaction(account, transaction);

                case 6:
                  signedTransaction = _context35.sent;

                case 7:
                  return _context35.abrupt("return", this.transactionManager.sendTransaction(signedTransaction));

                case 8:
                case "end":
                  return _context35.stop();
              }
            }
          }, _callee35, this);
        }));

        function sendTransaction(_x3, _x4) {
          return _sendTransaction.apply(this, arguments);
        }

        return sendTransaction;
      }()
    }, {
      key: "useStorage",
      value: function useStorage(classOrInstance) {
        return Promise.all([this.useKeyStorage(classOrInstance), this.useDataStorage(classOrInstance)]);
      }
    }, {
      key: "useKeyStorage",
      value: function useKeyStorage(classOrInstance) {
        if (isConstructor(classOrInstance)) {
          this.keystore = new classOrInstance('keystore', DB_VERSION);
        } else {
          this.keystore = classOrInstance;
        }

        return this.keystore.open();
      }
    }, {
      key: "useDataStorage",
      value: function useDataStorage(classOrInstance) {
        if (isConstructor(classOrInstance)) {
          this.datastore = new classOrInstance('datastore', DB_VERSION);
        } else {
          this.datastore = classOrInstance;
        }

        return this.datastore.open();
      }
    }, {
      key: "close",
      value: function () {
        var _close = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee36() {
          return regeneratorRuntime.wrap(function _callee36$(_context36) {
            while (1) {
              switch (_context36.prev = _context36.next) {
                case 0:
                  _context36.t0 = this.datastore;

                  if (!_context36.t0) {
                    _context36.next = 4;
                    break;
                  }

                  _context36.next = 4;
                  return this.datastore.close();

                case 4:
                  _context36.t1 = this.keystore;

                  if (!_context36.t1) {
                    _context36.next = 8;
                    break;
                  }

                  _context36.next = 8;
                  return this.keystore.close();

                case 8:
                case "end":
                  return _context36.stop();
              }
            }
          }, _callee36, this);
        }));

        function close() {
          return _close.apply(this, arguments);
        }

        return close;
      }()
    }, {
      key: "unlock",
      value: function () {
        var _unlock = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee37(passphrase) {
          return regeneratorRuntime.wrap(function _callee37$(_context37) {
            while (1) {
              switch (_context37.prev = _context37.next) {
                case 0:
                  return _context37.abrupt("return", this.keyManager.unlock(passphrase));

                case 1:
                case "end":
                  return _context37.stop();
              }
            }
          }, _callee37, this);
        }));

        function unlock(_x5) {
          return _unlock.apply(this, arguments);
        }

        return unlock;
      }()
    }, {
      key: "setupAndUnlock",
      value: function () {
        var _setupAndUnlock = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee38(passphrase) {
          return regeneratorRuntime.wrap(function _callee38$(_context38) {
            while (1) {
              switch (_context38.prev = _context38.next) {
                case 0:
                  return _context38.abrupt("return", this.keyManager.setupAndUnlock("id-".concat(this.config.instanceId), passphrase));

                case 1:
                case "end":
                  return _context38.stop();
              }
            }
          }, _callee38, this);
        }));

        function setupAndUnlock(_x6) {
          return _setupAndUnlock.apply(this, arguments);
        }

        return setupAndUnlock;
      }()
    }, {
      key: "lock",
      value: function lock() {
        this.keyManager.lock();
      }
    }, {
      key: "deleteAllData",
      value: function () {
        var _deleteAllData = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee39() {
          return regeneratorRuntime.wrap(function _callee39$(_context39) {
            while (1) {
              switch (_context39.prev = _context39.next) {
                case 0:
                  _context39.next = 2;
                  return this.accountManager.clearAccounts();

                case 2:
                  _context39.next = 4;
                  return this.keyManager.clearKeys();

                case 4:
                  if (!this.datastore) {
                    _context39.next = 9;
                    break;
                  }

                  _context39.next = 7;
                  return this.datastore.getIndex('transactions').clear();

                case 7:
                  _context39.next = 9;
                  return this.datastore.getIndex('settings').clear();

                case 9:
                case "end":
                  return _context39.stop();
              }
            }
          }, _callee39, this);
        }));

        function deleteAllData() {
          return _deleteAllData.apply(this, arguments);
        }

        return deleteAllData;
      }()
    }, {
      key: "unlocked",
      get: function get() {
        return this.keyManager.unlocked;
      }
    }]);

    return Wallet;
  }(MiddlewareConsumer);
  /*
   wallet.accountManager -> tracks balances and nonces
  wallet.transactionManager -> tracks txs
  wallet.keyManager -> signs/verifies, keeps keys
    const key = await this.keystore.get(account);
  //tx.hash -> getter that calculates hash when necessary
  //tx.unsignedHash
  const signedTx = key.signTransaction(tx);
   this.keystore.put(account);
   this.datastore.transactions.get(hash)
  this.datastore.transactions.put(tx);
  this.datastore.transactions.filterIndex(['from', 'to'], address)
   wallet.transactionManager.trackAccount(account)
  -> Error: no data source for account transactions. Please configure a data source such as AergoNodeSource.
   // maybe add this inefficient data source?
  wallet.use(new AergoNodeSource(chainId => wallet.getClient(chainId)));
  wallet.transactionManager.trackAccount(account)
  -> tracking transactions for account by reading blockchain. inefficient.
   wallet.use(new AergoscanIndexSource((chainId) => `https://api.aergoscan.io/${chainId}`));
  wallet.transactionManager.trackAccount(account)
  -> tracking transactions for account by reading API. more efficient
   */

  /**
   * This is a data source for transactionManager.getAccountTransactions.
   * It is a very inefficient way, but the only one generally available.
   * Please only use with local fullnodes as this can consume considerable bandwidth.
   * What it does is go backwards in time to scan the whole blockchain until it finds the
   * all transactions of an account. This uses the account's nonce to be smart about that:
   * When we reached nonce 1 and balance 0, we assume to have all txs.
   */


  var NodeTransactionScanner =
  /*#__PURE__*/
  function (_Middleware) {
    _inherits(NodeTransactionScanner, _Middleware);

    function NodeTransactionScanner() {
      _classCallCheck(this, NodeTransactionScanner);

      return _possibleConstructorReturn(this, _getPrototypeOf(NodeTransactionScanner).apply(this, arguments));
    }

    _createClass(NodeTransactionScanner, [{
      key: "fetchAccountTransactionsBefore",
      value: function fetchAccountTransactionsBefore(wallet) {
        return function () {
          return (
            /*#__PURE__*/
            function () {
              var _ref2 = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee40(_ref) {
                var account, blockno, limit, accountSpec, client$1, address, _ref3, nonce, balance, blockNumber, results, block, ownTxs, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, tx, txObj;

                return regeneratorRuntime.wrap(function _callee40$(_context40) {
                  while (1) {
                    switch (_context40.prev = _context40.next) {
                      case 0:
                        account = _ref.account, blockno = _ref.blockno, limit = _ref.limit;
                        accountSpec = wallet.accountManager.getCompleteAccountSpec(account.data.spec);
                        client$1 = wallet.getClient(accountSpec.chainId);
                        address = new client.Address(accountSpec.address);
                        _context40.next = 6;
                        return client$1.getState(address);

                      case 6:
                        _ref3 = _context40.sent;
                        nonce = _ref3.nonce;
                        balance = _ref3.balance;

                        if (!(nonce === 0 && balance.compare(0) === 0)) {
                          _context40.next = 11;
                          break;
                        }

                        return _context40.abrupt("return", []);

                      case 11:
                        if (!limit) {
                          limit = 0;
                        }

                        blockNumber = blockno;
                        results = []; // Traverse back blockchain until reaching block 0 or nonce 0 and balance 0
                        // Note: on dev chain, final balance can be less than 0

                      case 14:
                        if (!(blockNumber > limit && (nonce > 1 || balance.compare(0) > 0))) {
                          _context40.next = 42;
                          break;
                        }

                        _context40.next = 17;
                        return client$1.getBlock(blockNumber--);

                      case 17:
                        block = _context40.sent;

                        if (!(!block.body || !block.body.txsList.length)) {
                          _context40.next = 20;
                          break;
                        }

                        return _context40.abrupt("continue", 14);

                      case 20:
                        //console.log(`[scan] block ${blockNumber}`);
                        ownTxs = block.body.txsList.filter(function (tx) {
                          return address.equal(tx.from) || address.equal(tx.to);
                        });
                        _iteratorNormalCompletion = true;
                        _didIteratorError = false;
                        _iteratorError = undefined;
                        _context40.prev = 24;

                        for (_iterator = ownTxs[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                          tx = _step.value;
                          txObj = SignedTransaction.fromTxBody(tx, accountSpec.chainId);
                          txObj.data.blockhash = block.hash;
                          txObj.data.blockno = block.header ? block.header.blockno : null;
                          results.push(txObj);

                          if (address.equal(tx.from)) {
                            balance = balance.add(tx.amount);
                            nonce = tx.nonce;
                          } else {
                            balance = balance.sub(tx.amount);
                          }
                        } //if (ownTxs.length) console.log(`[scan] new state ${nonce}, ${balance}`);


                        _context40.next = 32;
                        break;

                      case 28:
                        _context40.prev = 28;
                        _context40.t0 = _context40["catch"](24);
                        _didIteratorError = true;
                        _iteratorError = _context40.t0;

                      case 32:
                        _context40.prev = 32;
                        _context40.prev = 33;

                        if (!_iteratorNormalCompletion && _iterator.return != null) {
                          _iterator.return();
                        }

                      case 35:
                        _context40.prev = 35;

                        if (!_didIteratorError) {
                          _context40.next = 38;
                          break;
                        }

                        throw _iteratorError;

                      case 38:
                        return _context40.finish(35);

                      case 39:
                        return _context40.finish(32);

                      case 40:
                        _context40.next = 14;
                        break;

                      case 42:
                        return _context40.abrupt("return", results);

                      case 43:
                      case "end":
                        return _context40.stop();
                    }
                  }
                }, _callee40, this, [[24, 28, 32, 40], [33,, 35, 39]]);
              }));

              return function (_x) {
                return _ref2.apply(this, arguments);
              };
            }()
          );
        };
      }
    }, {
      key: "fetchAccountTransactionsAfter",
      value: function fetchAccountTransactionsAfter(wallet) {
        return function () {
          return (
            /*#__PURE__*/
            function () {
              var _ref5 = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee41(_ref4) {
                var account, blockno, limit, accountSpec, client$1, _ref6, bestHeight, maxBlockNo, address, _ref7, nonce, balance, blockNumber, results, block, ownTxs, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, tx, txObj;

                return regeneratorRuntime.wrap(function _callee41$(_context41) {
                  while (1) {
                    switch (_context41.prev = _context41.next) {
                      case 0:
                        account = _ref4.account, blockno = _ref4.blockno, limit = _ref4.limit;
                        accountSpec = wallet.accountManager.getCompleteAccountSpec(account.data.spec);
                        client$1 = wallet.getClient(accountSpec.chainId);

                        if (limit) {
                          _context41.next = 9;
                          break;
                        }

                        _context41.next = 6;
                        return client$1.blockchain();

                      case 6:
                        _ref6 = _context41.sent;
                        bestHeight = _ref6.bestHeight;
                        limit = bestHeight;

                      case 9:
                        maxBlockNo = limit;
                        address = new client.Address(accountSpec.address);
                        _context41.next = 13;
                        return client$1.getState(address);

                      case 13:
                        _ref7 = _context41.sent;
                        nonce = _ref7.nonce;
                        balance = _ref7.balance;

                        if (!(nonce === 0 && balance.compare(0) === 0)) {
                          _context41.next = 18;
                          break;
                        }

                        return _context41.abrupt("return", []);

                      case 18:
                        blockNumber = blockno;
                        results = []; // Traverse forward blockchain until reaching current block

                      case 20:
                        if (!(blockNumber <= maxBlockNo)) {
                          _context41.next = 48;
                          break;
                        }

                        _context41.next = 23;
                        return client$1.getBlock(blockNumber++);

                      case 23:
                        block = _context41.sent;

                        if (!(!block.body || !block.body.txsList.length)) {
                          _context41.next = 26;
                          break;
                        }

                        return _context41.abrupt("continue", 20);

                      case 26:
                        //console.log(`[scan] block ${blockNumber}`);
                        ownTxs = block.body.txsList.filter(function (tx) {
                          return address.equal(tx.from) || address.equal(tx.to);
                        });
                        _iteratorNormalCompletion2 = true;
                        _didIteratorError2 = false;
                        _iteratorError2 = undefined;
                        _context41.prev = 30;

                        for (_iterator2 = ownTxs[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                          tx = _step2.value;
                          txObj = SignedTransaction.fromTxBody(tx, accountSpec.chainId);
                          txObj.data.blockhash = block.hash;
                          txObj.data.blockno = block.header ? block.header.blockno : null;
                          results.push(txObj);
                        }

                        _context41.next = 38;
                        break;

                      case 34:
                        _context41.prev = 34;
                        _context41.t0 = _context41["catch"](30);
                        _didIteratorError2 = true;
                        _iteratorError2 = _context41.t0;

                      case 38:
                        _context41.prev = 38;
                        _context41.prev = 39;

                        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                          _iterator2.return();
                        }

                      case 41:
                        _context41.prev = 41;

                        if (!_didIteratorError2) {
                          _context41.next = 44;
                          break;
                        }

                        throw _iteratorError2;

                      case 44:
                        return _context41.finish(41);

                      case 45:
                        return _context41.finish(38);

                      case 46:
                        _context41.next = 20;
                        break;

                      case 48:
                        return _context41.abrupt("return", results);

                      case 49:
                      case "end":
                        return _context41.stop();
                    }
                  }
                }, _callee41, this, [[30, 34, 38, 46], [39,, 41, 45]]);
              }));

              return function (_x2) {
                return _ref5.apply(this, arguments);
              };
            }()
          );
        };
      }
    }, {
      key: "fetchAccountTransactions",
      value: function fetchAccountTransactions(wallet) {
        var _this = this;

        return function () {
          return (
            /*#__PURE__*/
            function () {
              var _ref8 = _asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee43(account) {
                var accountSpec, _ref9, bestHeight;

                return regeneratorRuntime.wrap(function _callee43$(_context43) {
                  while (1) {
                    switch (_context43.prev = _context43.next) {
                      case 0:
                        accountSpec = wallet.accountManager.getCompleteAccountSpec(account.data.spec);
                        _context43.next = 3;
                        return wallet.getClient(accountSpec.chainId).blockchain();

                      case 3:
                        _ref9 = _context43.sent;
                        bestHeight = _ref9.bestHeight;
                        return _context43.abrupt("return", _this.fetchAccountTransactionsBefore(wallet)(
                        /*#__PURE__*/
                        _asyncToGenerator(
                        /*#__PURE__*/
                        regeneratorRuntime.mark(function _callee42() {
                          return regeneratorRuntime.wrap(function _callee42$(_context42) {
                            while (1) {
                              switch (_context42.prev = _context42.next) {
                                case 0:
                                  return _context42.abrupt("return", []);

                                case 1:
                                case "end":
                                  return _context42.stop();
                              }
                            }
                          }, _callee42, this);
                        })))({
                          account: account,
                          blockno: bestHeight
                        }));

                      case 6:
                      case "end":
                        return _context43.stop();
                    }
                  }
                }, _callee43, this);
              }));

              return function (_x3) {
                return _ref8.apply(this, arguments);
              };
            }()
          );
        };
      }
    }]);

    return NodeTransactionScanner;
  }(Middleware);

  var Index = function Index() {
    _classCallCheck(this, Index);
  };

  var Storage = function Storage() {
    _classCallCheck(this, Storage);
  };

  var IDBIndex =
  /*#__PURE__*/
  function (_Index) {
    _inherits(IDBIndex, _Index);

    function IDBIndex(storage, name) {
      var _this;

      _classCallCheck(this, IDBIndex);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(IDBIndex).call(this));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "storage", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "name", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "db", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "keyPath", 'key');

      _this.storage = storage;
      _this.name = name;

      if (typeof storage.db === 'undefined') {
        throw new Error('open storage before accessing index');
      }

      _this.db = storage.db;
      return _this;
    }

    _createClass(IDBIndex, [{
      key: "get",
      value: function () {
        var _get = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee44(key) {
          var record;
          return regeneratorRuntime.wrap(function _callee44$(_context44) {
            while (1) {
              switch (_context44.prev = _context44.next) {
                case 0:
                  _context44.next = 2;
                  return this.db.transaction(this.name).objectStore(this.name).get(key);

                case 2:
                  record = _context44.sent;

                  if (record) {
                    _context44.next = 5;
                    break;
                  }

                  throw new Error('not found');

                case 5:
                  return _context44.abrupt("return", record);

                case 6:
                case "end":
                  return _context44.stop();
              }
            }
          }, _callee44, this);
        }));

        function get(_x) {
          return _get.apply(this, arguments);
        }

        return get;
      }()
    }, {
      key: "getAll",
      value: function () {
        var _getAll = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee45(indexValue, indexName) {
          var q, _records, _records2, records;

          return regeneratorRuntime.wrap(function _callee45$(_context45) {
            while (1) {
              switch (_context45.prev = _context45.next) {
                case 0:
                  q = typeof indexValue !== 'undefined' ? IDBKeyRange.only(indexValue) : undefined;

                  if (!(this.name === 'transactions' && typeof indexName !== 'undefined')) {
                    _context45.next = 8;
                    break;
                  }

                  indexName = indexName;

                  if (!(['from', 'to'].indexOf(indexName) !== -1)) {
                    _context45.next = 8;
                    break;
                  }

                  _context45.next = 6;
                  return this.db.transaction(this.name).objectStore(this.name).index(indexName).getAll(q);

                case 6:
                  _records = _context45.sent;
                  return _context45.abrupt("return", _records[Symbol.iterator]());

                case 8:
                  if (!(this.name === 'accounts' && typeof indexName !== 'undefined')) {
                    _context45.next = 15;
                    break;
                  }

                  indexName = indexName;

                  if (!(['spec.address'].indexOf(indexName) !== -1)) {
                    _context45.next = 15;
                    break;
                  }

                  _context45.next = 13;
                  return this.db.transaction(this.name).objectStore(this.name).index(indexName).getAll(q);

                case 13:
                  _records2 = _context45.sent;
                  return _context45.abrupt("return", _records2[Symbol.iterator]());

                case 15:
                  _context45.next = 17;
                  return this.db.transaction(this.name).objectStore(this.name).getAll(q);

                case 17:
                  records = _context45.sent;
                  return _context45.abrupt("return", records[Symbol.iterator]());

                case 19:
                case "end":
                  return _context45.stop();
              }
            }
          }, _callee45, this);
        }));

        function getAll(_x2, _x3) {
          return _getAll.apply(this, arguments);
        }

        return getAll;
      }()
    }, {
      key: "put",
      value: function () {
        var _put = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee46(record) {
          var tx, validKey;
          return regeneratorRuntime.wrap(function _callee46$(_context46) {
            while (1) {
              switch (_context46.prev = _context46.next) {
                case 0:
                  tx = this.db.transaction(this.name, 'readwrite');
                  _context46.next = 3;
                  return tx.objectStore(this.name).put(record);

                case 3:
                  validKey = _context46.sent;
                  return _context46.abrupt("return", validKey.toString());

                case 5:
                case "end":
                  return _context46.stop();
              }
            }
          }, _callee46, this);
        }));

        function put(_x4) {
          return _put.apply(this, arguments);
        }

        return put;
      }()
    }, {
      key: "delete",
      value: function _delete(key) {
        return this.db.transaction(this.name, 'readwrite').objectStore(this.name).delete(key);
      }
    }, {
      key: "clear",
      value: function clear() {
        return this.db.transaction(this.name, 'readwrite').objectStore(this.name).clear();
      }
    }]);

    return IDBIndex;
  }(Index);

  var IndexedDbStorage =
  /*#__PURE__*/
  function (_Storage) {
    _inherits(IndexedDbStorage, _Storage);

    function IndexedDbStorage(name, version) {
      var _this2;

      _classCallCheck(this, IndexedDbStorage);

      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(IndexedDbStorage).call(this));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "name", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "version", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "db", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "indices", new Map());

      _this2.name = name;
      _this2.version = version;
      return _this2;
    }

    _createClass(IndexedDbStorage, [{
      key: "open",
      value: function () {
        var _open = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee47() {
          var upgrade;
          return regeneratorRuntime.wrap(function _callee47$(_context47) {
            while (1) {
              switch (_context47.prev = _context47.next) {
                case 0:
                  upgrade = function _ref10(db, oldVersion, _newVersion, tx) {
                    switch (oldVersion) {
                      // @ts-ignore: falls through
                      case 0:
                        {
                          var txOS = db.createObjectStore('transactions', {
                            keyPath: 'key'
                          });
                          txOS.createIndex('from', 'data.from', {
                            unique: false
                          });
                          txOS.createIndex('to', 'data.to', {
                            unique: false
                          });
                          db.createObjectStore('accounts', {
                            keyPath: 'key'
                          });
                          db.createObjectStore('settings', {
                            keyPath: 'key'
                          });
                          db.createObjectStore('keys', {
                            keyPath: 'key'
                          });
                        }
                      // @ts-ignore: falls through

                      case 1:
                        {
                          tx.objectStore('accounts').createIndex('spec.address', 'data.spec.address', {
                            unique: false
                          });
                        }
                    }
                  };

                  if (!(typeof this.db !== 'undefined')) {
                    _context47.next = 3;
                    break;
                  }

                  return _context47.abrupt("return", this);

                case 3:
                  _context47.next = 5;
                  return idb.openDB(this.name, this.version, {
                    upgrade: upgrade
                  });

                case 5:
                  this.db = _context47.sent;
                  return _context47.abrupt("return", this);

                case 7:
                case "end":
                  return _context47.stop();
              }
            }
          }, _callee47, this);
        }));

        function open() {
          return _open.apply(this, arguments);
        }

        return open;
      }()
    }, {
      key: "close",
      value: function () {
        var _close = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee48() {
          return regeneratorRuntime.wrap(function _callee48$(_context48) {
            while (1) {
              switch (_context48.prev = _context48.next) {
                case 0:
                  return _context48.abrupt("return");

                case 1:
                case "end":
                  return _context48.stop();
              }
            }
          }, _callee48, this);
        }));

        function close() {
          return _close.apply(this, arguments);
        }

        return close;
      }()
    }, {
      key: "getIndex",
      value: function getIndex(name) {
        if (this.indices.has(name)) {
          return this.indices.get(name);
        }

        var index = new IDBIndex(this, name);
        this.indices.set(name, index);
        return index;
      }
    }]);

    return IndexedDbStorage;
  }(Storage);

  var MemoryIndex =
  /*#__PURE__*/
  function (_Index) {
    _inherits(MemoryIndex, _Index);

    function MemoryIndex(storage, name) {
      var _this;

      _classCallCheck(this, MemoryIndex);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(MemoryIndex).call(this));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "storage", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "name", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "data", new Map());

      _this.storage = storage;
      _this.name = name;
      return _this;
    }

    _createClass(MemoryIndex, [{
      key: "get",
      value: function () {
        var _get = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee49(key) {
          var record;
          return regeneratorRuntime.wrap(function _callee49$(_context49) {
            while (1) {
              switch (_context49.prev = _context49.next) {
                case 0:
                  record = this.data.get(key);

                  if (record) {
                    _context49.next = 3;
                    break;
                  }

                  throw new Error('not found');

                case 3:
                  return _context49.abrupt("return", record);

                case 4:
                case "end":
                  return _context49.stop();
              }
            }
          }, _callee49, this);
        }));

        function get(_x) {
          return _get.apply(this, arguments);
        }

        return get;
      }()
    }, {
      key: "getAll",
      value: function () {
        var _getAll = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee50(indexValue, indexName) {
          var entries;
          return regeneratorRuntime.wrap(function _callee50$(_context50) {
            while (1) {
              switch (_context50.prev = _context50.next) {
                case 0:
                  // leveldb keeps entries sorted by key, so we emulate this for compatability
                  entries = Array.from(this.data.entries()).sort(function (a, b) {
                    return a[0].localeCompare(b[0]);
                  });

                  if (indexName && indexValue) {
                    entries = entries.filter(function (_ref) {
                      var _ref2 = _slicedToArray(_ref, 2),
                          record = _ref2[1];

                      return propPath(record.data, indexName) === indexValue;
                    });
                  }

                  return _context50.abrupt("return", entries.map(function (_ref3) {
                    var _ref4 = _slicedToArray(_ref3, 2),
                        value = _ref4[1];

                    return value;
                  })[Symbol.iterator]());

                case 3:
                case "end":
                  return _context50.stop();
              }
            }
          }, _callee50, this);
        }));

        function getAll(_x2, _x3) {
          return _getAll.apply(this, arguments);
        }

        return getAll;
      }()
    }, {
      key: "put",
      value: function () {
        var _put = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee51(data) {
          return regeneratorRuntime.wrap(function _callee51$(_context51) {
            while (1) {
              switch (_context51.prev = _context51.next) {
                case 0:
                  this.data.set(data.key, data);
                  return _context51.abrupt("return", data.key);

                case 2:
                case "end":
                  return _context51.stop();
              }
            }
          }, _callee51, this);
        }));

        function put(_x4) {
          return _put.apply(this, arguments);
        }

        return put;
      }()
    }, {
      key: "delete",
      value: function () {
        var _delete2 = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee52(key) {
          return regeneratorRuntime.wrap(function _callee52$(_context52) {
            while (1) {
              switch (_context52.prev = _context52.next) {
                case 0:
                  this.data.delete(key);

                case 1:
                case "end":
                  return _context52.stop();
              }
            }
          }, _callee52, this);
        }));

        function _delete(_x5) {
          return _delete2.apply(this, arguments);
        }

        return _delete;
      }()
    }, {
      key: "clear",
      value: function () {
        var _clear = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee53() {
          return regeneratorRuntime.wrap(function _callee53$(_context53) {
            while (1) {
              switch (_context53.prev = _context53.next) {
                case 0:
                  this.data.clear();

                case 1:
                case "end":
                  return _context53.stop();
              }
            }
          }, _callee53, this);
        }));

        function clear() {
          return _clear.apply(this, arguments);
        }

        return clear;
      }()
    }]);

    return MemoryIndex;
  }(Index);
  /**
   * MemoryStorage is a storage interface compatabile with other LevelDB-like storages.
   * It is mostly used for testing. It is not very efficient.
   */


  var MemoryStorage =
  /*#__PURE__*/
  function (_Storage) {
    _inherits(MemoryStorage, _Storage);

    function MemoryStorage(name, version) {
      var _this2;

      _classCallCheck(this, MemoryStorage);

      _this2 = _possibleConstructorReturn(this, _getPrototypeOf(MemoryStorage).call(this));

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "name", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "version", void 0);

      _defineProperty(_assertThisInitialized(_assertThisInitialized(_this2)), "indices", new Map());

      _this2.name = name;
      _this2.version = version;
      return _this2;
    }

    _createClass(MemoryStorage, [{
      key: "open",
      value: function () {
        var _open = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee54() {
          return regeneratorRuntime.wrap(function _callee54$(_context54) {
            while (1) {
              switch (_context54.prev = _context54.next) {
                case 0:
                  return _context54.abrupt("return", this);

                case 1:
                case "end":
                  return _context54.stop();
              }
            }
          }, _callee54, this);
        }));

        function open() {
          return _open.apply(this, arguments);
        }

        return open;
      }()
    }, {
      key: "close",
      value: function () {
        var _close = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee55() {
          return regeneratorRuntime.wrap(function _callee55$(_context55) {
            while (1) {
              switch (_context55.prev = _context55.next) {
                case 0:
                  return _context55.abrupt("return");

                case 1:
                case "end":
                  return _context55.stop();
              }
            }
          }, _callee55, this);
        }));

        function close() {
          return _close.apply(this, arguments);
        }

        return close;
      }()
    }, {
      key: "getIndex",
      value: function getIndex(name) {
        if (this.indices.has(name)) {
          return this.indices.get(name);
        }

        var index = new MemoryIndex(this, name);
        this.indices.set(name, index);
        return index;
      }
    }]);

    return MemoryStorage;
  }(Storage);

  exports.Account = Account;
  exports.IndexedDbStorage = IndexedDbStorage;
  exports.Key = Key;
  exports.MemoryStorage = MemoryStorage;
  exports.NodeTransactionScanner = NodeTransactionScanner;
  exports.Transaction = Transaction;
  exports.Wallet = Wallet;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/asmcrypto.js/asmcrypto.all.es8.js":
/*!********************************************************!*\
  !*** ./node_modules/asmcrypto.js/asmcrypto.all.es8.js ***!
  \********************************************************/
/*! exports provided: string_to_bytes, hex_to_bytes, base64_to_bytes, bytes_to_string, bytes_to_hex, bytes_to_base64, IllegalStateError, IllegalArgumentError, SecurityError, AES_CBC, AES_CCM, AES_CFB, AES_CMAC, AES_CTR, AES_ECB, AES_GCM, AES_OFB, BigNumber, Modulus, Sha1, Sha256, Sha512, HmacSha1, HmacSha256, HmacSha512, Pbkdf2HmacSha1, Pbkdf2HmacSha256, Pbkdf2HmacSha512, RSA_OAEP, RSA_PKCS1_v1_5, RSA_PSS, RSA */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(Buffer, process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "string_to_bytes", function() { return string_to_bytes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hex_to_bytes", function() { return hex_to_bytes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "base64_to_bytes", function() { return base64_to_bytes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bytes_to_string", function() { return bytes_to_string; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bytes_to_hex", function() { return bytes_to_hex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bytes_to_base64", function() { return bytes_to_base64; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IllegalStateError", function() { return IllegalStateError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IllegalArgumentError", function() { return IllegalArgumentError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SecurityError", function() { return SecurityError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AES_CBC", function() { return AES_CBC; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AES_CCM", function() { return AES_CCM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AES_CFB", function() { return AES_CFB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AES_CMAC", function() { return AES_CMAC; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AES_CTR", function() { return AES_CTR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AES_ECB", function() { return AES_ECB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AES_GCM", function() { return AES_GCM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AES_OFB", function() { return AES_OFB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BigNumber", function() { return BigNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Modulus", function() { return Modulus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sha1", function() { return Sha1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sha256", function() { return Sha256; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sha512", function() { return Sha512; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HmacSha1", function() { return HmacSha1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HmacSha256", function() { return HmacSha256; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HmacSha512", function() { return HmacSha512; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pbkdf2HmacSha1", function() { return Pbkdf2HmacSha1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pbkdf2HmacSha256", function() { return Pbkdf2HmacSha256; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pbkdf2HmacSha512", function() { return Pbkdf2HmacSha512; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RSA_OAEP", function() { return RSA_OAEP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RSA_PKCS1_v1_5", function() { return RSA_PKCS1_v1_5; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RSA_PSS", function() { return RSA_PSS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RSA", function() { return RSA; });
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var local_atob = typeof atob === 'undefined' ? function (str) {
  return Buffer.from(str, 'base64').toString('binary');
} : atob;
var local_btoa = typeof btoa === 'undefined' ? function (str) {
  return Buffer.from(str, 'binary').toString('base64');
} : btoa;

function string_to_bytes(str) {
  var utf8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var len = str.length,
      bytes = new Uint8Array(utf8 ? 4 * len : len);

  for (var i = 0, j = 0; i < len; i++) {
    var c = str.charCodeAt(i);

    if (utf8 && 0xd800 <= c && c <= 0xdbff) {
      if (++i >= len) throw new Error('Malformed string, low surrogate expected at position ' + i);
      c = (c ^ 0xd800) << 10 | 0x10000 | str.charCodeAt(i) ^ 0xdc00;
    } else if (!utf8 && c >>> 8) {
      throw new Error('Wide characters are not allowed.');
    }

    if (!utf8 || c <= 0x7f) {
      bytes[j++] = c;
    } else if (c <= 0x7ff) {
      bytes[j++] = 0xc0 | c >> 6;
      bytes[j++] = 0x80 | c & 0x3f;
    } else if (c <= 0xffff) {
      bytes[j++] = 0xe0 | c >> 12;
      bytes[j++] = 0x80 | c >> 6 & 0x3f;
      bytes[j++] = 0x80 | c & 0x3f;
    } else {
      bytes[j++] = 0xf0 | c >> 18;
      bytes[j++] = 0x80 | c >> 12 & 0x3f;
      bytes[j++] = 0x80 | c >> 6 & 0x3f;
      bytes[j++] = 0x80 | c & 0x3f;
    }
  }

  return bytes.subarray(0, j);
}

function hex_to_bytes(str) {
  var len = str.length;

  if (len & 1) {
    str = '0' + str;
    len++;
  }

  var bytes = new Uint8Array(len >> 1);

  for (var i = 0; i < len; i += 2) {
    bytes[i >> 1] = parseInt(str.substr(i, 2), 16);
  }

  return bytes;
}

function base64_to_bytes(str) {
  return string_to_bytes(local_atob(str));
}

function bytes_to_string(bytes) {
  var utf8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var len = bytes.length,
      chars = new Array(len);

  for (var i = 0, j = 0; i < len; i++) {
    var b = bytes[i];

    if (!utf8 || b < 128) {
      chars[j++] = b;
    } else if (b >= 192 && b < 224 && i + 1 < len) {
      chars[j++] = (b & 0x1f) << 6 | bytes[++i] & 0x3f;
    } else if (b >= 224 && b < 240 && i + 2 < len) {
      chars[j++] = (b & 0xf) << 12 | (bytes[++i] & 0x3f) << 6 | bytes[++i] & 0x3f;
    } else if (b >= 240 && b < 248 && i + 3 < len) {
      var c = (b & 7) << 18 | (bytes[++i] & 0x3f) << 12 | (bytes[++i] & 0x3f) << 6 | bytes[++i] & 0x3f;

      if (c <= 0xffff) {
        chars[j++] = c;
      } else {
        c ^= 0x10000;
        chars[j++] = 0xd800 | c >> 10;
        chars[j++] = 0xdc00 | c & 0x3ff;
      }
    } else {
      throw new Error('Malformed UTF8 character at byte offset ' + i);
    }
  }

  var str = '',
      bs = 16384;

  for (var i = 0; i < j; i += bs) {
    str += String.fromCharCode.apply(String, chars.slice(i, i + bs <= j ? i + bs : j));
  }

  return str;
}

function bytes_to_hex(arr) {
  var str = '';

  for (var i = 0; i < arr.length; i++) {
    var h = (arr[i] & 0xff).toString(16);
    if (h.length < 2) str += '0';
    str += h;
  }

  return str;
}

function bytes_to_base64(arr) {
  return local_btoa(bytes_to_string(arr));
}

function is_bytes(a) {
  return a instanceof Uint8Array;
}

function _heap_init(heap, heapSize) {
  var size = heap ? heap.byteLength : heapSize || 65536;
  if (size & 0xfff || size <= 0) throw new Error('heap size must be a positive integer and a multiple of 4096');
  heap = heap || new Uint8Array(new ArrayBuffer(size));
  return heap;
}

function _heap_write(heap, hpos, data, dpos, dlen) {
  var hlen = heap.length - hpos;
  var wlen = hlen < dlen ? hlen : dlen;
  heap.set(data.subarray(dpos, dpos + wlen), hpos);
  return wlen;
}

function joinBytes() {
  for (var _len = arguments.length, arg = new Array(_len), _key = 0; _key < _len; _key++) {
    arg[_key] = arguments[_key];
  }

  var totalLenght = arg.reduce(function (sum, curr) {
    return sum + curr.length;
  }, 0);
  var ret = new Uint8Array(totalLenght);
  var cursor = 0;

  for (var i = 0; i < arg.length; i++) {
    ret.set(arg[i], cursor);
    cursor += arg[i].length;
  }

  return ret;
}
/**
 * Util exports
 */


var IllegalStateError =
/*#__PURE__*/
function (_Error) {
  _inherits(IllegalStateError, _Error);

  function IllegalStateError() {
    var _getPrototypeOf2;

    _classCallCheck(this, IllegalStateError);

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(IllegalStateError)).call.apply(_getPrototypeOf2, [this].concat(args)));
  }

  return IllegalStateError;
}(_wrapNativeSuper(Error));

var IllegalArgumentError =
/*#__PURE__*/
function (_Error2) {
  _inherits(IllegalArgumentError, _Error2);

  function IllegalArgumentError() {
    var _getPrototypeOf3;

    _classCallCheck(this, IllegalArgumentError);

    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    return _possibleConstructorReturn(this, (_getPrototypeOf3 = _getPrototypeOf(IllegalArgumentError)).call.apply(_getPrototypeOf3, [this].concat(args)));
  }

  return IllegalArgumentError;
}(_wrapNativeSuper(Error));

var SecurityError =
/*#__PURE__*/
function (_Error3) {
  _inherits(SecurityError, _Error3);

  function SecurityError() {
    var _getPrototypeOf4;

    _classCallCheck(this, SecurityError);

    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    return _possibleConstructorReturn(this, (_getPrototypeOf4 = _getPrototypeOf(SecurityError)).call.apply(_getPrototypeOf4, [this].concat(args)));
  }

  return SecurityError;
}(_wrapNativeSuper(Error));
/**
 * @file {@link http://asmjs.org Asm.js} implementation of the {@link https://en.wikipedia.org/wiki/Advanced_Encryption_Standard Advanced Encryption Standard}.
 * @author Artem S Vybornov <vybornov@gmail.com>
 * @license MIT
 */


var AES_asm = function () {
  /**
   * Galois Field stuff init flag
   */
  var ginit_done = false;
  /**
   * Galois Field exponentiation and logarithm tables for 3 (the generator)
   */

  var gexp3, glog3;
  /**
   * Init Galois Field tables
   */

  function ginit() {
    gexp3 = [], glog3 = [];
    var a = 1,
        c,
        d;

    for (c = 0; c < 255; c++) {
      gexp3[c] = a; // Multiply by three

      d = a & 0x80, a <<= 1, a &= 255;
      if (d === 0x80) a ^= 0x1b;
      a ^= gexp3[c]; // Set the log table value

      glog3[gexp3[c]] = c;
    }

    gexp3[255] = gexp3[0];
    glog3[0] = 0;
    ginit_done = true;
  }
  /**
   * Galois Field multiplication
   * @param {number} a
   * @param {number} b
   * @return {number}
   */


  function gmul(a, b) {
    var c = gexp3[(glog3[a] + glog3[b]) % 255];
    if (a === 0 || b === 0) c = 0;
    return c;
  }
  /**
   * Galois Field reciprocal
   * @param {number} a
   * @return {number}
   */


  function ginv(a) {
    var i = gexp3[255 - glog3[a]];
    if (a === 0) i = 0;
    return i;
  }
  /**
   * AES stuff init flag
   */


  var aes_init_done = false;
  /**
   * Encryption, Decryption, S-Box and KeyTransform tables
   *
   * @type {number[]}
   */

  var aes_sbox;
  /**
   * @type {number[]}
   */

  var aes_sinv;
  /**
   * @type {number[][]}
   */

  var aes_enc;
  /**
   * @type {number[][]}
   */

  var aes_dec;
  /**
   * Init AES tables
   */

  function aes_init() {
    if (!ginit_done) ginit(); // Calculates AES S-Box value

    function _s(a) {
      var c, s, x;
      s = x = ginv(a);

      for (c = 0; c < 4; c++) {
        s = (s << 1 | s >>> 7) & 255;
        x ^= s;
      }

      x ^= 99;
      return x;
    } // Tables


    aes_sbox = [], aes_sinv = [], aes_enc = [[], [], [], []], aes_dec = [[], [], [], []];

    for (var i = 0; i < 256; i++) {
      var s = _s(i); // S-Box and its inverse


      aes_sbox[i] = s;
      aes_sinv[s] = i; // Ecryption and Decryption tables

      aes_enc[0][i] = gmul(2, s) << 24 | s << 16 | s << 8 | gmul(3, s);
      aes_dec[0][s] = gmul(14, i) << 24 | gmul(9, i) << 16 | gmul(13, i) << 8 | gmul(11, i); // Rotate tables

      for (var t = 1; t < 4; t++) {
        aes_enc[t][i] = aes_enc[t - 1][i] >>> 8 | aes_enc[t - 1][i] << 24;
        aes_dec[t][s] = aes_dec[t - 1][s] >>> 8 | aes_dec[t - 1][s] << 24;
      }
    }

    aes_init_done = true;
  }
  /**
   * Asm.js module constructor.
   *
   * <p>
   * Heap buffer layout by offset:
   * <pre>
   * 0x0000   encryption key schedule
   * 0x0400   decryption key schedule
   * 0x0800   sbox
   * 0x0c00   inv sbox
   * 0x1000   encryption tables
   * 0x2000   decryption tables
   * 0x3000   reserved (future GCM multiplication lookup table)
   * 0x4000   data
   * </pre>
   * Don't touch anything before <code>0x400</code>.
   * </p>
   *
   * @alias AES_asm
   * @class
   * @param foreign - <i>ignored</i>
   * @param buffer - heap buffer to link with
   */


  var wrapper = function wrapper(foreign, buffer) {
    // Init AES stuff for the first time
    if (!aes_init_done) aes_init(); // Fill up AES tables

    var heap = new Uint32Array(buffer);
    heap.set(aes_sbox, 0x0800 >> 2);
    heap.set(aes_sinv, 0x0c00 >> 2);

    for (var i = 0; i < 4; i++) {
      heap.set(aes_enc[i], 0x1000 + 0x400 * i >> 2);
      heap.set(aes_dec[i], 0x2000 + 0x400 * i >> 2);
    }
    /**
     * Calculate AES key schedules.
     * @instance
     * @memberof AES_asm
     * @param {number} ks - key size, 4/6/8 (for 128/192/256-bit key correspondingly)
     * @param {number} k0 - key vector components
     * @param {number} k1 - key vector components
     * @param {number} k2 - key vector components
     * @param {number} k3 - key vector components
     * @param {number} k4 - key vector components
     * @param {number} k5 - key vector components
     * @param {number} k6 - key vector components
     * @param {number} k7 - key vector components
     */


    function set_key(ks, k0, k1, k2, k3, k4, k5, k6, k7) {
      var ekeys = heap.subarray(0x000, 60),
          dkeys = heap.subarray(0x100, 0x100 + 60); // Encryption key schedule

      ekeys.set([k0, k1, k2, k3, k4, k5, k6, k7]);

      for (var i = ks, rcon = 1; i < 4 * ks + 28; i++) {
        var k = ekeys[i - 1];

        if (i % ks === 0 || ks === 8 && i % ks === 4) {
          k = aes_sbox[k >>> 24] << 24 ^ aes_sbox[k >>> 16 & 255] << 16 ^ aes_sbox[k >>> 8 & 255] << 8 ^ aes_sbox[k & 255];
        }

        if (i % ks === 0) {
          k = k << 8 ^ k >>> 24 ^ rcon << 24;
          rcon = rcon << 1 ^ (rcon & 0x80 ? 0x1b : 0);
        }

        ekeys[i] = ekeys[i - ks] ^ k;
      } // Decryption key schedule


      for (var j = 0; j < i; j += 4) {
        for (var jj = 0; jj < 4; jj++) {
          var k = ekeys[i - (4 + j) + (4 - jj) % 4];

          if (j < 4 || j >= i - 4) {
            dkeys[j + jj] = k;
          } else {
            dkeys[j + jj] = aes_dec[0][aes_sbox[k >>> 24]] ^ aes_dec[1][aes_sbox[k >>> 16 & 255]] ^ aes_dec[2][aes_sbox[k >>> 8 & 255]] ^ aes_dec[3][aes_sbox[k & 255]];
          }
        }
      } // Set rounds number


      asm.set_rounds(ks + 5);
    } // create library object with necessary properties


    var stdlib = {
      Uint8Array: Uint8Array,
      Uint32Array: Uint32Array
    };

    var asm = function (stdlib, foreign, buffer) {
      "use asm";

      var S0 = 0,
          S1 = 0,
          S2 = 0,
          S3 = 0,
          I0 = 0,
          I1 = 0,
          I2 = 0,
          I3 = 0,
          N0 = 0,
          N1 = 0,
          N2 = 0,
          N3 = 0,
          M0 = 0,
          M1 = 0,
          M2 = 0,
          M3 = 0,
          H0 = 0,
          H1 = 0,
          H2 = 0,
          H3 = 0,
          R = 0;
      var HEAP = new stdlib.Uint32Array(buffer),
          DATA = new stdlib.Uint8Array(buffer);
      /**
       * AES core
       * @param {number} k - precomputed key schedule offset
       * @param {number} s - precomputed sbox table offset
       * @param {number} t - precomputed round table offset
       * @param {number} r - number of inner rounds to perform
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */

      function _core(k, s, t, r, x0, x1, x2, x3) {
        k = k | 0;
        s = s | 0;
        t = t | 0;
        r = r | 0;
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;
        var t1 = 0,
            t2 = 0,
            t3 = 0,
            y0 = 0,
            y1 = 0,
            y2 = 0,
            y3 = 0,
            i = 0;
        t1 = t | 0x400, t2 = t | 0x800, t3 = t | 0xc00; // round 0

        x0 = x0 ^ HEAP[(k | 0) >> 2], x1 = x1 ^ HEAP[(k | 4) >> 2], x2 = x2 ^ HEAP[(k | 8) >> 2], x3 = x3 ^ HEAP[(k | 12) >> 2]; // round 1..r

        for (i = 16; (i | 0) <= r << 4; i = i + 16 | 0) {
          y0 = HEAP[(t | x0 >> 22 & 1020) >> 2] ^ HEAP[(t1 | x1 >> 14 & 1020) >> 2] ^ HEAP[(t2 | x2 >> 6 & 1020) >> 2] ^ HEAP[(t3 | x3 << 2 & 1020) >> 2] ^ HEAP[(k | i | 0) >> 2], y1 = HEAP[(t | x1 >> 22 & 1020) >> 2] ^ HEAP[(t1 | x2 >> 14 & 1020) >> 2] ^ HEAP[(t2 | x3 >> 6 & 1020) >> 2] ^ HEAP[(t3 | x0 << 2 & 1020) >> 2] ^ HEAP[(k | i | 4) >> 2], y2 = HEAP[(t | x2 >> 22 & 1020) >> 2] ^ HEAP[(t1 | x3 >> 14 & 1020) >> 2] ^ HEAP[(t2 | x0 >> 6 & 1020) >> 2] ^ HEAP[(t3 | x1 << 2 & 1020) >> 2] ^ HEAP[(k | i | 8) >> 2], y3 = HEAP[(t | x3 >> 22 & 1020) >> 2] ^ HEAP[(t1 | x0 >> 14 & 1020) >> 2] ^ HEAP[(t2 | x1 >> 6 & 1020) >> 2] ^ HEAP[(t3 | x2 << 2 & 1020) >> 2] ^ HEAP[(k | i | 12) >> 2];
          x0 = y0, x1 = y1, x2 = y2, x3 = y3;
        } // final round


        S0 = HEAP[(s | x0 >> 22 & 1020) >> 2] << 24 ^ HEAP[(s | x1 >> 14 & 1020) >> 2] << 16 ^ HEAP[(s | x2 >> 6 & 1020) >> 2] << 8 ^ HEAP[(s | x3 << 2 & 1020) >> 2] ^ HEAP[(k | i | 0) >> 2], S1 = HEAP[(s | x1 >> 22 & 1020) >> 2] << 24 ^ HEAP[(s | x2 >> 14 & 1020) >> 2] << 16 ^ HEAP[(s | x3 >> 6 & 1020) >> 2] << 8 ^ HEAP[(s | x0 << 2 & 1020) >> 2] ^ HEAP[(k | i | 4) >> 2], S2 = HEAP[(s | x2 >> 22 & 1020) >> 2] << 24 ^ HEAP[(s | x3 >> 14 & 1020) >> 2] << 16 ^ HEAP[(s | x0 >> 6 & 1020) >> 2] << 8 ^ HEAP[(s | x1 << 2 & 1020) >> 2] ^ HEAP[(k | i | 8) >> 2], S3 = HEAP[(s | x3 >> 22 & 1020) >> 2] << 24 ^ HEAP[(s | x0 >> 14 & 1020) >> 2] << 16 ^ HEAP[(s | x1 >> 6 & 1020) >> 2] << 8 ^ HEAP[(s | x2 << 2 & 1020) >> 2] ^ HEAP[(k | i | 12) >> 2];
      }
      /**
       * ECB mode encryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */


      function _ecb_enc(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;

        _core(0x0000, 0x0800, 0x1000, R, x0, x1, x2, x3);
      }
      /**
       * ECB mode decryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */


      function _ecb_dec(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;
        var t = 0;

        _core(0x0400, 0x0c00, 0x2000, R, x0, x3, x2, x1);

        t = S1, S1 = S3, S3 = t;
      }
      /**
       * CBC mode encryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */


      function _cbc_enc(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;

        _core(0x0000, 0x0800, 0x1000, R, I0 ^ x0, I1 ^ x1, I2 ^ x2, I3 ^ x3);

        I0 = S0, I1 = S1, I2 = S2, I3 = S3;
      }
      /**
       * CBC mode decryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */


      function _cbc_dec(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;
        var t = 0;

        _core(0x0400, 0x0c00, 0x2000, R, x0, x3, x2, x1);

        t = S1, S1 = S3, S3 = t;
        S0 = S0 ^ I0, S1 = S1 ^ I1, S2 = S2 ^ I2, S3 = S3 ^ I3;
        I0 = x0, I1 = x1, I2 = x2, I3 = x3;
      }
      /**
       * CFB mode encryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */


      function _cfb_enc(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;

        _core(0x0000, 0x0800, 0x1000, R, I0, I1, I2, I3);

        I0 = S0 = S0 ^ x0, I1 = S1 = S1 ^ x1, I2 = S2 = S2 ^ x2, I3 = S3 = S3 ^ x3;
      }
      /**
       * CFB mode decryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */


      function _cfb_dec(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;

        _core(0x0000, 0x0800, 0x1000, R, I0, I1, I2, I3);

        S0 = S0 ^ x0, S1 = S1 ^ x1, S2 = S2 ^ x2, S3 = S3 ^ x3;
        I0 = x0, I1 = x1, I2 = x2, I3 = x3;
      }
      /**
       * OFB mode encryption / decryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */


      function _ofb(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;

        _core(0x0000, 0x0800, 0x1000, R, I0, I1, I2, I3);

        I0 = S0, I1 = S1, I2 = S2, I3 = S3;
        S0 = S0 ^ x0, S1 = S1 ^ x1, S2 = S2 ^ x2, S3 = S3 ^ x3;
      }
      /**
       * CTR mode encryption / decryption
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */


      function _ctr(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;

        _core(0x0000, 0x0800, 0x1000, R, N0, N1, N2, N3);

        N3 = ~M3 & N3 | M3 & N3 + 1;
        N2 = ~M2 & N2 | M2 & N2 + ((N3 | 0) == 0);
        N1 = ~M1 & N1 | M1 & N1 + ((N2 | 0) == 0);
        N0 = ~M0 & N0 | M0 & N0 + ((N1 | 0) == 0);
        S0 = S0 ^ x0;
        S1 = S1 ^ x1;
        S2 = S2 ^ x2;
        S3 = S3 ^ x3;
      }
      /**
       * GCM mode MAC calculation
       * @param {number} x0 - 128-bit input block vector
       * @param {number} x1 - 128-bit input block vector
       * @param {number} x2 - 128-bit input block vector
       * @param {number} x3 - 128-bit input block vector
       */


      function _gcm_mac(x0, x1, x2, x3) {
        x0 = x0 | 0;
        x1 = x1 | 0;
        x2 = x2 | 0;
        x3 = x3 | 0;
        var y0 = 0,
            y1 = 0,
            y2 = 0,
            y3 = 0,
            z0 = 0,
            z1 = 0,
            z2 = 0,
            z3 = 0,
            i = 0,
            c = 0;
        x0 = x0 ^ I0, x1 = x1 ^ I1, x2 = x2 ^ I2, x3 = x3 ^ I3;
        y0 = H0 | 0, y1 = H1 | 0, y2 = H2 | 0, y3 = H3 | 0;

        for (; (i | 0) < 128; i = i + 1 | 0) {
          if (y0 >>> 31) {
            z0 = z0 ^ x0, z1 = z1 ^ x1, z2 = z2 ^ x2, z3 = z3 ^ x3;
          }

          y0 = y0 << 1 | y1 >>> 31, y1 = y1 << 1 | y2 >>> 31, y2 = y2 << 1 | y3 >>> 31, y3 = y3 << 1;
          c = x3 & 1;
          x3 = x3 >>> 1 | x2 << 31, x2 = x2 >>> 1 | x1 << 31, x1 = x1 >>> 1 | x0 << 31, x0 = x0 >>> 1;
          if (c) x0 = x0 ^ 0xe1000000;
        }

        I0 = z0, I1 = z1, I2 = z2, I3 = z3;
      }
      /**
       * Set the internal rounds number.
       * @instance
       * @memberof AES_asm
       * @param {number} r - number if inner AES rounds
       */


      function set_rounds(r) {
        r = r | 0;
        R = r;
      }
      /**
       * Populate the internal state of the module.
       * @instance
       * @memberof AES_asm
       * @param {number} s0 - state vector
       * @param {number} s1 - state vector
       * @param {number} s2 - state vector
       * @param {number} s3 - state vector
       */


      function set_state(s0, s1, s2, s3) {
        s0 = s0 | 0;
        s1 = s1 | 0;
        s2 = s2 | 0;
        s3 = s3 | 0;
        S0 = s0, S1 = s1, S2 = s2, S3 = s3;
      }
      /**
       * Populate the internal iv of the module.
       * @instance
       * @memberof AES_asm
       * @param {number} i0 - iv vector
       * @param {number} i1 - iv vector
       * @param {number} i2 - iv vector
       * @param {number} i3 - iv vector
       */


      function set_iv(i0, i1, i2, i3) {
        i0 = i0 | 0;
        i1 = i1 | 0;
        i2 = i2 | 0;
        i3 = i3 | 0;
        I0 = i0, I1 = i1, I2 = i2, I3 = i3;
      }
      /**
       * Set nonce for CTR-family modes.
       * @instance
       * @memberof AES_asm
       * @param {number} n0 - nonce vector
       * @param {number} n1 - nonce vector
       * @param {number} n2 - nonce vector
       * @param {number} n3 - nonce vector
       */


      function set_nonce(n0, n1, n2, n3) {
        n0 = n0 | 0;
        n1 = n1 | 0;
        n2 = n2 | 0;
        n3 = n3 | 0;
        N0 = n0, N1 = n1, N2 = n2, N3 = n3;
      }
      /**
       * Set counter mask for CTR-family modes.
       * @instance
       * @memberof AES_asm
       * @param {number} m0 - counter mask vector
       * @param {number} m1 - counter mask vector
       * @param {number} m2 - counter mask vector
       * @param {number} m3 - counter mask vector
       */


      function set_mask(m0, m1, m2, m3) {
        m0 = m0 | 0;
        m1 = m1 | 0;
        m2 = m2 | 0;
        m3 = m3 | 0;
        M0 = m0, M1 = m1, M2 = m2, M3 = m3;
      }
      /**
       * Set counter for CTR-family modes.
       * @instance
       * @memberof AES_asm
       * @param {number} c0 - counter vector
       * @param {number} c1 - counter vector
       * @param {number} c2 - counter vector
       * @param {number} c3 - counter vector
       */


      function set_counter(c0, c1, c2, c3) {
        c0 = c0 | 0;
        c1 = c1 | 0;
        c2 = c2 | 0;
        c3 = c3 | 0;
        N3 = ~M3 & N3 | M3 & c3, N2 = ~M2 & N2 | M2 & c2, N1 = ~M1 & N1 | M1 & c1, N0 = ~M0 & N0 | M0 & c0;
      }
      /**
       * Store the internal state vector into the heap.
       * @instance
       * @memberof AES_asm
       * @param {number} pos - offset where to put the data
       * @return {number} The number of bytes have been written into the heap, always 16.
       */


      function get_state(pos) {
        pos = pos | 0;
        if (pos & 15) return -1;
        DATA[pos | 0] = S0 >>> 24, DATA[pos | 1] = S0 >>> 16 & 255, DATA[pos | 2] = S0 >>> 8 & 255, DATA[pos | 3] = S0 & 255, DATA[pos | 4] = S1 >>> 24, DATA[pos | 5] = S1 >>> 16 & 255, DATA[pos | 6] = S1 >>> 8 & 255, DATA[pos | 7] = S1 & 255, DATA[pos | 8] = S2 >>> 24, DATA[pos | 9] = S2 >>> 16 & 255, DATA[pos | 10] = S2 >>> 8 & 255, DATA[pos | 11] = S2 & 255, DATA[pos | 12] = S3 >>> 24, DATA[pos | 13] = S3 >>> 16 & 255, DATA[pos | 14] = S3 >>> 8 & 255, DATA[pos | 15] = S3 & 255;
        return 16;
      }
      /**
       * Store the internal iv vector into the heap.
       * @instance
       * @memberof AES_asm
       * @param {number} pos - offset where to put the data
       * @return {number} The number of bytes have been written into the heap, always 16.
       */


      function get_iv(pos) {
        pos = pos | 0;
        if (pos & 15) return -1;
        DATA[pos | 0] = I0 >>> 24, DATA[pos | 1] = I0 >>> 16 & 255, DATA[pos | 2] = I0 >>> 8 & 255, DATA[pos | 3] = I0 & 255, DATA[pos | 4] = I1 >>> 24, DATA[pos | 5] = I1 >>> 16 & 255, DATA[pos | 6] = I1 >>> 8 & 255, DATA[pos | 7] = I1 & 255, DATA[pos | 8] = I2 >>> 24, DATA[pos | 9] = I2 >>> 16 & 255, DATA[pos | 10] = I2 >>> 8 & 255, DATA[pos | 11] = I2 & 255, DATA[pos | 12] = I3 >>> 24, DATA[pos | 13] = I3 >>> 16 & 255, DATA[pos | 14] = I3 >>> 8 & 255, DATA[pos | 15] = I3 & 255;
        return 16;
      }
      /**
       * GCM initialization.
       * @instance
       * @memberof AES_asm
       */


      function gcm_init() {
        _ecb_enc(0, 0, 0, 0);

        H0 = S0, H1 = S1, H2 = S2, H3 = S3;
      }
      /**
       * Perform ciphering operation on the supplied data.
       * @instance
       * @memberof AES_asm
       * @param {number} mode - block cipher mode (see {@link AES_asm} mode constants)
       * @param {number} pos - offset of the data being processed
       * @param {number} len - length of the data being processed
       * @return {number} Actual amount of data have been processed.
       */


      function cipher(mode, pos, len) {
        mode = mode | 0;
        pos = pos | 0;
        len = len | 0;
        var ret = 0;
        if (pos & 15) return -1;

        while ((len | 0) >= 16) {
          _cipher_modes[mode & 7](DATA[pos | 0] << 24 | DATA[pos | 1] << 16 | DATA[pos | 2] << 8 | DATA[pos | 3], DATA[pos | 4] << 24 | DATA[pos | 5] << 16 | DATA[pos | 6] << 8 | DATA[pos | 7], DATA[pos | 8] << 24 | DATA[pos | 9] << 16 | DATA[pos | 10] << 8 | DATA[pos | 11], DATA[pos | 12] << 24 | DATA[pos | 13] << 16 | DATA[pos | 14] << 8 | DATA[pos | 15]);

          DATA[pos | 0] = S0 >>> 24, DATA[pos | 1] = S0 >>> 16 & 255, DATA[pos | 2] = S0 >>> 8 & 255, DATA[pos | 3] = S0 & 255, DATA[pos | 4] = S1 >>> 24, DATA[pos | 5] = S1 >>> 16 & 255, DATA[pos | 6] = S1 >>> 8 & 255, DATA[pos | 7] = S1 & 255, DATA[pos | 8] = S2 >>> 24, DATA[pos | 9] = S2 >>> 16 & 255, DATA[pos | 10] = S2 >>> 8 & 255, DATA[pos | 11] = S2 & 255, DATA[pos | 12] = S3 >>> 24, DATA[pos | 13] = S3 >>> 16 & 255, DATA[pos | 14] = S3 >>> 8 & 255, DATA[pos | 15] = S3 & 255;
          ret = ret + 16 | 0, pos = pos + 16 | 0, len = len - 16 | 0;
        }

        return ret | 0;
      }
      /**
       * Calculates MAC of the supplied data.
       * @instance
       * @memberof AES_asm
       * @param {number} mode - block cipher mode (see {@link AES_asm} mode constants)
       * @param {number} pos - offset of the data being processed
       * @param {number} len - length of the data being processed
       * @return {number} Actual amount of data have been processed.
       */


      function mac(mode, pos, len) {
        mode = mode | 0;
        pos = pos | 0;
        len = len | 0;
        var ret = 0;
        if (pos & 15) return -1;

        while ((len | 0) >= 16) {
          _mac_modes[mode & 1](DATA[pos | 0] << 24 | DATA[pos | 1] << 16 | DATA[pos | 2] << 8 | DATA[pos | 3], DATA[pos | 4] << 24 | DATA[pos | 5] << 16 | DATA[pos | 6] << 8 | DATA[pos | 7], DATA[pos | 8] << 24 | DATA[pos | 9] << 16 | DATA[pos | 10] << 8 | DATA[pos | 11], DATA[pos | 12] << 24 | DATA[pos | 13] << 16 | DATA[pos | 14] << 8 | DATA[pos | 15]);

          ret = ret + 16 | 0, pos = pos + 16 | 0, len = len - 16 | 0;
        }

        return ret | 0;
      }
      /**
       * AES cipher modes table (virual methods)
       */


      var _cipher_modes = [_ecb_enc, _ecb_dec, _cbc_enc, _cbc_dec, _cfb_enc, _cfb_dec, _ofb, _ctr];
      /**
       * AES MAC modes table (virual methods)
       */

      var _mac_modes = [_cbc_enc, _gcm_mac];
      /**
       * Asm.js module exports
       */

      return {
        set_rounds: set_rounds,
        set_state: set_state,
        set_iv: set_iv,
        set_nonce: set_nonce,
        set_mask: set_mask,
        set_counter: set_counter,
        get_state: get_state,
        get_iv: get_iv,
        gcm_init: gcm_init,
        cipher: cipher,
        mac: mac
      };
    }(stdlib, foreign, buffer);

    asm.set_key = set_key;
    return asm;
  };
  /**
   * AES enciphering mode constants
   * @enum {number}
   * @const
   */


  wrapper.ENC = {
    ECB: 0,
    CBC: 2,
    CFB: 4,
    OFB: 6,
    CTR: 7
  },
  /**
   * AES deciphering mode constants
   * @enum {number}
   * @const
   */
  wrapper.DEC = {
    ECB: 1,
    CBC: 3,
    CFB: 5,
    OFB: 6,
    CTR: 7
  },
  /**
   * AES MAC mode constants
   * @enum {number}
   * @const
   */
  wrapper.MAC = {
    CBC: 0,
    GCM: 1
  };
  /**
   * Heap data offset
   * @type {number}
   * @const
   */

  wrapper.HEAP_DATA = 0x4000;
  return wrapper;
}();

var AES =
/*#__PURE__*/
function () {
  function AES(key, iv) {
    var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var mode = arguments.length > 3 ? arguments[3] : undefined;

    _classCallCheck(this, AES);

    this.pos = 0;
    this.len = 0;
    this.mode = mode; // The AES "worker"

    this.heap = _heap_init().subarray(AES_asm.HEAP_DATA);
    this.asm = new AES_asm(null, this.heap.buffer); // The AES object state

    this.pos = 0;
    this.len = 0; // Key

    var keylen = key.length;
    if (keylen !== 16 && keylen !== 24 && keylen !== 32) throw new IllegalArgumentError('illegal key size');
    var keyview = new DataView(key.buffer, key.byteOffset, key.byteLength);
    this.asm.set_key(keylen >> 2, keyview.getUint32(0), keyview.getUint32(4), keyview.getUint32(8), keyview.getUint32(12), keylen > 16 ? keyview.getUint32(16) : 0, keylen > 16 ? keyview.getUint32(20) : 0, keylen > 24 ? keyview.getUint32(24) : 0, keylen > 24 ? keyview.getUint32(28) : 0); // IV

    if (iv !== undefined) {
      if (iv.length !== 16) throw new IllegalArgumentError('illegal iv size');
      var ivview = new DataView(iv.buffer, iv.byteOffset, iv.byteLength);
      this.asm.set_iv(ivview.getUint32(0), ivview.getUint32(4), ivview.getUint32(8), ivview.getUint32(12));
    } else {
      this.asm.set_iv(0, 0, 0, 0);
    }

    this.padding = padding;
  }

  _createClass(AES, [{
    key: "AES_Encrypt_process",
    value: function AES_Encrypt_process(data) {
      if (!is_bytes(data)) throw new TypeError("data isn't of expected type");
      var asm = this.asm;
      var heap = this.heap;
      var amode = AES_asm.ENC[this.mode];
      var hpos = AES_asm.HEAP_DATA;
      var pos = this.pos;
      var len = this.len;
      var dpos = 0;
      var dlen = data.length || 0;
      var rpos = 0;
      var rlen = len + dlen & -16;
      var wlen = 0;
      var result = new Uint8Array(rlen);

      while (dlen > 0) {
        wlen = _heap_write(heap, pos + len, data, dpos, dlen);
        len += wlen;
        dpos += wlen;
        dlen -= wlen;
        wlen = asm.cipher(amode, hpos + pos, len);
        if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);
        rpos += wlen;

        if (wlen < len) {
          pos += wlen;
          len -= wlen;
        } else {
          pos = 0;
          len = 0;
        }
      }

      this.pos = pos;
      this.len = len;
      return result;
    }
  }, {
    key: "AES_Encrypt_finish",
    value: function AES_Encrypt_finish() {
      var asm = this.asm;
      var heap = this.heap;
      var amode = AES_asm.ENC[this.mode];
      var hpos = AES_asm.HEAP_DATA;
      var pos = this.pos;
      var len = this.len;
      var plen = 16 - len % 16;
      var rlen = len;

      if (this.hasOwnProperty('padding')) {
        if (this.padding) {
          for (var p = 0; p < plen; ++p) {
            heap[pos + len + p] = plen;
          }

          len += plen;
          rlen = len;
        } else if (len % 16) {
          throw new IllegalArgumentError('data length must be a multiple of the block size');
        }
      } else {
        len += plen;
      }

      var result = new Uint8Array(rlen);
      if (len) asm.cipher(amode, hpos + pos, len);
      if (rlen) result.set(heap.subarray(pos, pos + rlen));
      this.pos = 0;
      this.len = 0;
      return result;
    }
  }, {
    key: "AES_Decrypt_process",
    value: function AES_Decrypt_process(data) {
      if (!is_bytes(data)) throw new TypeError("data isn't of expected type");
      var asm = this.asm;
      var heap = this.heap;
      var amode = AES_asm.DEC[this.mode];
      var hpos = AES_asm.HEAP_DATA;
      var pos = this.pos;
      var len = this.len;
      var dpos = 0;
      var dlen = data.length || 0;
      var rpos = 0;
      var rlen = len + dlen & -16;
      var plen = 0;
      var wlen = 0;

      if (this.padding) {
        plen = len + dlen - rlen || 16;
        rlen -= plen;
      }

      var result = new Uint8Array(rlen);

      while (dlen > 0) {
        wlen = _heap_write(heap, pos + len, data, dpos, dlen);
        len += wlen;
        dpos += wlen;
        dlen -= wlen;
        wlen = asm.cipher(amode, hpos + pos, len - (!dlen ? plen : 0));
        if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);
        rpos += wlen;

        if (wlen < len) {
          pos += wlen;
          len -= wlen;
        } else {
          pos = 0;
          len = 0;
        }
      }

      this.pos = pos;
      this.len = len;
      return result;
    }
  }, {
    key: "AES_Decrypt_finish",
    value: function AES_Decrypt_finish() {
      var asm = this.asm;
      var heap = this.heap;
      var amode = AES_asm.DEC[this.mode];
      var hpos = AES_asm.HEAP_DATA;
      var pos = this.pos;
      var len = this.len;
      var rlen = len;

      if (len > 0) {
        if (len % 16) {
          if (this.hasOwnProperty('padding')) {
            throw new IllegalArgumentError('data length must be a multiple of the block size');
          } else {
            len += 16 - len % 16;
          }
        }

        asm.cipher(amode, hpos + pos, len);

        if (this.hasOwnProperty('padding') && this.padding) {
          var pad = heap[pos + rlen - 1];
          if (pad < 1 || pad > 16 || pad > rlen) throw new SecurityError('bad padding');
          var pcheck = 0;

          for (var i = pad; i > 1; i--) {
            pcheck |= pad ^ heap[pos + rlen - i];
          }

          if (pcheck) throw new SecurityError('bad padding');
          rlen -= pad;
        }
      }

      var result = new Uint8Array(rlen);

      if (rlen > 0) {
        result.set(heap.subarray(pos, pos + rlen));
      }

      this.pos = 0;
      this.len = 0;
      return result;
    }
  }]);

  return AES;
}();

var AES_CBC =
/*#__PURE__*/
function (_AES) {
  _inherits(AES_CBC, _AES);

  _createClass(AES_CBC, null, [{
    key: "encrypt",
    value: function encrypt(data, key) {
      var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var iv = arguments.length > 3 ? arguments[3] : undefined;
      return new AES_CBC(key, iv, padding).encrypt(data);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data, key) {
      var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var iv = arguments.length > 3 ? arguments[3] : undefined;
      return new AES_CBC(key, iv, padding).decrypt(data);
    }
  }]);

  function AES_CBC(key, iv) {
    var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

    _classCallCheck(this, AES_CBC);

    return _possibleConstructorReturn(this, _getPrototypeOf(AES_CBC).call(this, key, iv, padding, 'CBC'));
  }

  _createClass(AES_CBC, [{
    key: "encrypt",
    value: function encrypt(data) {
      var r1 = this.AES_Encrypt_process(data);
      var r2 = this.AES_Encrypt_finish();
      return joinBytes(r1, r2);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data) {
      var r1 = this.AES_Decrypt_process(data);
      var r2 = this.AES_Decrypt_finish();
      return joinBytes(r1, r2);
    }
  }]);

  return AES_CBC;
}(AES);
/**
 * Counter with CBC-MAC (CCM)
 *
 * Due to JS limitations (52 bits of Number precision) maximum encrypted message length
 * is limited to ~4 PiB ( 2^52 - 16 ) per `nonce`-`key` pair.
 * That also limits `lengthSize` parameter maximum value to 7 (not 8 as described in RFC3610).
 *
 * Additional authenticated data `adata` maximum length is chosen to be no more than 65279 bytes ( 2^16 - 2^8 ),
 * which is considered enough for the most of use-cases.
 *
 * And one more important thing: in case of progressive ciphering of a data stream (in other
 * words when data can't be held in-memory at a whole and are ciphered chunk-by-chunk)
 * you have to know the `dataLength` in advance and pass that value to the cipher options.
 */


var _AES_CCM_adata_maxLength = 65279; // 2^16 - 2^8

var _AES_CCM_data_maxLength = 4503599627370480; // 2^52 - 2^4

var AES_CCM =
/*#__PURE__*/
function (_AES2) {
  _inherits(AES_CCM, _AES2);

  function AES_CCM(key, nonce, adata) {
    var _this;

    var tagSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 16;
    var dataLength = arguments.length > 4 ? arguments[4] : undefined;

    _classCallCheck(this, AES_CCM);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(AES_CCM).call(this, key, undefined, undefined, 'CCM'));
    _this.counter = 1;
    _this.dataLength = -1; // Tag size

    if (tagSize < 4 || tagSize > 16 || tagSize & 1) throw new IllegalArgumentError('illegal tagSize value');
    _this.tagSize = tagSize; // Nonce

    _this.nonce = nonce;
    if (nonce.length < 8 || nonce.length > 13) throw new IllegalArgumentError('illegal nonce length');
    _this.lengthSize = 15 - nonce.length;
    nonce = new Uint8Array(nonce.length + 1);
    nonce[0] = _this.lengthSize - 1;
    nonce.set(_this.nonce, 1);
    if (dataLength < 0 || dataLength > _AES_CCM_data_maxLength || dataLength > Math.pow(2, 8 * _this.lengthSize) - 16) throw new IllegalArgumentError('illegal dataLength value');

    if (adata !== undefined) {
      if (adata.length > _AES_CCM_adata_maxLength) throw new IllegalArgumentError('illegal adata length');
      _this.adata = adata.length ? adata : undefined;
    }

    _this.dataLength = dataLength;
    _this.counter = 1;

    _this.AES_CCM_calculate_iv();

    _this.AES_CTR_set_options(nonce, _this.counter, 8 * _this.lengthSize);

    return _this;
  }

  _createClass(AES_CCM, [{
    key: "encrypt",
    value: function encrypt(data) {
      this.dataLength = data.length || 0;
      var result1 = this.AES_CCM_Encrypt_process(data);
      var result2 = this.AES_CCM_Encrypt_finish();
      var result = new Uint8Array(result1.length + result2.length);
      if (result1.length) result.set(result1);
      if (result2.length) result.set(result2, result1.length);
      return result;
    }
  }, {
    key: "decrypt",
    value: function decrypt(data) {
      this.dataLength = data.length || 0;
      var result1 = this.AES_CCM_Decrypt_process(data);
      var result2 = this.AES_CCM_Decrypt_finish();
      var result = new Uint8Array(result1.length + result2.length);
      if (result1.length) result.set(result1);
      if (result2.length) result.set(result2, result1.length);
      return result;
    }
  }, {
    key: "AES_CCM_calculate_iv",
    value: function AES_CCM_calculate_iv() {
      var nonce = this.nonce;
      var adata = this.adata;
      var tagSize = this.tagSize;
      var lengthSize = this.lengthSize;
      var dataLength = this.dataLength;
      var data = new Uint8Array(16 + (adata ? 2 + adata.length : 0)); // B0: flags(adata?, M', L'), nonce, len(data)

      data[0] = (adata ? 64 : 0) | tagSize - 2 << 2 | lengthSize - 1;
      data.set(nonce, 1);
      if (lengthSize > 6) data[9] = dataLength / 0x100000000 >>> 16 & 15;
      if (lengthSize > 5) data[10] = dataLength / 0x100000000 >>> 8 & 255;
      if (lengthSize > 4) data[11] = dataLength / 0x100000000 & 255;
      if (lengthSize > 3) data[12] = dataLength >>> 24;
      if (lengthSize > 2) data[13] = dataLength >>> 16 & 255;
      data[14] = dataLength >>> 8 & 255;
      data[15] = dataLength & 255; // B*: len(adata), adata

      if (adata) {
        data[16] = adata.length >>> 8 & 255;
        data[17] = adata.length & 255;
        data.set(adata, 18);
      }

      this._cbc_mac_process(data);

      this.asm.get_state(AES_asm.HEAP_DATA);
      var iv = new Uint8Array(this.heap.subarray(0, 16));
      var ivview = new DataView(iv.buffer, iv.byteOffset, iv.byteLength);
      this.asm.set_iv(ivview.getUint32(0), ivview.getUint32(4), ivview.getUint32(8), ivview.getUint32(12));
    }
  }, {
    key: "_cbc_mac_process",
    value: function _cbc_mac_process(data) {
      var heap = this.heap;
      var asm = this.asm;
      var dpos = 0;
      var dlen = data.length || 0;
      var wlen = 0;

      while (dlen > 0) {
        wlen = _heap_write(heap, 0, data, dpos, dlen);

        while (wlen & 15) {
          heap[wlen++] = 0;
        }

        dpos += wlen;
        dlen -= wlen;
        asm.mac(AES_asm.MAC.CBC, AES_asm.HEAP_DATA, wlen);
      }
    }
  }, {
    key: "AES_CCM_Encrypt_process",
    value: function AES_CCM_Encrypt_process(data) {
      var asm = this.asm;
      var heap = this.heap;
      var dpos = 0;
      var dlen = data.length || 0;
      var counter = this.counter;
      var pos = this.pos;
      var len = this.len;
      var rlen = len + dlen & -16;
      var rpos = 0;
      var wlen = 0;
      if ((counter - 1 << 4) + len + dlen > _AES_CCM_data_maxLength) // ??? should check against lengthSize
        throw new RangeError('counter overflow');
      var result = new Uint8Array(rlen);

      while (dlen > 0) {
        wlen = _heap_write(heap, pos + len, data, dpos, dlen);
        len += wlen;
        dpos += wlen;
        dlen -= wlen;
        wlen = asm.mac(AES_asm.MAC.CBC, AES_asm.HEAP_DATA + pos, len);
        wlen = asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA + pos, wlen);
        if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);
        counter += wlen >>> 4;
        rpos += wlen;

        if (wlen < len) {
          pos += wlen;
          len -= wlen;
        } else {
          pos = 0;
          len = 0;
        }
      }

      this.counter = counter;
      this.pos = pos;
      this.len = len;
      return result;
    }
  }, {
    key: "AES_CCM_Encrypt_finish",
    value: function AES_CCM_Encrypt_finish() {
      var asm = this.asm;
      var heap = this.heap;
      var tagSize = this.tagSize;
      var pos = this.pos;
      var len = this.len;
      var result = new Uint8Array(len + tagSize);
      var i = len;

      for (; i & 15; i++) {
        heap[pos + i] = 0;
      }

      asm.mac(AES_asm.MAC.CBC, AES_asm.HEAP_DATA + pos, i);
      asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA + pos, i);
      if (len) result.set(heap.subarray(pos, pos + len));
      asm.set_counter(0, 0, 0, 0);
      asm.get_iv(AES_asm.HEAP_DATA);
      asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA, 16);
      result.set(heap.subarray(0, tagSize), len);
      this.counter = 1;
      this.pos = 0;
      this.len = 0;
      return result;
    }
  }, {
    key: "AES_CCM_Decrypt_process",
    value: function AES_CCM_Decrypt_process(data) {
      var dpos = 0;
      var dlen = data.length || 0;
      var asm = this.asm;
      var heap = this.heap;
      var counter = this.counter;
      var tagSize = this.tagSize;
      var pos = this.pos;
      var len = this.len;
      var rpos = 0;
      var rlen = len + dlen > tagSize ? len + dlen - tagSize & -16 : 0;
      var tlen = len + dlen - rlen;
      var wlen = 0;
      if ((counter - 1 << 4) + len + dlen > _AES_CCM_data_maxLength) throw new RangeError('counter overflow');
      var result = new Uint8Array(rlen);

      while (dlen > tlen) {
        wlen = _heap_write(heap, pos + len, data, dpos, dlen - tlen);
        len += wlen;
        dpos += wlen;
        dlen -= wlen;
        wlen = asm.cipher(AES_asm.DEC.CTR, AES_asm.HEAP_DATA + pos, wlen);
        wlen = asm.mac(AES_asm.MAC.CBC, AES_asm.HEAP_DATA + pos, wlen);
        if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);
        counter += wlen >>> 4;
        rpos += wlen;
        pos = 0;
        len = 0;
      }

      if (dlen > 0) {
        len += _heap_write(heap, 0, data, dpos, dlen);
      }

      this.counter = counter;
      this.pos = pos;
      this.len = len;
      return result;
    }
  }, {
    key: "AES_CCM_Decrypt_finish",
    value: function AES_CCM_Decrypt_finish() {
      var asm = this.asm;
      var heap = this.heap;
      var tagSize = this.tagSize;
      var pos = this.pos;
      var len = this.len;
      var rlen = len - tagSize;
      if (len < tagSize) throw new IllegalStateError('authentication tag not found');
      var result = new Uint8Array(rlen);
      var atag = new Uint8Array(heap.subarray(pos + rlen, pos + len));
      asm.cipher(AES_asm.DEC.CTR, AES_asm.HEAP_DATA + pos, rlen + 15 & -16);
      result.set(heap.subarray(pos, pos + rlen));
      var i = rlen;

      for (; i & 15; i++) {
        heap[pos + i] = 0;
      }

      asm.mac(AES_asm.MAC.CBC, AES_asm.HEAP_DATA + pos, i);
      asm.set_counter(0, 0, 0, 0);
      asm.get_iv(AES_asm.HEAP_DATA);
      asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA, 16);
      var acheck = 0;

      for (var j = 0; j < tagSize; ++j) {
        acheck |= atag[j] ^ heap[j];
      }

      if (acheck) throw new SecurityError('data integrity check failed');
      this.counter = 1;
      this.pos = 0;
      this.len = 0;
      return result;
    }
  }, {
    key: "AES_CTR_set_options",
    value: function AES_CTR_set_options(nonce, counter, size) {
      if (size < 8 || size > 48) throw new IllegalArgumentError('illegal counter size');
      var mask = Math.pow(2, size) - 1;
      this.asm.set_mask(0, 0, mask / 0x100000000 | 0, mask | 0);
      var len = nonce.length;
      if (!len || len > 16) throw new IllegalArgumentError('illegal nonce size');
      this.nonce = nonce;
      var view = new DataView(new ArrayBuffer(16));
      new Uint8Array(view.buffer).set(nonce);
      this.asm.set_nonce(view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12));
      if (counter < 0 || counter >= Math.pow(2, size)) throw new IllegalArgumentError('illegal counter value');
      this.counter = counter;
      this.asm.set_counter(0, 0, counter / 0x100000000 | 0, counter | 0);
    }
  }], [{
    key: "encrypt",
    value: function encrypt(clear, key, nonce, adata) {
      var tagsize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 16;
      return new AES_CCM(key, nonce, adata, tagsize, clear.length).encrypt(clear);
    }
  }, {
    key: "decrypt",
    value: function decrypt(cipher, key, nonce, adata) {
      var tagsize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 16;
      return new AES_CCM(key, nonce, adata, tagsize, cipher.length - tagsize).decrypt(cipher);
    }
  }]);

  return AES_CCM;
}(AES);

var AES_CFB =
/*#__PURE__*/
function (_AES3) {
  _inherits(AES_CFB, _AES3);

  _createClass(AES_CFB, null, [{
    key: "encrypt",
    value: function encrypt(data, key, iv) {
      return new AES_CFB(key, iv).encrypt(data);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data, key, iv) {
      return new AES_CFB(key, iv).decrypt(data);
    }
  }]);

  function AES_CFB(key, iv) {
    var _this2;

    _classCallCheck(this, AES_CFB);

    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(AES_CFB).call(this, key, iv, true, 'CFB'));
    delete _this2.padding;
    return _this2;
  }

  _createClass(AES_CFB, [{
    key: "encrypt",
    value: function encrypt(data) {
      var r1 = this.AES_Encrypt_process(data);
      var r2 = this.AES_Encrypt_finish();
      return joinBytes(r1, r2);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data) {
      var r1 = this.AES_Decrypt_process(data);
      var r2 = this.AES_Decrypt_finish();
      return joinBytes(r1, r2);
    }
  }]);

  return AES_CFB;
}(AES);

var AES_ECB =
/*#__PURE__*/
function (_AES4) {
  _inherits(AES_ECB, _AES4);

  _createClass(AES_ECB, null, [{
    key: "encrypt",
    value: function encrypt(data, key) {
      var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      return new AES_ECB(key, padding).encrypt(data);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data, key) {
      var padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      return new AES_ECB(key, padding).decrypt(data);
    }
  }]);

  function AES_ECB(key) {
    var padding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    _classCallCheck(this, AES_ECB);

    return _possibleConstructorReturn(this, _getPrototypeOf(AES_ECB).call(this, key, undefined, padding, 'ECB'));
  }

  _createClass(AES_ECB, [{
    key: "encrypt",
    value: function encrypt(data) {
      var r1 = this.AES_Encrypt_process(data);
      var r2 = this.AES_Encrypt_finish();
      return joinBytes(r1, r2);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data) {
      var r1 = this.AES_Decrypt_process(data);
      var r2 = this.AES_Decrypt_finish();
      return joinBytes(r1, r2);
    }
  }]);

  return AES_ECB;
}(AES);

function mul2(data) {
  var t = data[0] & 0x80;

  for (var i = 0; i < 15; i++) {
    data[i] = data[i] << 1 ^ (data[i + 1] & 0x80 ? 1 : 0);
  }

  data[15] = data[15] << 1 ^ (t ? 0x87 : 0);
}

var AES_CMAC =
/*#__PURE__*/
function () {
  function AES_CMAC(key) {
    _classCallCheck(this, AES_CMAC);

    this.bufferLength = 0;
    this.k = new AES_ECB(key).encrypt(new Uint8Array(16));
    mul2(this.k);
    this.cbc = new AES_CBC(key, new Uint8Array(16), false);
    this.buffer = new Uint8Array(16);
    this.result = null;
  }

  _createClass(AES_CMAC, [{
    key: "process",
    value: function process(data) {
      if (this.bufferLength + data.length > 16) {
        this.cbc.encrypt(this.buffer.subarray(0, this.bufferLength));
        var offset = (this.bufferLength + data.length - 1 & ~15) - this.bufferLength;
        this.cbc.encrypt(data.subarray(0, offset));
        this.buffer.set(data.subarray(offset));
        this.bufferLength = data.length - offset;
      } else {
        this.buffer.set(data, this.bufferLength);
        this.bufferLength += data.length;
      }

      return this;
    }
  }, {
    key: "finish",
    value: function finish() {
      if (this.bufferLength !== 16) {
        this.buffer[this.bufferLength] = 0x80;

        for (var i = this.bufferLength + 1; i < 16; i++) {
          this.buffer[i] = 0;
        }

        mul2(this.k);
      }

      for (var _i = 0; _i < 16; _i++) {
        this.buffer[_i] ^= this.k[_i];
      }

      this.result = this.cbc.encrypt(this.buffer);
      return this;
    }
  }], [{
    key: "bytes",
    value: function bytes(data, key) {
      return new AES_CMAC(key).process(data).finish().result;
    }
  }]);

  return AES_CMAC;
}();

var AES_CTR =
/*#__PURE__*/
function (_AES5) {
  _inherits(AES_CTR, _AES5);

  _createClass(AES_CTR, null, [{
    key: "encrypt",
    value: function encrypt(data, key, nonce) {
      return new AES_CTR(key, nonce).encrypt(data);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data, key, nonce) {
      return new AES_CTR(key, nonce).encrypt(data);
    }
  }]);

  function AES_CTR(key, nonce) {
    var _this3;

    _classCallCheck(this, AES_CTR);

    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(AES_CTR).call(this, key, undefined, false, 'CTR'));
    delete _this3.padding;

    _this3.AES_CTR_set_options(nonce);

    return _this3;
  }

  _createClass(AES_CTR, [{
    key: "encrypt",
    value: function encrypt(data) {
      var r1 = this.AES_Encrypt_process(data);
      var r2 = this.AES_Encrypt_finish();
      return joinBytes(r1, r2);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data) {
      var r1 = this.AES_Encrypt_process(data);
      var r2 = this.AES_Encrypt_finish();
      return joinBytes(r1, r2);
    }
  }, {
    key: "AES_CTR_set_options",
    value: function AES_CTR_set_options(nonce, counter, size) {
      if (size !== undefined) {
        if (size < 8 || size > 48) throw new IllegalArgumentError('illegal counter size');
        var mask = Math.pow(2, size) - 1;
        this.asm.set_mask(0, 0, mask / 0x100000000 | 0, mask | 0);
      } else {
        size = 48;
        this.asm.set_mask(0, 0, 0xffff, 0xffffffff);
      }

      if (nonce !== undefined) {
        var len = nonce.length;
        if (!len || len > 16) throw new IllegalArgumentError('illegal nonce size');
        var view = new DataView(new ArrayBuffer(16));
        new Uint8Array(view.buffer).set(nonce);
        this.asm.set_nonce(view.getUint32(0), view.getUint32(4), view.getUint32(8), view.getUint32(12));
      } else {
        throw new Error('nonce is required');
      }

      if (counter !== undefined) {
        if (counter < 0 || counter >= Math.pow(2, size)) throw new IllegalArgumentError('illegal counter value');
        this.asm.set_counter(0, 0, counter / 0x100000000 | 0, counter | 0);
      }
    }
  }]);

  return AES_CTR;
}(AES);

var _AES_GCM_data_maxLength = 68719476704; // 2^36 - 2^5

var AES_GCM =
/*#__PURE__*/
function (_AES6) {
  _inherits(AES_GCM, _AES6);

  function AES_GCM(key, nonce, adata) {
    var _this4;

    var tagSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 16;

    _classCallCheck(this, AES_GCM);

    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(AES_GCM).call(this, key, undefined, false, 'CTR'));
    _this4.tagSize = tagSize;
    _this4.gamma0 = 0;
    _this4.counter = 1; // Init GCM

    _this4.asm.gcm_init(); // Tag size


    if (_this4.tagSize < 4 || _this4.tagSize > 16) throw new IllegalArgumentError('illegal tagSize value'); // Nonce

    var noncelen = nonce.length || 0;
    var noncebuf = new Uint8Array(16);

    if (noncelen !== 12) {
      _this4._gcm_mac_process(nonce);

      _this4.heap[0] = 0;
      _this4.heap[1] = 0;
      _this4.heap[2] = 0;
      _this4.heap[3] = 0;
      _this4.heap[4] = 0;
      _this4.heap[5] = 0;
      _this4.heap[6] = 0;
      _this4.heap[7] = 0;
      _this4.heap[8] = 0;
      _this4.heap[9] = 0;
      _this4.heap[10] = 0;
      _this4.heap[11] = noncelen >>> 29;
      _this4.heap[12] = noncelen >>> 21 & 255;
      _this4.heap[13] = noncelen >>> 13 & 255;
      _this4.heap[14] = noncelen >>> 5 & 255;
      _this4.heap[15] = noncelen << 3 & 255;

      _this4.asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA, 16);

      _this4.asm.get_iv(AES_asm.HEAP_DATA);

      _this4.asm.set_iv(0, 0, 0, 0);

      noncebuf.set(_this4.heap.subarray(0, 16));
    } else {
      noncebuf.set(nonce);
      noncebuf[15] = 1;
    }

    var nonceview = new DataView(noncebuf.buffer);
    _this4.gamma0 = nonceview.getUint32(12);

    _this4.asm.set_nonce(nonceview.getUint32(0), nonceview.getUint32(4), nonceview.getUint32(8), 0);

    _this4.asm.set_mask(0, 0, 0, 0xffffffff); // Associated data


    if (adata !== undefined) {
      if (adata.length > _AES_GCM_data_maxLength) throw new IllegalArgumentError('illegal adata length');

      if (adata.length) {
        _this4.adata = adata;

        _this4._gcm_mac_process(adata);
      } else {
        _this4.adata = undefined;
      }
    } else {
      _this4.adata = undefined;
    } // Counter


    if (_this4.counter < 1 || _this4.counter > 0xffffffff) throw new RangeError('counter must be a positive 32-bit integer');

    _this4.asm.set_counter(0, 0, 0, _this4.gamma0 + _this4.counter | 0);

    return _this4;
  }

  _createClass(AES_GCM, [{
    key: "encrypt",
    value: function encrypt(data) {
      return this.AES_GCM_encrypt(data);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data) {
      return this.AES_GCM_decrypt(data);
    }
  }, {
    key: "AES_GCM_Encrypt_process",
    value: function AES_GCM_Encrypt_process(data) {
      var dpos = 0;
      var dlen = data.length || 0;
      var asm = this.asm;
      var heap = this.heap;
      var counter = this.counter;
      var pos = this.pos;
      var len = this.len;
      var rpos = 0;
      var rlen = len + dlen & -16;
      var wlen = 0;
      if ((counter - 1 << 4) + len + dlen > _AES_GCM_data_maxLength) throw new RangeError('counter overflow');
      var result = new Uint8Array(rlen);

      while (dlen > 0) {
        wlen = _heap_write(heap, pos + len, data, dpos, dlen);
        len += wlen;
        dpos += wlen;
        dlen -= wlen;
        wlen = asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA + pos, len);
        wlen = asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA + pos, wlen);
        if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);
        counter += wlen >>> 4;
        rpos += wlen;

        if (wlen < len) {
          pos += wlen;
          len -= wlen;
        } else {
          pos = 0;
          len = 0;
        }
      }

      this.counter = counter;
      this.pos = pos;
      this.len = len;
      return result;
    }
  }, {
    key: "AES_GCM_Encrypt_finish",
    value: function AES_GCM_Encrypt_finish() {
      var asm = this.asm;
      var heap = this.heap;
      var counter = this.counter;
      var tagSize = this.tagSize;
      var adata = this.adata;
      var pos = this.pos;
      var len = this.len;
      var result = new Uint8Array(len + tagSize);
      asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA + pos, len + 15 & -16);
      if (len) result.set(heap.subarray(pos, pos + len));
      var i = len;

      for (; i & 15; i++) {
        heap[pos + i] = 0;
      }

      asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA + pos, i);
      var alen = adata !== undefined ? adata.length : 0;
      var clen = (counter - 1 << 4) + len;
      heap[0] = 0;
      heap[1] = 0;
      heap[2] = 0;
      heap[3] = alen >>> 29;
      heap[4] = alen >>> 21;
      heap[5] = alen >>> 13 & 255;
      heap[6] = alen >>> 5 & 255;
      heap[7] = alen << 3 & 255;
      heap[8] = heap[9] = heap[10] = 0;
      heap[11] = clen >>> 29;
      heap[12] = clen >>> 21 & 255;
      heap[13] = clen >>> 13 & 255;
      heap[14] = clen >>> 5 & 255;
      heap[15] = clen << 3 & 255;
      asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA, 16);
      asm.get_iv(AES_asm.HEAP_DATA);
      asm.set_counter(0, 0, 0, this.gamma0);
      asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA, 16);
      result.set(heap.subarray(0, tagSize), len);
      this.counter = 1;
      this.pos = 0;
      this.len = 0;
      return result;
    }
  }, {
    key: "AES_GCM_Decrypt_process",
    value: function AES_GCM_Decrypt_process(data) {
      var dpos = 0;
      var dlen = data.length || 0;
      var asm = this.asm;
      var heap = this.heap;
      var counter = this.counter;
      var tagSize = this.tagSize;
      var pos = this.pos;
      var len = this.len;
      var rpos = 0;
      var rlen = len + dlen > tagSize ? len + dlen - tagSize & -16 : 0;
      var tlen = len + dlen - rlen;
      var wlen = 0;
      if ((counter - 1 << 4) + len + dlen > _AES_GCM_data_maxLength) throw new RangeError('counter overflow');
      var result = new Uint8Array(rlen);

      while (dlen > tlen) {
        wlen = _heap_write(heap, pos + len, data, dpos, dlen - tlen);
        len += wlen;
        dpos += wlen;
        dlen -= wlen;
        wlen = asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA + pos, wlen);
        wlen = asm.cipher(AES_asm.DEC.CTR, AES_asm.HEAP_DATA + pos, wlen);
        if (wlen) result.set(heap.subarray(pos, pos + wlen), rpos);
        counter += wlen >>> 4;
        rpos += wlen;
        pos = 0;
        len = 0;
      }

      if (dlen > 0) {
        len += _heap_write(heap, 0, data, dpos, dlen);
      }

      this.counter = counter;
      this.pos = pos;
      this.len = len;
      return result;
    }
  }, {
    key: "AES_GCM_Decrypt_finish",
    value: function AES_GCM_Decrypt_finish() {
      var asm = this.asm;
      var heap = this.heap;
      var tagSize = this.tagSize;
      var adata = this.adata;
      var counter = this.counter;
      var pos = this.pos;
      var len = this.len;
      var rlen = len - tagSize;
      if (len < tagSize) throw new IllegalStateError('authentication tag not found');
      var result = new Uint8Array(rlen);
      var atag = new Uint8Array(heap.subarray(pos + rlen, pos + len));
      var i = rlen;

      for (; i & 15; i++) {
        heap[pos + i] = 0;
      }

      asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA + pos, i);
      asm.cipher(AES_asm.DEC.CTR, AES_asm.HEAP_DATA + pos, i);
      if (rlen) result.set(heap.subarray(pos, pos + rlen));
      var alen = adata !== undefined ? adata.length : 0;
      var clen = (counter - 1 << 4) + len - tagSize;
      heap[0] = 0;
      heap[1] = 0;
      heap[2] = 0;
      heap[3] = alen >>> 29;
      heap[4] = alen >>> 21;
      heap[5] = alen >>> 13 & 255;
      heap[6] = alen >>> 5 & 255;
      heap[7] = alen << 3 & 255;
      heap[8] = heap[9] = heap[10] = 0;
      heap[11] = clen >>> 29;
      heap[12] = clen >>> 21 & 255;
      heap[13] = clen >>> 13 & 255;
      heap[14] = clen >>> 5 & 255;
      heap[15] = clen << 3 & 255;
      asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA, 16);
      asm.get_iv(AES_asm.HEAP_DATA);
      asm.set_counter(0, 0, 0, this.gamma0);
      asm.cipher(AES_asm.ENC.CTR, AES_asm.HEAP_DATA, 16);
      var acheck = 0;

      for (var _i2 = 0; _i2 < tagSize; ++_i2) {
        acheck |= atag[_i2] ^ heap[_i2];
      }

      if (acheck) throw new SecurityError('data integrity check failed');
      this.counter = 1;
      this.pos = 0;
      this.len = 0;
      return result;
    }
  }, {
    key: "AES_GCM_decrypt",
    value: function AES_GCM_decrypt(data) {
      var result1 = this.AES_GCM_Decrypt_process(data);
      var result2 = this.AES_GCM_Decrypt_finish();
      var result = new Uint8Array(result1.length + result2.length);
      if (result1.length) result.set(result1);
      if (result2.length) result.set(result2, result1.length);
      return result;
    }
  }, {
    key: "AES_GCM_encrypt",
    value: function AES_GCM_encrypt(data) {
      var result1 = this.AES_GCM_Encrypt_process(data);
      var result2 = this.AES_GCM_Encrypt_finish();
      var result = new Uint8Array(result1.length + result2.length);
      if (result1.length) result.set(result1);
      if (result2.length) result.set(result2, result1.length);
      return result;
    }
  }, {
    key: "_gcm_mac_process",
    value: function _gcm_mac_process(data) {
      var heap = this.heap;
      var asm = this.asm;
      var dpos = 0;
      var dlen = data.length || 0;
      var wlen = 0;

      while (dlen > 0) {
        wlen = _heap_write(heap, 0, data, dpos, dlen);
        dpos += wlen;
        dlen -= wlen;

        while (wlen & 15) {
          heap[wlen++] = 0;
        }

        asm.mac(AES_asm.MAC.GCM, AES_asm.HEAP_DATA, wlen);
      }
    }
  }], [{
    key: "encrypt",
    value: function encrypt(cleartext, key, nonce, adata, tagsize) {
      return new AES_GCM(key, nonce, adata, tagsize).encrypt(cleartext);
    }
  }, {
    key: "decrypt",
    value: function decrypt(ciphertext, key, nonce, adata, tagsize) {
      return new AES_GCM(key, nonce, adata, tagsize).decrypt(ciphertext);
    }
  }]);

  return AES_GCM;
}(AES);

var AES_OFB =
/*#__PURE__*/
function (_AES7) {
  _inherits(AES_OFB, _AES7);

  _createClass(AES_OFB, null, [{
    key: "encrypt",
    value: function encrypt(data, key, iv) {
      return new AES_OFB(key, iv).encrypt(data);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data, key, iv) {
      return new AES_OFB(key, iv).decrypt(data);
    }
  }]);

  function AES_OFB(key, iv) {
    _classCallCheck(this, AES_OFB);

    return _possibleConstructorReturn(this, _getPrototypeOf(AES_OFB).call(this, key, iv, false, 'OFB'));
  }

  _createClass(AES_OFB, [{
    key: "encrypt",
    value: function encrypt(data) {
      var r1 = this.AES_Encrypt_process(data);
      var r2 = this.AES_Encrypt_finish();
      return joinBytes(r1, r2);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data) {
      var r1 = this.AES_Decrypt_process(data);
      var r2 = this.AES_Decrypt_finish();
      return joinBytes(r1, r2);
    }
  }]);

  return AES_OFB;
}(AES);
/**
 * Integers are represented as little endian array of 32-bit limbs.
 * Limbs number is a power of 2 and a multiple of 8 (256 bits).
 * Negative values use two's complement representation.
 */


var bigint_asm = function bigint_asm(stdlib, foreign, buffer) {
  "use asm";

  var SP = 0;
  var HEAP32 = new stdlib.Uint32Array(buffer);
  var imul = stdlib.Math.imul;
  /**
   * Simple stack memory allocator
   *
   * Methods:
   *  sreset
   *  salloc
   *  sfree
   */

  function sreset(p) {
    p = p | 0;
    SP = p = p + 31 & -32;
    return p | 0;
  }

  function salloc(l) {
    l = l | 0;
    var p = 0;
    p = SP;
    SP = p + (l + 31 & -32) | 0;
    return p | 0;
  }

  function sfree(l) {
    l = l | 0;
    SP = SP - (l + 31 & -32) | 0;
  }
  /**
   * Utility functions:
   *  cp
   *  z
   */


  function cp(l, A, B) {
    l = l | 0;
    A = A | 0;
    B = B | 0;
    var i = 0;

    if ((A | 0) > (B | 0)) {
      for (; (i | 0) < (l | 0); i = i + 4 | 0) {
        HEAP32[B + i >> 2] = HEAP32[A + i >> 2];
      }
    } else {
      for (i = l - 4 | 0; (i | 0) >= 0; i = i - 4 | 0) {
        HEAP32[B + i >> 2] = HEAP32[A + i >> 2];
      }
    }
  }

  function z(l, z, A) {
    l = l | 0;
    z = z | 0;
    A = A | 0;
    var i = 0;

    for (; (i | 0) < (l | 0); i = i + 4 | 0) {
      HEAP32[A + i >> 2] = z;
    }
  }
  /**
   * Negate the argument
   *
   * Perform two's complement transformation:
   *
   *  -A = ~A + 1
   *
   * @param A offset of the argment being negated, 32-byte aligned
   * @param lA length of the argument, multiple of 32
   *
   * @param R offset where to place the result to, 32-byte aligned
   * @param lR length to truncate the result to, multiple of 32
   */


  function neg(A, lA, R, lR) {
    A = A | 0;
    lA = lA | 0;
    R = R | 0;
    lR = lR | 0;
    var a = 0,
        c = 0,
        t = 0,
        r = 0,
        i = 0;
    if ((lR | 0) <= 0) lR = lA;
    if ((lR | 0) < (lA | 0)) lA = lR;
    c = 1;

    for (; (i | 0) < (lA | 0); i = i + 4 | 0) {
      a = ~HEAP32[A + i >> 2];
      t = (a & 0xffff) + c | 0;
      r = (a >>> 16) + (t >>> 16) | 0;
      HEAP32[R + i >> 2] = r << 16 | t & 0xffff;
      c = r >>> 16;
    }

    for (; (i | 0) < (lR | 0); i = i + 4 | 0) {
      HEAP32[R + i >> 2] = c - 1 | 0;
    }

    return c | 0;
  }

  function cmp(A, lA, B, lB) {
    A = A | 0;
    lA = lA | 0;
    B = B | 0;
    lB = lB | 0;
    var a = 0,
        b = 0,
        i = 0;

    if ((lA | 0) > (lB | 0)) {
      for (i = lA - 4 | 0; (i | 0) >= (lB | 0); i = i - 4 | 0) {
        if (HEAP32[A + i >> 2] | 0) return 1;
      }
    } else {
      for (i = lB - 4 | 0; (i | 0) >= (lA | 0); i = i - 4 | 0) {
        if (HEAP32[B + i >> 2] | 0) return -1;
      }
    }

    for (; (i | 0) >= 0; i = i - 4 | 0) {
      a = HEAP32[A + i >> 2] | 0, b = HEAP32[B + i >> 2] | 0;
      if (a >>> 0 < b >>> 0) return -1;
      if (a >>> 0 > b >>> 0) return 1;
    }

    return 0;
  }
  /**
   * Test the argument
   *
   * Same as `cmp` with zero.
   */


  function tst(A, lA) {
    A = A | 0;
    lA = lA | 0;
    var i = 0;

    for (i = lA - 4 | 0; (i | 0) >= 0; i = i - 4 | 0) {
      if (HEAP32[A + i >> 2] | 0) return i + 4 | 0;
    }

    return 0;
  }
  /**
   * Conventional addition
   *
   * @param A offset of the first argument, 32-byte aligned
   * @param lA length of the first argument, multiple of 32
   *
   * @param B offset of the second argument, 32-bit aligned
   * @param lB length of the second argument, multiple of 32
   *
   * @param R offset where to place the result to, 32-byte aligned
   * @param lR length to truncate the result to, multiple of 32
   */


  function add(A, lA, B, lB, R, lR) {
    A = A | 0;
    lA = lA | 0;
    B = B | 0;
    lB = lB | 0;
    R = R | 0;
    lR = lR | 0;
    var a = 0,
        b = 0,
        c = 0,
        t = 0,
        r = 0,
        i = 0;

    if ((lA | 0) < (lB | 0)) {
      t = A, A = B, B = t;
      t = lA, lA = lB, lB = t;
    }

    if ((lR | 0) <= 0) lR = lA + 4 | 0;
    if ((lR | 0) < (lB | 0)) lA = lB = lR;

    for (; (i | 0) < (lB | 0); i = i + 4 | 0) {
      a = HEAP32[A + i >> 2] | 0;
      b = HEAP32[B + i >> 2] | 0;
      t = ((a & 0xffff) + (b & 0xffff) | 0) + c | 0;
      r = ((a >>> 16) + (b >>> 16) | 0) + (t >>> 16) | 0;
      HEAP32[R + i >> 2] = t & 0xffff | r << 16;
      c = r >>> 16;
    }

    for (; (i | 0) < (lA | 0); i = i + 4 | 0) {
      a = HEAP32[A + i >> 2] | 0;
      t = (a & 0xffff) + c | 0;
      r = (a >>> 16) + (t >>> 16) | 0;
      HEAP32[R + i >> 2] = t & 0xffff | r << 16;
      c = r >>> 16;
    }

    for (; (i | 0) < (lR | 0); i = i + 4 | 0) {
      HEAP32[R + i >> 2] = c | 0;
      c = 0;
    }

    return c | 0;
  }
  /**
    * Conventional subtraction
    *
    * @param A offset of the first argument, 32-byte aligned
    * @param lA length of the first argument, multiple of 32
    *
    * @param B offset of the second argument, 32-bit aligned
    * @param lB length of the second argument, multiple of 32
    *
    * @param R offset where to place the result to, 32-byte aligned
    * @param lR length to truncate the result to, multiple of 32
    */


  function sub(A, lA, B, lB, R, lR) {
    A = A | 0;
    lA = lA | 0;
    B = B | 0;
    lB = lB | 0;
    R = R | 0;
    lR = lR | 0;
    var a = 0,
        b = 0,
        c = 0,
        t = 0,
        r = 0,
        i = 0;
    if ((lR | 0) <= 0) lR = (lA | 0) > (lB | 0) ? lA + 4 | 0 : lB + 4 | 0;
    if ((lR | 0) < (lA | 0)) lA = lR;
    if ((lR | 0) < (lB | 0)) lB = lR;

    if ((lA | 0) < (lB | 0)) {
      for (; (i | 0) < (lA | 0); i = i + 4 | 0) {
        a = HEAP32[A + i >> 2] | 0;
        b = HEAP32[B + i >> 2] | 0;
        t = ((a & 0xffff) - (b & 0xffff) | 0) + c | 0;
        r = ((a >>> 16) - (b >>> 16) | 0) + (t >> 16) | 0;
        HEAP32[R + i >> 2] = t & 0xffff | r << 16;
        c = r >> 16;
      }

      for (; (i | 0) < (lB | 0); i = i + 4 | 0) {
        b = HEAP32[B + i >> 2] | 0;
        t = c - (b & 0xffff) | 0;
        r = (t >> 16) - (b >>> 16) | 0;
        HEAP32[R + i >> 2] = t & 0xffff | r << 16;
        c = r >> 16;
      }
    } else {
      for (; (i | 0) < (lB | 0); i = i + 4 | 0) {
        a = HEAP32[A + i >> 2] | 0;
        b = HEAP32[B + i >> 2] | 0;
        t = ((a & 0xffff) - (b & 0xffff) | 0) + c | 0;
        r = ((a >>> 16) - (b >>> 16) | 0) + (t >> 16) | 0;
        HEAP32[R + i >> 2] = t & 0xffff | r << 16;
        c = r >> 16;
      }

      for (; (i | 0) < (lA | 0); i = i + 4 | 0) {
        a = HEAP32[A + i >> 2] | 0;
        t = (a & 0xffff) + c | 0;
        r = (a >>> 16) + (t >> 16) | 0;
        HEAP32[R + i >> 2] = t & 0xffff | r << 16;
        c = r >> 16;
      }
    }

    for (; (i | 0) < (lR | 0); i = i + 4 | 0) {
      HEAP32[R + i >> 2] = c | 0;
    }

    return c | 0;
  }
  /**
   * Conventional multiplication
   *
   * TODO implement Karatsuba algorithm for large multiplicands
   *
   * @param A offset of the first argument, 32-byte aligned
   * @param lA length of the first argument, multiple of 32
   *
   * @param B offset of the second argument, 32-byte aligned
   * @param lB length of the second argument, multiple of 32
   *
   * @param R offset where to place the result to, 32-byte aligned
   * @param lR length to truncate the result to, multiple of 32
   */


  function mul(A, lA, B, lB, R, lR) {
    A = A | 0;
    lA = lA | 0;
    B = B | 0;
    lB = lB | 0;
    R = R | 0;
    lR = lR | 0;
    var al0 = 0,
        al1 = 0,
        al2 = 0,
        al3 = 0,
        al4 = 0,
        al5 = 0,
        al6 = 0,
        al7 = 0,
        ah0 = 0,
        ah1 = 0,
        ah2 = 0,
        ah3 = 0,
        ah4 = 0,
        ah5 = 0,
        ah6 = 0,
        ah7 = 0,
        bl0 = 0,
        bl1 = 0,
        bl2 = 0,
        bl3 = 0,
        bl4 = 0,
        bl5 = 0,
        bl6 = 0,
        bl7 = 0,
        bh0 = 0,
        bh1 = 0,
        bh2 = 0,
        bh3 = 0,
        bh4 = 0,
        bh5 = 0,
        bh6 = 0,
        bh7 = 0,
        r0 = 0,
        r1 = 0,
        r2 = 0,
        r3 = 0,
        r4 = 0,
        r5 = 0,
        r6 = 0,
        r7 = 0,
        r8 = 0,
        r9 = 0,
        r10 = 0,
        r11 = 0,
        r12 = 0,
        r13 = 0,
        r14 = 0,
        r15 = 0,
        u = 0,
        v = 0,
        w = 0,
        m = 0,
        i = 0,
        Ai = 0,
        j = 0,
        Bj = 0,
        Rk = 0;

    if ((lA | 0) > (lB | 0)) {
      u = A, v = lA;
      A = B, lA = lB;
      B = u, lB = v;
    }

    m = lA + lB | 0;
    if ((lR | 0) > (m | 0) | (lR | 0) <= 0) lR = m;
    if ((lR | 0) < (lA | 0)) lA = lR;
    if ((lR | 0) < (lB | 0)) lB = lR;

    for (; (i | 0) < (lA | 0); i = i + 32 | 0) {
      Ai = A + i | 0;
      ah0 = HEAP32[(Ai | 0) >> 2] | 0, ah1 = HEAP32[(Ai | 4) >> 2] | 0, ah2 = HEAP32[(Ai | 8) >> 2] | 0, ah3 = HEAP32[(Ai | 12) >> 2] | 0, ah4 = HEAP32[(Ai | 16) >> 2] | 0, ah5 = HEAP32[(Ai | 20) >> 2] | 0, ah6 = HEAP32[(Ai | 24) >> 2] | 0, ah7 = HEAP32[(Ai | 28) >> 2] | 0, al0 = ah0 & 0xffff, al1 = ah1 & 0xffff, al2 = ah2 & 0xffff, al3 = ah3 & 0xffff, al4 = ah4 & 0xffff, al5 = ah5 & 0xffff, al6 = ah6 & 0xffff, al7 = ah7 & 0xffff, ah0 = ah0 >>> 16, ah1 = ah1 >>> 16, ah2 = ah2 >>> 16, ah3 = ah3 >>> 16, ah4 = ah4 >>> 16, ah5 = ah5 >>> 16, ah6 = ah6 >>> 16, ah7 = ah7 >>> 16;
      r8 = r9 = r10 = r11 = r12 = r13 = r14 = r15 = 0;

      for (j = 0; (j | 0) < (lB | 0); j = j + 32 | 0) {
        Bj = B + j | 0;
        Rk = R + (i + j | 0) | 0;
        bh0 = HEAP32[(Bj | 0) >> 2] | 0, bh1 = HEAP32[(Bj | 4) >> 2] | 0, bh2 = HEAP32[(Bj | 8) >> 2] | 0, bh3 = HEAP32[(Bj | 12) >> 2] | 0, bh4 = HEAP32[(Bj | 16) >> 2] | 0, bh5 = HEAP32[(Bj | 20) >> 2] | 0, bh6 = HEAP32[(Bj | 24) >> 2] | 0, bh7 = HEAP32[(Bj | 28) >> 2] | 0, bl0 = bh0 & 0xffff, bl1 = bh1 & 0xffff, bl2 = bh2 & 0xffff, bl3 = bh3 & 0xffff, bl4 = bh4 & 0xffff, bl5 = bh5 & 0xffff, bl6 = bh6 & 0xffff, bl7 = bh7 & 0xffff, bh0 = bh0 >>> 16, bh1 = bh1 >>> 16, bh2 = bh2 >>> 16, bh3 = bh3 >>> 16, bh4 = bh4 >>> 16, bh5 = bh5 >>> 16, bh6 = bh6 >>> 16, bh7 = bh7 >>> 16;
        r0 = HEAP32[(Rk | 0) >> 2] | 0, r1 = HEAP32[(Rk | 4) >> 2] | 0, r2 = HEAP32[(Rk | 8) >> 2] | 0, r3 = HEAP32[(Rk | 12) >> 2] | 0, r4 = HEAP32[(Rk | 16) >> 2] | 0, r5 = HEAP32[(Rk | 20) >> 2] | 0, r6 = HEAP32[(Rk | 24) >> 2] | 0, r7 = HEAP32[(Rk | 28) >> 2] | 0;
        u = ((imul(al0, bl0) | 0) + (r8 & 0xffff) | 0) + (r0 & 0xffff) | 0;
        v = ((imul(ah0, bl0) | 0) + (r8 >>> 16) | 0) + (r0 >>> 16) | 0;
        w = ((imul(al0, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah0, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r0 = w << 16 | u & 0xffff;
        u = ((imul(al0, bl1) | 0) + (m & 0xffff) | 0) + (r1 & 0xffff) | 0;
        v = ((imul(ah0, bl1) | 0) + (m >>> 16) | 0) + (r1 >>> 16) | 0;
        w = ((imul(al0, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah0, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r1 = w << 16 | u & 0xffff;
        u = ((imul(al0, bl2) | 0) + (m & 0xffff) | 0) + (r2 & 0xffff) | 0;
        v = ((imul(ah0, bl2) | 0) + (m >>> 16) | 0) + (r2 >>> 16) | 0;
        w = ((imul(al0, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah0, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r2 = w << 16 | u & 0xffff;
        u = ((imul(al0, bl3) | 0) + (m & 0xffff) | 0) + (r3 & 0xffff) | 0;
        v = ((imul(ah0, bl3) | 0) + (m >>> 16) | 0) + (r3 >>> 16) | 0;
        w = ((imul(al0, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah0, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r3 = w << 16 | u & 0xffff;
        u = ((imul(al0, bl4) | 0) + (m & 0xffff) | 0) + (r4 & 0xffff) | 0;
        v = ((imul(ah0, bl4) | 0) + (m >>> 16) | 0) + (r4 >>> 16) | 0;
        w = ((imul(al0, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah0, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r4 = w << 16 | u & 0xffff;
        u = ((imul(al0, bl5) | 0) + (m & 0xffff) | 0) + (r5 & 0xffff) | 0;
        v = ((imul(ah0, bl5) | 0) + (m >>> 16) | 0) + (r5 >>> 16) | 0;
        w = ((imul(al0, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah0, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r5 = w << 16 | u & 0xffff;
        u = ((imul(al0, bl6) | 0) + (m & 0xffff) | 0) + (r6 & 0xffff) | 0;
        v = ((imul(ah0, bl6) | 0) + (m >>> 16) | 0) + (r6 >>> 16) | 0;
        w = ((imul(al0, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah0, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r6 = w << 16 | u & 0xffff;
        u = ((imul(al0, bl7) | 0) + (m & 0xffff) | 0) + (r7 & 0xffff) | 0;
        v = ((imul(ah0, bl7) | 0) + (m >>> 16) | 0) + (r7 >>> 16) | 0;
        w = ((imul(al0, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah0, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r7 = w << 16 | u & 0xffff;
        r8 = m;
        u = ((imul(al1, bl0) | 0) + (r9 & 0xffff) | 0) + (r1 & 0xffff) | 0;
        v = ((imul(ah1, bl0) | 0) + (r9 >>> 16) | 0) + (r1 >>> 16) | 0;
        w = ((imul(al1, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah1, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r1 = w << 16 | u & 0xffff;
        u = ((imul(al1, bl1) | 0) + (m & 0xffff) | 0) + (r2 & 0xffff) | 0;
        v = ((imul(ah1, bl1) | 0) + (m >>> 16) | 0) + (r2 >>> 16) | 0;
        w = ((imul(al1, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah1, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r2 = w << 16 | u & 0xffff;
        u = ((imul(al1, bl2) | 0) + (m & 0xffff) | 0) + (r3 & 0xffff) | 0;
        v = ((imul(ah1, bl2) | 0) + (m >>> 16) | 0) + (r3 >>> 16) | 0;
        w = ((imul(al1, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah1, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r3 = w << 16 | u & 0xffff;
        u = ((imul(al1, bl3) | 0) + (m & 0xffff) | 0) + (r4 & 0xffff) | 0;
        v = ((imul(ah1, bl3) | 0) + (m >>> 16) | 0) + (r4 >>> 16) | 0;
        w = ((imul(al1, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah1, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r4 = w << 16 | u & 0xffff;
        u = ((imul(al1, bl4) | 0) + (m & 0xffff) | 0) + (r5 & 0xffff) | 0;
        v = ((imul(ah1, bl4) | 0) + (m >>> 16) | 0) + (r5 >>> 16) | 0;
        w = ((imul(al1, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah1, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r5 = w << 16 | u & 0xffff;
        u = ((imul(al1, bl5) | 0) + (m & 0xffff) | 0) + (r6 & 0xffff) | 0;
        v = ((imul(ah1, bl5) | 0) + (m >>> 16) | 0) + (r6 >>> 16) | 0;
        w = ((imul(al1, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah1, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r6 = w << 16 | u & 0xffff;
        u = ((imul(al1, bl6) | 0) + (m & 0xffff) | 0) + (r7 & 0xffff) | 0;
        v = ((imul(ah1, bl6) | 0) + (m >>> 16) | 0) + (r7 >>> 16) | 0;
        w = ((imul(al1, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah1, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r7 = w << 16 | u & 0xffff;
        u = ((imul(al1, bl7) | 0) + (m & 0xffff) | 0) + (r8 & 0xffff) | 0;
        v = ((imul(ah1, bl7) | 0) + (m >>> 16) | 0) + (r8 >>> 16) | 0;
        w = ((imul(al1, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah1, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r8 = w << 16 | u & 0xffff;
        r9 = m;
        u = ((imul(al2, bl0) | 0) + (r10 & 0xffff) | 0) + (r2 & 0xffff) | 0;
        v = ((imul(ah2, bl0) | 0) + (r10 >>> 16) | 0) + (r2 >>> 16) | 0;
        w = ((imul(al2, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah2, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r2 = w << 16 | u & 0xffff;
        u = ((imul(al2, bl1) | 0) + (m & 0xffff) | 0) + (r3 & 0xffff) | 0;
        v = ((imul(ah2, bl1) | 0) + (m >>> 16) | 0) + (r3 >>> 16) | 0;
        w = ((imul(al2, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah2, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r3 = w << 16 | u & 0xffff;
        u = ((imul(al2, bl2) | 0) + (m & 0xffff) | 0) + (r4 & 0xffff) | 0;
        v = ((imul(ah2, bl2) | 0) + (m >>> 16) | 0) + (r4 >>> 16) | 0;
        w = ((imul(al2, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah2, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r4 = w << 16 | u & 0xffff;
        u = ((imul(al2, bl3) | 0) + (m & 0xffff) | 0) + (r5 & 0xffff) | 0;
        v = ((imul(ah2, bl3) | 0) + (m >>> 16) | 0) + (r5 >>> 16) | 0;
        w = ((imul(al2, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah2, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r5 = w << 16 | u & 0xffff;
        u = ((imul(al2, bl4) | 0) + (m & 0xffff) | 0) + (r6 & 0xffff) | 0;
        v = ((imul(ah2, bl4) | 0) + (m >>> 16) | 0) + (r6 >>> 16) | 0;
        w = ((imul(al2, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah2, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r6 = w << 16 | u & 0xffff;
        u = ((imul(al2, bl5) | 0) + (m & 0xffff) | 0) + (r7 & 0xffff) | 0;
        v = ((imul(ah2, bl5) | 0) + (m >>> 16) | 0) + (r7 >>> 16) | 0;
        w = ((imul(al2, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah2, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r7 = w << 16 | u & 0xffff;
        u = ((imul(al2, bl6) | 0) + (m & 0xffff) | 0) + (r8 & 0xffff) | 0;
        v = ((imul(ah2, bl6) | 0) + (m >>> 16) | 0) + (r8 >>> 16) | 0;
        w = ((imul(al2, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah2, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r8 = w << 16 | u & 0xffff;
        u = ((imul(al2, bl7) | 0) + (m & 0xffff) | 0) + (r9 & 0xffff) | 0;
        v = ((imul(ah2, bl7) | 0) + (m >>> 16) | 0) + (r9 >>> 16) | 0;
        w = ((imul(al2, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah2, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r9 = w << 16 | u & 0xffff;
        r10 = m;
        u = ((imul(al3, bl0) | 0) + (r11 & 0xffff) | 0) + (r3 & 0xffff) | 0;
        v = ((imul(ah3, bl0) | 0) + (r11 >>> 16) | 0) + (r3 >>> 16) | 0;
        w = ((imul(al3, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah3, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r3 = w << 16 | u & 0xffff;
        u = ((imul(al3, bl1) | 0) + (m & 0xffff) | 0) + (r4 & 0xffff) | 0;
        v = ((imul(ah3, bl1) | 0) + (m >>> 16) | 0) + (r4 >>> 16) | 0;
        w = ((imul(al3, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah3, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r4 = w << 16 | u & 0xffff;
        u = ((imul(al3, bl2) | 0) + (m & 0xffff) | 0) + (r5 & 0xffff) | 0;
        v = ((imul(ah3, bl2) | 0) + (m >>> 16) | 0) + (r5 >>> 16) | 0;
        w = ((imul(al3, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah3, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r5 = w << 16 | u & 0xffff;
        u = ((imul(al3, bl3) | 0) + (m & 0xffff) | 0) + (r6 & 0xffff) | 0;
        v = ((imul(ah3, bl3) | 0) + (m >>> 16) | 0) + (r6 >>> 16) | 0;
        w = ((imul(al3, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah3, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r6 = w << 16 | u & 0xffff;
        u = ((imul(al3, bl4) | 0) + (m & 0xffff) | 0) + (r7 & 0xffff) | 0;
        v = ((imul(ah3, bl4) | 0) + (m >>> 16) | 0) + (r7 >>> 16) | 0;
        w = ((imul(al3, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah3, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r7 = w << 16 | u & 0xffff;
        u = ((imul(al3, bl5) | 0) + (m & 0xffff) | 0) + (r8 & 0xffff) | 0;
        v = ((imul(ah3, bl5) | 0) + (m >>> 16) | 0) + (r8 >>> 16) | 0;
        w = ((imul(al3, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah3, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r8 = w << 16 | u & 0xffff;
        u = ((imul(al3, bl6) | 0) + (m & 0xffff) | 0) + (r9 & 0xffff) | 0;
        v = ((imul(ah3, bl6) | 0) + (m >>> 16) | 0) + (r9 >>> 16) | 0;
        w = ((imul(al3, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah3, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r9 = w << 16 | u & 0xffff;
        u = ((imul(al3, bl7) | 0) + (m & 0xffff) | 0) + (r10 & 0xffff) | 0;
        v = ((imul(ah3, bl7) | 0) + (m >>> 16) | 0) + (r10 >>> 16) | 0;
        w = ((imul(al3, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah3, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r10 = w << 16 | u & 0xffff;
        r11 = m;
        u = ((imul(al4, bl0) | 0) + (r12 & 0xffff) | 0) + (r4 & 0xffff) | 0;
        v = ((imul(ah4, bl0) | 0) + (r12 >>> 16) | 0) + (r4 >>> 16) | 0;
        w = ((imul(al4, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah4, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r4 = w << 16 | u & 0xffff;
        u = ((imul(al4, bl1) | 0) + (m & 0xffff) | 0) + (r5 & 0xffff) | 0;
        v = ((imul(ah4, bl1) | 0) + (m >>> 16) | 0) + (r5 >>> 16) | 0;
        w = ((imul(al4, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah4, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r5 = w << 16 | u & 0xffff;
        u = ((imul(al4, bl2) | 0) + (m & 0xffff) | 0) + (r6 & 0xffff) | 0;
        v = ((imul(ah4, bl2) | 0) + (m >>> 16) | 0) + (r6 >>> 16) | 0;
        w = ((imul(al4, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah4, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r6 = w << 16 | u & 0xffff;
        u = ((imul(al4, bl3) | 0) + (m & 0xffff) | 0) + (r7 & 0xffff) | 0;
        v = ((imul(ah4, bl3) | 0) + (m >>> 16) | 0) + (r7 >>> 16) | 0;
        w = ((imul(al4, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah4, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r7 = w << 16 | u & 0xffff;
        u = ((imul(al4, bl4) | 0) + (m & 0xffff) | 0) + (r8 & 0xffff) | 0;
        v = ((imul(ah4, bl4) | 0) + (m >>> 16) | 0) + (r8 >>> 16) | 0;
        w = ((imul(al4, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah4, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r8 = w << 16 | u & 0xffff;
        u = ((imul(al4, bl5) | 0) + (m & 0xffff) | 0) + (r9 & 0xffff) | 0;
        v = ((imul(ah4, bl5) | 0) + (m >>> 16) | 0) + (r9 >>> 16) | 0;
        w = ((imul(al4, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah4, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r9 = w << 16 | u & 0xffff;
        u = ((imul(al4, bl6) | 0) + (m & 0xffff) | 0) + (r10 & 0xffff) | 0;
        v = ((imul(ah4, bl6) | 0) + (m >>> 16) | 0) + (r10 >>> 16) | 0;
        w = ((imul(al4, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah4, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r10 = w << 16 | u & 0xffff;
        u = ((imul(al4, bl7) | 0) + (m & 0xffff) | 0) + (r11 & 0xffff) | 0;
        v = ((imul(ah4, bl7) | 0) + (m >>> 16) | 0) + (r11 >>> 16) | 0;
        w = ((imul(al4, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah4, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r11 = w << 16 | u & 0xffff;
        r12 = m;
        u = ((imul(al5, bl0) | 0) + (r13 & 0xffff) | 0) + (r5 & 0xffff) | 0;
        v = ((imul(ah5, bl0) | 0) + (r13 >>> 16) | 0) + (r5 >>> 16) | 0;
        w = ((imul(al5, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah5, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r5 = w << 16 | u & 0xffff;
        u = ((imul(al5, bl1) | 0) + (m & 0xffff) | 0) + (r6 & 0xffff) | 0;
        v = ((imul(ah5, bl1) | 0) + (m >>> 16) | 0) + (r6 >>> 16) | 0;
        w = ((imul(al5, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah5, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r6 = w << 16 | u & 0xffff;
        u = ((imul(al5, bl2) | 0) + (m & 0xffff) | 0) + (r7 & 0xffff) | 0;
        v = ((imul(ah5, bl2) | 0) + (m >>> 16) | 0) + (r7 >>> 16) | 0;
        w = ((imul(al5, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah5, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r7 = w << 16 | u & 0xffff;
        u = ((imul(al5, bl3) | 0) + (m & 0xffff) | 0) + (r8 & 0xffff) | 0;
        v = ((imul(ah5, bl3) | 0) + (m >>> 16) | 0) + (r8 >>> 16) | 0;
        w = ((imul(al5, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah5, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r8 = w << 16 | u & 0xffff;
        u = ((imul(al5, bl4) | 0) + (m & 0xffff) | 0) + (r9 & 0xffff) | 0;
        v = ((imul(ah5, bl4) | 0) + (m >>> 16) | 0) + (r9 >>> 16) | 0;
        w = ((imul(al5, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah5, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r9 = w << 16 | u & 0xffff;
        u = ((imul(al5, bl5) | 0) + (m & 0xffff) | 0) + (r10 & 0xffff) | 0;
        v = ((imul(ah5, bl5) | 0) + (m >>> 16) | 0) + (r10 >>> 16) | 0;
        w = ((imul(al5, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah5, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r10 = w << 16 | u & 0xffff;
        u = ((imul(al5, bl6) | 0) + (m & 0xffff) | 0) + (r11 & 0xffff) | 0;
        v = ((imul(ah5, bl6) | 0) + (m >>> 16) | 0) + (r11 >>> 16) | 0;
        w = ((imul(al5, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah5, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r11 = w << 16 | u & 0xffff;
        u = ((imul(al5, bl7) | 0) + (m & 0xffff) | 0) + (r12 & 0xffff) | 0;
        v = ((imul(ah5, bl7) | 0) + (m >>> 16) | 0) + (r12 >>> 16) | 0;
        w = ((imul(al5, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah5, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r12 = w << 16 | u & 0xffff;
        r13 = m;
        u = ((imul(al6, bl0) | 0) + (r14 & 0xffff) | 0) + (r6 & 0xffff) | 0;
        v = ((imul(ah6, bl0) | 0) + (r14 >>> 16) | 0) + (r6 >>> 16) | 0;
        w = ((imul(al6, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah6, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r6 = w << 16 | u & 0xffff;
        u = ((imul(al6, bl1) | 0) + (m & 0xffff) | 0) + (r7 & 0xffff) | 0;
        v = ((imul(ah6, bl1) | 0) + (m >>> 16) | 0) + (r7 >>> 16) | 0;
        w = ((imul(al6, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah6, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r7 = w << 16 | u & 0xffff;
        u = ((imul(al6, bl2) | 0) + (m & 0xffff) | 0) + (r8 & 0xffff) | 0;
        v = ((imul(ah6, bl2) | 0) + (m >>> 16) | 0) + (r8 >>> 16) | 0;
        w = ((imul(al6, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah6, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r8 = w << 16 | u & 0xffff;
        u = ((imul(al6, bl3) | 0) + (m & 0xffff) | 0) + (r9 & 0xffff) | 0;
        v = ((imul(ah6, bl3) | 0) + (m >>> 16) | 0) + (r9 >>> 16) | 0;
        w = ((imul(al6, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah6, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r9 = w << 16 | u & 0xffff;
        u = ((imul(al6, bl4) | 0) + (m & 0xffff) | 0) + (r10 & 0xffff) | 0;
        v = ((imul(ah6, bl4) | 0) + (m >>> 16) | 0) + (r10 >>> 16) | 0;
        w = ((imul(al6, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah6, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r10 = w << 16 | u & 0xffff;
        u = ((imul(al6, bl5) | 0) + (m & 0xffff) | 0) + (r11 & 0xffff) | 0;
        v = ((imul(ah6, bl5) | 0) + (m >>> 16) | 0) + (r11 >>> 16) | 0;
        w = ((imul(al6, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah6, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r11 = w << 16 | u & 0xffff;
        u = ((imul(al6, bl6) | 0) + (m & 0xffff) | 0) + (r12 & 0xffff) | 0;
        v = ((imul(ah6, bl6) | 0) + (m >>> 16) | 0) + (r12 >>> 16) | 0;
        w = ((imul(al6, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah6, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r12 = w << 16 | u & 0xffff;
        u = ((imul(al6, bl7) | 0) + (m & 0xffff) | 0) + (r13 & 0xffff) | 0;
        v = ((imul(ah6, bl7) | 0) + (m >>> 16) | 0) + (r13 >>> 16) | 0;
        w = ((imul(al6, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah6, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r13 = w << 16 | u & 0xffff;
        r14 = m;
        u = ((imul(al7, bl0) | 0) + (r15 & 0xffff) | 0) + (r7 & 0xffff) | 0;
        v = ((imul(ah7, bl0) | 0) + (r15 >>> 16) | 0) + (r7 >>> 16) | 0;
        w = ((imul(al7, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah7, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r7 = w << 16 | u & 0xffff;
        u = ((imul(al7, bl1) | 0) + (m & 0xffff) | 0) + (r8 & 0xffff) | 0;
        v = ((imul(ah7, bl1) | 0) + (m >>> 16) | 0) + (r8 >>> 16) | 0;
        w = ((imul(al7, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah7, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r8 = w << 16 | u & 0xffff;
        u = ((imul(al7, bl2) | 0) + (m & 0xffff) | 0) + (r9 & 0xffff) | 0;
        v = ((imul(ah7, bl2) | 0) + (m >>> 16) | 0) + (r9 >>> 16) | 0;
        w = ((imul(al7, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah7, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r9 = w << 16 | u & 0xffff;
        u = ((imul(al7, bl3) | 0) + (m & 0xffff) | 0) + (r10 & 0xffff) | 0;
        v = ((imul(ah7, bl3) | 0) + (m >>> 16) | 0) + (r10 >>> 16) | 0;
        w = ((imul(al7, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah7, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r10 = w << 16 | u & 0xffff;
        u = ((imul(al7, bl4) | 0) + (m & 0xffff) | 0) + (r11 & 0xffff) | 0;
        v = ((imul(ah7, bl4) | 0) + (m >>> 16) | 0) + (r11 >>> 16) | 0;
        w = ((imul(al7, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah7, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r11 = w << 16 | u & 0xffff;
        u = ((imul(al7, bl5) | 0) + (m & 0xffff) | 0) + (r12 & 0xffff) | 0;
        v = ((imul(ah7, bl5) | 0) + (m >>> 16) | 0) + (r12 >>> 16) | 0;
        w = ((imul(al7, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah7, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r12 = w << 16 | u & 0xffff;
        u = ((imul(al7, bl6) | 0) + (m & 0xffff) | 0) + (r13 & 0xffff) | 0;
        v = ((imul(ah7, bl6) | 0) + (m >>> 16) | 0) + (r13 >>> 16) | 0;
        w = ((imul(al7, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah7, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r13 = w << 16 | u & 0xffff;
        u = ((imul(al7, bl7) | 0) + (m & 0xffff) | 0) + (r14 & 0xffff) | 0;
        v = ((imul(ah7, bl7) | 0) + (m >>> 16) | 0) + (r14 >>> 16) | 0;
        w = ((imul(al7, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
        m = ((imul(ah7, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
        r14 = w << 16 | u & 0xffff;
        r15 = m;
        HEAP32[(Rk | 0) >> 2] = r0, HEAP32[(Rk | 4) >> 2] = r1, HEAP32[(Rk | 8) >> 2] = r2, HEAP32[(Rk | 12) >> 2] = r3, HEAP32[(Rk | 16) >> 2] = r4, HEAP32[(Rk | 20) >> 2] = r5, HEAP32[(Rk | 24) >> 2] = r6, HEAP32[(Rk | 28) >> 2] = r7;
      }

      Rk = R + (i + j | 0) | 0;
      HEAP32[(Rk | 0) >> 2] = r8, HEAP32[(Rk | 4) >> 2] = r9, HEAP32[(Rk | 8) >> 2] = r10, HEAP32[(Rk | 12) >> 2] = r11, HEAP32[(Rk | 16) >> 2] = r12, HEAP32[(Rk | 20) >> 2] = r13, HEAP32[(Rk | 24) >> 2] = r14, HEAP32[(Rk | 28) >> 2] = r15;
    }
    /*
            for ( i = lA & -32; (i|0) < (lA|0); i = (i+4)|0 ) {
                Ai = (A+i)|0;
    
                ah0 = HEAP32[Ai>>2]|0,
                al0 = ah0 & 0xffff,
                ah0 = ah0 >>> 16;
    
                r1 = 0;
    
                for ( j = 0; (j|0) < (lB|0); j = (j+4)|0 ) {
                    Bj = (B+j)|0;
                    Rk = (R+(i+j|0))|0;
    
                    bh0 = HEAP32[Bj>>2]|0,
                    bl0 = bh0 & 0xffff,
                    bh0 = bh0 >>> 16;
    
                    r0 = HEAP32[Rk>>2]|0;
    
                    u = ((imul(al0, bl0)|0) + (r1 & 0xffff)|0) + (r0 & 0xffff)|0;
                    v = ((imul(ah0, bl0)|0) + (r1 >>> 16)|0) + (r0 >>> 16)|0;
                    w = ((imul(al0, bh0)|0) + (v & 0xffff)|0) + (u >>> 16)|0;
                    m = ((imul(ah0, bh0)|0) + (v >>> 16)|0) + (w >>> 16)|0;
                    r0 = (w << 16) | (u & 0xffff);
    
                    r1 = m;
    
                    HEAP32[Rk>>2] = r0;
                }
    
                Rk = (R+(i+j|0))|0;
                HEAP32[Rk>>2] = r1;
            }
    */

  }
  /**
   * Fast squaring
   *
   * Exploits the fact:
   *
   *  X² = ( X0 + X1*B )² = X0² + 2*X0*X1*B + X1²*B²,
   *
   * where B is a power of 2, so:
   *
   *  2*X0*X1*B = (X0*X1 << 1)*B
   *
   * @param A offset of the argument being squared, 32-byte aligned
   * @param lA length of the argument, multiple of 32
   *
   * @param R offset where to place the result to, 32-byte aligned
   */


  function sqr(A, lA, R) {
    A = A | 0;
    lA = lA | 0;
    R = R | 0;
    var al0 = 0,
        al1 = 0,
        al2 = 0,
        al3 = 0,
        al4 = 0,
        al5 = 0,
        al6 = 0,
        al7 = 0,
        ah0 = 0,
        ah1 = 0,
        ah2 = 0,
        ah3 = 0,
        ah4 = 0,
        ah5 = 0,
        ah6 = 0,
        ah7 = 0,
        bl0 = 0,
        bl1 = 0,
        bl2 = 0,
        bl3 = 0,
        bl4 = 0,
        bl5 = 0,
        bl6 = 0,
        bl7 = 0,
        bh0 = 0,
        bh1 = 0,
        bh2 = 0,
        bh3 = 0,
        bh4 = 0,
        bh5 = 0,
        bh6 = 0,
        bh7 = 0,
        r0 = 0,
        r1 = 0,
        r2 = 0,
        r3 = 0,
        r4 = 0,
        r5 = 0,
        r6 = 0,
        r7 = 0,
        r8 = 0,
        r9 = 0,
        r10 = 0,
        r11 = 0,
        r12 = 0,
        r13 = 0,
        r14 = 0,
        r15 = 0,
        u = 0,
        v = 0,
        w = 0,
        c = 0,
        h = 0,
        m = 0,
        r = 0,
        d = 0,
        dd = 0,
        p = 0,
        i = 0,
        j = 0,
        k = 0,
        Ai = 0,
        Aj = 0,
        Rk = 0; // prepare for iterations

    for (; (i | 0) < (lA | 0); i = i + 4 | 0) {
      Rk = R + (i << 1) | 0;
      ah0 = HEAP32[A + i >> 2] | 0, al0 = ah0 & 0xffff, ah0 = ah0 >>> 16;
      u = imul(al0, al0) | 0;
      v = (imul(al0, ah0) | 0) + (u >>> 17) | 0;
      w = (imul(ah0, ah0) | 0) + (v >>> 15) | 0;
      HEAP32[Rk >> 2] = v << 17 | u & 0x1ffff;
      HEAP32[(Rk | 4) >> 2] = w;
    } // unrolled 1st iteration


    for (p = 0; (p | 0) < (lA | 0); p = p + 8 | 0) {
      Ai = A + p | 0, Rk = R + (p << 1) | 0;
      ah0 = HEAP32[Ai >> 2] | 0, al0 = ah0 & 0xffff, ah0 = ah0 >>> 16;
      bh0 = HEAP32[(Ai | 4) >> 2] | 0, bl0 = bh0 & 0xffff, bh0 = bh0 >>> 16;
      u = imul(al0, bl0) | 0;
      v = (imul(al0, bh0) | 0) + (u >>> 16) | 0;
      w = (imul(ah0, bl0) | 0) + (v & 0xffff) | 0;
      m = ((imul(ah0, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r = HEAP32[(Rk | 4) >> 2] | 0;
      u = (r & 0xffff) + ((u & 0xffff) << 1) | 0;
      w = ((r >>> 16) + ((w & 0xffff) << 1) | 0) + (u >>> 16) | 0;
      HEAP32[(Rk | 4) >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;
      r = HEAP32[(Rk | 8) >> 2] | 0;
      u = ((r & 0xffff) + ((m & 0xffff) << 1) | 0) + c | 0;
      w = ((r >>> 16) + (m >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[(Rk | 8) >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;

      if (c) {
        r = HEAP32[(Rk | 12) >> 2] | 0;
        u = (r & 0xffff) + c | 0;
        w = (r >>> 16) + (u >>> 16) | 0;
        HEAP32[(Rk | 12) >> 2] = w << 16 | u & 0xffff;
      }
    } // unrolled 2nd iteration


    for (p = 0; (p | 0) < (lA | 0); p = p + 16 | 0) {
      Ai = A + p | 0, Rk = R + (p << 1) | 0;
      ah0 = HEAP32[Ai >> 2] | 0, al0 = ah0 & 0xffff, ah0 = ah0 >>> 16, ah1 = HEAP32[(Ai | 4) >> 2] | 0, al1 = ah1 & 0xffff, ah1 = ah1 >>> 16;
      bh0 = HEAP32[(Ai | 8) >> 2] | 0, bl0 = bh0 & 0xffff, bh0 = bh0 >>> 16, bh1 = HEAP32[(Ai | 12) >> 2] | 0, bl1 = bh1 & 0xffff, bh1 = bh1 >>> 16;
      u = imul(al0, bl0) | 0;
      v = imul(ah0, bl0) | 0;
      w = ((imul(al0, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah0, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r0 = w << 16 | u & 0xffff;
      u = (imul(al0, bl1) | 0) + (m & 0xffff) | 0;
      v = (imul(ah0, bl1) | 0) + (m >>> 16) | 0;
      w = ((imul(al0, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah0, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r1 = w << 16 | u & 0xffff;
      r2 = m;
      u = (imul(al1, bl0) | 0) + (r1 & 0xffff) | 0;
      v = (imul(ah1, bl0) | 0) + (r1 >>> 16) | 0;
      w = ((imul(al1, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah1, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r1 = w << 16 | u & 0xffff;
      u = ((imul(al1, bl1) | 0) + (r2 & 0xffff) | 0) + (m & 0xffff) | 0;
      v = ((imul(ah1, bl1) | 0) + (r2 >>> 16) | 0) + (m >>> 16) | 0;
      w = ((imul(al1, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah1, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r2 = w << 16 | u & 0xffff;
      r3 = m;
      r = HEAP32[(Rk | 8) >> 2] | 0;
      u = (r & 0xffff) + ((r0 & 0xffff) << 1) | 0;
      w = ((r >>> 16) + (r0 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[(Rk | 8) >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;
      r = HEAP32[(Rk | 12) >> 2] | 0;
      u = ((r & 0xffff) + ((r1 & 0xffff) << 1) | 0) + c | 0;
      w = ((r >>> 16) + (r1 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[(Rk | 12) >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;
      r = HEAP32[(Rk | 16) >> 2] | 0;
      u = ((r & 0xffff) + ((r2 & 0xffff) << 1) | 0) + c | 0;
      w = ((r >>> 16) + (r2 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[(Rk | 16) >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;
      r = HEAP32[(Rk | 20) >> 2] | 0;
      u = ((r & 0xffff) + ((r3 & 0xffff) << 1) | 0) + c | 0;
      w = ((r >>> 16) + (r3 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[(Rk | 20) >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;

      for (k = 24; !!c & (k | 0) < 32; k = k + 4 | 0) {
        r = HEAP32[(Rk | k) >> 2] | 0;
        u = (r & 0xffff) + c | 0;
        w = (r >>> 16) + (u >>> 16) | 0;
        HEAP32[(Rk | k) >> 2] = w << 16 | u & 0xffff;
        c = w >>> 16;
      }
    } // unrolled 3rd iteration


    for (p = 0; (p | 0) < (lA | 0); p = p + 32 | 0) {
      Ai = A + p | 0, Rk = R + (p << 1) | 0;
      ah0 = HEAP32[Ai >> 2] | 0, al0 = ah0 & 0xffff, ah0 = ah0 >>> 16, ah1 = HEAP32[(Ai | 4) >> 2] | 0, al1 = ah1 & 0xffff, ah1 = ah1 >>> 16, ah2 = HEAP32[(Ai | 8) >> 2] | 0, al2 = ah2 & 0xffff, ah2 = ah2 >>> 16, ah3 = HEAP32[(Ai | 12) >> 2] | 0, al3 = ah3 & 0xffff, ah3 = ah3 >>> 16;
      bh0 = HEAP32[(Ai | 16) >> 2] | 0, bl0 = bh0 & 0xffff, bh0 = bh0 >>> 16, bh1 = HEAP32[(Ai | 20) >> 2] | 0, bl1 = bh1 & 0xffff, bh1 = bh1 >>> 16, bh2 = HEAP32[(Ai | 24) >> 2] | 0, bl2 = bh2 & 0xffff, bh2 = bh2 >>> 16, bh3 = HEAP32[(Ai | 28) >> 2] | 0, bl3 = bh3 & 0xffff, bh3 = bh3 >>> 16;
      u = imul(al0, bl0) | 0;
      v = imul(ah0, bl0) | 0;
      w = ((imul(al0, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah0, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r0 = w << 16 | u & 0xffff;
      u = (imul(al0, bl1) | 0) + (m & 0xffff) | 0;
      v = (imul(ah0, bl1) | 0) + (m >>> 16) | 0;
      w = ((imul(al0, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah0, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r1 = w << 16 | u & 0xffff;
      u = (imul(al0, bl2) | 0) + (m & 0xffff) | 0;
      v = (imul(ah0, bl2) | 0) + (m >>> 16) | 0;
      w = ((imul(al0, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah0, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r2 = w << 16 | u & 0xffff;
      u = (imul(al0, bl3) | 0) + (m & 0xffff) | 0;
      v = (imul(ah0, bl3) | 0) + (m >>> 16) | 0;
      w = ((imul(al0, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah0, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r3 = w << 16 | u & 0xffff;
      r4 = m;
      u = (imul(al1, bl0) | 0) + (r1 & 0xffff) | 0;
      v = (imul(ah1, bl0) | 0) + (r1 >>> 16) | 0;
      w = ((imul(al1, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah1, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r1 = w << 16 | u & 0xffff;
      u = ((imul(al1, bl1) | 0) + (r2 & 0xffff) | 0) + (m & 0xffff) | 0;
      v = ((imul(ah1, bl1) | 0) + (r2 >>> 16) | 0) + (m >>> 16) | 0;
      w = ((imul(al1, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah1, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r2 = w << 16 | u & 0xffff;
      u = ((imul(al1, bl2) | 0) + (r3 & 0xffff) | 0) + (m & 0xffff) | 0;
      v = ((imul(ah1, bl2) | 0) + (r3 >>> 16) | 0) + (m >>> 16) | 0;
      w = ((imul(al1, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah1, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r3 = w << 16 | u & 0xffff;
      u = ((imul(al1, bl3) | 0) + (r4 & 0xffff) | 0) + (m & 0xffff) | 0;
      v = ((imul(ah1, bl3) | 0) + (r4 >>> 16) | 0) + (m >>> 16) | 0;
      w = ((imul(al1, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah1, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r4 = w << 16 | u & 0xffff;
      r5 = m;
      u = (imul(al2, bl0) | 0) + (r2 & 0xffff) | 0;
      v = (imul(ah2, bl0) | 0) + (r2 >>> 16) | 0;
      w = ((imul(al2, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah2, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r2 = w << 16 | u & 0xffff;
      u = ((imul(al2, bl1) | 0) + (r3 & 0xffff) | 0) + (m & 0xffff) | 0;
      v = ((imul(ah2, bl1) | 0) + (r3 >>> 16) | 0) + (m >>> 16) | 0;
      w = ((imul(al2, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah2, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r3 = w << 16 | u & 0xffff;
      u = ((imul(al2, bl2) | 0) + (r4 & 0xffff) | 0) + (m & 0xffff) | 0;
      v = ((imul(ah2, bl2) | 0) + (r4 >>> 16) | 0) + (m >>> 16) | 0;
      w = ((imul(al2, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah2, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r4 = w << 16 | u & 0xffff;
      u = ((imul(al2, bl3) | 0) + (r5 & 0xffff) | 0) + (m & 0xffff) | 0;
      v = ((imul(ah2, bl3) | 0) + (r5 >>> 16) | 0) + (m >>> 16) | 0;
      w = ((imul(al2, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah2, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r5 = w << 16 | u & 0xffff;
      r6 = m;
      u = (imul(al3, bl0) | 0) + (r3 & 0xffff) | 0;
      v = (imul(ah3, bl0) | 0) + (r3 >>> 16) | 0;
      w = ((imul(al3, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah3, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r3 = w << 16 | u & 0xffff;
      u = ((imul(al3, bl1) | 0) + (r4 & 0xffff) | 0) + (m & 0xffff) | 0;
      v = ((imul(ah3, bl1) | 0) + (r4 >>> 16) | 0) + (m >>> 16) | 0;
      w = ((imul(al3, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah3, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r4 = w << 16 | u & 0xffff;
      u = ((imul(al3, bl2) | 0) + (r5 & 0xffff) | 0) + (m & 0xffff) | 0;
      v = ((imul(ah3, bl2) | 0) + (r5 >>> 16) | 0) + (m >>> 16) | 0;
      w = ((imul(al3, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah3, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r5 = w << 16 | u & 0xffff;
      u = ((imul(al3, bl3) | 0) + (r6 & 0xffff) | 0) + (m & 0xffff) | 0;
      v = ((imul(ah3, bl3) | 0) + (r6 >>> 16) | 0) + (m >>> 16) | 0;
      w = ((imul(al3, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
      m = ((imul(ah3, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
      r6 = w << 16 | u & 0xffff;
      r7 = m;
      r = HEAP32[(Rk | 16) >> 2] | 0;
      u = (r & 0xffff) + ((r0 & 0xffff) << 1) | 0;
      w = ((r >>> 16) + (r0 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[(Rk | 16) >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;
      r = HEAP32[(Rk | 20) >> 2] | 0;
      u = ((r & 0xffff) + ((r1 & 0xffff) << 1) | 0) + c | 0;
      w = ((r >>> 16) + (r1 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[(Rk | 20) >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;
      r = HEAP32[(Rk | 24) >> 2] | 0;
      u = ((r & 0xffff) + ((r2 & 0xffff) << 1) | 0) + c | 0;
      w = ((r >>> 16) + (r2 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[(Rk | 24) >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;
      r = HEAP32[(Rk | 28) >> 2] | 0;
      u = ((r & 0xffff) + ((r3 & 0xffff) << 1) | 0) + c | 0;
      w = ((r >>> 16) + (r3 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[(Rk | 28) >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;
      r = HEAP32[Rk + 32 >> 2] | 0;
      u = ((r & 0xffff) + ((r4 & 0xffff) << 1) | 0) + c | 0;
      w = ((r >>> 16) + (r4 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[Rk + 32 >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;
      r = HEAP32[Rk + 36 >> 2] | 0;
      u = ((r & 0xffff) + ((r5 & 0xffff) << 1) | 0) + c | 0;
      w = ((r >>> 16) + (r5 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[Rk + 36 >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;
      r = HEAP32[Rk + 40 >> 2] | 0;
      u = ((r & 0xffff) + ((r6 & 0xffff) << 1) | 0) + c | 0;
      w = ((r >>> 16) + (r6 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[Rk + 40 >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;
      r = HEAP32[Rk + 44 >> 2] | 0;
      u = ((r & 0xffff) + ((r7 & 0xffff) << 1) | 0) + c | 0;
      w = ((r >>> 16) + (r7 >>> 16 << 1) | 0) + (u >>> 16) | 0;
      HEAP32[Rk + 44 >> 2] = w << 16 | u & 0xffff;
      c = w >>> 16;

      for (k = 48; !!c & (k | 0) < 64; k = k + 4 | 0) {
        r = HEAP32[Rk + k >> 2] | 0;
        u = (r & 0xffff) + c | 0;
        w = (r >>> 16) + (u >>> 16) | 0;
        HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
        c = w >>> 16;
      }
    } // perform iterations


    for (d = 32; (d | 0) < (lA | 0); d = d << 1) {
      // depth loop
      dd = d << 1;

      for (p = 0; (p | 0) < (lA | 0); p = p + dd | 0) {
        // part loop
        Rk = R + (p << 1) | 0;
        h = 0;

        for (i = 0; (i | 0) < (d | 0); i = i + 32 | 0) {
          // multiply-and-add loop
          Ai = (A + p | 0) + i | 0;
          ah0 = HEAP32[Ai >> 2] | 0, al0 = ah0 & 0xffff, ah0 = ah0 >>> 16, ah1 = HEAP32[(Ai | 4) >> 2] | 0, al1 = ah1 & 0xffff, ah1 = ah1 >>> 16, ah2 = HEAP32[(Ai | 8) >> 2] | 0, al2 = ah2 & 0xffff, ah2 = ah2 >>> 16, ah3 = HEAP32[(Ai | 12) >> 2] | 0, al3 = ah3 & 0xffff, ah3 = ah3 >>> 16, ah4 = HEAP32[(Ai | 16) >> 2] | 0, al4 = ah4 & 0xffff, ah4 = ah4 >>> 16, ah5 = HEAP32[(Ai | 20) >> 2] | 0, al5 = ah5 & 0xffff, ah5 = ah5 >>> 16, ah6 = HEAP32[(Ai | 24) >> 2] | 0, al6 = ah6 & 0xffff, ah6 = ah6 >>> 16, ah7 = HEAP32[(Ai | 28) >> 2] | 0, al7 = ah7 & 0xffff, ah7 = ah7 >>> 16;
          r8 = r9 = r10 = r11 = r12 = r13 = r14 = r15 = c = 0;

          for (j = 0; (j | 0) < (d | 0); j = j + 32 | 0) {
            Aj = ((A + p | 0) + d | 0) + j | 0;
            bh0 = HEAP32[Aj >> 2] | 0, bl0 = bh0 & 0xffff, bh0 = bh0 >>> 16, bh1 = HEAP32[(Aj | 4) >> 2] | 0, bl1 = bh1 & 0xffff, bh1 = bh1 >>> 16, bh2 = HEAP32[(Aj | 8) >> 2] | 0, bl2 = bh2 & 0xffff, bh2 = bh2 >>> 16, bh3 = HEAP32[(Aj | 12) >> 2] | 0, bl3 = bh3 & 0xffff, bh3 = bh3 >>> 16, bh4 = HEAP32[(Aj | 16) >> 2] | 0, bl4 = bh4 & 0xffff, bh4 = bh4 >>> 16, bh5 = HEAP32[(Aj | 20) >> 2] | 0, bl5 = bh5 & 0xffff, bh5 = bh5 >>> 16, bh6 = HEAP32[(Aj | 24) >> 2] | 0, bl6 = bh6 & 0xffff, bh6 = bh6 >>> 16, bh7 = HEAP32[(Aj | 28) >> 2] | 0, bl7 = bh7 & 0xffff, bh7 = bh7 >>> 16;
            r0 = r1 = r2 = r3 = r4 = r5 = r6 = r7 = 0;
            u = ((imul(al0, bl0) | 0) + (r0 & 0xffff) | 0) + (r8 & 0xffff) | 0;
            v = ((imul(ah0, bl0) | 0) + (r0 >>> 16) | 0) + (r8 >>> 16) | 0;
            w = ((imul(al0, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah0, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r0 = w << 16 | u & 0xffff;
            u = ((imul(al0, bl1) | 0) + (r1 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah0, bl1) | 0) + (r1 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al0, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah0, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r1 = w << 16 | u & 0xffff;
            u = ((imul(al0, bl2) | 0) + (r2 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah0, bl2) | 0) + (r2 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al0, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah0, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r2 = w << 16 | u & 0xffff;
            u = ((imul(al0, bl3) | 0) + (r3 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah0, bl3) | 0) + (r3 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al0, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah0, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r3 = w << 16 | u & 0xffff;
            u = ((imul(al0, bl4) | 0) + (r4 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah0, bl4) | 0) + (r4 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al0, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah0, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r4 = w << 16 | u & 0xffff;
            u = ((imul(al0, bl5) | 0) + (r5 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah0, bl5) | 0) + (r5 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al0, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah0, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r5 = w << 16 | u & 0xffff;
            u = ((imul(al0, bl6) | 0) + (r6 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah0, bl6) | 0) + (r6 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al0, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah0, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r6 = w << 16 | u & 0xffff;
            u = ((imul(al0, bl7) | 0) + (r7 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah0, bl7) | 0) + (r7 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al0, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah0, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r7 = w << 16 | u & 0xffff;
            r8 = m;
            u = ((imul(al1, bl0) | 0) + (r1 & 0xffff) | 0) + (r9 & 0xffff) | 0;
            v = ((imul(ah1, bl0) | 0) + (r1 >>> 16) | 0) + (r9 >>> 16) | 0;
            w = ((imul(al1, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah1, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r1 = w << 16 | u & 0xffff;
            u = ((imul(al1, bl1) | 0) + (r2 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah1, bl1) | 0) + (r2 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al1, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah1, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r2 = w << 16 | u & 0xffff;
            u = ((imul(al1, bl2) | 0) + (r3 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah1, bl2) | 0) + (r3 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al1, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah1, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r3 = w << 16 | u & 0xffff;
            u = ((imul(al1, bl3) | 0) + (r4 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah1, bl3) | 0) + (r4 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al1, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah1, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r4 = w << 16 | u & 0xffff;
            u = ((imul(al1, bl4) | 0) + (r5 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah1, bl4) | 0) + (r5 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al1, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah1, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r5 = w << 16 | u & 0xffff;
            u = ((imul(al1, bl5) | 0) + (r6 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah1, bl5) | 0) + (r6 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al1, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah1, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r6 = w << 16 | u & 0xffff;
            u = ((imul(al1, bl6) | 0) + (r7 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah1, bl6) | 0) + (r7 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al1, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah1, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r7 = w << 16 | u & 0xffff;
            u = ((imul(al1, bl7) | 0) + (r8 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah1, bl7) | 0) + (r8 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al1, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah1, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r8 = w << 16 | u & 0xffff;
            r9 = m;
            u = ((imul(al2, bl0) | 0) + (r2 & 0xffff) | 0) + (r10 & 0xffff) | 0;
            v = ((imul(ah2, bl0) | 0) + (r2 >>> 16) | 0) + (r10 >>> 16) | 0;
            w = ((imul(al2, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah2, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r2 = w << 16 | u & 0xffff;
            u = ((imul(al2, bl1) | 0) + (r3 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah2, bl1) | 0) + (r3 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al2, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah2, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r3 = w << 16 | u & 0xffff;
            u = ((imul(al2, bl2) | 0) + (r4 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah2, bl2) | 0) + (r4 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al2, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah2, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r4 = w << 16 | u & 0xffff;
            u = ((imul(al2, bl3) | 0) + (r5 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah2, bl3) | 0) + (r5 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al2, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah2, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r5 = w << 16 | u & 0xffff;
            u = ((imul(al2, bl4) | 0) + (r6 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah2, bl4) | 0) + (r6 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al2, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah2, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r6 = w << 16 | u & 0xffff;
            u = ((imul(al2, bl5) | 0) + (r7 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah2, bl5) | 0) + (r7 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al2, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah2, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r7 = w << 16 | u & 0xffff;
            u = ((imul(al2, bl6) | 0) + (r8 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah2, bl6) | 0) + (r8 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al2, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah2, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r8 = w << 16 | u & 0xffff;
            u = ((imul(al2, bl7) | 0) + (r9 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah2, bl7) | 0) + (r9 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al2, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah2, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r9 = w << 16 | u & 0xffff;
            r10 = m;
            u = ((imul(al3, bl0) | 0) + (r3 & 0xffff) | 0) + (r11 & 0xffff) | 0;
            v = ((imul(ah3, bl0) | 0) + (r3 >>> 16) | 0) + (r11 >>> 16) | 0;
            w = ((imul(al3, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah3, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r3 = w << 16 | u & 0xffff;
            u = ((imul(al3, bl1) | 0) + (r4 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah3, bl1) | 0) + (r4 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al3, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah3, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r4 = w << 16 | u & 0xffff;
            u = ((imul(al3, bl2) | 0) + (r5 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah3, bl2) | 0) + (r5 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al3, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah3, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r5 = w << 16 | u & 0xffff;
            u = ((imul(al3, bl3) | 0) + (r6 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah3, bl3) | 0) + (r6 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al3, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah3, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r6 = w << 16 | u & 0xffff;
            u = ((imul(al3, bl4) | 0) + (r7 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah3, bl4) | 0) + (r7 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al3, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah3, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r7 = w << 16 | u & 0xffff;
            u = ((imul(al3, bl5) | 0) + (r8 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah3, bl5) | 0) + (r8 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al3, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah3, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r8 = w << 16 | u & 0xffff;
            u = ((imul(al3, bl6) | 0) + (r9 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah3, bl6) | 0) + (r9 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al3, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah3, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r9 = w << 16 | u & 0xffff;
            u = ((imul(al3, bl7) | 0) + (r10 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah3, bl7) | 0) + (r10 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al3, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah3, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r10 = w << 16 | u & 0xffff;
            r11 = m;
            u = ((imul(al4, bl0) | 0) + (r4 & 0xffff) | 0) + (r12 & 0xffff) | 0;
            v = ((imul(ah4, bl0) | 0) + (r4 >>> 16) | 0) + (r12 >>> 16) | 0;
            w = ((imul(al4, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah4, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r4 = w << 16 | u & 0xffff;
            u = ((imul(al4, bl1) | 0) + (r5 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah4, bl1) | 0) + (r5 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al4, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah4, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r5 = w << 16 | u & 0xffff;
            u = ((imul(al4, bl2) | 0) + (r6 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah4, bl2) | 0) + (r6 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al4, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah4, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r6 = w << 16 | u & 0xffff;
            u = ((imul(al4, bl3) | 0) + (r7 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah4, bl3) | 0) + (r7 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al4, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah4, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r7 = w << 16 | u & 0xffff;
            u = ((imul(al4, bl4) | 0) + (r8 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah4, bl4) | 0) + (r8 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al4, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah4, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r8 = w << 16 | u & 0xffff;
            u = ((imul(al4, bl5) | 0) + (r9 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah4, bl5) | 0) + (r9 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al4, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah4, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r9 = w << 16 | u & 0xffff;
            u = ((imul(al4, bl6) | 0) + (r10 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah4, bl6) | 0) + (r10 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al4, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah4, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r10 = w << 16 | u & 0xffff;
            u = ((imul(al4, bl7) | 0) + (r11 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah4, bl7) | 0) + (r11 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al4, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah4, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r11 = w << 16 | u & 0xffff;
            r12 = m;
            u = ((imul(al5, bl0) | 0) + (r5 & 0xffff) | 0) + (r13 & 0xffff) | 0;
            v = ((imul(ah5, bl0) | 0) + (r5 >>> 16) | 0) + (r13 >>> 16) | 0;
            w = ((imul(al5, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah5, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r5 = w << 16 | u & 0xffff;
            u = ((imul(al5, bl1) | 0) + (r6 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah5, bl1) | 0) + (r6 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al5, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah5, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r6 = w << 16 | u & 0xffff;
            u = ((imul(al5, bl2) | 0) + (r7 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah5, bl2) | 0) + (r7 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al5, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah5, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r7 = w << 16 | u & 0xffff;
            u = ((imul(al5, bl3) | 0) + (r8 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah5, bl3) | 0) + (r8 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al5, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah5, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r8 = w << 16 | u & 0xffff;
            u = ((imul(al5, bl4) | 0) + (r9 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah5, bl4) | 0) + (r9 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al5, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah5, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r9 = w << 16 | u & 0xffff;
            u = ((imul(al5, bl5) | 0) + (r10 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah5, bl5) | 0) + (r10 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al5, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah5, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r10 = w << 16 | u & 0xffff;
            u = ((imul(al5, bl6) | 0) + (r11 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah5, bl6) | 0) + (r11 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al5, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah5, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r11 = w << 16 | u & 0xffff;
            u = ((imul(al5, bl7) | 0) + (r12 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah5, bl7) | 0) + (r12 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al5, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah5, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r12 = w << 16 | u & 0xffff;
            r13 = m;
            u = ((imul(al6, bl0) | 0) + (r6 & 0xffff) | 0) + (r14 & 0xffff) | 0;
            v = ((imul(ah6, bl0) | 0) + (r6 >>> 16) | 0) + (r14 >>> 16) | 0;
            w = ((imul(al6, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah6, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r6 = w << 16 | u & 0xffff;
            u = ((imul(al6, bl1) | 0) + (r7 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah6, bl1) | 0) + (r7 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al6, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah6, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r7 = w << 16 | u & 0xffff;
            u = ((imul(al6, bl2) | 0) + (r8 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah6, bl2) | 0) + (r8 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al6, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah6, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r8 = w << 16 | u & 0xffff;
            u = ((imul(al6, bl3) | 0) + (r9 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah6, bl3) | 0) + (r9 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al6, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah6, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r9 = w << 16 | u & 0xffff;
            u = ((imul(al6, bl4) | 0) + (r10 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah6, bl4) | 0) + (r10 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al6, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah6, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r10 = w << 16 | u & 0xffff;
            u = ((imul(al6, bl5) | 0) + (r11 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah6, bl5) | 0) + (r11 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al6, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah6, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r11 = w << 16 | u & 0xffff;
            u = ((imul(al6, bl6) | 0) + (r12 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah6, bl6) | 0) + (r12 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al6, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah6, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r12 = w << 16 | u & 0xffff;
            u = ((imul(al6, bl7) | 0) + (r13 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah6, bl7) | 0) + (r13 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al6, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah6, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r13 = w << 16 | u & 0xffff;
            r14 = m;
            u = ((imul(al7, bl0) | 0) + (r7 & 0xffff) | 0) + (r15 & 0xffff) | 0;
            v = ((imul(ah7, bl0) | 0) + (r7 >>> 16) | 0) + (r15 >>> 16) | 0;
            w = ((imul(al7, bh0) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah7, bh0) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r7 = w << 16 | u & 0xffff;
            u = ((imul(al7, bl1) | 0) + (r8 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah7, bl1) | 0) + (r8 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al7, bh1) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah7, bh1) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r8 = w << 16 | u & 0xffff;
            u = ((imul(al7, bl2) | 0) + (r9 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah7, bl2) | 0) + (r9 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al7, bh2) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah7, bh2) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r9 = w << 16 | u & 0xffff;
            u = ((imul(al7, bl3) | 0) + (r10 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah7, bl3) | 0) + (r10 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al7, bh3) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah7, bh3) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r10 = w << 16 | u & 0xffff;
            u = ((imul(al7, bl4) | 0) + (r11 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah7, bl4) | 0) + (r11 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al7, bh4) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah7, bh4) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r11 = w << 16 | u & 0xffff;
            u = ((imul(al7, bl5) | 0) + (r12 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah7, bl5) | 0) + (r12 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al7, bh5) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah7, bh5) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r12 = w << 16 | u & 0xffff;
            u = ((imul(al7, bl6) | 0) + (r13 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah7, bl6) | 0) + (r13 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al7, bh6) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah7, bh6) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r13 = w << 16 | u & 0xffff;
            u = ((imul(al7, bl7) | 0) + (r14 & 0xffff) | 0) + (m & 0xffff) | 0;
            v = ((imul(ah7, bl7) | 0) + (r14 >>> 16) | 0) + (m >>> 16) | 0;
            w = ((imul(al7, bh7) | 0) + (v & 0xffff) | 0) + (u >>> 16) | 0;
            m = ((imul(ah7, bh7) | 0) + (v >>> 16) | 0) + (w >>> 16) | 0;
            r14 = w << 16 | u & 0xffff;
            r15 = m;
            k = d + (i + j | 0) | 0;
            r = HEAP32[Rk + k >> 2] | 0;
            u = ((r & 0xffff) + ((r0 & 0xffff) << 1) | 0) + c | 0;
            w = ((r >>> 16) + (r0 >>> 16 << 1) | 0) + (u >>> 16) | 0;
            HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
            c = w >>> 16;
            k = k + 4 | 0;
            r = HEAP32[Rk + k >> 2] | 0;
            u = ((r & 0xffff) + ((r1 & 0xffff) << 1) | 0) + c | 0;
            w = ((r >>> 16) + (r1 >>> 16 << 1) | 0) + (u >>> 16) | 0;
            HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
            c = w >>> 16;
            k = k + 4 | 0;
            r = HEAP32[Rk + k >> 2] | 0;
            u = ((r & 0xffff) + ((r2 & 0xffff) << 1) | 0) + c | 0;
            w = ((r >>> 16) + (r2 >>> 16 << 1) | 0) + (u >>> 16) | 0;
            HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
            c = w >>> 16;
            k = k + 4 | 0;
            r = HEAP32[Rk + k >> 2] | 0;
            u = ((r & 0xffff) + ((r3 & 0xffff) << 1) | 0) + c | 0;
            w = ((r >>> 16) + (r3 >>> 16 << 1) | 0) + (u >>> 16) | 0;
            HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
            c = w >>> 16;
            k = k + 4 | 0;
            r = HEAP32[Rk + k >> 2] | 0;
            u = ((r & 0xffff) + ((r4 & 0xffff) << 1) | 0) + c | 0;
            w = ((r >>> 16) + (r4 >>> 16 << 1) | 0) + (u >>> 16) | 0;
            HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
            c = w >>> 16;
            k = k + 4 | 0;
            r = HEAP32[Rk + k >> 2] | 0;
            u = ((r & 0xffff) + ((r5 & 0xffff) << 1) | 0) + c | 0;
            w = ((r >>> 16) + (r5 >>> 16 << 1) | 0) + (u >>> 16) | 0;
            HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
            c = w >>> 16;
            k = k + 4 | 0;
            r = HEAP32[Rk + k >> 2] | 0;
            u = ((r & 0xffff) + ((r6 & 0xffff) << 1) | 0) + c | 0;
            w = ((r >>> 16) + (r6 >>> 16 << 1) | 0) + (u >>> 16) | 0;
            HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
            c = w >>> 16;
            k = k + 4 | 0;
            r = HEAP32[Rk + k >> 2] | 0;
            u = ((r & 0xffff) + ((r7 & 0xffff) << 1) | 0) + c | 0;
            w = ((r >>> 16) + (r7 >>> 16 << 1) | 0) + (u >>> 16) | 0;
            HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
            c = w >>> 16;
          }

          k = d + (i + j | 0) | 0;
          r = HEAP32[Rk + k >> 2] | 0;
          u = (((r & 0xffff) + ((r8 & 0xffff) << 1) | 0) + c | 0) + h | 0;
          w = ((r >>> 16) + (r8 >>> 16 << 1) | 0) + (u >>> 16) | 0;
          HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
          c = w >>> 16;
          k = k + 4 | 0;
          r = HEAP32[Rk + k >> 2] | 0;
          u = ((r & 0xffff) + ((r9 & 0xffff) << 1) | 0) + c | 0;
          w = ((r >>> 16) + (r9 >>> 16 << 1) | 0) + (u >>> 16) | 0;
          HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
          c = w >>> 16;
          k = k + 4 | 0;
          r = HEAP32[Rk + k >> 2] | 0;
          u = ((r & 0xffff) + ((r10 & 0xffff) << 1) | 0) + c | 0;
          w = ((r >>> 16) + (r10 >>> 16 << 1) | 0) + (u >>> 16) | 0;
          HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
          c = w >>> 16;
          k = k + 4 | 0;
          r = HEAP32[Rk + k >> 2] | 0;
          u = ((r & 0xffff) + ((r11 & 0xffff) << 1) | 0) + c | 0;
          w = ((r >>> 16) + (r11 >>> 16 << 1) | 0) + (u >>> 16) | 0;
          HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
          c = w >>> 16;
          k = k + 4 | 0;
          r = HEAP32[Rk + k >> 2] | 0;
          u = ((r & 0xffff) + ((r12 & 0xffff) << 1) | 0) + c | 0;
          w = ((r >>> 16) + (r12 >>> 16 << 1) | 0) + (u >>> 16) | 0;
          HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
          c = w >>> 16;
          k = k + 4 | 0;
          r = HEAP32[Rk + k >> 2] | 0;
          u = ((r & 0xffff) + ((r13 & 0xffff) << 1) | 0) + c | 0;
          w = ((r >>> 16) + (r13 >>> 16 << 1) | 0) + (u >>> 16) | 0;
          HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
          c = w >>> 16;
          k = k + 4 | 0;
          r = HEAP32[Rk + k >> 2] | 0;
          u = ((r & 0xffff) + ((r14 & 0xffff) << 1) | 0) + c | 0;
          w = ((r >>> 16) + (r14 >>> 16 << 1) | 0) + (u >>> 16) | 0;
          HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
          c = w >>> 16;
          k = k + 4 | 0;
          r = HEAP32[Rk + k >> 2] | 0;
          u = ((r & 0xffff) + ((r15 & 0xffff) << 1) | 0) + c | 0;
          w = ((r >>> 16) + (r15 >>> 16 << 1) | 0) + (u >>> 16) | 0;
          HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
          h = w >>> 16;
        }

        for (k = k + 4 | 0; !!h & (k | 0) < dd << 1; k = k + 4 | 0) {
          // carry propagation loop
          r = HEAP32[Rk + k >> 2] | 0;
          u = (r & 0xffff) + h | 0;
          w = (r >>> 16) + (u >>> 16) | 0;
          HEAP32[Rk + k >> 2] = w << 16 | u & 0xffff;
          h = w >>> 16;
        }
      }
    }
  }
  /**
   * Conventional division
   *
   * @param A offset of the numerator, 32-byte aligned
   * @param lA length of the numerator, multiple of 32
   *
   * @param B offset of the divisor, 32-byte aligned
   * @param lB length of the divisor, multiple of 32
   *
   * @param R offset where to place the remainder to, 32-byte aligned
   *
   * @param Q offser where to place the quotient to, 32-byte aligned
   */


  function div(N, lN, D, lD, Q) {
    N = N | 0;
    lN = lN | 0;
    D = D | 0;
    lD = lD | 0;
    Q = Q | 0;
    var n = 0,
        d = 0,
        e = 0,
        u1 = 0,
        u0 = 0,
        v0 = 0,
        vh = 0,
        vl = 0,
        qh = 0,
        ql = 0,
        rh = 0,
        rl = 0,
        t1 = 0,
        t2 = 0,
        m = 0,
        c = 0,
        i = 0,
        j = 0,
        k = 0; // number of significant limbs in `N` (multiplied by 4)

    for (i = lN - 1 & -4; (i | 0) >= 0; i = i - 4 | 0) {
      n = HEAP32[N + i >> 2] | 0;

      if (n) {
        lN = i;
        break;
      }
    } // number of significant limbs in `D` (multiplied by 4)


    for (i = lD - 1 & -4; (i | 0) >= 0; i = i - 4 | 0) {
      d = HEAP32[D + i >> 2] | 0;

      if (d) {
        lD = i;
        break;
      }
    } // `D` is zero? WTF?!
    // calculate `e` — the power of 2 of the normalization factor


    while ((d & 0x80000000) == 0) {
      d = d << 1;
      e = e + 1 | 0;
    } // normalize `N` in place


    u0 = HEAP32[N + lN >> 2] | 0;

    if (e) {
      u1 = u0 >>> (32 - e | 0);

      for (i = lN - 4 | 0; (i | 0) >= 0; i = i - 4 | 0) {
        n = HEAP32[N + i >> 2] | 0;
        HEAP32[N + i + 4 >> 2] = u0 << e | (e ? n >>> (32 - e | 0) : 0);
        u0 = n;
      }

      HEAP32[N >> 2] = u0 << e;
    } // normalize `D` in place


    if (e) {
      v0 = HEAP32[D + lD >> 2] | 0;

      for (i = lD - 4 | 0; (i | 0) >= 0; i = i - 4 | 0) {
        d = HEAP32[D + i >> 2] | 0;
        HEAP32[D + i + 4 >> 2] = v0 << e | d >>> (32 - e | 0);
        v0 = d;
      }

      HEAP32[D >> 2] = v0 << e;
    } // divisor parts won't change


    v0 = HEAP32[D + lD >> 2] | 0;
    vh = v0 >>> 16, vl = v0 & 0xffff; // perform division

    for (i = lN; (i | 0) >= (lD | 0); i = i - 4 | 0) {
      j = i - lD | 0; // estimate high part of the quotient

      u0 = HEAP32[N + i >> 2] | 0;
      qh = (u1 >>> 0) / (vh >>> 0) | 0, rh = (u1 >>> 0) % (vh >>> 0) | 0, t1 = imul(qh, vl) | 0;

      while ((qh | 0) == 0x10000 | t1 >>> 0 > (rh << 16 | u0 >>> 16) >>> 0) {
        qh = qh - 1 | 0, rh = rh + vh | 0, t1 = t1 - vl | 0;
        if ((rh | 0) >= 0x10000) break;
      } // bulk multiply-and-subtract
      // m - multiplication carry, c - subtraction carry


      m = 0, c = 0;

      for (k = 0; (k | 0) <= (lD | 0); k = k + 4 | 0) {
        d = HEAP32[D + k >> 2] | 0;
        t1 = (imul(qh, d & 0xffff) | 0) + (m >>> 16) | 0;
        t2 = (imul(qh, d >>> 16) | 0) + (t1 >>> 16) | 0;
        d = m & 0xffff | t1 << 16;
        m = t2;
        n = HEAP32[N + j + k >> 2] | 0;
        t1 = ((n & 0xffff) - (d & 0xffff) | 0) + c | 0;
        t2 = ((n >>> 16) - (d >>> 16) | 0) + (t1 >> 16) | 0;
        HEAP32[N + j + k >> 2] = t2 << 16 | t1 & 0xffff;
        c = t2 >> 16;
      }

      t1 = ((u1 & 0xffff) - (m & 0xffff) | 0) + c | 0;
      t2 = ((u1 >>> 16) - (m >>> 16) | 0) + (t1 >> 16) | 0;
      u1 = t2 << 16 | t1 & 0xffff;
      c = t2 >> 16; // add `D` back if got carry-out

      if (c) {
        qh = qh - 1 | 0;
        c = 0;

        for (k = 0; (k | 0) <= (lD | 0); k = k + 4 | 0) {
          d = HEAP32[D + k >> 2] | 0;
          n = HEAP32[N + j + k >> 2] | 0;
          t1 = (n & 0xffff) + c | 0;
          t2 = (n >>> 16) + d + (t1 >>> 16) | 0;
          HEAP32[N + j + k >> 2] = t2 << 16 | t1 & 0xffff;
          c = t2 >>> 16;
        }

        u1 = u1 + c | 0;
      } // estimate low part of the quotient


      u0 = HEAP32[N + i >> 2] | 0;
      n = u1 << 16 | u0 >>> 16;
      ql = (n >>> 0) / (vh >>> 0) | 0, rl = (n >>> 0) % (vh >>> 0) | 0, t1 = imul(ql, vl) | 0;

      while ((ql | 0) == 0x10000 | t1 >>> 0 > (rl << 16 | u0 & 0xffff) >>> 0) {
        ql = ql - 1 | 0, rl = rl + vh | 0, t1 = t1 - vl | 0;
        if ((rl | 0) >= 0x10000) break;
      } // bulk multiply-and-subtract
      // m - multiplication carry, c - subtraction carry


      m = 0, c = 0;

      for (k = 0; (k | 0) <= (lD | 0); k = k + 4 | 0) {
        d = HEAP32[D + k >> 2] | 0;
        t1 = (imul(ql, d & 0xffff) | 0) + (m & 0xffff) | 0;
        t2 = ((imul(ql, d >>> 16) | 0) + (t1 >>> 16) | 0) + (m >>> 16) | 0;
        d = t1 & 0xffff | t2 << 16;
        m = t2 >>> 16;
        n = HEAP32[N + j + k >> 2] | 0;
        t1 = ((n & 0xffff) - (d & 0xffff) | 0) + c | 0;
        t2 = ((n >>> 16) - (d >>> 16) | 0) + (t1 >> 16) | 0;
        c = t2 >> 16;
        HEAP32[N + j + k >> 2] = t2 << 16 | t1 & 0xffff;
      }

      t1 = ((u1 & 0xffff) - (m & 0xffff) | 0) + c | 0;
      t2 = ((u1 >>> 16) - (m >>> 16) | 0) + (t1 >> 16) | 0;
      c = t2 >> 16; // add `D` back if got carry-out

      if (c) {
        ql = ql - 1 | 0;
        c = 0;

        for (k = 0; (k | 0) <= (lD | 0); k = k + 4 | 0) {
          d = HEAP32[D + k >> 2] | 0;
          n = HEAP32[N + j + k >> 2] | 0;
          t1 = ((n & 0xffff) + (d & 0xffff) | 0) + c | 0;
          t2 = ((n >>> 16) + (d >>> 16) | 0) + (t1 >>> 16) | 0;
          c = t2 >>> 16;
          HEAP32[N + j + k >> 2] = t1 & 0xffff | t2 << 16;
        }
      } // got quotient limb


      HEAP32[Q + j >> 2] = qh << 16 | ql;
      u1 = HEAP32[N + i >> 2] | 0;
    }

    if (e) {
      // TODO denormalize `D` in place
      // denormalize `N` in place
      u0 = HEAP32[N >> 2] | 0;

      for (i = 4; (i | 0) <= (lD | 0); i = i + 4 | 0) {
        n = HEAP32[N + i >> 2] | 0;
        HEAP32[N + i - 4 >> 2] = n << (32 - e | 0) | u0 >>> e;
        u0 = n;
      }

      HEAP32[N + lD >> 2] = u0 >>> e;
    }
  }
  /**
   * Montgomery modular reduction
   *
   * Definition:
   *
   *  MREDC(A) = A × X (mod N),
   *  M × X = N × Y + 1,
   *
   * where M = 2^(32*m) such that N < M and A < N×M
   *
   * Numbers `X` and `Y` can be calculated using Extended Euclidean Algorithm.
   */


  function mredc(A, lA, N, lN, y, R) {
    A = A | 0;
    lA = lA | 0;
    N = N | 0;
    lN = lN | 0;
    y = y | 0;
    R = R | 0;
    var T = 0,
        c = 0,
        uh = 0,
        ul = 0,
        vl = 0,
        vh = 0,
        w0 = 0,
        w1 = 0,
        w2 = 0,
        r0 = 0,
        r1 = 0,
        i = 0,
        j = 0,
        k = 0;
    T = salloc(lN << 1) | 0;
    z(lN << 1, 0, T);
    cp(lA, A, T); // HAC 14.32

    for (i = 0; (i | 0) < (lN | 0); i = i + 4 | 0) {
      uh = HEAP32[T + i >> 2] | 0, ul = uh & 0xffff, uh = uh >>> 16;
      vh = y >>> 16, vl = y & 0xffff;
      w0 = imul(ul, vl) | 0, w1 = ((imul(ul, vh) | 0) + (imul(uh, vl) | 0) | 0) + (w0 >>> 16) | 0;
      ul = w0 & 0xffff, uh = w1 & 0xffff;
      r1 = 0;

      for (j = 0; (j | 0) < (lN | 0); j = j + 4 | 0) {
        k = i + j | 0;
        vh = HEAP32[N + j >> 2] | 0, vl = vh & 0xffff, vh = vh >>> 16;
        r0 = HEAP32[T + k >> 2] | 0;
        w0 = ((imul(ul, vl) | 0) + (r1 & 0xffff) | 0) + (r0 & 0xffff) | 0;
        w1 = ((imul(ul, vh) | 0) + (r1 >>> 16) | 0) + (r0 >>> 16) | 0;
        w2 = ((imul(uh, vl) | 0) + (w1 & 0xffff) | 0) + (w0 >>> 16) | 0;
        r1 = ((imul(uh, vh) | 0) + (w2 >>> 16) | 0) + (w1 >>> 16) | 0;
        r0 = w2 << 16 | w0 & 0xffff;
        HEAP32[T + k >> 2] = r0;
      }

      k = i + j | 0;
      r0 = HEAP32[T + k >> 2] | 0;
      w0 = ((r0 & 0xffff) + (r1 & 0xffff) | 0) + c | 0;
      w1 = ((r0 >>> 16) + (r1 >>> 16) | 0) + (w0 >>> 16) | 0;
      HEAP32[T + k >> 2] = w1 << 16 | w0 & 0xffff;
      c = w1 >>> 16;
    }

    cp(lN, T + lN | 0, R);
    sfree(lN << 1);

    if (c | (cmp(N, lN, R, lN) | 0) <= 0) {
      sub(R, lN, N, lN, R, lN) | 0;
    }
  }

  return {
    sreset: sreset,
    salloc: salloc,
    sfree: sfree,
    z: z,
    tst: tst,
    neg: neg,
    cmp: cmp,
    add: add,
    sub: sub,
    mul: mul,
    sqr: sqr,
    div: div,
    mredc: mredc
  };
};

function Number_extGCD(a, b) {
  var sa = a < 0 ? -1 : 1,
      sb = b < 0 ? -1 : 1,
      xi = 1,
      xj = 0,
      yi = 0,
      yj = 1,
      r,
      q,
      t,
      a_cmp_b;
  a *= sa;
  b *= sb;
  a_cmp_b = a < b;

  if (a_cmp_b) {
    t = a;
    a = b, b = t;
    t = sa;
    sa = sb;
    sb = t;
  }

  q = Math.floor(a / b), r = a - q * b;

  while (r) {
    t = xi - q * xj, xi = xj, xj = t;
    t = yi - q * yj, yi = yj, yj = t;
    a = b, b = r;
    q = Math.floor(a / b), r = a - q * b;
  }

  xj *= sa;
  yj *= sb;

  if (a_cmp_b) {
    t = xj;
    xj = yj, yj = t;
  }

  return {
    gcd: b,
    x: xj,
    y: yj
  };
}

function BigNumber_extGCD(a, b) {
  var sa = a.sign;
  var sb = b.sign;
  if (sa < 0) a = a.negate();
  if (sb < 0) b = b.negate();
  var a_cmp_b = a.compare(b);

  if (a_cmp_b < 0) {
    var t = a;
    a = b, b = t;
    var t2 = sa;
    sa = sb;
    sb = t2;
  }

  var xi = BigNumber.ONE,
      xj = BigNumber.ZERO,
      lx = b.bitLength,
      yi = BigNumber.ZERO,
      yj = BigNumber.ONE,
      ly = a.bitLength,
      z,
      r,
      q;
  z = a.divide(b);

  while ((r = z.remainder) !== BigNumber.ZERO) {
    q = z.quotient;
    z = xi.subtract(q.multiply(xj).clamp(lx)).clamp(lx), xi = xj, xj = z;
    z = yi.subtract(q.multiply(yj).clamp(ly)).clamp(ly), yi = yj, yj = z;
    a = b, b = r;
    z = a.divide(b);
  }

  if (sa < 0) xj = xj.negate();
  if (sb < 0) yj = yj.negate();

  if (a_cmp_b < 0) {
    var _t = xj;
    xj = yj, yj = _t;
  }

  return {
    gcd: b,
    x: xj,
    y: yj
  };
}

function getRandomValues(buf) {
  if (typeof process !== 'undefined') {
    var nodeCrypto = __webpack_require__(/*! crypto */ "./node_modules/crypto-browserify/index.js");

    var bytes = nodeCrypto.randomBytes(buf.length);
    buf.set(bytes);
    return;
  }

  if (window.crypto && window.crypto.getRandomValues) {
    window.crypto.getRandomValues(buf);
    return;
  }

  if (self.crypto && self.crypto.getRandomValues) {
    self.crypto.getRandomValues(buf);
    return;
  } // @ts-ignore


  if (window.msCrypto && window.msCrypto.getRandomValues) {
    // @ts-ignore
    window.msCrypto.getRandomValues(buf);
    return;
  }

  throw new Error('No secure random number generator available.');
} ///////////////////////////////////////////////////////////////////////////////


var _bigint_stdlib = {
  Uint32Array: Uint32Array,
  Math: Math
};

var _bigint_heap = new Uint32Array(0x100000);

var _bigint_asm;

function _half_imul(a, b) {
  return a * b | 0;
}

if (_bigint_stdlib.Math.imul === undefined) {
  _bigint_stdlib.Math.imul = _half_imul;
  _bigint_asm = bigint_asm(_bigint_stdlib, null, _bigint_heap.buffer);
  delete _bigint_stdlib.Math.imul;
} else {
  _bigint_asm = bigint_asm(_bigint_stdlib, null, _bigint_heap.buffer);
} ///////////////////////////////////////////////////////////////////////////////


var _BigNumber_ZERO_limbs = new Uint32Array(0);

var BigNumber =
/*#__PURE__*/
function () {
  function BigNumber(num) {
    _classCallCheck(this, BigNumber);

    var limbs = _BigNumber_ZERO_limbs;
    var bitlen = 0;
    var sign = 0;
    if (num === undefined) ;else {
      for (var i = 0; !num[i]; i++) {
        ;
      }

      bitlen = (num.length - i) * 8;
      if (!bitlen) return BigNumber.ZERO;
      limbs = new Uint32Array(bitlen + 31 >> 5);

      for (var j = num.length - 4; j >= i; j -= 4) {
        limbs[num.length - 4 - j >> 2] = num[j] << 24 | num[j + 1] << 16 | num[j + 2] << 8 | num[j + 3];
      }

      if (i - j === 3) {
        limbs[limbs.length - 1] = num[i];
      } else if (i - j === 2) {
        limbs[limbs.length - 1] = num[i] << 8 | num[i + 1];
      } else if (i - j === 1) {
        limbs[limbs.length - 1] = num[i] << 16 | num[i + 1] << 8 | num[i + 2];
      }

      sign = 1;
    }
    this.limbs = limbs;
    this.bitLength = bitlen;
    this.sign = sign;
  }

  _createClass(BigNumber, [{
    key: "toString",
    value: function toString(radix) {
      radix = radix || 16;
      var limbs = this.limbs;
      var bitlen = this.bitLength;
      var str = '';

      if (radix === 16) {
        // FIXME clamp last limb to (bitlen % 32)
        for (var i = (bitlen + 31 >> 5) - 1; i >= 0; i--) {
          var h = limbs[i].toString(16);
          str += '00000000'.substr(h.length);
          str += h;
        }

        str = str.replace(/^0+/, '');
        if (!str.length) str = '0';
      } else {
        throw new IllegalArgumentError('bad radix');
      }

      if (this.sign < 0) str = '-' + str;
      return str;
    }
  }, {
    key: "toBytes",
    value: function toBytes() {
      var bitlen = this.bitLength;
      var limbs = this.limbs;
      if (bitlen === 0) return new Uint8Array(0);
      var bytelen = bitlen + 7 >> 3;
      var bytes = new Uint8Array(bytelen);

      for (var i = 0; i < bytelen; i++) {
        var j = bytelen - i - 1;
        bytes[i] = limbs[j >> 2] >> ((j & 3) << 3);
      }

      return bytes;
    }
    /**
     * Downgrade to Number
     */

  }, {
    key: "valueOf",
    value: function valueOf() {
      var limbs = this.limbs;
      var bits = this.bitLength;
      var sign = this.sign;
      if (!sign) return 0;
      if (bits <= 32) return sign * (limbs[0] >>> 0);
      if (bits <= 52) return sign * (0x100000000 * (limbs[1] >>> 0) + (limbs[0] >>> 0)); // normalization

      var i,
          l,
          e = 0;

      for (i = limbs.length - 1; i >= 0; i--) {
        if ((l = limbs[i]) === 0) continue;

        while ((l << e & 0x80000000) === 0) {
          e++;
        }

        break;
      }

      if (i === 0) return sign * (limbs[0] >>> 0);
      return sign * (0x100000 * ((limbs[i] << e | (e ? limbs[i - 1] >>> 32 - e : 0)) >>> 0) + ((limbs[i - 1] << e | (e && i > 1 ? limbs[i - 2] >>> 32 - e : 0)) >>> 12)) * Math.pow(2, 32 * i - e - 52);
    }
  }, {
    key: "clamp",
    value: function clamp(b) {
      var limbs = this.limbs;
      var bitlen = this.bitLength; // FIXME check b is number and in a valid range

      if (b >= bitlen) return this;
      var clamped = new BigNumber();
      var n = b + 31 >> 5;
      var k = b % 32;
      clamped.limbs = new Uint32Array(limbs.subarray(0, n));
      clamped.bitLength = b;
      clamped.sign = this.sign;
      if (k) clamped.limbs[n - 1] &= -1 >>> 32 - k;
      return clamped;
    }
  }, {
    key: "slice",
    value: function slice(f, b) {
      var limbs = this.limbs;
      var bitlen = this.bitLength;
      if (f < 0) throw new RangeError('TODO');
      if (f >= bitlen) return BigNumber.ZERO;
      if (b === undefined || b > bitlen - f) b = bitlen - f;
      var sliced = new BigNumber();
      var n = f >> 5;
      var m = f + b + 31 >> 5;
      var l = b + 31 >> 5;
      var t = f % 32;
      var k = b % 32;
      var slimbs = new Uint32Array(l);

      if (t) {
        for (var i = 0; i < m - n - 1; i++) {
          slimbs[i] = limbs[n + i] >>> t | limbs[n + i + 1] << 32 - t;
        }

        slimbs[i] = limbs[n + i] >>> t;
      } else {
        slimbs.set(limbs.subarray(n, m));
      }

      if (k) {
        slimbs[l - 1] &= -1 >>> 32 - k;
      }

      sliced.limbs = slimbs;
      sliced.bitLength = b;
      sliced.sign = this.sign;
      return sliced;
    }
  }, {
    key: "negate",
    value: function negate() {
      var negative = new BigNumber();
      negative.limbs = this.limbs;
      negative.bitLength = this.bitLength;
      negative.sign = -1 * this.sign;
      return negative;
    }
  }, {
    key: "compare",
    value: function compare(that) {
      var alimbs = this.limbs,
          alimbcnt = alimbs.length,
          blimbs = that.limbs,
          blimbcnt = blimbs.length,
          z = 0;
      if (this.sign < that.sign) return -1;
      if (this.sign > that.sign) return 1;

      _bigint_heap.set(alimbs, 0);

      _bigint_heap.set(blimbs, alimbcnt);

      z = _bigint_asm.cmp(0, alimbcnt << 2, alimbcnt << 2, blimbcnt << 2);
      return z * this.sign;
    }
  }, {
    key: "add",
    value: function add(that) {
      if (!this.sign) return that;
      if (!that.sign) return this;
      var abitlen = this.bitLength,
          alimbs = this.limbs,
          alimbcnt = alimbs.length,
          asign = this.sign,
          bbitlen = that.bitLength,
          blimbs = that.limbs,
          blimbcnt = blimbs.length,
          bsign = that.sign,
          rbitlen,
          rlimbcnt,
          rsign,
          rof,
          result = new BigNumber();
      rbitlen = (abitlen > bbitlen ? abitlen : bbitlen) + (asign * bsign > 0 ? 1 : 0);
      rlimbcnt = rbitlen + 31 >> 5;

      _bigint_asm.sreset();

      var pA = _bigint_asm.salloc(alimbcnt << 2),
          pB = _bigint_asm.salloc(blimbcnt << 2),
          pR = _bigint_asm.salloc(rlimbcnt << 2);

      _bigint_asm.z(pR - pA + (rlimbcnt << 2), 0, pA);

      _bigint_heap.set(alimbs, pA >> 2);

      _bigint_heap.set(blimbs, pB >> 2);

      if (asign * bsign > 0) {
        _bigint_asm.add(pA, alimbcnt << 2, pB, blimbcnt << 2, pR, rlimbcnt << 2);

        rsign = asign;
      } else if (asign > bsign) {
        rof = _bigint_asm.sub(pA, alimbcnt << 2, pB, blimbcnt << 2, pR, rlimbcnt << 2);
        rsign = rof ? bsign : asign;
      } else {
        rof = _bigint_asm.sub(pB, blimbcnt << 2, pA, alimbcnt << 2, pR, rlimbcnt << 2);
        rsign = rof ? asign : bsign;
      }

      if (rof) _bigint_asm.neg(pR, rlimbcnt << 2, pR, rlimbcnt << 2);
      if (_bigint_asm.tst(pR, rlimbcnt << 2) === 0) return BigNumber.ZERO;
      result.limbs = new Uint32Array(_bigint_heap.subarray(pR >> 2, (pR >> 2) + rlimbcnt));
      result.bitLength = rbitlen;
      result.sign = rsign;
      return result;
    }
  }, {
    key: "subtract",
    value: function subtract(that) {
      return this.add(that.negate());
    }
  }, {
    key: "square",
    value: function square() {
      if (!this.sign) return BigNumber.ZERO;
      var abitlen = this.bitLength,
          alimbs = this.limbs,
          alimbcnt = alimbs.length,
          rbitlen,
          rlimbcnt,
          result = new BigNumber();
      rbitlen = abitlen << 1;
      rlimbcnt = rbitlen + 31 >> 5;

      _bigint_asm.sreset();

      var pA = _bigint_asm.salloc(alimbcnt << 2),
          pR = _bigint_asm.salloc(rlimbcnt << 2);

      _bigint_asm.z(pR - pA + (rlimbcnt << 2), 0, pA);

      _bigint_heap.set(alimbs, pA >> 2);

      _bigint_asm.sqr(pA, alimbcnt << 2, pR);

      result.limbs = new Uint32Array(_bigint_heap.subarray(pR >> 2, (pR >> 2) + rlimbcnt));
      result.bitLength = rbitlen;
      result.sign = 1;
      return result;
    }
  }, {
    key: "divide",
    value: function divide(that) {
      var abitlen = this.bitLength,
          alimbs = this.limbs,
          alimbcnt = alimbs.length,
          bbitlen = that.bitLength,
          blimbs = that.limbs,
          blimbcnt = blimbs.length,
          qlimbcnt,
          rlimbcnt,
          quotient = BigNumber.ZERO,
          remainder = BigNumber.ZERO;

      _bigint_asm.sreset();

      var pA = _bigint_asm.salloc(alimbcnt << 2),
          pB = _bigint_asm.salloc(blimbcnt << 2),
          pQ = _bigint_asm.salloc(alimbcnt << 2);

      _bigint_asm.z(pQ - pA + (alimbcnt << 2), 0, pA);

      _bigint_heap.set(alimbs, pA >> 2);

      _bigint_heap.set(blimbs, pB >> 2);

      _bigint_asm.div(pA, alimbcnt << 2, pB, blimbcnt << 2, pQ);

      qlimbcnt = _bigint_asm.tst(pQ, alimbcnt << 2) >> 2;

      if (qlimbcnt) {
        quotient = new BigNumber();
        quotient.limbs = new Uint32Array(_bigint_heap.subarray(pQ >> 2, (pQ >> 2) + qlimbcnt));
        quotient.bitLength = abitlen < qlimbcnt << 5 ? abitlen : qlimbcnt << 5;
        quotient.sign = this.sign * that.sign;
      }

      rlimbcnt = _bigint_asm.tst(pA, blimbcnt << 2) >> 2;

      if (rlimbcnt) {
        remainder = new BigNumber();
        remainder.limbs = new Uint32Array(_bigint_heap.subarray(pA >> 2, (pA >> 2) + rlimbcnt));
        remainder.bitLength = bbitlen < rlimbcnt << 5 ? bbitlen : rlimbcnt << 5;
        remainder.sign = this.sign;
      }

      return {
        quotient: quotient,
        remainder: remainder
      };
    }
  }, {
    key: "multiply",
    value: function multiply(that) {
      if (!this.sign || !that.sign) return BigNumber.ZERO;
      var abitlen = this.bitLength,
          alimbs = this.limbs,
          alimbcnt = alimbs.length,
          bbitlen = that.bitLength,
          blimbs = that.limbs,
          blimbcnt = blimbs.length,
          rbitlen,
          rlimbcnt,
          result = new BigNumber();
      rbitlen = abitlen + bbitlen;
      rlimbcnt = rbitlen + 31 >> 5;

      _bigint_asm.sreset();

      var pA = _bigint_asm.salloc(alimbcnt << 2),
          pB = _bigint_asm.salloc(blimbcnt << 2),
          pR = _bigint_asm.salloc(rlimbcnt << 2);

      _bigint_asm.z(pR - pA + (rlimbcnt << 2), 0, pA);

      _bigint_heap.set(alimbs, pA >> 2);

      _bigint_heap.set(blimbs, pB >> 2);

      _bigint_asm.mul(pA, alimbcnt << 2, pB, blimbcnt << 2, pR, rlimbcnt << 2);

      result.limbs = new Uint32Array(_bigint_heap.subarray(pR >> 2, (pR >> 2) + rlimbcnt));
      result.sign = this.sign * that.sign;
      result.bitLength = rbitlen;
      return result;
    }
  }, {
    key: "isMillerRabinProbablePrime",
    value: function isMillerRabinProbablePrime(rounds) {
      var t = BigNumber.fromConfig(this),
          s = 0;
      t.limbs[0] -= 1;

      while (t.limbs[s >> 5] === 0) {
        s += 32;
      }

      while ((t.limbs[s >> 5] >> (s & 31) & 1) === 0) {
        s++;
      }

      t = t.slice(s);
      var m = new Modulus(this),
          m1 = this.subtract(BigNumber.ONE),
          a = BigNumber.fromConfig(this),
          l = this.limbs.length - 1;

      while (a.limbs[l] === 0) {
        l--;
      }

      while (--rounds >= 0) {
        getRandomValues(a.limbs);
        if (a.limbs[0] < 2) a.limbs[0] += 2;

        while (a.compare(m1) >= 0) {
          a.limbs[l] >>>= 1;
        }

        var x = m.power(a, t);
        if (x.compare(BigNumber.ONE) === 0) continue;
        if (x.compare(m1) === 0) continue;
        var c = s;

        while (--c > 0) {
          x = x.square().divide(m).remainder;
          if (x.compare(BigNumber.ONE) === 0) return false;
          if (x.compare(m1) === 0) break;
        }

        if (c === 0) return false;
      }

      return true;
    }
  }, {
    key: "isProbablePrime",
    value: function isProbablePrime() {
      var paranoia = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 80;
      var limbs = this.limbs;
      var i = 0; // Oddity test
      // (50% false positive probability)

      if ((limbs[0] & 1) === 0) return false;
      if (paranoia <= 1) return true; // Magic divisors (3, 5, 17) test
      // (~25% false positive probability)

      var s3 = 0,
          s5 = 0,
          s17 = 0;

      for (i = 0; i < limbs.length; i++) {
        var l3 = limbs[i];

        while (l3) {
          s3 += l3 & 3;
          l3 >>>= 2;
        }

        var l5 = limbs[i];

        while (l5) {
          s5 += l5 & 3;
          l5 >>>= 2;
          s5 -= l5 & 3;
          l5 >>>= 2;
        }

        var l17 = limbs[i];

        while (l17) {
          s17 += l17 & 15;
          l17 >>>= 4;
          s17 -= l17 & 15;
          l17 >>>= 4;
        }
      }

      if (!(s3 % 3) || !(s5 % 5) || !(s17 % 17)) return false;
      if (paranoia <= 2) return true; // Miller-Rabin test
      // (≤ 4^(-k) false positive probability)

      return this.isMillerRabinProbablePrime(paranoia >>> 1);
    }
  }], [{
    key: "fromString",
    value: function fromString(str) {
      var bytes = string_to_bytes(str);
      return new BigNumber(bytes);
    }
  }, {
    key: "fromNumber",
    value: function fromNumber(num) {
      var limbs = _BigNumber_ZERO_limbs;
      var bitlen = 0;
      var sign = 0;
      var absnum = Math.abs(num);

      if (absnum > 0xffffffff) {
        limbs = new Uint32Array(2);
        limbs[0] = absnum | 0;
        limbs[1] = absnum / 0x100000000 | 0;
        bitlen = 52;
      } else if (absnum > 0) {
        limbs = new Uint32Array(1);
        limbs[0] = absnum;
        bitlen = 32;
      } else {
        limbs = _BigNumber_ZERO_limbs;
        bitlen = 0;
      }

      sign = num < 0 ? -1 : 1;
      return BigNumber.fromConfig({
        limbs: limbs,
        bitLength: bitlen,
        sign: sign
      });
    }
  }, {
    key: "fromArrayBuffer",
    value: function fromArrayBuffer(buffer) {
      return new BigNumber(new Uint8Array(buffer));
    }
  }, {
    key: "fromConfig",
    value: function fromConfig(obj) {
      var bn = new BigNumber();
      bn.limbs = new Uint32Array(obj.limbs);
      bn.bitLength = obj.bitLength;
      bn.sign = obj.sign;
      return bn;
    }
  }]);

  return BigNumber;
}();

BigNumber.extGCD = BigNumber_extGCD;
BigNumber.ZERO = BigNumber.fromNumber(0);
BigNumber.ONE = BigNumber.fromNumber(1);

var Modulus =
/*#__PURE__*/
function (_BigNumber) {
  _inherits(Modulus, _BigNumber);

  function Modulus(number) {
    var _this5;

    _classCallCheck(this, Modulus);

    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(Modulus).call(this));
    _this5.limbs = number.limbs;
    _this5.bitLength = number.bitLength;
    _this5.sign = number.sign;
    if (_this5.valueOf() < 1) throw new RangeError();
    if (_this5.bitLength <= 32) return _possibleConstructorReturn(_this5);
    var comodulus;

    if (_this5.limbs[0] & 1) {
      var bitlen = (_this5.bitLength + 31 & -32) + 1;
      var limbs = new Uint32Array(bitlen + 31 >> 5);
      limbs[limbs.length - 1] = 1;
      comodulus = new BigNumber();
      comodulus.sign = 1;
      comodulus.bitLength = bitlen;
      comodulus.limbs = limbs;
      var k = Number_extGCD(0x100000000, _this5.limbs[0]).y;
      _this5.coefficient = k < 0 ? -k : 0x100000000 - k;
    } else {
      /**
       * TODO even modulus reduction
       * Modulus represented as `N = 2^U * V`, where `V` is odd and thus `GCD(2^U, V) = 1`.
       * Calculation `A = TR' mod V` is made as for odd modulo using Montgomery method.
       * Calculation `B = TR' mod 2^U` is easy as modulus is a power of 2.
       * Using Chinese Remainder Theorem and Garner's Algorithm restore `TR' mod N` from `A` and `B`.
       */
      return _possibleConstructorReturn(_this5);
    }

    _this5.comodulus = comodulus;
    _this5.comodulusRemainder = comodulus.divide(_assertThisInitialized(_assertThisInitialized(_this5))).remainder;
    _this5.comodulusRemainderSquare = comodulus.square().divide(_assertThisInitialized(_assertThisInitialized(_this5))).remainder;
    return _this5;
  }
  /**
   * Modular reduction
   */


  _createClass(Modulus, [{
    key: "reduce",
    value: function reduce(a) {
      if (a.bitLength <= 32 && this.bitLength <= 32) return BigNumber.fromNumber(a.valueOf() % this.valueOf());
      if (a.compare(this) < 0) return a;
      return a.divide(this).remainder;
    }
    /**
     * Modular inverse
     */

  }, {
    key: "inverse",
    value: function inverse(a) {
      a = this.reduce(a);
      var r = BigNumber_extGCD(this, a);
      if (r.gcd.valueOf() !== 1) throw new Error('GCD is not 1');
      if (r.y.sign < 0) return r.y.add(this).clamp(this.bitLength);
      return r.y;
    }
    /**
     * Modular exponentiation
     */

  }, {
    key: "power",
    value: function power(g, e) {
      // count exponent set bits
      var c = 0;

      for (var i = 0; i < e.limbs.length; i++) {
        var t = e.limbs[i];

        while (t) {
          if (t & 1) c++;
          t >>>= 1;
        }
      } // window size parameter


      var k = 8;
      if (e.bitLength <= 4536) k = 7;
      if (e.bitLength <= 1736) k = 6;
      if (e.bitLength <= 630) k = 5;
      if (e.bitLength <= 210) k = 4;
      if (e.bitLength <= 60) k = 3;
      if (e.bitLength <= 12) k = 2;
      if (c <= 1 << k - 1) k = 1; // montgomerize base

      g = Modulus._Montgomery_reduce(this.reduce(g).multiply(this.comodulusRemainderSquare), this); // precompute odd powers

      var g2 = Modulus._Montgomery_reduce(g.square(), this),
          gn = new Array(1 << k - 1);

      gn[0] = g;
      gn[1] = Modulus._Montgomery_reduce(g.multiply(g2), this);

      for (var _i3 = 2; _i3 < 1 << k - 1; _i3++) {
        gn[_i3] = Modulus._Montgomery_reduce(gn[_i3 - 1].multiply(g2), this);
      } // perform exponentiation


      var u = this.comodulusRemainder;
      var r = u;

      for (var _i4 = e.limbs.length - 1; _i4 >= 0; _i4--) {
        var _t2 = e.limbs[_i4];

        for (var j = 32; j > 0;) {
          if (_t2 & 0x80000000) {
            var n = _t2 >>> 32 - k,
                l = k;

            while ((n & 1) === 0) {
              n >>>= 1;
              l--;
            }

            var m = gn[n >>> 1];

            while (n) {
              n >>>= 1;
              if (r !== u) r = Modulus._Montgomery_reduce(r.square(), this);
            }

            r = r !== u ? Modulus._Montgomery_reduce(r.multiply(m), this) : m;
            _t2 <<= l, j -= l;
          } else {
            if (r !== u) r = Modulus._Montgomery_reduce(r.square(), this);
            _t2 <<= 1, j--;
          }
        }
      } // de-montgomerize result


      return Modulus._Montgomery_reduce(r, this);
    }
  }], [{
    key: "_Montgomery_reduce",
    value: function _Montgomery_reduce(a, n) {
      var alimbs = a.limbs;
      var alimbcnt = alimbs.length;
      var nlimbs = n.limbs;
      var nlimbcnt = nlimbs.length;
      var y = n.coefficient;

      _bigint_asm.sreset();

      var pA = _bigint_asm.salloc(alimbcnt << 2),
          pN = _bigint_asm.salloc(nlimbcnt << 2),
          pR = _bigint_asm.salloc(nlimbcnt << 2);

      _bigint_asm.z(pR - pA + (nlimbcnt << 2), 0, pA);

      _bigint_heap.set(alimbs, pA >> 2);

      _bigint_heap.set(nlimbs, pN >> 2);

      _bigint_asm.mredc(pA, alimbcnt << 2, pN, nlimbcnt << 2, y, pR);

      var result = new BigNumber();
      result.limbs = new Uint32Array(_bigint_heap.subarray(pR >> 2, (pR >> 2) + nlimbcnt));
      result.bitLength = n.bitLength;
      result.sign = 1;
      return result;
    }
  }]);

  return Modulus;
}(BigNumber);

var sha1_asm = function sha1_asm(stdlib, foreign, buffer) {
  "use asm"; // SHA256 state

  var H0 = 0,
      H1 = 0,
      H2 = 0,
      H3 = 0,
      H4 = 0,
      TOTAL0 = 0,
      TOTAL1 = 0; // HMAC state

  var I0 = 0,
      I1 = 0,
      I2 = 0,
      I3 = 0,
      I4 = 0,
      O0 = 0,
      O1 = 0,
      O2 = 0,
      O3 = 0,
      O4 = 0; // I/O buffer

  var HEAP = new stdlib.Uint8Array(buffer);

  function _core(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15) {
    w0 = w0 | 0;
    w1 = w1 | 0;
    w2 = w2 | 0;
    w3 = w3 | 0;
    w4 = w4 | 0;
    w5 = w5 | 0;
    w6 = w6 | 0;
    w7 = w7 | 0;
    w8 = w8 | 0;
    w9 = w9 | 0;
    w10 = w10 | 0;
    w11 = w11 | 0;
    w12 = w12 | 0;
    w13 = w13 | 0;
    w14 = w14 | 0;
    w15 = w15 | 0;
    var a = 0,
        b = 0,
        c = 0,
        d = 0,
        e = 0,
        n = 0,
        t = 0,
        w16 = 0,
        w17 = 0,
        w18 = 0,
        w19 = 0,
        w20 = 0,
        w21 = 0,
        w22 = 0,
        w23 = 0,
        w24 = 0,
        w25 = 0,
        w26 = 0,
        w27 = 0,
        w28 = 0,
        w29 = 0,
        w30 = 0,
        w31 = 0,
        w32 = 0,
        w33 = 0,
        w34 = 0,
        w35 = 0,
        w36 = 0,
        w37 = 0,
        w38 = 0,
        w39 = 0,
        w40 = 0,
        w41 = 0,
        w42 = 0,
        w43 = 0,
        w44 = 0,
        w45 = 0,
        w46 = 0,
        w47 = 0,
        w48 = 0,
        w49 = 0,
        w50 = 0,
        w51 = 0,
        w52 = 0,
        w53 = 0,
        w54 = 0,
        w55 = 0,
        w56 = 0,
        w57 = 0,
        w58 = 0,
        w59 = 0,
        w60 = 0,
        w61 = 0,
        w62 = 0,
        w63 = 0,
        w64 = 0,
        w65 = 0,
        w66 = 0,
        w67 = 0,
        w68 = 0,
        w69 = 0,
        w70 = 0,
        w71 = 0,
        w72 = 0,
        w73 = 0,
        w74 = 0,
        w75 = 0,
        w76 = 0,
        w77 = 0,
        w78 = 0,
        w79 = 0;
    a = H0;
    b = H1;
    c = H2;
    d = H3;
    e = H4; // 0

    t = w0 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 1

    t = w1 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 2

    t = w2 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 3

    t = w3 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 4

    t = w4 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 5

    t = w5 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 6

    t = w6 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 7

    t = w7 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 8

    t = w8 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 9

    t = w9 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 10

    t = w10 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 11

    t = w11 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 12

    t = w12 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 13

    t = w13 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 14

    t = w14 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 15

    t = w15 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 16

    n = w13 ^ w8 ^ w2 ^ w0;
    w16 = n << 1 | n >>> 31;
    t = w16 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 17

    n = w14 ^ w9 ^ w3 ^ w1;
    w17 = n << 1 | n >>> 31;
    t = w17 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 18

    n = w15 ^ w10 ^ w4 ^ w2;
    w18 = n << 1 | n >>> 31;
    t = w18 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 19

    n = w16 ^ w11 ^ w5 ^ w3;
    w19 = n << 1 | n >>> 31;
    t = w19 + (a << 5 | a >>> 27) + e + (b & c | ~b & d) + 0x5a827999 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 20

    n = w17 ^ w12 ^ w6 ^ w4;
    w20 = n << 1 | n >>> 31;
    t = w20 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 21

    n = w18 ^ w13 ^ w7 ^ w5;
    w21 = n << 1 | n >>> 31;
    t = w21 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 22

    n = w19 ^ w14 ^ w8 ^ w6;
    w22 = n << 1 | n >>> 31;
    t = w22 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 23

    n = w20 ^ w15 ^ w9 ^ w7;
    w23 = n << 1 | n >>> 31;
    t = w23 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 24

    n = w21 ^ w16 ^ w10 ^ w8;
    w24 = n << 1 | n >>> 31;
    t = w24 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 25

    n = w22 ^ w17 ^ w11 ^ w9;
    w25 = n << 1 | n >>> 31;
    t = w25 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 26

    n = w23 ^ w18 ^ w12 ^ w10;
    w26 = n << 1 | n >>> 31;
    t = w26 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 27

    n = w24 ^ w19 ^ w13 ^ w11;
    w27 = n << 1 | n >>> 31;
    t = w27 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 28

    n = w25 ^ w20 ^ w14 ^ w12;
    w28 = n << 1 | n >>> 31;
    t = w28 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 29

    n = w26 ^ w21 ^ w15 ^ w13;
    w29 = n << 1 | n >>> 31;
    t = w29 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 30

    n = w27 ^ w22 ^ w16 ^ w14;
    w30 = n << 1 | n >>> 31;
    t = w30 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 31

    n = w28 ^ w23 ^ w17 ^ w15;
    w31 = n << 1 | n >>> 31;
    t = w31 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 32

    n = w29 ^ w24 ^ w18 ^ w16;
    w32 = n << 1 | n >>> 31;
    t = w32 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 33

    n = w30 ^ w25 ^ w19 ^ w17;
    w33 = n << 1 | n >>> 31;
    t = w33 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 34

    n = w31 ^ w26 ^ w20 ^ w18;
    w34 = n << 1 | n >>> 31;
    t = w34 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 35

    n = w32 ^ w27 ^ w21 ^ w19;
    w35 = n << 1 | n >>> 31;
    t = w35 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 36

    n = w33 ^ w28 ^ w22 ^ w20;
    w36 = n << 1 | n >>> 31;
    t = w36 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 37

    n = w34 ^ w29 ^ w23 ^ w21;
    w37 = n << 1 | n >>> 31;
    t = w37 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 38

    n = w35 ^ w30 ^ w24 ^ w22;
    w38 = n << 1 | n >>> 31;
    t = w38 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 39

    n = w36 ^ w31 ^ w25 ^ w23;
    w39 = n << 1 | n >>> 31;
    t = w39 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) + 0x6ed9eba1 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 40

    n = w37 ^ w32 ^ w26 ^ w24;
    w40 = n << 1 | n >>> 31;
    t = w40 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 41

    n = w38 ^ w33 ^ w27 ^ w25;
    w41 = n << 1 | n >>> 31;
    t = w41 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 42

    n = w39 ^ w34 ^ w28 ^ w26;
    w42 = n << 1 | n >>> 31;
    t = w42 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 43

    n = w40 ^ w35 ^ w29 ^ w27;
    w43 = n << 1 | n >>> 31;
    t = w43 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 44

    n = w41 ^ w36 ^ w30 ^ w28;
    w44 = n << 1 | n >>> 31;
    t = w44 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 45

    n = w42 ^ w37 ^ w31 ^ w29;
    w45 = n << 1 | n >>> 31;
    t = w45 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 46

    n = w43 ^ w38 ^ w32 ^ w30;
    w46 = n << 1 | n >>> 31;
    t = w46 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 47

    n = w44 ^ w39 ^ w33 ^ w31;
    w47 = n << 1 | n >>> 31;
    t = w47 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 48

    n = w45 ^ w40 ^ w34 ^ w32;
    w48 = n << 1 | n >>> 31;
    t = w48 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 49

    n = w46 ^ w41 ^ w35 ^ w33;
    w49 = n << 1 | n >>> 31;
    t = w49 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 50

    n = w47 ^ w42 ^ w36 ^ w34;
    w50 = n << 1 | n >>> 31;
    t = w50 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 51

    n = w48 ^ w43 ^ w37 ^ w35;
    w51 = n << 1 | n >>> 31;
    t = w51 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 52

    n = w49 ^ w44 ^ w38 ^ w36;
    w52 = n << 1 | n >>> 31;
    t = w52 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 53

    n = w50 ^ w45 ^ w39 ^ w37;
    w53 = n << 1 | n >>> 31;
    t = w53 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 54

    n = w51 ^ w46 ^ w40 ^ w38;
    w54 = n << 1 | n >>> 31;
    t = w54 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 55

    n = w52 ^ w47 ^ w41 ^ w39;
    w55 = n << 1 | n >>> 31;
    t = w55 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 56

    n = w53 ^ w48 ^ w42 ^ w40;
    w56 = n << 1 | n >>> 31;
    t = w56 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 57

    n = w54 ^ w49 ^ w43 ^ w41;
    w57 = n << 1 | n >>> 31;
    t = w57 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 58

    n = w55 ^ w50 ^ w44 ^ w42;
    w58 = n << 1 | n >>> 31;
    t = w58 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 59

    n = w56 ^ w51 ^ w45 ^ w43;
    w59 = n << 1 | n >>> 31;
    t = w59 + (a << 5 | a >>> 27) + e + (b & c | b & d | c & d) - 0x70e44324 | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 60

    n = w57 ^ w52 ^ w46 ^ w44;
    w60 = n << 1 | n >>> 31;
    t = w60 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 61

    n = w58 ^ w53 ^ w47 ^ w45;
    w61 = n << 1 | n >>> 31;
    t = w61 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 62

    n = w59 ^ w54 ^ w48 ^ w46;
    w62 = n << 1 | n >>> 31;
    t = w62 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 63

    n = w60 ^ w55 ^ w49 ^ w47;
    w63 = n << 1 | n >>> 31;
    t = w63 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 64

    n = w61 ^ w56 ^ w50 ^ w48;
    w64 = n << 1 | n >>> 31;
    t = w64 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 65

    n = w62 ^ w57 ^ w51 ^ w49;
    w65 = n << 1 | n >>> 31;
    t = w65 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 66

    n = w63 ^ w58 ^ w52 ^ w50;
    w66 = n << 1 | n >>> 31;
    t = w66 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 67

    n = w64 ^ w59 ^ w53 ^ w51;
    w67 = n << 1 | n >>> 31;
    t = w67 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 68

    n = w65 ^ w60 ^ w54 ^ w52;
    w68 = n << 1 | n >>> 31;
    t = w68 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 69

    n = w66 ^ w61 ^ w55 ^ w53;
    w69 = n << 1 | n >>> 31;
    t = w69 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 70

    n = w67 ^ w62 ^ w56 ^ w54;
    w70 = n << 1 | n >>> 31;
    t = w70 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 71

    n = w68 ^ w63 ^ w57 ^ w55;
    w71 = n << 1 | n >>> 31;
    t = w71 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 72

    n = w69 ^ w64 ^ w58 ^ w56;
    w72 = n << 1 | n >>> 31;
    t = w72 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 73

    n = w70 ^ w65 ^ w59 ^ w57;
    w73 = n << 1 | n >>> 31;
    t = w73 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 74

    n = w71 ^ w66 ^ w60 ^ w58;
    w74 = n << 1 | n >>> 31;
    t = w74 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 75

    n = w72 ^ w67 ^ w61 ^ w59;
    w75 = n << 1 | n >>> 31;
    t = w75 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 76

    n = w73 ^ w68 ^ w62 ^ w60;
    w76 = n << 1 | n >>> 31;
    t = w76 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 77

    n = w74 ^ w69 ^ w63 ^ w61;
    w77 = n << 1 | n >>> 31;
    t = w77 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 78

    n = w75 ^ w70 ^ w64 ^ w62;
    w78 = n << 1 | n >>> 31;
    t = w78 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t; // 79

    n = w76 ^ w71 ^ w65 ^ w63;
    w79 = n << 1 | n >>> 31;
    t = w79 + (a << 5 | a >>> 27) + e + (b ^ c ^ d) - 0x359d3e2a | 0;
    e = d;
    d = c;
    c = b << 30 | b >>> 2;
    b = a;
    a = t;
    H0 = H0 + a | 0;
    H1 = H1 + b | 0;
    H2 = H2 + c | 0;
    H3 = H3 + d | 0;
    H4 = H4 + e | 0;
  }

  function _core_heap(offset) {
    offset = offset | 0;

    _core(HEAP[offset | 0] << 24 | HEAP[offset | 1] << 16 | HEAP[offset | 2] << 8 | HEAP[offset | 3], HEAP[offset | 4] << 24 | HEAP[offset | 5] << 16 | HEAP[offset | 6] << 8 | HEAP[offset | 7], HEAP[offset | 8] << 24 | HEAP[offset | 9] << 16 | HEAP[offset | 10] << 8 | HEAP[offset | 11], HEAP[offset | 12] << 24 | HEAP[offset | 13] << 16 | HEAP[offset | 14] << 8 | HEAP[offset | 15], HEAP[offset | 16] << 24 | HEAP[offset | 17] << 16 | HEAP[offset | 18] << 8 | HEAP[offset | 19], HEAP[offset | 20] << 24 | HEAP[offset | 21] << 16 | HEAP[offset | 22] << 8 | HEAP[offset | 23], HEAP[offset | 24] << 24 | HEAP[offset | 25] << 16 | HEAP[offset | 26] << 8 | HEAP[offset | 27], HEAP[offset | 28] << 24 | HEAP[offset | 29] << 16 | HEAP[offset | 30] << 8 | HEAP[offset | 31], HEAP[offset | 32] << 24 | HEAP[offset | 33] << 16 | HEAP[offset | 34] << 8 | HEAP[offset | 35], HEAP[offset | 36] << 24 | HEAP[offset | 37] << 16 | HEAP[offset | 38] << 8 | HEAP[offset | 39], HEAP[offset | 40] << 24 | HEAP[offset | 41] << 16 | HEAP[offset | 42] << 8 | HEAP[offset | 43], HEAP[offset | 44] << 24 | HEAP[offset | 45] << 16 | HEAP[offset | 46] << 8 | HEAP[offset | 47], HEAP[offset | 48] << 24 | HEAP[offset | 49] << 16 | HEAP[offset | 50] << 8 | HEAP[offset | 51], HEAP[offset | 52] << 24 | HEAP[offset | 53] << 16 | HEAP[offset | 54] << 8 | HEAP[offset | 55], HEAP[offset | 56] << 24 | HEAP[offset | 57] << 16 | HEAP[offset | 58] << 8 | HEAP[offset | 59], HEAP[offset | 60] << 24 | HEAP[offset | 61] << 16 | HEAP[offset | 62] << 8 | HEAP[offset | 63]);
  } // offset — multiple of 32


  function _state_to_heap(output) {
    output = output | 0;
    HEAP[output | 0] = H0 >>> 24;
    HEAP[output | 1] = H0 >>> 16 & 255;
    HEAP[output | 2] = H0 >>> 8 & 255;
    HEAP[output | 3] = H0 & 255;
    HEAP[output | 4] = H1 >>> 24;
    HEAP[output | 5] = H1 >>> 16 & 255;
    HEAP[output | 6] = H1 >>> 8 & 255;
    HEAP[output | 7] = H1 & 255;
    HEAP[output | 8] = H2 >>> 24;
    HEAP[output | 9] = H2 >>> 16 & 255;
    HEAP[output | 10] = H2 >>> 8 & 255;
    HEAP[output | 11] = H2 & 255;
    HEAP[output | 12] = H3 >>> 24;
    HEAP[output | 13] = H3 >>> 16 & 255;
    HEAP[output | 14] = H3 >>> 8 & 255;
    HEAP[output | 15] = H3 & 255;
    HEAP[output | 16] = H4 >>> 24;
    HEAP[output | 17] = H4 >>> 16 & 255;
    HEAP[output | 18] = H4 >>> 8 & 255;
    HEAP[output | 19] = H4 & 255;
  }

  function reset() {
    H0 = 0x67452301;
    H1 = 0xefcdab89;
    H2 = 0x98badcfe;
    H3 = 0x10325476;
    H4 = 0xc3d2e1f0;
    TOTAL0 = TOTAL1 = 0;
  }

  function init(h0, h1, h2, h3, h4, total0, total1) {
    h0 = h0 | 0;
    h1 = h1 | 0;
    h2 = h2 | 0;
    h3 = h3 | 0;
    h4 = h4 | 0;
    total0 = total0 | 0;
    total1 = total1 | 0;
    H0 = h0;
    H1 = h1;
    H2 = h2;
    H3 = h3;
    H4 = h4;
    TOTAL0 = total0;
    TOTAL1 = total1;
  } // offset — multiple of 64


  function process(offset, length) {
    offset = offset | 0;
    length = length | 0;
    var hashed = 0;
    if (offset & 63) return -1;

    while ((length | 0) >= 64) {
      _core_heap(offset);

      offset = offset + 64 | 0;
      length = length - 64 | 0;
      hashed = hashed + 64 | 0;
    }

    TOTAL0 = TOTAL0 + hashed | 0;
    if (TOTAL0 >>> 0 < hashed >>> 0) TOTAL1 = TOTAL1 + 1 | 0;
    return hashed | 0;
  } // offset — multiple of 64
  // output — multiple of 32


  function finish(offset, length, output) {
    offset = offset | 0;
    length = length | 0;
    output = output | 0;
    var hashed = 0,
        i = 0;
    if (offset & 63) return -1;
    if (~output) if (output & 31) return -1;

    if ((length | 0) >= 64) {
      hashed = process(offset, length) | 0;
      if ((hashed | 0) == -1) return -1;
      offset = offset + hashed | 0;
      length = length - hashed | 0;
    }

    hashed = hashed + length | 0;
    TOTAL0 = TOTAL0 + length | 0;
    if (TOTAL0 >>> 0 < length >>> 0) TOTAL1 = TOTAL1 + 1 | 0;
    HEAP[offset | length] = 0x80;

    if ((length | 0) >= 56) {
      for (i = length + 1 | 0; (i | 0) < 64; i = i + 1 | 0) {
        HEAP[offset | i] = 0x00;
      }

      _core_heap(offset);

      length = 0;
      HEAP[offset | 0] = 0;
    }

    for (i = length + 1 | 0; (i | 0) < 59; i = i + 1 | 0) {
      HEAP[offset | i] = 0;
    }

    HEAP[offset | 56] = TOTAL1 >>> 21 & 255;
    HEAP[offset | 57] = TOTAL1 >>> 13 & 255;
    HEAP[offset | 58] = TOTAL1 >>> 5 & 255;
    HEAP[offset | 59] = TOTAL1 << 3 & 255 | TOTAL0 >>> 29;
    HEAP[offset | 60] = TOTAL0 >>> 21 & 255;
    HEAP[offset | 61] = TOTAL0 >>> 13 & 255;
    HEAP[offset | 62] = TOTAL0 >>> 5 & 255;
    HEAP[offset | 63] = TOTAL0 << 3 & 255;

    _core_heap(offset);

    if (~output) _state_to_heap(output);
    return hashed | 0;
  }

  function hmac_reset() {
    H0 = I0;
    H1 = I1;
    H2 = I2;
    H3 = I3;
    H4 = I4;
    TOTAL0 = 64;
    TOTAL1 = 0;
  }

  function _hmac_opad() {
    H0 = O0;
    H1 = O1;
    H2 = O2;
    H3 = O3;
    H4 = O4;
    TOTAL0 = 64;
    TOTAL1 = 0;
  }

  function hmac_init(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15) {
    p0 = p0 | 0;
    p1 = p1 | 0;
    p2 = p2 | 0;
    p3 = p3 | 0;
    p4 = p4 | 0;
    p5 = p5 | 0;
    p6 = p6 | 0;
    p7 = p7 | 0;
    p8 = p8 | 0;
    p9 = p9 | 0;
    p10 = p10 | 0;
    p11 = p11 | 0;
    p12 = p12 | 0;
    p13 = p13 | 0;
    p14 = p14 | 0;
    p15 = p15 | 0; // opad

    reset();

    _core(p0 ^ 0x5c5c5c5c, p1 ^ 0x5c5c5c5c, p2 ^ 0x5c5c5c5c, p3 ^ 0x5c5c5c5c, p4 ^ 0x5c5c5c5c, p5 ^ 0x5c5c5c5c, p6 ^ 0x5c5c5c5c, p7 ^ 0x5c5c5c5c, p8 ^ 0x5c5c5c5c, p9 ^ 0x5c5c5c5c, p10 ^ 0x5c5c5c5c, p11 ^ 0x5c5c5c5c, p12 ^ 0x5c5c5c5c, p13 ^ 0x5c5c5c5c, p14 ^ 0x5c5c5c5c, p15 ^ 0x5c5c5c5c);

    O0 = H0;
    O1 = H1;
    O2 = H2;
    O3 = H3;
    O4 = H4; // ipad

    reset();

    _core(p0 ^ 0x36363636, p1 ^ 0x36363636, p2 ^ 0x36363636, p3 ^ 0x36363636, p4 ^ 0x36363636, p5 ^ 0x36363636, p6 ^ 0x36363636, p7 ^ 0x36363636, p8 ^ 0x36363636, p9 ^ 0x36363636, p10 ^ 0x36363636, p11 ^ 0x36363636, p12 ^ 0x36363636, p13 ^ 0x36363636, p14 ^ 0x36363636, p15 ^ 0x36363636);

    I0 = H0;
    I1 = H1;
    I2 = H2;
    I3 = H3;
    I4 = H4;
    TOTAL0 = 64;
    TOTAL1 = 0;
  } // offset — multiple of 64
  // output — multiple of 32


  function hmac_finish(offset, length, output) {
    offset = offset | 0;
    length = length | 0;
    output = output | 0;
    var t0 = 0,
        t1 = 0,
        t2 = 0,
        t3 = 0,
        t4 = 0,
        hashed = 0;
    if (offset & 63) return -1;
    if (~output) if (output & 31) return -1;
    hashed = finish(offset, length, -1) | 0;
    t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4;

    _hmac_opad();

    _core(t0, t1, t2, t3, t4, 0x80000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672);

    if (~output) _state_to_heap(output);
    return hashed | 0;
  } // salt is assumed to be already processed
  // offset — multiple of 64
  // output — multiple of 32


  function pbkdf2_generate_block(offset, length, block, count, output) {
    offset = offset | 0;
    length = length | 0;
    block = block | 0;
    count = count | 0;
    output = output | 0;
    var h0 = 0,
        h1 = 0,
        h2 = 0,
        h3 = 0,
        h4 = 0,
        t0 = 0,
        t1 = 0,
        t2 = 0,
        t3 = 0,
        t4 = 0;
    if (offset & 63) return -1;
    if (~output) if (output & 31) return -1; // pad block number into heap
    // FIXME probable OOB write

    HEAP[offset + length | 0] = block >>> 24;
    HEAP[offset + length + 1 | 0] = block >>> 16 & 255;
    HEAP[offset + length + 2 | 0] = block >>> 8 & 255;
    HEAP[offset + length + 3 | 0] = block & 255; // finish first iteration

    hmac_finish(offset, length + 4 | 0, -1) | 0;
    h0 = t0 = H0, h1 = t1 = H1, h2 = t2 = H2, h3 = t3 = H3, h4 = t4 = H4;
    count = count - 1 | 0; // perform the rest iterations

    while ((count | 0) > 0) {
      hmac_reset();

      _core(t0, t1, t2, t3, t4, 0x80000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672);

      t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4;

      _hmac_opad();

      _core(t0, t1, t2, t3, t4, 0x80000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 672);

      t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4;
      h0 = h0 ^ H0;
      h1 = h1 ^ H1;
      h2 = h2 ^ H2;
      h3 = h3 ^ H3;
      h4 = h4 ^ H4;
      count = count - 1 | 0;
    }

    H0 = h0;
    H1 = h1;
    H2 = h2;
    H3 = h3;
    H4 = h4;
    if (~output) _state_to_heap(output);
    return 0;
  }

  return {
    // SHA1
    reset: reset,
    init: init,
    process: process,
    finish: finish,
    // HMAC-SHA1
    hmac_reset: hmac_reset,
    hmac_init: hmac_init,
    hmac_finish: hmac_finish,
    // PBKDF2-HMAC-SHA1
    pbkdf2_generate_block: pbkdf2_generate_block
  };
};

var Hash =
/*#__PURE__*/
function () {
  function Hash() {
    _classCallCheck(this, Hash);

    this.pos = 0;
    this.len = 0;
  }

  _createClass(Hash, [{
    key: "reset",
    value: function reset() {
      this.result = null;
      this.pos = 0;
      this.len = 0;
      this.asm.reset();
      return this;
    }
  }, {
    key: "process",
    value: function process(data) {
      if (this.result !== null) throw new IllegalStateError('state must be reset before processing new data');
      var asm = this.asm;
      var heap = this.heap;
      var hpos = this.pos;
      var hlen = this.len;
      var dpos = 0;
      var dlen = data.length;
      var wlen = 0;

      while (dlen > 0) {
        wlen = _heap_write(heap, hpos + hlen, data, dpos, dlen);
        hlen += wlen;
        dpos += wlen;
        dlen -= wlen;
        wlen = asm.process(hpos, hlen);
        hpos += wlen;
        hlen -= wlen;
        if (!hlen) hpos = 0;
      }

      this.pos = hpos;
      this.len = hlen;
      return this;
    }
  }, {
    key: "finish",
    value: function finish() {
      if (this.result !== null) throw new IllegalStateError('state must be reset before processing new data');
      this.asm.finish(this.pos, this.len, 0);
      this.result = new Uint8Array(this.HASH_SIZE);
      this.result.set(this.heap.subarray(0, this.HASH_SIZE));
      this.pos = 0;
      this.len = 0;
      return this;
    }
  }]);

  return Hash;
}();

var _sha1_block_size = 64;
var _sha1_hash_size = 20;

var Sha1 =
/*#__PURE__*/
function (_Hash) {
  _inherits(Sha1, _Hash);

  function Sha1() {
    var _this6;

    _classCallCheck(this, Sha1);

    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Sha1).call(this));
    _this6.NAME = 'sha1';
    _this6.BLOCK_SIZE = _sha1_block_size;
    _this6.HASH_SIZE = _sha1_hash_size;
    _this6.heap = _heap_init();
    _this6.asm = sha1_asm({
      Uint8Array: Uint8Array
    }, null, _this6.heap.buffer);

    _this6.reset();

    return _this6;
  }

  return Sha1;
}(Hash);

Sha1.NAME = 'sha1';

var sha256_asm = function sha256_asm(stdlib, foreign, buffer) {
  "use asm"; // SHA256 state

  var H0 = 0,
      H1 = 0,
      H2 = 0,
      H3 = 0,
      H4 = 0,
      H5 = 0,
      H6 = 0,
      H7 = 0,
      TOTAL0 = 0,
      TOTAL1 = 0; // HMAC state

  var I0 = 0,
      I1 = 0,
      I2 = 0,
      I3 = 0,
      I4 = 0,
      I5 = 0,
      I6 = 0,
      I7 = 0,
      O0 = 0,
      O1 = 0,
      O2 = 0,
      O3 = 0,
      O4 = 0,
      O5 = 0,
      O6 = 0,
      O7 = 0; // I/O buffer

  var HEAP = new stdlib.Uint8Array(buffer);

  function _core(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15) {
    w0 = w0 | 0;
    w1 = w1 | 0;
    w2 = w2 | 0;
    w3 = w3 | 0;
    w4 = w4 | 0;
    w5 = w5 | 0;
    w6 = w6 | 0;
    w7 = w7 | 0;
    w8 = w8 | 0;
    w9 = w9 | 0;
    w10 = w10 | 0;
    w11 = w11 | 0;
    w12 = w12 | 0;
    w13 = w13 | 0;
    w14 = w14 | 0;
    w15 = w15 | 0;
    var a = 0,
        b = 0,
        c = 0,
        d = 0,
        e = 0,
        f = 0,
        g = 0,
        h = 0;
    a = H0;
    b = H1;
    c = H2;
    d = H3;
    e = H4;
    f = H5;
    g = H6;
    h = H7; // 0

    h = w0 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0x428a2f98 | 0;
    d = d + h | 0;
    h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0; // 1

    g = w1 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0x71374491 | 0;
    c = c + g | 0;
    g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0; // 2

    f = w2 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0xb5c0fbcf | 0;
    b = b + f | 0;
    f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0; // 3

    e = w3 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0xe9b5dba5 | 0;
    a = a + e | 0;
    e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0; // 4

    d = w4 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0x3956c25b | 0;
    h = h + d | 0;
    d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0; // 5

    c = w5 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0x59f111f1 | 0;
    g = g + c | 0;
    c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0; // 6

    b = w6 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0x923f82a4 | 0;
    f = f + b | 0;
    b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0; // 7

    a = w7 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0xab1c5ed5 | 0;
    e = e + a | 0;
    a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0; // 8

    h = w8 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0xd807aa98 | 0;
    d = d + h | 0;
    h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0; // 9

    g = w9 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0x12835b01 | 0;
    c = c + g | 0;
    g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0; // 10

    f = w10 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0x243185be | 0;
    b = b + f | 0;
    f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0; // 11

    e = w11 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0x550c7dc3 | 0;
    a = a + e | 0;
    e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0; // 12

    d = w12 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0x72be5d74 | 0;
    h = h + d | 0;
    d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0; // 13

    c = w13 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0x80deb1fe | 0;
    g = g + c | 0;
    c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0; // 14

    b = w14 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0x9bdc06a7 | 0;
    f = f + b | 0;
    b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0; // 15

    a = w15 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0xc19bf174 | 0;
    e = e + a | 0;
    a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0; // 16

    w0 = (w1 >>> 7 ^ w1 >>> 18 ^ w1 >>> 3 ^ w1 << 25 ^ w1 << 14) + (w14 >>> 17 ^ w14 >>> 19 ^ w14 >>> 10 ^ w14 << 15 ^ w14 << 13) + w0 + w9 | 0;
    h = w0 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0xe49b69c1 | 0;
    d = d + h | 0;
    h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0; // 17

    w1 = (w2 >>> 7 ^ w2 >>> 18 ^ w2 >>> 3 ^ w2 << 25 ^ w2 << 14) + (w15 >>> 17 ^ w15 >>> 19 ^ w15 >>> 10 ^ w15 << 15 ^ w15 << 13) + w1 + w10 | 0;
    g = w1 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0xefbe4786 | 0;
    c = c + g | 0;
    g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0; // 18

    w2 = (w3 >>> 7 ^ w3 >>> 18 ^ w3 >>> 3 ^ w3 << 25 ^ w3 << 14) + (w0 >>> 17 ^ w0 >>> 19 ^ w0 >>> 10 ^ w0 << 15 ^ w0 << 13) + w2 + w11 | 0;
    f = w2 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0x0fc19dc6 | 0;
    b = b + f | 0;
    f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0; // 19

    w3 = (w4 >>> 7 ^ w4 >>> 18 ^ w4 >>> 3 ^ w4 << 25 ^ w4 << 14) + (w1 >>> 17 ^ w1 >>> 19 ^ w1 >>> 10 ^ w1 << 15 ^ w1 << 13) + w3 + w12 | 0;
    e = w3 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0x240ca1cc | 0;
    a = a + e | 0;
    e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0; // 20

    w4 = (w5 >>> 7 ^ w5 >>> 18 ^ w5 >>> 3 ^ w5 << 25 ^ w5 << 14) + (w2 >>> 17 ^ w2 >>> 19 ^ w2 >>> 10 ^ w2 << 15 ^ w2 << 13) + w4 + w13 | 0;
    d = w4 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0x2de92c6f | 0;
    h = h + d | 0;
    d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0; // 21

    w5 = (w6 >>> 7 ^ w6 >>> 18 ^ w6 >>> 3 ^ w6 << 25 ^ w6 << 14) + (w3 >>> 17 ^ w3 >>> 19 ^ w3 >>> 10 ^ w3 << 15 ^ w3 << 13) + w5 + w14 | 0;
    c = w5 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0x4a7484aa | 0;
    g = g + c | 0;
    c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0; // 22

    w6 = (w7 >>> 7 ^ w7 >>> 18 ^ w7 >>> 3 ^ w7 << 25 ^ w7 << 14) + (w4 >>> 17 ^ w4 >>> 19 ^ w4 >>> 10 ^ w4 << 15 ^ w4 << 13) + w6 + w15 | 0;
    b = w6 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0x5cb0a9dc | 0;
    f = f + b | 0;
    b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0; // 23

    w7 = (w8 >>> 7 ^ w8 >>> 18 ^ w8 >>> 3 ^ w8 << 25 ^ w8 << 14) + (w5 >>> 17 ^ w5 >>> 19 ^ w5 >>> 10 ^ w5 << 15 ^ w5 << 13) + w7 + w0 | 0;
    a = w7 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0x76f988da | 0;
    e = e + a | 0;
    a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0; // 24

    w8 = (w9 >>> 7 ^ w9 >>> 18 ^ w9 >>> 3 ^ w9 << 25 ^ w9 << 14) + (w6 >>> 17 ^ w6 >>> 19 ^ w6 >>> 10 ^ w6 << 15 ^ w6 << 13) + w8 + w1 | 0;
    h = w8 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0x983e5152 | 0;
    d = d + h | 0;
    h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0; // 25

    w9 = (w10 >>> 7 ^ w10 >>> 18 ^ w10 >>> 3 ^ w10 << 25 ^ w10 << 14) + (w7 >>> 17 ^ w7 >>> 19 ^ w7 >>> 10 ^ w7 << 15 ^ w7 << 13) + w9 + w2 | 0;
    g = w9 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0xa831c66d | 0;
    c = c + g | 0;
    g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0; // 26

    w10 = (w11 >>> 7 ^ w11 >>> 18 ^ w11 >>> 3 ^ w11 << 25 ^ w11 << 14) + (w8 >>> 17 ^ w8 >>> 19 ^ w8 >>> 10 ^ w8 << 15 ^ w8 << 13) + w10 + w3 | 0;
    f = w10 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0xb00327c8 | 0;
    b = b + f | 0;
    f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0; // 27

    w11 = (w12 >>> 7 ^ w12 >>> 18 ^ w12 >>> 3 ^ w12 << 25 ^ w12 << 14) + (w9 >>> 17 ^ w9 >>> 19 ^ w9 >>> 10 ^ w9 << 15 ^ w9 << 13) + w11 + w4 | 0;
    e = w11 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0xbf597fc7 | 0;
    a = a + e | 0;
    e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0; // 28

    w12 = (w13 >>> 7 ^ w13 >>> 18 ^ w13 >>> 3 ^ w13 << 25 ^ w13 << 14) + (w10 >>> 17 ^ w10 >>> 19 ^ w10 >>> 10 ^ w10 << 15 ^ w10 << 13) + w12 + w5 | 0;
    d = w12 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0xc6e00bf3 | 0;
    h = h + d | 0;
    d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0; // 29

    w13 = (w14 >>> 7 ^ w14 >>> 18 ^ w14 >>> 3 ^ w14 << 25 ^ w14 << 14) + (w11 >>> 17 ^ w11 >>> 19 ^ w11 >>> 10 ^ w11 << 15 ^ w11 << 13) + w13 + w6 | 0;
    c = w13 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0xd5a79147 | 0;
    g = g + c | 0;
    c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0; // 30

    w14 = (w15 >>> 7 ^ w15 >>> 18 ^ w15 >>> 3 ^ w15 << 25 ^ w15 << 14) + (w12 >>> 17 ^ w12 >>> 19 ^ w12 >>> 10 ^ w12 << 15 ^ w12 << 13) + w14 + w7 | 0;
    b = w14 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0x06ca6351 | 0;
    f = f + b | 0;
    b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0; // 31

    w15 = (w0 >>> 7 ^ w0 >>> 18 ^ w0 >>> 3 ^ w0 << 25 ^ w0 << 14) + (w13 >>> 17 ^ w13 >>> 19 ^ w13 >>> 10 ^ w13 << 15 ^ w13 << 13) + w15 + w8 | 0;
    a = w15 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0x14292967 | 0;
    e = e + a | 0;
    a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0; // 32

    w0 = (w1 >>> 7 ^ w1 >>> 18 ^ w1 >>> 3 ^ w1 << 25 ^ w1 << 14) + (w14 >>> 17 ^ w14 >>> 19 ^ w14 >>> 10 ^ w14 << 15 ^ w14 << 13) + w0 + w9 | 0;
    h = w0 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0x27b70a85 | 0;
    d = d + h | 0;
    h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0; // 33

    w1 = (w2 >>> 7 ^ w2 >>> 18 ^ w2 >>> 3 ^ w2 << 25 ^ w2 << 14) + (w15 >>> 17 ^ w15 >>> 19 ^ w15 >>> 10 ^ w15 << 15 ^ w15 << 13) + w1 + w10 | 0;
    g = w1 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0x2e1b2138 | 0;
    c = c + g | 0;
    g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0; // 34

    w2 = (w3 >>> 7 ^ w3 >>> 18 ^ w3 >>> 3 ^ w3 << 25 ^ w3 << 14) + (w0 >>> 17 ^ w0 >>> 19 ^ w0 >>> 10 ^ w0 << 15 ^ w0 << 13) + w2 + w11 | 0;
    f = w2 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0x4d2c6dfc | 0;
    b = b + f | 0;
    f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0; // 35

    w3 = (w4 >>> 7 ^ w4 >>> 18 ^ w4 >>> 3 ^ w4 << 25 ^ w4 << 14) + (w1 >>> 17 ^ w1 >>> 19 ^ w1 >>> 10 ^ w1 << 15 ^ w1 << 13) + w3 + w12 | 0;
    e = w3 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0x53380d13 | 0;
    a = a + e | 0;
    e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0; // 36

    w4 = (w5 >>> 7 ^ w5 >>> 18 ^ w5 >>> 3 ^ w5 << 25 ^ w5 << 14) + (w2 >>> 17 ^ w2 >>> 19 ^ w2 >>> 10 ^ w2 << 15 ^ w2 << 13) + w4 + w13 | 0;
    d = w4 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0x650a7354 | 0;
    h = h + d | 0;
    d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0; // 37

    w5 = (w6 >>> 7 ^ w6 >>> 18 ^ w6 >>> 3 ^ w6 << 25 ^ w6 << 14) + (w3 >>> 17 ^ w3 >>> 19 ^ w3 >>> 10 ^ w3 << 15 ^ w3 << 13) + w5 + w14 | 0;
    c = w5 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0x766a0abb | 0;
    g = g + c | 0;
    c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0; // 38

    w6 = (w7 >>> 7 ^ w7 >>> 18 ^ w7 >>> 3 ^ w7 << 25 ^ w7 << 14) + (w4 >>> 17 ^ w4 >>> 19 ^ w4 >>> 10 ^ w4 << 15 ^ w4 << 13) + w6 + w15 | 0;
    b = w6 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0x81c2c92e | 0;
    f = f + b | 0;
    b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0; // 39

    w7 = (w8 >>> 7 ^ w8 >>> 18 ^ w8 >>> 3 ^ w8 << 25 ^ w8 << 14) + (w5 >>> 17 ^ w5 >>> 19 ^ w5 >>> 10 ^ w5 << 15 ^ w5 << 13) + w7 + w0 | 0;
    a = w7 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0x92722c85 | 0;
    e = e + a | 0;
    a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0; // 40

    w8 = (w9 >>> 7 ^ w9 >>> 18 ^ w9 >>> 3 ^ w9 << 25 ^ w9 << 14) + (w6 >>> 17 ^ w6 >>> 19 ^ w6 >>> 10 ^ w6 << 15 ^ w6 << 13) + w8 + w1 | 0;
    h = w8 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0xa2bfe8a1 | 0;
    d = d + h | 0;
    h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0; // 41

    w9 = (w10 >>> 7 ^ w10 >>> 18 ^ w10 >>> 3 ^ w10 << 25 ^ w10 << 14) + (w7 >>> 17 ^ w7 >>> 19 ^ w7 >>> 10 ^ w7 << 15 ^ w7 << 13) + w9 + w2 | 0;
    g = w9 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0xa81a664b | 0;
    c = c + g | 0;
    g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0; // 42

    w10 = (w11 >>> 7 ^ w11 >>> 18 ^ w11 >>> 3 ^ w11 << 25 ^ w11 << 14) + (w8 >>> 17 ^ w8 >>> 19 ^ w8 >>> 10 ^ w8 << 15 ^ w8 << 13) + w10 + w3 | 0;
    f = w10 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0xc24b8b70 | 0;
    b = b + f | 0;
    f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0; // 43

    w11 = (w12 >>> 7 ^ w12 >>> 18 ^ w12 >>> 3 ^ w12 << 25 ^ w12 << 14) + (w9 >>> 17 ^ w9 >>> 19 ^ w9 >>> 10 ^ w9 << 15 ^ w9 << 13) + w11 + w4 | 0;
    e = w11 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0xc76c51a3 | 0;
    a = a + e | 0;
    e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0; // 44

    w12 = (w13 >>> 7 ^ w13 >>> 18 ^ w13 >>> 3 ^ w13 << 25 ^ w13 << 14) + (w10 >>> 17 ^ w10 >>> 19 ^ w10 >>> 10 ^ w10 << 15 ^ w10 << 13) + w12 + w5 | 0;
    d = w12 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0xd192e819 | 0;
    h = h + d | 0;
    d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0; // 45

    w13 = (w14 >>> 7 ^ w14 >>> 18 ^ w14 >>> 3 ^ w14 << 25 ^ w14 << 14) + (w11 >>> 17 ^ w11 >>> 19 ^ w11 >>> 10 ^ w11 << 15 ^ w11 << 13) + w13 + w6 | 0;
    c = w13 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0xd6990624 | 0;
    g = g + c | 0;
    c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0; // 46

    w14 = (w15 >>> 7 ^ w15 >>> 18 ^ w15 >>> 3 ^ w15 << 25 ^ w15 << 14) + (w12 >>> 17 ^ w12 >>> 19 ^ w12 >>> 10 ^ w12 << 15 ^ w12 << 13) + w14 + w7 | 0;
    b = w14 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0xf40e3585 | 0;
    f = f + b | 0;
    b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0; // 47

    w15 = (w0 >>> 7 ^ w0 >>> 18 ^ w0 >>> 3 ^ w0 << 25 ^ w0 << 14) + (w13 >>> 17 ^ w13 >>> 19 ^ w13 >>> 10 ^ w13 << 15 ^ w13 << 13) + w15 + w8 | 0;
    a = w15 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0x106aa070 | 0;
    e = e + a | 0;
    a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0; // 48

    w0 = (w1 >>> 7 ^ w1 >>> 18 ^ w1 >>> 3 ^ w1 << 25 ^ w1 << 14) + (w14 >>> 17 ^ w14 >>> 19 ^ w14 >>> 10 ^ w14 << 15 ^ w14 << 13) + w0 + w9 | 0;
    h = w0 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0x19a4c116 | 0;
    d = d + h | 0;
    h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0; // 49

    w1 = (w2 >>> 7 ^ w2 >>> 18 ^ w2 >>> 3 ^ w2 << 25 ^ w2 << 14) + (w15 >>> 17 ^ w15 >>> 19 ^ w15 >>> 10 ^ w15 << 15 ^ w15 << 13) + w1 + w10 | 0;
    g = w1 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0x1e376c08 | 0;
    c = c + g | 0;
    g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0; // 50

    w2 = (w3 >>> 7 ^ w3 >>> 18 ^ w3 >>> 3 ^ w3 << 25 ^ w3 << 14) + (w0 >>> 17 ^ w0 >>> 19 ^ w0 >>> 10 ^ w0 << 15 ^ w0 << 13) + w2 + w11 | 0;
    f = w2 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0x2748774c | 0;
    b = b + f | 0;
    f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0; // 51

    w3 = (w4 >>> 7 ^ w4 >>> 18 ^ w4 >>> 3 ^ w4 << 25 ^ w4 << 14) + (w1 >>> 17 ^ w1 >>> 19 ^ w1 >>> 10 ^ w1 << 15 ^ w1 << 13) + w3 + w12 | 0;
    e = w3 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0x34b0bcb5 | 0;
    a = a + e | 0;
    e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0; // 52

    w4 = (w5 >>> 7 ^ w5 >>> 18 ^ w5 >>> 3 ^ w5 << 25 ^ w5 << 14) + (w2 >>> 17 ^ w2 >>> 19 ^ w2 >>> 10 ^ w2 << 15 ^ w2 << 13) + w4 + w13 | 0;
    d = w4 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0x391c0cb3 | 0;
    h = h + d | 0;
    d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0; // 53

    w5 = (w6 >>> 7 ^ w6 >>> 18 ^ w6 >>> 3 ^ w6 << 25 ^ w6 << 14) + (w3 >>> 17 ^ w3 >>> 19 ^ w3 >>> 10 ^ w3 << 15 ^ w3 << 13) + w5 + w14 | 0;
    c = w5 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0x4ed8aa4a | 0;
    g = g + c | 0;
    c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0; // 54

    w6 = (w7 >>> 7 ^ w7 >>> 18 ^ w7 >>> 3 ^ w7 << 25 ^ w7 << 14) + (w4 >>> 17 ^ w4 >>> 19 ^ w4 >>> 10 ^ w4 << 15 ^ w4 << 13) + w6 + w15 | 0;
    b = w6 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0x5b9cca4f | 0;
    f = f + b | 0;
    b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0; // 55

    w7 = (w8 >>> 7 ^ w8 >>> 18 ^ w8 >>> 3 ^ w8 << 25 ^ w8 << 14) + (w5 >>> 17 ^ w5 >>> 19 ^ w5 >>> 10 ^ w5 << 15 ^ w5 << 13) + w7 + w0 | 0;
    a = w7 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0x682e6ff3 | 0;
    e = e + a | 0;
    a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0; // 56

    w8 = (w9 >>> 7 ^ w9 >>> 18 ^ w9 >>> 3 ^ w9 << 25 ^ w9 << 14) + (w6 >>> 17 ^ w6 >>> 19 ^ w6 >>> 10 ^ w6 << 15 ^ w6 << 13) + w8 + w1 | 0;
    h = w8 + h + (e >>> 6 ^ e >>> 11 ^ e >>> 25 ^ e << 26 ^ e << 21 ^ e << 7) + (g ^ e & (f ^ g)) + 0x748f82ee | 0;
    d = d + h | 0;
    h = h + (a & b ^ c & (a ^ b)) + (a >>> 2 ^ a >>> 13 ^ a >>> 22 ^ a << 30 ^ a << 19 ^ a << 10) | 0; // 57

    w9 = (w10 >>> 7 ^ w10 >>> 18 ^ w10 >>> 3 ^ w10 << 25 ^ w10 << 14) + (w7 >>> 17 ^ w7 >>> 19 ^ w7 >>> 10 ^ w7 << 15 ^ w7 << 13) + w9 + w2 | 0;
    g = w9 + g + (d >>> 6 ^ d >>> 11 ^ d >>> 25 ^ d << 26 ^ d << 21 ^ d << 7) + (f ^ d & (e ^ f)) + 0x78a5636f | 0;
    c = c + g | 0;
    g = g + (h & a ^ b & (h ^ a)) + (h >>> 2 ^ h >>> 13 ^ h >>> 22 ^ h << 30 ^ h << 19 ^ h << 10) | 0; // 58

    w10 = (w11 >>> 7 ^ w11 >>> 18 ^ w11 >>> 3 ^ w11 << 25 ^ w11 << 14) + (w8 >>> 17 ^ w8 >>> 19 ^ w8 >>> 10 ^ w8 << 15 ^ w8 << 13) + w10 + w3 | 0;
    f = w10 + f + (c >>> 6 ^ c >>> 11 ^ c >>> 25 ^ c << 26 ^ c << 21 ^ c << 7) + (e ^ c & (d ^ e)) + 0x84c87814 | 0;
    b = b + f | 0;
    f = f + (g & h ^ a & (g ^ h)) + (g >>> 2 ^ g >>> 13 ^ g >>> 22 ^ g << 30 ^ g << 19 ^ g << 10) | 0; // 59

    w11 = (w12 >>> 7 ^ w12 >>> 18 ^ w12 >>> 3 ^ w12 << 25 ^ w12 << 14) + (w9 >>> 17 ^ w9 >>> 19 ^ w9 >>> 10 ^ w9 << 15 ^ w9 << 13) + w11 + w4 | 0;
    e = w11 + e + (b >>> 6 ^ b >>> 11 ^ b >>> 25 ^ b << 26 ^ b << 21 ^ b << 7) + (d ^ b & (c ^ d)) + 0x8cc70208 | 0;
    a = a + e | 0;
    e = e + (f & g ^ h & (f ^ g)) + (f >>> 2 ^ f >>> 13 ^ f >>> 22 ^ f << 30 ^ f << 19 ^ f << 10) | 0; // 60

    w12 = (w13 >>> 7 ^ w13 >>> 18 ^ w13 >>> 3 ^ w13 << 25 ^ w13 << 14) + (w10 >>> 17 ^ w10 >>> 19 ^ w10 >>> 10 ^ w10 << 15 ^ w10 << 13) + w12 + w5 | 0;
    d = w12 + d + (a >>> 6 ^ a >>> 11 ^ a >>> 25 ^ a << 26 ^ a << 21 ^ a << 7) + (c ^ a & (b ^ c)) + 0x90befffa | 0;
    h = h + d | 0;
    d = d + (e & f ^ g & (e ^ f)) + (e >>> 2 ^ e >>> 13 ^ e >>> 22 ^ e << 30 ^ e << 19 ^ e << 10) | 0; // 61

    w13 = (w14 >>> 7 ^ w14 >>> 18 ^ w14 >>> 3 ^ w14 << 25 ^ w14 << 14) + (w11 >>> 17 ^ w11 >>> 19 ^ w11 >>> 10 ^ w11 << 15 ^ w11 << 13) + w13 + w6 | 0;
    c = w13 + c + (h >>> 6 ^ h >>> 11 ^ h >>> 25 ^ h << 26 ^ h << 21 ^ h << 7) + (b ^ h & (a ^ b)) + 0xa4506ceb | 0;
    g = g + c | 0;
    c = c + (d & e ^ f & (d ^ e)) + (d >>> 2 ^ d >>> 13 ^ d >>> 22 ^ d << 30 ^ d << 19 ^ d << 10) | 0; // 62

    w14 = (w15 >>> 7 ^ w15 >>> 18 ^ w15 >>> 3 ^ w15 << 25 ^ w15 << 14) + (w12 >>> 17 ^ w12 >>> 19 ^ w12 >>> 10 ^ w12 << 15 ^ w12 << 13) + w14 + w7 | 0;
    b = w14 + b + (g >>> 6 ^ g >>> 11 ^ g >>> 25 ^ g << 26 ^ g << 21 ^ g << 7) + (a ^ g & (h ^ a)) + 0xbef9a3f7 | 0;
    f = f + b | 0;
    b = b + (c & d ^ e & (c ^ d)) + (c >>> 2 ^ c >>> 13 ^ c >>> 22 ^ c << 30 ^ c << 19 ^ c << 10) | 0; // 63

    w15 = (w0 >>> 7 ^ w0 >>> 18 ^ w0 >>> 3 ^ w0 << 25 ^ w0 << 14) + (w13 >>> 17 ^ w13 >>> 19 ^ w13 >>> 10 ^ w13 << 15 ^ w13 << 13) + w15 + w8 | 0;
    a = w15 + a + (f >>> 6 ^ f >>> 11 ^ f >>> 25 ^ f << 26 ^ f << 21 ^ f << 7) + (h ^ f & (g ^ h)) + 0xc67178f2 | 0;
    e = e + a | 0;
    a = a + (b & c ^ d & (b ^ c)) + (b >>> 2 ^ b >>> 13 ^ b >>> 22 ^ b << 30 ^ b << 19 ^ b << 10) | 0;
    H0 = H0 + a | 0;
    H1 = H1 + b | 0;
    H2 = H2 + c | 0;
    H3 = H3 + d | 0;
    H4 = H4 + e | 0;
    H5 = H5 + f | 0;
    H6 = H6 + g | 0;
    H7 = H7 + h | 0;
  }

  function _core_heap(offset) {
    offset = offset | 0;

    _core(HEAP[offset | 0] << 24 | HEAP[offset | 1] << 16 | HEAP[offset | 2] << 8 | HEAP[offset | 3], HEAP[offset | 4] << 24 | HEAP[offset | 5] << 16 | HEAP[offset | 6] << 8 | HEAP[offset | 7], HEAP[offset | 8] << 24 | HEAP[offset | 9] << 16 | HEAP[offset | 10] << 8 | HEAP[offset | 11], HEAP[offset | 12] << 24 | HEAP[offset | 13] << 16 | HEAP[offset | 14] << 8 | HEAP[offset | 15], HEAP[offset | 16] << 24 | HEAP[offset | 17] << 16 | HEAP[offset | 18] << 8 | HEAP[offset | 19], HEAP[offset | 20] << 24 | HEAP[offset | 21] << 16 | HEAP[offset | 22] << 8 | HEAP[offset | 23], HEAP[offset | 24] << 24 | HEAP[offset | 25] << 16 | HEAP[offset | 26] << 8 | HEAP[offset | 27], HEAP[offset | 28] << 24 | HEAP[offset | 29] << 16 | HEAP[offset | 30] << 8 | HEAP[offset | 31], HEAP[offset | 32] << 24 | HEAP[offset | 33] << 16 | HEAP[offset | 34] << 8 | HEAP[offset | 35], HEAP[offset | 36] << 24 | HEAP[offset | 37] << 16 | HEAP[offset | 38] << 8 | HEAP[offset | 39], HEAP[offset | 40] << 24 | HEAP[offset | 41] << 16 | HEAP[offset | 42] << 8 | HEAP[offset | 43], HEAP[offset | 44] << 24 | HEAP[offset | 45] << 16 | HEAP[offset | 46] << 8 | HEAP[offset | 47], HEAP[offset | 48] << 24 | HEAP[offset | 49] << 16 | HEAP[offset | 50] << 8 | HEAP[offset | 51], HEAP[offset | 52] << 24 | HEAP[offset | 53] << 16 | HEAP[offset | 54] << 8 | HEAP[offset | 55], HEAP[offset | 56] << 24 | HEAP[offset | 57] << 16 | HEAP[offset | 58] << 8 | HEAP[offset | 59], HEAP[offset | 60] << 24 | HEAP[offset | 61] << 16 | HEAP[offset | 62] << 8 | HEAP[offset | 63]);
  } // offset — multiple of 32


  function _state_to_heap(output) {
    output = output | 0;
    HEAP[output | 0] = H0 >>> 24;
    HEAP[output | 1] = H0 >>> 16 & 255;
    HEAP[output | 2] = H0 >>> 8 & 255;
    HEAP[output | 3] = H0 & 255;
    HEAP[output | 4] = H1 >>> 24;
    HEAP[output | 5] = H1 >>> 16 & 255;
    HEAP[output | 6] = H1 >>> 8 & 255;
    HEAP[output | 7] = H1 & 255;
    HEAP[output | 8] = H2 >>> 24;
    HEAP[output | 9] = H2 >>> 16 & 255;
    HEAP[output | 10] = H2 >>> 8 & 255;
    HEAP[output | 11] = H2 & 255;
    HEAP[output | 12] = H3 >>> 24;
    HEAP[output | 13] = H3 >>> 16 & 255;
    HEAP[output | 14] = H3 >>> 8 & 255;
    HEAP[output | 15] = H3 & 255;
    HEAP[output | 16] = H4 >>> 24;
    HEAP[output | 17] = H4 >>> 16 & 255;
    HEAP[output | 18] = H4 >>> 8 & 255;
    HEAP[output | 19] = H4 & 255;
    HEAP[output | 20] = H5 >>> 24;
    HEAP[output | 21] = H5 >>> 16 & 255;
    HEAP[output | 22] = H5 >>> 8 & 255;
    HEAP[output | 23] = H5 & 255;
    HEAP[output | 24] = H6 >>> 24;
    HEAP[output | 25] = H6 >>> 16 & 255;
    HEAP[output | 26] = H6 >>> 8 & 255;
    HEAP[output | 27] = H6 & 255;
    HEAP[output | 28] = H7 >>> 24;
    HEAP[output | 29] = H7 >>> 16 & 255;
    HEAP[output | 30] = H7 >>> 8 & 255;
    HEAP[output | 31] = H7 & 255;
  }

  function reset() {
    H0 = 0x6a09e667;
    H1 = 0xbb67ae85;
    H2 = 0x3c6ef372;
    H3 = 0xa54ff53a;
    H4 = 0x510e527f;
    H5 = 0x9b05688c;
    H6 = 0x1f83d9ab;
    H7 = 0x5be0cd19;
    TOTAL0 = TOTAL1 = 0;
  }

  function init(h0, h1, h2, h3, h4, h5, h6, h7, total0, total1) {
    h0 = h0 | 0;
    h1 = h1 | 0;
    h2 = h2 | 0;
    h3 = h3 | 0;
    h4 = h4 | 0;
    h5 = h5 | 0;
    h6 = h6 | 0;
    h7 = h7 | 0;
    total0 = total0 | 0;
    total1 = total1 | 0;
    H0 = h0;
    H1 = h1;
    H2 = h2;
    H3 = h3;
    H4 = h4;
    H5 = h5;
    H6 = h6;
    H7 = h7;
    TOTAL0 = total0;
    TOTAL1 = total1;
  } // offset — multiple of 64


  function process(offset, length) {
    offset = offset | 0;
    length = length | 0;
    var hashed = 0;
    if (offset & 63) return -1;

    while ((length | 0) >= 64) {
      _core_heap(offset);

      offset = offset + 64 | 0;
      length = length - 64 | 0;
      hashed = hashed + 64 | 0;
    }

    TOTAL0 = TOTAL0 + hashed | 0;
    if (TOTAL0 >>> 0 < hashed >>> 0) TOTAL1 = TOTAL1 + 1 | 0;
    return hashed | 0;
  } // offset — multiple of 64
  // output — multiple of 32


  function finish(offset, length, output) {
    offset = offset | 0;
    length = length | 0;
    output = output | 0;
    var hashed = 0,
        i = 0;
    if (offset & 63) return -1;
    if (~output) if (output & 31) return -1;

    if ((length | 0) >= 64) {
      hashed = process(offset, length) | 0;
      if ((hashed | 0) == -1) return -1;
      offset = offset + hashed | 0;
      length = length - hashed | 0;
    }

    hashed = hashed + length | 0;
    TOTAL0 = TOTAL0 + length | 0;
    if (TOTAL0 >>> 0 < length >>> 0) TOTAL1 = TOTAL1 + 1 | 0;
    HEAP[offset | length] = 0x80;

    if ((length | 0) >= 56) {
      for (i = length + 1 | 0; (i | 0) < 64; i = i + 1 | 0) {
        HEAP[offset | i] = 0x00;
      }

      _core_heap(offset);

      length = 0;
      HEAP[offset | 0] = 0;
    }

    for (i = length + 1 | 0; (i | 0) < 59; i = i + 1 | 0) {
      HEAP[offset | i] = 0;
    }

    HEAP[offset | 56] = TOTAL1 >>> 21 & 255;
    HEAP[offset | 57] = TOTAL1 >>> 13 & 255;
    HEAP[offset | 58] = TOTAL1 >>> 5 & 255;
    HEAP[offset | 59] = TOTAL1 << 3 & 255 | TOTAL0 >>> 29;
    HEAP[offset | 60] = TOTAL0 >>> 21 & 255;
    HEAP[offset | 61] = TOTAL0 >>> 13 & 255;
    HEAP[offset | 62] = TOTAL0 >>> 5 & 255;
    HEAP[offset | 63] = TOTAL0 << 3 & 255;

    _core_heap(offset);

    if (~output) _state_to_heap(output);
    return hashed | 0;
  }

  function hmac_reset() {
    H0 = I0;
    H1 = I1;
    H2 = I2;
    H3 = I3;
    H4 = I4;
    H5 = I5;
    H6 = I6;
    H7 = I7;
    TOTAL0 = 64;
    TOTAL1 = 0;
  }

  function _hmac_opad() {
    H0 = O0;
    H1 = O1;
    H2 = O2;
    H3 = O3;
    H4 = O4;
    H5 = O5;
    H6 = O6;
    H7 = O7;
    TOTAL0 = 64;
    TOTAL1 = 0;
  }

  function hmac_init(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15) {
    p0 = p0 | 0;
    p1 = p1 | 0;
    p2 = p2 | 0;
    p3 = p3 | 0;
    p4 = p4 | 0;
    p5 = p5 | 0;
    p6 = p6 | 0;
    p7 = p7 | 0;
    p8 = p8 | 0;
    p9 = p9 | 0;
    p10 = p10 | 0;
    p11 = p11 | 0;
    p12 = p12 | 0;
    p13 = p13 | 0;
    p14 = p14 | 0;
    p15 = p15 | 0; // opad

    reset();

    _core(p0 ^ 0x5c5c5c5c, p1 ^ 0x5c5c5c5c, p2 ^ 0x5c5c5c5c, p3 ^ 0x5c5c5c5c, p4 ^ 0x5c5c5c5c, p5 ^ 0x5c5c5c5c, p6 ^ 0x5c5c5c5c, p7 ^ 0x5c5c5c5c, p8 ^ 0x5c5c5c5c, p9 ^ 0x5c5c5c5c, p10 ^ 0x5c5c5c5c, p11 ^ 0x5c5c5c5c, p12 ^ 0x5c5c5c5c, p13 ^ 0x5c5c5c5c, p14 ^ 0x5c5c5c5c, p15 ^ 0x5c5c5c5c);

    O0 = H0;
    O1 = H1;
    O2 = H2;
    O3 = H3;
    O4 = H4;
    O5 = H5;
    O6 = H6;
    O7 = H7; // ipad

    reset();

    _core(p0 ^ 0x36363636, p1 ^ 0x36363636, p2 ^ 0x36363636, p3 ^ 0x36363636, p4 ^ 0x36363636, p5 ^ 0x36363636, p6 ^ 0x36363636, p7 ^ 0x36363636, p8 ^ 0x36363636, p9 ^ 0x36363636, p10 ^ 0x36363636, p11 ^ 0x36363636, p12 ^ 0x36363636, p13 ^ 0x36363636, p14 ^ 0x36363636, p15 ^ 0x36363636);

    I0 = H0;
    I1 = H1;
    I2 = H2;
    I3 = H3;
    I4 = H4;
    I5 = H5;
    I6 = H6;
    I7 = H7;
    TOTAL0 = 64;
    TOTAL1 = 0;
  } // offset — multiple of 64
  // output — multiple of 32


  function hmac_finish(offset, length, output) {
    offset = offset | 0;
    length = length | 0;
    output = output | 0;
    var t0 = 0,
        t1 = 0,
        t2 = 0,
        t3 = 0,
        t4 = 0,
        t5 = 0,
        t6 = 0,
        t7 = 0,
        hashed = 0;
    if (offset & 63) return -1;
    if (~output) if (output & 31) return -1;
    hashed = finish(offset, length, -1) | 0;
    t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4, t5 = H5, t6 = H6, t7 = H7;

    _hmac_opad();

    _core(t0, t1, t2, t3, t4, t5, t6, t7, 0x80000000, 0, 0, 0, 0, 0, 0, 768);

    if (~output) _state_to_heap(output);
    return hashed | 0;
  } // salt is assumed to be already processed
  // offset — multiple of 64
  // output — multiple of 32


  function pbkdf2_generate_block(offset, length, block, count, output) {
    offset = offset | 0;
    length = length | 0;
    block = block | 0;
    count = count | 0;
    output = output | 0;
    var h0 = 0,
        h1 = 0,
        h2 = 0,
        h3 = 0,
        h4 = 0,
        h5 = 0,
        h6 = 0,
        h7 = 0,
        t0 = 0,
        t1 = 0,
        t2 = 0,
        t3 = 0,
        t4 = 0,
        t5 = 0,
        t6 = 0,
        t7 = 0;
    if (offset & 63) return -1;
    if (~output) if (output & 31) return -1; // pad block number into heap
    // FIXME probable OOB write

    HEAP[offset + length | 0] = block >>> 24;
    HEAP[offset + length + 1 | 0] = block >>> 16 & 255;
    HEAP[offset + length + 2 | 0] = block >>> 8 & 255;
    HEAP[offset + length + 3 | 0] = block & 255; // finish first iteration

    hmac_finish(offset, length + 4 | 0, -1) | 0;
    h0 = t0 = H0, h1 = t1 = H1, h2 = t2 = H2, h3 = t3 = H3, h4 = t4 = H4, h5 = t5 = H5, h6 = t6 = H6, h7 = t7 = H7;
    count = count - 1 | 0; // perform the rest iterations

    while ((count | 0) > 0) {
      hmac_reset();

      _core(t0, t1, t2, t3, t4, t5, t6, t7, 0x80000000, 0, 0, 0, 0, 0, 0, 768);

      t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4, t5 = H5, t6 = H6, t7 = H7;

      _hmac_opad();

      _core(t0, t1, t2, t3, t4, t5, t6, t7, 0x80000000, 0, 0, 0, 0, 0, 0, 768);

      t0 = H0, t1 = H1, t2 = H2, t3 = H3, t4 = H4, t5 = H5, t6 = H6, t7 = H7;
      h0 = h0 ^ H0;
      h1 = h1 ^ H1;
      h2 = h2 ^ H2;
      h3 = h3 ^ H3;
      h4 = h4 ^ H4;
      h5 = h5 ^ H5;
      h6 = h6 ^ H6;
      h7 = h7 ^ H7;
      count = count - 1 | 0;
    }

    H0 = h0;
    H1 = h1;
    H2 = h2;
    H3 = h3;
    H4 = h4;
    H5 = h5;
    H6 = h6;
    H7 = h7;
    if (~output) _state_to_heap(output);
    return 0;
  }

  return {
    // SHA256
    reset: reset,
    init: init,
    process: process,
    finish: finish,
    // HMAC-SHA256
    hmac_reset: hmac_reset,
    hmac_init: hmac_init,
    hmac_finish: hmac_finish,
    // PBKDF2-HMAC-SHA256
    pbkdf2_generate_block: pbkdf2_generate_block
  };
};

var _sha256_block_size = 64;
var _sha256_hash_size = 32;

var Sha256 =
/*#__PURE__*/
function (_Hash2) {
  _inherits(Sha256, _Hash2);

  function Sha256() {
    var _this7;

    _classCallCheck(this, Sha256);

    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(Sha256).call(this));
    _this7.NAME = 'sha256';
    _this7.BLOCK_SIZE = _sha256_block_size;
    _this7.HASH_SIZE = _sha256_hash_size;
    _this7.heap = _heap_init();
    _this7.asm = sha256_asm({
      Uint8Array: Uint8Array
    }, null, _this7.heap.buffer);

    _this7.reset();

    return _this7;
  }

  return Sha256;
}(Hash);

Sha256.NAME = 'sha256';

var sha512_asm = function sha512_asm(stdlib, foreign, buffer) {
  "use asm"; // SHA512 state

  var H0h = 0,
      H0l = 0,
      H1h = 0,
      H1l = 0,
      H2h = 0,
      H2l = 0,
      H3h = 0,
      H3l = 0,
      H4h = 0,
      H4l = 0,
      H5h = 0,
      H5l = 0,
      H6h = 0,
      H6l = 0,
      H7h = 0,
      H7l = 0,
      TOTAL0 = 0,
      TOTAL1 = 0; // HMAC state

  var I0h = 0,
      I0l = 0,
      I1h = 0,
      I1l = 0,
      I2h = 0,
      I2l = 0,
      I3h = 0,
      I3l = 0,
      I4h = 0,
      I4l = 0,
      I5h = 0,
      I5l = 0,
      I6h = 0,
      I6l = 0,
      I7h = 0,
      I7l = 0,
      O0h = 0,
      O0l = 0,
      O1h = 0,
      O1l = 0,
      O2h = 0,
      O2l = 0,
      O3h = 0,
      O3l = 0,
      O4h = 0,
      O4l = 0,
      O5h = 0,
      O5l = 0,
      O6h = 0,
      O6l = 0,
      O7h = 0,
      O7l = 0; // I/O buffer

  var HEAP = new stdlib.Uint8Array(buffer);

  function _core(w0h, w0l, w1h, w1l, w2h, w2l, w3h, w3l, w4h, w4l, w5h, w5l, w6h, w6l, w7h, w7l, w8h, w8l, w9h, w9l, w10h, w10l, w11h, w11l, w12h, w12l, w13h, w13l, w14h, w14l, w15h, w15l) {
    w0h = w0h | 0;
    w0l = w0l | 0;
    w1h = w1h | 0;
    w1l = w1l | 0;
    w2h = w2h | 0;
    w2l = w2l | 0;
    w3h = w3h | 0;
    w3l = w3l | 0;
    w4h = w4h | 0;
    w4l = w4l | 0;
    w5h = w5h | 0;
    w5l = w5l | 0;
    w6h = w6h | 0;
    w6l = w6l | 0;
    w7h = w7h | 0;
    w7l = w7l | 0;
    w8h = w8h | 0;
    w8l = w8l | 0;
    w9h = w9h | 0;
    w9l = w9l | 0;
    w10h = w10h | 0;
    w10l = w10l | 0;
    w11h = w11h | 0;
    w11l = w11l | 0;
    w12h = w12h | 0;
    w12l = w12l | 0;
    w13h = w13h | 0;
    w13l = w13l | 0;
    w14h = w14h | 0;
    w14l = w14l | 0;
    w15h = w15h | 0;
    w15l = w15l | 0;
    var ah = 0,
        al = 0,
        bh = 0,
        bl = 0,
        ch = 0,
        cl = 0,
        dh = 0,
        dl = 0,
        eh = 0,
        el = 0,
        fh = 0,
        fl = 0,
        gh = 0,
        gl = 0,
        hh = 0,
        hl = 0,
        th = 0,
        tl = 0,
        xl = 0;
    ah = H0h;
    al = H0l;
    bh = H1h;
    bl = H1l;
    ch = H2h;
    cl = H2l;
    dh = H3h;
    dl = H3l;
    eh = H4h;
    el = H4l;
    fh = H5h;
    fl = H5l;
    gh = H6h;
    gl = H6l;
    hh = H7h;
    hl = H7l; // 0

    tl = 0xd728ae22 + w0l | 0;
    th = 0x428a2f98 + w0h + (tl >>> 0 < w0l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 1

    tl = 0x23ef65cd + w1l | 0;
    th = 0x71374491 + w1h + (tl >>> 0 < w1l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 2

    tl = 0xec4d3b2f + w2l | 0;
    th = 0xb5c0fbcf + w2h + (tl >>> 0 < w2l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 3

    tl = 0x8189dbbc + w3l | 0;
    th = 0xe9b5dba5 + w3h + (tl >>> 0 < w3l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 4

    tl = 0xf348b538 + w4l | 0;
    th = 0x3956c25b + w4h + (tl >>> 0 < w4l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 5

    tl = 0xb605d019 + w5l | 0;
    th = 0x59f111f1 + w5h + (tl >>> 0 < w5l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 6

    tl = 0xaf194f9b + w6l | 0;
    th = 0x923f82a4 + w6h + (tl >>> 0 < w6l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 7

    tl = 0xda6d8118 + w7l | 0;
    th = 0xab1c5ed5 + w7h + (tl >>> 0 < w7l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 8

    tl = 0xa3030242 + w8l | 0;
    th = 0xd807aa98 + w8h + (tl >>> 0 < w8l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 9

    tl = 0x45706fbe + w9l | 0;
    th = 0x12835b01 + w9h + (tl >>> 0 < w9l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 10

    tl = 0x4ee4b28c + w10l | 0;
    th = 0x243185be + w10h + (tl >>> 0 < w10l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 11

    tl = 0xd5ffb4e2 + w11l | 0;
    th = 0x550c7dc3 + w11h + (tl >>> 0 < w11l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 12

    tl = 0xf27b896f + w12l | 0;
    th = 0x72be5d74 + w12h + (tl >>> 0 < w12l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 13

    tl = 0x3b1696b1 + w13l | 0;
    th = 0x80deb1fe + w13h + (tl >>> 0 < w13l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 14

    tl = 0x25c71235 + w14l | 0;
    th = 0x9bdc06a7 + w14h + (tl >>> 0 < w14l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 15

    tl = 0xcf692694 + w15l | 0;
    th = 0xc19bf174 + w15h + (tl >>> 0 < w15l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 16

    w0l = w0l + w9l | 0;
    w0h = w0h + w9h + (w0l >>> 0 < w9l >>> 0 ? 1 : 0) | 0;
    xl = (w1l >>> 1 | w1h << 31) ^ (w1l >>> 8 | w1h << 24) ^ (w1l >>> 7 | w1h << 25) | 0;
    w0l = w0l + xl | 0;
    w0h = w0h + ((w1h >>> 1 | w1l << 31) ^ (w1h >>> 8 | w1l << 24) ^ w1h >>> 7) + (w0l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w14l >>> 19 | w14h << 13) ^ (w14l << 3 | w14h >>> 29) ^ (w14l >>> 6 | w14h << 26) | 0;
    w0l = w0l + xl | 0;
    w0h = w0h + ((w14h >>> 19 | w14l << 13) ^ (w14h << 3 | w14l >>> 29) ^ w14h >>> 6) + (w0l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x9ef14ad2 + w0l | 0;
    th = 0xe49b69c1 + w0h + (tl >>> 0 < w0l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 17

    w1l = w1l + w10l | 0;
    w1h = w1h + w10h + (w1l >>> 0 < w10l >>> 0 ? 1 : 0) | 0;
    xl = (w2l >>> 1 | w2h << 31) ^ (w2l >>> 8 | w2h << 24) ^ (w2l >>> 7 | w2h << 25) | 0;
    w1l = w1l + xl | 0;
    w1h = w1h + ((w2h >>> 1 | w2l << 31) ^ (w2h >>> 8 | w2l << 24) ^ w2h >>> 7) + (w1l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w15l >>> 19 | w15h << 13) ^ (w15l << 3 | w15h >>> 29) ^ (w15l >>> 6 | w15h << 26) | 0;
    w1l = w1l + xl | 0;
    w1h = w1h + ((w15h >>> 19 | w15l << 13) ^ (w15h << 3 | w15l >>> 29) ^ w15h >>> 6) + (w1l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x384f25e3 + w1l | 0;
    th = 0xefbe4786 + w1h + (tl >>> 0 < w1l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 18

    w2l = w2l + w11l | 0;
    w2h = w2h + w11h + (w2l >>> 0 < w11l >>> 0 ? 1 : 0) | 0;
    xl = (w3l >>> 1 | w3h << 31) ^ (w3l >>> 8 | w3h << 24) ^ (w3l >>> 7 | w3h << 25) | 0;
    w2l = w2l + xl | 0;
    w2h = w2h + ((w3h >>> 1 | w3l << 31) ^ (w3h >>> 8 | w3l << 24) ^ w3h >>> 7) + (w2l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w0l >>> 19 | w0h << 13) ^ (w0l << 3 | w0h >>> 29) ^ (w0l >>> 6 | w0h << 26) | 0;
    w2l = w2l + xl | 0;
    w2h = w2h + ((w0h >>> 19 | w0l << 13) ^ (w0h << 3 | w0l >>> 29) ^ w0h >>> 6) + (w2l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x8b8cd5b5 + w2l | 0;
    th = 0xfc19dc6 + w2h + (tl >>> 0 < w2l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 19

    w3l = w3l + w12l | 0;
    w3h = w3h + w12h + (w3l >>> 0 < w12l >>> 0 ? 1 : 0) | 0;
    xl = (w4l >>> 1 | w4h << 31) ^ (w4l >>> 8 | w4h << 24) ^ (w4l >>> 7 | w4h << 25) | 0;
    w3l = w3l + xl | 0;
    w3h = w3h + ((w4h >>> 1 | w4l << 31) ^ (w4h >>> 8 | w4l << 24) ^ w4h >>> 7) + (w3l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w1l >>> 19 | w1h << 13) ^ (w1l << 3 | w1h >>> 29) ^ (w1l >>> 6 | w1h << 26) | 0;
    w3l = w3l + xl | 0;
    w3h = w3h + ((w1h >>> 19 | w1l << 13) ^ (w1h << 3 | w1l >>> 29) ^ w1h >>> 6) + (w3l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x77ac9c65 + w3l | 0;
    th = 0x240ca1cc + w3h + (tl >>> 0 < w3l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 20

    w4l = w4l + w13l | 0;
    w4h = w4h + w13h + (w4l >>> 0 < w13l >>> 0 ? 1 : 0) | 0;
    xl = (w5l >>> 1 | w5h << 31) ^ (w5l >>> 8 | w5h << 24) ^ (w5l >>> 7 | w5h << 25) | 0;
    w4l = w4l + xl | 0;
    w4h = w4h + ((w5h >>> 1 | w5l << 31) ^ (w5h >>> 8 | w5l << 24) ^ w5h >>> 7) + (w4l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w2l >>> 19 | w2h << 13) ^ (w2l << 3 | w2h >>> 29) ^ (w2l >>> 6 | w2h << 26) | 0;
    w4l = w4l + xl | 0;
    w4h = w4h + ((w2h >>> 19 | w2l << 13) ^ (w2h << 3 | w2l >>> 29) ^ w2h >>> 6) + (w4l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x592b0275 + w4l | 0;
    th = 0x2de92c6f + w4h + (tl >>> 0 < w4l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 21

    w5l = w5l + w14l | 0;
    w5h = w5h + w14h + (w5l >>> 0 < w14l >>> 0 ? 1 : 0) | 0;
    xl = (w6l >>> 1 | w6h << 31) ^ (w6l >>> 8 | w6h << 24) ^ (w6l >>> 7 | w6h << 25) | 0;
    w5l = w5l + xl | 0;
    w5h = w5h + ((w6h >>> 1 | w6l << 31) ^ (w6h >>> 8 | w6l << 24) ^ w6h >>> 7) + (w5l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w3l >>> 19 | w3h << 13) ^ (w3l << 3 | w3h >>> 29) ^ (w3l >>> 6 | w3h << 26) | 0;
    w5l = w5l + xl | 0;
    w5h = w5h + ((w3h >>> 19 | w3l << 13) ^ (w3h << 3 | w3l >>> 29) ^ w3h >>> 6) + (w5l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x6ea6e483 + w5l | 0;
    th = 0x4a7484aa + w5h + (tl >>> 0 < w5l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 22

    w6l = w6l + w15l | 0;
    w6h = w6h + w15h + (w6l >>> 0 < w15l >>> 0 ? 1 : 0) | 0;
    xl = (w7l >>> 1 | w7h << 31) ^ (w7l >>> 8 | w7h << 24) ^ (w7l >>> 7 | w7h << 25) | 0;
    w6l = w6l + xl | 0;
    w6h = w6h + ((w7h >>> 1 | w7l << 31) ^ (w7h >>> 8 | w7l << 24) ^ w7h >>> 7) + (w6l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w4l >>> 19 | w4h << 13) ^ (w4l << 3 | w4h >>> 29) ^ (w4l >>> 6 | w4h << 26) | 0;
    w6l = w6l + xl | 0;
    w6h = w6h + ((w4h >>> 19 | w4l << 13) ^ (w4h << 3 | w4l >>> 29) ^ w4h >>> 6) + (w6l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xbd41fbd4 + w6l | 0;
    th = 0x5cb0a9dc + w6h + (tl >>> 0 < w6l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 23

    w7l = w7l + w0l | 0;
    w7h = w7h + w0h + (w7l >>> 0 < w0l >>> 0 ? 1 : 0) | 0;
    xl = (w8l >>> 1 | w8h << 31) ^ (w8l >>> 8 | w8h << 24) ^ (w8l >>> 7 | w8h << 25) | 0;
    w7l = w7l + xl | 0;
    w7h = w7h + ((w8h >>> 1 | w8l << 31) ^ (w8h >>> 8 | w8l << 24) ^ w8h >>> 7) + (w7l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w5l >>> 19 | w5h << 13) ^ (w5l << 3 | w5h >>> 29) ^ (w5l >>> 6 | w5h << 26) | 0;
    w7l = w7l + xl | 0;
    w7h = w7h + ((w5h >>> 19 | w5l << 13) ^ (w5h << 3 | w5l >>> 29) ^ w5h >>> 6) + (w7l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x831153b5 + w7l | 0;
    th = 0x76f988da + w7h + (tl >>> 0 < w7l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 24

    w8l = w8l + w1l | 0;
    w8h = w8h + w1h + (w8l >>> 0 < w1l >>> 0 ? 1 : 0) | 0;
    xl = (w9l >>> 1 | w9h << 31) ^ (w9l >>> 8 | w9h << 24) ^ (w9l >>> 7 | w9h << 25) | 0;
    w8l = w8l + xl | 0;
    w8h = w8h + ((w9h >>> 1 | w9l << 31) ^ (w9h >>> 8 | w9l << 24) ^ w9h >>> 7) + (w8l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w6l >>> 19 | w6h << 13) ^ (w6l << 3 | w6h >>> 29) ^ (w6l >>> 6 | w6h << 26) | 0;
    w8l = w8l + xl | 0;
    w8h = w8h + ((w6h >>> 19 | w6l << 13) ^ (w6h << 3 | w6l >>> 29) ^ w6h >>> 6) + (w8l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xee66dfab + w8l | 0;
    th = 0x983e5152 + w8h + (tl >>> 0 < w8l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 25

    w9l = w9l + w2l | 0;
    w9h = w9h + w2h + (w9l >>> 0 < w2l >>> 0 ? 1 : 0) | 0;
    xl = (w10l >>> 1 | w10h << 31) ^ (w10l >>> 8 | w10h << 24) ^ (w10l >>> 7 | w10h << 25) | 0;
    w9l = w9l + xl | 0;
    w9h = w9h + ((w10h >>> 1 | w10l << 31) ^ (w10h >>> 8 | w10l << 24) ^ w10h >>> 7) + (w9l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w7l >>> 19 | w7h << 13) ^ (w7l << 3 | w7h >>> 29) ^ (w7l >>> 6 | w7h << 26) | 0;
    w9l = w9l + xl | 0;
    w9h = w9h + ((w7h >>> 19 | w7l << 13) ^ (w7h << 3 | w7l >>> 29) ^ w7h >>> 6) + (w9l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x2db43210 + w9l | 0;
    th = 0xa831c66d + w9h + (tl >>> 0 < w9l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 26

    w10l = w10l + w3l | 0;
    w10h = w10h + w3h + (w10l >>> 0 < w3l >>> 0 ? 1 : 0) | 0;
    xl = (w11l >>> 1 | w11h << 31) ^ (w11l >>> 8 | w11h << 24) ^ (w11l >>> 7 | w11h << 25) | 0;
    w10l = w10l + xl | 0;
    w10h = w10h + ((w11h >>> 1 | w11l << 31) ^ (w11h >>> 8 | w11l << 24) ^ w11h >>> 7) + (w10l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w8l >>> 19 | w8h << 13) ^ (w8l << 3 | w8h >>> 29) ^ (w8l >>> 6 | w8h << 26) | 0;
    w10l = w10l + xl | 0;
    w10h = w10h + ((w8h >>> 19 | w8l << 13) ^ (w8h << 3 | w8l >>> 29) ^ w8h >>> 6) + (w10l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x98fb213f + w10l | 0;
    th = 0xb00327c8 + w10h + (tl >>> 0 < w10l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 27

    w11l = w11l + w4l | 0;
    w11h = w11h + w4h + (w11l >>> 0 < w4l >>> 0 ? 1 : 0) | 0;
    xl = (w12l >>> 1 | w12h << 31) ^ (w12l >>> 8 | w12h << 24) ^ (w12l >>> 7 | w12h << 25) | 0;
    w11l = w11l + xl | 0;
    w11h = w11h + ((w12h >>> 1 | w12l << 31) ^ (w12h >>> 8 | w12l << 24) ^ w12h >>> 7) + (w11l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w9l >>> 19 | w9h << 13) ^ (w9l << 3 | w9h >>> 29) ^ (w9l >>> 6 | w9h << 26) | 0;
    w11l = w11l + xl | 0;
    w11h = w11h + ((w9h >>> 19 | w9l << 13) ^ (w9h << 3 | w9l >>> 29) ^ w9h >>> 6) + (w11l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xbeef0ee4 + w11l | 0;
    th = 0xbf597fc7 + w11h + (tl >>> 0 < w11l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 28

    w12l = w12l + w5l | 0;
    w12h = w12h + w5h + (w12l >>> 0 < w5l >>> 0 ? 1 : 0) | 0;
    xl = (w13l >>> 1 | w13h << 31) ^ (w13l >>> 8 | w13h << 24) ^ (w13l >>> 7 | w13h << 25) | 0;
    w12l = w12l + xl | 0;
    w12h = w12h + ((w13h >>> 1 | w13l << 31) ^ (w13h >>> 8 | w13l << 24) ^ w13h >>> 7) + (w12l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w10l >>> 19 | w10h << 13) ^ (w10l << 3 | w10h >>> 29) ^ (w10l >>> 6 | w10h << 26) | 0;
    w12l = w12l + xl | 0;
    w12h = w12h + ((w10h >>> 19 | w10l << 13) ^ (w10h << 3 | w10l >>> 29) ^ w10h >>> 6) + (w12l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x3da88fc2 + w12l | 0;
    th = 0xc6e00bf3 + w12h + (tl >>> 0 < w12l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 29

    w13l = w13l + w6l | 0;
    w13h = w13h + w6h + (w13l >>> 0 < w6l >>> 0 ? 1 : 0) | 0;
    xl = (w14l >>> 1 | w14h << 31) ^ (w14l >>> 8 | w14h << 24) ^ (w14l >>> 7 | w14h << 25) | 0;
    w13l = w13l + xl | 0;
    w13h = w13h + ((w14h >>> 1 | w14l << 31) ^ (w14h >>> 8 | w14l << 24) ^ w14h >>> 7) + (w13l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w11l >>> 19 | w11h << 13) ^ (w11l << 3 | w11h >>> 29) ^ (w11l >>> 6 | w11h << 26) | 0;
    w13l = w13l + xl | 0;
    w13h = w13h + ((w11h >>> 19 | w11l << 13) ^ (w11h << 3 | w11l >>> 29) ^ w11h >>> 6) + (w13l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x930aa725 + w13l | 0;
    th = 0xd5a79147 + w13h + (tl >>> 0 < w13l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 30

    w14l = w14l + w7l | 0;
    w14h = w14h + w7h + (w14l >>> 0 < w7l >>> 0 ? 1 : 0) | 0;
    xl = (w15l >>> 1 | w15h << 31) ^ (w15l >>> 8 | w15h << 24) ^ (w15l >>> 7 | w15h << 25) | 0;
    w14l = w14l + xl | 0;
    w14h = w14h + ((w15h >>> 1 | w15l << 31) ^ (w15h >>> 8 | w15l << 24) ^ w15h >>> 7) + (w14l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w12l >>> 19 | w12h << 13) ^ (w12l << 3 | w12h >>> 29) ^ (w12l >>> 6 | w12h << 26) | 0;
    w14l = w14l + xl | 0;
    w14h = w14h + ((w12h >>> 19 | w12l << 13) ^ (w12h << 3 | w12l >>> 29) ^ w12h >>> 6) + (w14l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xe003826f + w14l | 0;
    th = 0x6ca6351 + w14h + (tl >>> 0 < w14l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 31

    w15l = w15l + w8l | 0;
    w15h = w15h + w8h + (w15l >>> 0 < w8l >>> 0 ? 1 : 0) | 0;
    xl = (w0l >>> 1 | w0h << 31) ^ (w0l >>> 8 | w0h << 24) ^ (w0l >>> 7 | w0h << 25) | 0;
    w15l = w15l + xl | 0;
    w15h = w15h + ((w0h >>> 1 | w0l << 31) ^ (w0h >>> 8 | w0l << 24) ^ w0h >>> 7) + (w15l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w13l >>> 19 | w13h << 13) ^ (w13l << 3 | w13h >>> 29) ^ (w13l >>> 6 | w13h << 26) | 0;
    w15l = w15l + xl | 0;
    w15h = w15h + ((w13h >>> 19 | w13l << 13) ^ (w13h << 3 | w13l >>> 29) ^ w13h >>> 6) + (w15l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xa0e6e70 + w15l | 0;
    th = 0x14292967 + w15h + (tl >>> 0 < w15l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 32

    w0l = w0l + w9l | 0;
    w0h = w0h + w9h + (w0l >>> 0 < w9l >>> 0 ? 1 : 0) | 0;
    xl = (w1l >>> 1 | w1h << 31) ^ (w1l >>> 8 | w1h << 24) ^ (w1l >>> 7 | w1h << 25) | 0;
    w0l = w0l + xl | 0;
    w0h = w0h + ((w1h >>> 1 | w1l << 31) ^ (w1h >>> 8 | w1l << 24) ^ w1h >>> 7) + (w0l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w14l >>> 19 | w14h << 13) ^ (w14l << 3 | w14h >>> 29) ^ (w14l >>> 6 | w14h << 26) | 0;
    w0l = w0l + xl | 0;
    w0h = w0h + ((w14h >>> 19 | w14l << 13) ^ (w14h << 3 | w14l >>> 29) ^ w14h >>> 6) + (w0l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x46d22ffc + w0l | 0;
    th = 0x27b70a85 + w0h + (tl >>> 0 < w0l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 33

    w1l = w1l + w10l | 0;
    w1h = w1h + w10h + (w1l >>> 0 < w10l >>> 0 ? 1 : 0) | 0;
    xl = (w2l >>> 1 | w2h << 31) ^ (w2l >>> 8 | w2h << 24) ^ (w2l >>> 7 | w2h << 25) | 0;
    w1l = w1l + xl | 0;
    w1h = w1h + ((w2h >>> 1 | w2l << 31) ^ (w2h >>> 8 | w2l << 24) ^ w2h >>> 7) + (w1l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w15l >>> 19 | w15h << 13) ^ (w15l << 3 | w15h >>> 29) ^ (w15l >>> 6 | w15h << 26) | 0;
    w1l = w1l + xl | 0;
    w1h = w1h + ((w15h >>> 19 | w15l << 13) ^ (w15h << 3 | w15l >>> 29) ^ w15h >>> 6) + (w1l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x5c26c926 + w1l | 0;
    th = 0x2e1b2138 + w1h + (tl >>> 0 < w1l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 34

    w2l = w2l + w11l | 0;
    w2h = w2h + w11h + (w2l >>> 0 < w11l >>> 0 ? 1 : 0) | 0;
    xl = (w3l >>> 1 | w3h << 31) ^ (w3l >>> 8 | w3h << 24) ^ (w3l >>> 7 | w3h << 25) | 0;
    w2l = w2l + xl | 0;
    w2h = w2h + ((w3h >>> 1 | w3l << 31) ^ (w3h >>> 8 | w3l << 24) ^ w3h >>> 7) + (w2l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w0l >>> 19 | w0h << 13) ^ (w0l << 3 | w0h >>> 29) ^ (w0l >>> 6 | w0h << 26) | 0;
    w2l = w2l + xl | 0;
    w2h = w2h + ((w0h >>> 19 | w0l << 13) ^ (w0h << 3 | w0l >>> 29) ^ w0h >>> 6) + (w2l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x5ac42aed + w2l | 0;
    th = 0x4d2c6dfc + w2h + (tl >>> 0 < w2l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 35

    w3l = w3l + w12l | 0;
    w3h = w3h + w12h + (w3l >>> 0 < w12l >>> 0 ? 1 : 0) | 0;
    xl = (w4l >>> 1 | w4h << 31) ^ (w4l >>> 8 | w4h << 24) ^ (w4l >>> 7 | w4h << 25) | 0;
    w3l = w3l + xl | 0;
    w3h = w3h + ((w4h >>> 1 | w4l << 31) ^ (w4h >>> 8 | w4l << 24) ^ w4h >>> 7) + (w3l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w1l >>> 19 | w1h << 13) ^ (w1l << 3 | w1h >>> 29) ^ (w1l >>> 6 | w1h << 26) | 0;
    w3l = w3l + xl | 0;
    w3h = w3h + ((w1h >>> 19 | w1l << 13) ^ (w1h << 3 | w1l >>> 29) ^ w1h >>> 6) + (w3l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x9d95b3df + w3l | 0;
    th = 0x53380d13 + w3h + (tl >>> 0 < w3l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 36

    w4l = w4l + w13l | 0;
    w4h = w4h + w13h + (w4l >>> 0 < w13l >>> 0 ? 1 : 0) | 0;
    xl = (w5l >>> 1 | w5h << 31) ^ (w5l >>> 8 | w5h << 24) ^ (w5l >>> 7 | w5h << 25) | 0;
    w4l = w4l + xl | 0;
    w4h = w4h + ((w5h >>> 1 | w5l << 31) ^ (w5h >>> 8 | w5l << 24) ^ w5h >>> 7) + (w4l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w2l >>> 19 | w2h << 13) ^ (w2l << 3 | w2h >>> 29) ^ (w2l >>> 6 | w2h << 26) | 0;
    w4l = w4l + xl | 0;
    w4h = w4h + ((w2h >>> 19 | w2l << 13) ^ (w2h << 3 | w2l >>> 29) ^ w2h >>> 6) + (w4l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x8baf63de + w4l | 0;
    th = 0x650a7354 + w4h + (tl >>> 0 < w4l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 37

    w5l = w5l + w14l | 0;
    w5h = w5h + w14h + (w5l >>> 0 < w14l >>> 0 ? 1 : 0) | 0;
    xl = (w6l >>> 1 | w6h << 31) ^ (w6l >>> 8 | w6h << 24) ^ (w6l >>> 7 | w6h << 25) | 0;
    w5l = w5l + xl | 0;
    w5h = w5h + ((w6h >>> 1 | w6l << 31) ^ (w6h >>> 8 | w6l << 24) ^ w6h >>> 7) + (w5l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w3l >>> 19 | w3h << 13) ^ (w3l << 3 | w3h >>> 29) ^ (w3l >>> 6 | w3h << 26) | 0;
    w5l = w5l + xl | 0;
    w5h = w5h + ((w3h >>> 19 | w3l << 13) ^ (w3h << 3 | w3l >>> 29) ^ w3h >>> 6) + (w5l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x3c77b2a8 + w5l | 0;
    th = 0x766a0abb + w5h + (tl >>> 0 < w5l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 38

    w6l = w6l + w15l | 0;
    w6h = w6h + w15h + (w6l >>> 0 < w15l >>> 0 ? 1 : 0) | 0;
    xl = (w7l >>> 1 | w7h << 31) ^ (w7l >>> 8 | w7h << 24) ^ (w7l >>> 7 | w7h << 25) | 0;
    w6l = w6l + xl | 0;
    w6h = w6h + ((w7h >>> 1 | w7l << 31) ^ (w7h >>> 8 | w7l << 24) ^ w7h >>> 7) + (w6l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w4l >>> 19 | w4h << 13) ^ (w4l << 3 | w4h >>> 29) ^ (w4l >>> 6 | w4h << 26) | 0;
    w6l = w6l + xl | 0;
    w6h = w6h + ((w4h >>> 19 | w4l << 13) ^ (w4h << 3 | w4l >>> 29) ^ w4h >>> 6) + (w6l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x47edaee6 + w6l | 0;
    th = 0x81c2c92e + w6h + (tl >>> 0 < w6l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 39

    w7l = w7l + w0l | 0;
    w7h = w7h + w0h + (w7l >>> 0 < w0l >>> 0 ? 1 : 0) | 0;
    xl = (w8l >>> 1 | w8h << 31) ^ (w8l >>> 8 | w8h << 24) ^ (w8l >>> 7 | w8h << 25) | 0;
    w7l = w7l + xl | 0;
    w7h = w7h + ((w8h >>> 1 | w8l << 31) ^ (w8h >>> 8 | w8l << 24) ^ w8h >>> 7) + (w7l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w5l >>> 19 | w5h << 13) ^ (w5l << 3 | w5h >>> 29) ^ (w5l >>> 6 | w5h << 26) | 0;
    w7l = w7l + xl | 0;
    w7h = w7h + ((w5h >>> 19 | w5l << 13) ^ (w5h << 3 | w5l >>> 29) ^ w5h >>> 6) + (w7l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x1482353b + w7l | 0;
    th = 0x92722c85 + w7h + (tl >>> 0 < w7l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 40

    w8l = w8l + w1l | 0;
    w8h = w8h + w1h + (w8l >>> 0 < w1l >>> 0 ? 1 : 0) | 0;
    xl = (w9l >>> 1 | w9h << 31) ^ (w9l >>> 8 | w9h << 24) ^ (w9l >>> 7 | w9h << 25) | 0;
    w8l = w8l + xl | 0;
    w8h = w8h + ((w9h >>> 1 | w9l << 31) ^ (w9h >>> 8 | w9l << 24) ^ w9h >>> 7) + (w8l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w6l >>> 19 | w6h << 13) ^ (w6l << 3 | w6h >>> 29) ^ (w6l >>> 6 | w6h << 26) | 0;
    w8l = w8l + xl | 0;
    w8h = w8h + ((w6h >>> 19 | w6l << 13) ^ (w6h << 3 | w6l >>> 29) ^ w6h >>> 6) + (w8l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x4cf10364 + w8l | 0;
    th = 0xa2bfe8a1 + w8h + (tl >>> 0 < w8l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 41

    w9l = w9l + w2l | 0;
    w9h = w9h + w2h + (w9l >>> 0 < w2l >>> 0 ? 1 : 0) | 0;
    xl = (w10l >>> 1 | w10h << 31) ^ (w10l >>> 8 | w10h << 24) ^ (w10l >>> 7 | w10h << 25) | 0;
    w9l = w9l + xl | 0;
    w9h = w9h + ((w10h >>> 1 | w10l << 31) ^ (w10h >>> 8 | w10l << 24) ^ w10h >>> 7) + (w9l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w7l >>> 19 | w7h << 13) ^ (w7l << 3 | w7h >>> 29) ^ (w7l >>> 6 | w7h << 26) | 0;
    w9l = w9l + xl | 0;
    w9h = w9h + ((w7h >>> 19 | w7l << 13) ^ (w7h << 3 | w7l >>> 29) ^ w7h >>> 6) + (w9l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xbc423001 + w9l | 0;
    th = 0xa81a664b + w9h + (tl >>> 0 < w9l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 42

    w10l = w10l + w3l | 0;
    w10h = w10h + w3h + (w10l >>> 0 < w3l >>> 0 ? 1 : 0) | 0;
    xl = (w11l >>> 1 | w11h << 31) ^ (w11l >>> 8 | w11h << 24) ^ (w11l >>> 7 | w11h << 25) | 0;
    w10l = w10l + xl | 0;
    w10h = w10h + ((w11h >>> 1 | w11l << 31) ^ (w11h >>> 8 | w11l << 24) ^ w11h >>> 7) + (w10l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w8l >>> 19 | w8h << 13) ^ (w8l << 3 | w8h >>> 29) ^ (w8l >>> 6 | w8h << 26) | 0;
    w10l = w10l + xl | 0;
    w10h = w10h + ((w8h >>> 19 | w8l << 13) ^ (w8h << 3 | w8l >>> 29) ^ w8h >>> 6) + (w10l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xd0f89791 + w10l | 0;
    th = 0xc24b8b70 + w10h + (tl >>> 0 < w10l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 43

    w11l = w11l + w4l | 0;
    w11h = w11h + w4h + (w11l >>> 0 < w4l >>> 0 ? 1 : 0) | 0;
    xl = (w12l >>> 1 | w12h << 31) ^ (w12l >>> 8 | w12h << 24) ^ (w12l >>> 7 | w12h << 25) | 0;
    w11l = w11l + xl | 0;
    w11h = w11h + ((w12h >>> 1 | w12l << 31) ^ (w12h >>> 8 | w12l << 24) ^ w12h >>> 7) + (w11l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w9l >>> 19 | w9h << 13) ^ (w9l << 3 | w9h >>> 29) ^ (w9l >>> 6 | w9h << 26) | 0;
    w11l = w11l + xl | 0;
    w11h = w11h + ((w9h >>> 19 | w9l << 13) ^ (w9h << 3 | w9l >>> 29) ^ w9h >>> 6) + (w11l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x654be30 + w11l | 0;
    th = 0xc76c51a3 + w11h + (tl >>> 0 < w11l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 44

    w12l = w12l + w5l | 0;
    w12h = w12h + w5h + (w12l >>> 0 < w5l >>> 0 ? 1 : 0) | 0;
    xl = (w13l >>> 1 | w13h << 31) ^ (w13l >>> 8 | w13h << 24) ^ (w13l >>> 7 | w13h << 25) | 0;
    w12l = w12l + xl | 0;
    w12h = w12h + ((w13h >>> 1 | w13l << 31) ^ (w13h >>> 8 | w13l << 24) ^ w13h >>> 7) + (w12l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w10l >>> 19 | w10h << 13) ^ (w10l << 3 | w10h >>> 29) ^ (w10l >>> 6 | w10h << 26) | 0;
    w12l = w12l + xl | 0;
    w12h = w12h + ((w10h >>> 19 | w10l << 13) ^ (w10h << 3 | w10l >>> 29) ^ w10h >>> 6) + (w12l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xd6ef5218 + w12l | 0;
    th = 0xd192e819 + w12h + (tl >>> 0 < w12l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 45

    w13l = w13l + w6l | 0;
    w13h = w13h + w6h + (w13l >>> 0 < w6l >>> 0 ? 1 : 0) | 0;
    xl = (w14l >>> 1 | w14h << 31) ^ (w14l >>> 8 | w14h << 24) ^ (w14l >>> 7 | w14h << 25) | 0;
    w13l = w13l + xl | 0;
    w13h = w13h + ((w14h >>> 1 | w14l << 31) ^ (w14h >>> 8 | w14l << 24) ^ w14h >>> 7) + (w13l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w11l >>> 19 | w11h << 13) ^ (w11l << 3 | w11h >>> 29) ^ (w11l >>> 6 | w11h << 26) | 0;
    w13l = w13l + xl | 0;
    w13h = w13h + ((w11h >>> 19 | w11l << 13) ^ (w11h << 3 | w11l >>> 29) ^ w11h >>> 6) + (w13l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x5565a910 + w13l | 0;
    th = 0xd6990624 + w13h + (tl >>> 0 < w13l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 46

    w14l = w14l + w7l | 0;
    w14h = w14h + w7h + (w14l >>> 0 < w7l >>> 0 ? 1 : 0) | 0;
    xl = (w15l >>> 1 | w15h << 31) ^ (w15l >>> 8 | w15h << 24) ^ (w15l >>> 7 | w15h << 25) | 0;
    w14l = w14l + xl | 0;
    w14h = w14h + ((w15h >>> 1 | w15l << 31) ^ (w15h >>> 8 | w15l << 24) ^ w15h >>> 7) + (w14l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w12l >>> 19 | w12h << 13) ^ (w12l << 3 | w12h >>> 29) ^ (w12l >>> 6 | w12h << 26) | 0;
    w14l = w14l + xl | 0;
    w14h = w14h + ((w12h >>> 19 | w12l << 13) ^ (w12h << 3 | w12l >>> 29) ^ w12h >>> 6) + (w14l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x5771202a + w14l | 0;
    th = 0xf40e3585 + w14h + (tl >>> 0 < w14l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 47

    w15l = w15l + w8l | 0;
    w15h = w15h + w8h + (w15l >>> 0 < w8l >>> 0 ? 1 : 0) | 0;
    xl = (w0l >>> 1 | w0h << 31) ^ (w0l >>> 8 | w0h << 24) ^ (w0l >>> 7 | w0h << 25) | 0;
    w15l = w15l + xl | 0;
    w15h = w15h + ((w0h >>> 1 | w0l << 31) ^ (w0h >>> 8 | w0l << 24) ^ w0h >>> 7) + (w15l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w13l >>> 19 | w13h << 13) ^ (w13l << 3 | w13h >>> 29) ^ (w13l >>> 6 | w13h << 26) | 0;
    w15l = w15l + xl | 0;
    w15h = w15h + ((w13h >>> 19 | w13l << 13) ^ (w13h << 3 | w13l >>> 29) ^ w13h >>> 6) + (w15l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x32bbd1b8 + w15l | 0;
    th = 0x106aa070 + w15h + (tl >>> 0 < w15l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 48

    w0l = w0l + w9l | 0;
    w0h = w0h + w9h + (w0l >>> 0 < w9l >>> 0 ? 1 : 0) | 0;
    xl = (w1l >>> 1 | w1h << 31) ^ (w1l >>> 8 | w1h << 24) ^ (w1l >>> 7 | w1h << 25) | 0;
    w0l = w0l + xl | 0;
    w0h = w0h + ((w1h >>> 1 | w1l << 31) ^ (w1h >>> 8 | w1l << 24) ^ w1h >>> 7) + (w0l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w14l >>> 19 | w14h << 13) ^ (w14l << 3 | w14h >>> 29) ^ (w14l >>> 6 | w14h << 26) | 0;
    w0l = w0l + xl | 0;
    w0h = w0h + ((w14h >>> 19 | w14l << 13) ^ (w14h << 3 | w14l >>> 29) ^ w14h >>> 6) + (w0l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xb8d2d0c8 + w0l | 0;
    th = 0x19a4c116 + w0h + (tl >>> 0 < w0l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 49

    w1l = w1l + w10l | 0;
    w1h = w1h + w10h + (w1l >>> 0 < w10l >>> 0 ? 1 : 0) | 0;
    xl = (w2l >>> 1 | w2h << 31) ^ (w2l >>> 8 | w2h << 24) ^ (w2l >>> 7 | w2h << 25) | 0;
    w1l = w1l + xl | 0;
    w1h = w1h + ((w2h >>> 1 | w2l << 31) ^ (w2h >>> 8 | w2l << 24) ^ w2h >>> 7) + (w1l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w15l >>> 19 | w15h << 13) ^ (w15l << 3 | w15h >>> 29) ^ (w15l >>> 6 | w15h << 26) | 0;
    w1l = w1l + xl | 0;
    w1h = w1h + ((w15h >>> 19 | w15l << 13) ^ (w15h << 3 | w15l >>> 29) ^ w15h >>> 6) + (w1l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x5141ab53 + w1l | 0;
    th = 0x1e376c08 + w1h + (tl >>> 0 < w1l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 50

    w2l = w2l + w11l | 0;
    w2h = w2h + w11h + (w2l >>> 0 < w11l >>> 0 ? 1 : 0) | 0;
    xl = (w3l >>> 1 | w3h << 31) ^ (w3l >>> 8 | w3h << 24) ^ (w3l >>> 7 | w3h << 25) | 0;
    w2l = w2l + xl | 0;
    w2h = w2h + ((w3h >>> 1 | w3l << 31) ^ (w3h >>> 8 | w3l << 24) ^ w3h >>> 7) + (w2l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w0l >>> 19 | w0h << 13) ^ (w0l << 3 | w0h >>> 29) ^ (w0l >>> 6 | w0h << 26) | 0;
    w2l = w2l + xl | 0;
    w2h = w2h + ((w0h >>> 19 | w0l << 13) ^ (w0h << 3 | w0l >>> 29) ^ w0h >>> 6) + (w2l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xdf8eeb99 + w2l | 0;
    th = 0x2748774c + w2h + (tl >>> 0 < w2l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 51

    w3l = w3l + w12l | 0;
    w3h = w3h + w12h + (w3l >>> 0 < w12l >>> 0 ? 1 : 0) | 0;
    xl = (w4l >>> 1 | w4h << 31) ^ (w4l >>> 8 | w4h << 24) ^ (w4l >>> 7 | w4h << 25) | 0;
    w3l = w3l + xl | 0;
    w3h = w3h + ((w4h >>> 1 | w4l << 31) ^ (w4h >>> 8 | w4l << 24) ^ w4h >>> 7) + (w3l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w1l >>> 19 | w1h << 13) ^ (w1l << 3 | w1h >>> 29) ^ (w1l >>> 6 | w1h << 26) | 0;
    w3l = w3l + xl | 0;
    w3h = w3h + ((w1h >>> 19 | w1l << 13) ^ (w1h << 3 | w1l >>> 29) ^ w1h >>> 6) + (w3l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xe19b48a8 + w3l | 0;
    th = 0x34b0bcb5 + w3h + (tl >>> 0 < w3l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 52

    w4l = w4l + w13l | 0;
    w4h = w4h + w13h + (w4l >>> 0 < w13l >>> 0 ? 1 : 0) | 0;
    xl = (w5l >>> 1 | w5h << 31) ^ (w5l >>> 8 | w5h << 24) ^ (w5l >>> 7 | w5h << 25) | 0;
    w4l = w4l + xl | 0;
    w4h = w4h + ((w5h >>> 1 | w5l << 31) ^ (w5h >>> 8 | w5l << 24) ^ w5h >>> 7) + (w4l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w2l >>> 19 | w2h << 13) ^ (w2l << 3 | w2h >>> 29) ^ (w2l >>> 6 | w2h << 26) | 0;
    w4l = w4l + xl | 0;
    w4h = w4h + ((w2h >>> 19 | w2l << 13) ^ (w2h << 3 | w2l >>> 29) ^ w2h >>> 6) + (w4l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xc5c95a63 + w4l | 0;
    th = 0x391c0cb3 + w4h + (tl >>> 0 < w4l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 53

    w5l = w5l + w14l | 0;
    w5h = w5h + w14h + (w5l >>> 0 < w14l >>> 0 ? 1 : 0) | 0;
    xl = (w6l >>> 1 | w6h << 31) ^ (w6l >>> 8 | w6h << 24) ^ (w6l >>> 7 | w6h << 25) | 0;
    w5l = w5l + xl | 0;
    w5h = w5h + ((w6h >>> 1 | w6l << 31) ^ (w6h >>> 8 | w6l << 24) ^ w6h >>> 7) + (w5l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w3l >>> 19 | w3h << 13) ^ (w3l << 3 | w3h >>> 29) ^ (w3l >>> 6 | w3h << 26) | 0;
    w5l = w5l + xl | 0;
    w5h = w5h + ((w3h >>> 19 | w3l << 13) ^ (w3h << 3 | w3l >>> 29) ^ w3h >>> 6) + (w5l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xe3418acb + w5l | 0;
    th = 0x4ed8aa4a + w5h + (tl >>> 0 < w5l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 54

    w6l = w6l + w15l | 0;
    w6h = w6h + w15h + (w6l >>> 0 < w15l >>> 0 ? 1 : 0) | 0;
    xl = (w7l >>> 1 | w7h << 31) ^ (w7l >>> 8 | w7h << 24) ^ (w7l >>> 7 | w7h << 25) | 0;
    w6l = w6l + xl | 0;
    w6h = w6h + ((w7h >>> 1 | w7l << 31) ^ (w7h >>> 8 | w7l << 24) ^ w7h >>> 7) + (w6l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w4l >>> 19 | w4h << 13) ^ (w4l << 3 | w4h >>> 29) ^ (w4l >>> 6 | w4h << 26) | 0;
    w6l = w6l + xl | 0;
    w6h = w6h + ((w4h >>> 19 | w4l << 13) ^ (w4h << 3 | w4l >>> 29) ^ w4h >>> 6) + (w6l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x7763e373 + w6l | 0;
    th = 0x5b9cca4f + w6h + (tl >>> 0 < w6l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 55

    w7l = w7l + w0l | 0;
    w7h = w7h + w0h + (w7l >>> 0 < w0l >>> 0 ? 1 : 0) | 0;
    xl = (w8l >>> 1 | w8h << 31) ^ (w8l >>> 8 | w8h << 24) ^ (w8l >>> 7 | w8h << 25) | 0;
    w7l = w7l + xl | 0;
    w7h = w7h + ((w8h >>> 1 | w8l << 31) ^ (w8h >>> 8 | w8l << 24) ^ w8h >>> 7) + (w7l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w5l >>> 19 | w5h << 13) ^ (w5l << 3 | w5h >>> 29) ^ (w5l >>> 6 | w5h << 26) | 0;
    w7l = w7l + xl | 0;
    w7h = w7h + ((w5h >>> 19 | w5l << 13) ^ (w5h << 3 | w5l >>> 29) ^ w5h >>> 6) + (w7l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xd6b2b8a3 + w7l | 0;
    th = 0x682e6ff3 + w7h + (tl >>> 0 < w7l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 56

    w8l = w8l + w1l | 0;
    w8h = w8h + w1h + (w8l >>> 0 < w1l >>> 0 ? 1 : 0) | 0;
    xl = (w9l >>> 1 | w9h << 31) ^ (w9l >>> 8 | w9h << 24) ^ (w9l >>> 7 | w9h << 25) | 0;
    w8l = w8l + xl | 0;
    w8h = w8h + ((w9h >>> 1 | w9l << 31) ^ (w9h >>> 8 | w9l << 24) ^ w9h >>> 7) + (w8l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w6l >>> 19 | w6h << 13) ^ (w6l << 3 | w6h >>> 29) ^ (w6l >>> 6 | w6h << 26) | 0;
    w8l = w8l + xl | 0;
    w8h = w8h + ((w6h >>> 19 | w6l << 13) ^ (w6h << 3 | w6l >>> 29) ^ w6h >>> 6) + (w8l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x5defb2fc + w8l | 0;
    th = 0x748f82ee + w8h + (tl >>> 0 < w8l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 57

    w9l = w9l + w2l | 0;
    w9h = w9h + w2h + (w9l >>> 0 < w2l >>> 0 ? 1 : 0) | 0;
    xl = (w10l >>> 1 | w10h << 31) ^ (w10l >>> 8 | w10h << 24) ^ (w10l >>> 7 | w10h << 25) | 0;
    w9l = w9l + xl | 0;
    w9h = w9h + ((w10h >>> 1 | w10l << 31) ^ (w10h >>> 8 | w10l << 24) ^ w10h >>> 7) + (w9l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w7l >>> 19 | w7h << 13) ^ (w7l << 3 | w7h >>> 29) ^ (w7l >>> 6 | w7h << 26) | 0;
    w9l = w9l + xl | 0;
    w9h = w9h + ((w7h >>> 19 | w7l << 13) ^ (w7h << 3 | w7l >>> 29) ^ w7h >>> 6) + (w9l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x43172f60 + w9l | 0;
    th = 0x78a5636f + w9h + (tl >>> 0 < w9l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 58

    w10l = w10l + w3l | 0;
    w10h = w10h + w3h + (w10l >>> 0 < w3l >>> 0 ? 1 : 0) | 0;
    xl = (w11l >>> 1 | w11h << 31) ^ (w11l >>> 8 | w11h << 24) ^ (w11l >>> 7 | w11h << 25) | 0;
    w10l = w10l + xl | 0;
    w10h = w10h + ((w11h >>> 1 | w11l << 31) ^ (w11h >>> 8 | w11l << 24) ^ w11h >>> 7) + (w10l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w8l >>> 19 | w8h << 13) ^ (w8l << 3 | w8h >>> 29) ^ (w8l >>> 6 | w8h << 26) | 0;
    w10l = w10l + xl | 0;
    w10h = w10h + ((w8h >>> 19 | w8l << 13) ^ (w8h << 3 | w8l >>> 29) ^ w8h >>> 6) + (w10l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xa1f0ab72 + w10l | 0;
    th = 0x84c87814 + w10h + (tl >>> 0 < w10l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 59

    w11l = w11l + w4l | 0;
    w11h = w11h + w4h + (w11l >>> 0 < w4l >>> 0 ? 1 : 0) | 0;
    xl = (w12l >>> 1 | w12h << 31) ^ (w12l >>> 8 | w12h << 24) ^ (w12l >>> 7 | w12h << 25) | 0;
    w11l = w11l + xl | 0;
    w11h = w11h + ((w12h >>> 1 | w12l << 31) ^ (w12h >>> 8 | w12l << 24) ^ w12h >>> 7) + (w11l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w9l >>> 19 | w9h << 13) ^ (w9l << 3 | w9h >>> 29) ^ (w9l >>> 6 | w9h << 26) | 0;
    w11l = w11l + xl | 0;
    w11h = w11h + ((w9h >>> 19 | w9l << 13) ^ (w9h << 3 | w9l >>> 29) ^ w9h >>> 6) + (w11l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x1a6439ec + w11l | 0;
    th = 0x8cc70208 + w11h + (tl >>> 0 < w11l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 60

    w12l = w12l + w5l | 0;
    w12h = w12h + w5h + (w12l >>> 0 < w5l >>> 0 ? 1 : 0) | 0;
    xl = (w13l >>> 1 | w13h << 31) ^ (w13l >>> 8 | w13h << 24) ^ (w13l >>> 7 | w13h << 25) | 0;
    w12l = w12l + xl | 0;
    w12h = w12h + ((w13h >>> 1 | w13l << 31) ^ (w13h >>> 8 | w13l << 24) ^ w13h >>> 7) + (w12l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w10l >>> 19 | w10h << 13) ^ (w10l << 3 | w10h >>> 29) ^ (w10l >>> 6 | w10h << 26) | 0;
    w12l = w12l + xl | 0;
    w12h = w12h + ((w10h >>> 19 | w10l << 13) ^ (w10h << 3 | w10l >>> 29) ^ w10h >>> 6) + (w12l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x23631e28 + w12l | 0;
    th = 0x90befffa + w12h + (tl >>> 0 < w12l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 61

    w13l = w13l + w6l | 0;
    w13h = w13h + w6h + (w13l >>> 0 < w6l >>> 0 ? 1 : 0) | 0;
    xl = (w14l >>> 1 | w14h << 31) ^ (w14l >>> 8 | w14h << 24) ^ (w14l >>> 7 | w14h << 25) | 0;
    w13l = w13l + xl | 0;
    w13h = w13h + ((w14h >>> 1 | w14l << 31) ^ (w14h >>> 8 | w14l << 24) ^ w14h >>> 7) + (w13l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w11l >>> 19 | w11h << 13) ^ (w11l << 3 | w11h >>> 29) ^ (w11l >>> 6 | w11h << 26) | 0;
    w13l = w13l + xl | 0;
    w13h = w13h + ((w11h >>> 19 | w11l << 13) ^ (w11h << 3 | w11l >>> 29) ^ w11h >>> 6) + (w13l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xde82bde9 + w13l | 0;
    th = 0xa4506ceb + w13h + (tl >>> 0 < w13l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 62

    w14l = w14l + w7l | 0;
    w14h = w14h + w7h + (w14l >>> 0 < w7l >>> 0 ? 1 : 0) | 0;
    xl = (w15l >>> 1 | w15h << 31) ^ (w15l >>> 8 | w15h << 24) ^ (w15l >>> 7 | w15h << 25) | 0;
    w14l = w14l + xl | 0;
    w14h = w14h + ((w15h >>> 1 | w15l << 31) ^ (w15h >>> 8 | w15l << 24) ^ w15h >>> 7) + (w14l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w12l >>> 19 | w12h << 13) ^ (w12l << 3 | w12h >>> 29) ^ (w12l >>> 6 | w12h << 26) | 0;
    w14l = w14l + xl | 0;
    w14h = w14h + ((w12h >>> 19 | w12l << 13) ^ (w12h << 3 | w12l >>> 29) ^ w12h >>> 6) + (w14l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xb2c67915 + w14l | 0;
    th = 0xbef9a3f7 + w14h + (tl >>> 0 < w14l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 63

    w15l = w15l + w8l | 0;
    w15h = w15h + w8h + (w15l >>> 0 < w8l >>> 0 ? 1 : 0) | 0;
    xl = (w0l >>> 1 | w0h << 31) ^ (w0l >>> 8 | w0h << 24) ^ (w0l >>> 7 | w0h << 25) | 0;
    w15l = w15l + xl | 0;
    w15h = w15h + ((w0h >>> 1 | w0l << 31) ^ (w0h >>> 8 | w0l << 24) ^ w0h >>> 7) + (w15l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w13l >>> 19 | w13h << 13) ^ (w13l << 3 | w13h >>> 29) ^ (w13l >>> 6 | w13h << 26) | 0;
    w15l = w15l + xl | 0;
    w15h = w15h + ((w13h >>> 19 | w13l << 13) ^ (w13h << 3 | w13l >>> 29) ^ w13h >>> 6) + (w15l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xe372532b + w15l | 0;
    th = 0xc67178f2 + w15h + (tl >>> 0 < w15l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 64

    w0l = w0l + w9l | 0;
    w0h = w0h + w9h + (w0l >>> 0 < w9l >>> 0 ? 1 : 0) | 0;
    xl = (w1l >>> 1 | w1h << 31) ^ (w1l >>> 8 | w1h << 24) ^ (w1l >>> 7 | w1h << 25) | 0;
    w0l = w0l + xl | 0;
    w0h = w0h + ((w1h >>> 1 | w1l << 31) ^ (w1h >>> 8 | w1l << 24) ^ w1h >>> 7) + (w0l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w14l >>> 19 | w14h << 13) ^ (w14l << 3 | w14h >>> 29) ^ (w14l >>> 6 | w14h << 26) | 0;
    w0l = w0l + xl | 0;
    w0h = w0h + ((w14h >>> 19 | w14l << 13) ^ (w14h << 3 | w14l >>> 29) ^ w14h >>> 6) + (w0l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xea26619c + w0l | 0;
    th = 0xca273ece + w0h + (tl >>> 0 < w0l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 65

    w1l = w1l + w10l | 0;
    w1h = w1h + w10h + (w1l >>> 0 < w10l >>> 0 ? 1 : 0) | 0;
    xl = (w2l >>> 1 | w2h << 31) ^ (w2l >>> 8 | w2h << 24) ^ (w2l >>> 7 | w2h << 25) | 0;
    w1l = w1l + xl | 0;
    w1h = w1h + ((w2h >>> 1 | w2l << 31) ^ (w2h >>> 8 | w2l << 24) ^ w2h >>> 7) + (w1l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w15l >>> 19 | w15h << 13) ^ (w15l << 3 | w15h >>> 29) ^ (w15l >>> 6 | w15h << 26) | 0;
    w1l = w1l + xl | 0;
    w1h = w1h + ((w15h >>> 19 | w15l << 13) ^ (w15h << 3 | w15l >>> 29) ^ w15h >>> 6) + (w1l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x21c0c207 + w1l | 0;
    th = 0xd186b8c7 + w1h + (tl >>> 0 < w1l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 66

    w2l = w2l + w11l | 0;
    w2h = w2h + w11h + (w2l >>> 0 < w11l >>> 0 ? 1 : 0) | 0;
    xl = (w3l >>> 1 | w3h << 31) ^ (w3l >>> 8 | w3h << 24) ^ (w3l >>> 7 | w3h << 25) | 0;
    w2l = w2l + xl | 0;
    w2h = w2h + ((w3h >>> 1 | w3l << 31) ^ (w3h >>> 8 | w3l << 24) ^ w3h >>> 7) + (w2l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w0l >>> 19 | w0h << 13) ^ (w0l << 3 | w0h >>> 29) ^ (w0l >>> 6 | w0h << 26) | 0;
    w2l = w2l + xl | 0;
    w2h = w2h + ((w0h >>> 19 | w0l << 13) ^ (w0h << 3 | w0l >>> 29) ^ w0h >>> 6) + (w2l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xcde0eb1e + w2l | 0;
    th = 0xeada7dd6 + w2h + (tl >>> 0 < w2l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 67

    w3l = w3l + w12l | 0;
    w3h = w3h + w12h + (w3l >>> 0 < w12l >>> 0 ? 1 : 0) | 0;
    xl = (w4l >>> 1 | w4h << 31) ^ (w4l >>> 8 | w4h << 24) ^ (w4l >>> 7 | w4h << 25) | 0;
    w3l = w3l + xl | 0;
    w3h = w3h + ((w4h >>> 1 | w4l << 31) ^ (w4h >>> 8 | w4l << 24) ^ w4h >>> 7) + (w3l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w1l >>> 19 | w1h << 13) ^ (w1l << 3 | w1h >>> 29) ^ (w1l >>> 6 | w1h << 26) | 0;
    w3l = w3l + xl | 0;
    w3h = w3h + ((w1h >>> 19 | w1l << 13) ^ (w1h << 3 | w1l >>> 29) ^ w1h >>> 6) + (w3l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xee6ed178 + w3l | 0;
    th = 0xf57d4f7f + w3h + (tl >>> 0 < w3l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 68

    w4l = w4l + w13l | 0;
    w4h = w4h + w13h + (w4l >>> 0 < w13l >>> 0 ? 1 : 0) | 0;
    xl = (w5l >>> 1 | w5h << 31) ^ (w5l >>> 8 | w5h << 24) ^ (w5l >>> 7 | w5h << 25) | 0;
    w4l = w4l + xl | 0;
    w4h = w4h + ((w5h >>> 1 | w5l << 31) ^ (w5h >>> 8 | w5l << 24) ^ w5h >>> 7) + (w4l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w2l >>> 19 | w2h << 13) ^ (w2l << 3 | w2h >>> 29) ^ (w2l >>> 6 | w2h << 26) | 0;
    w4l = w4l + xl | 0;
    w4h = w4h + ((w2h >>> 19 | w2l << 13) ^ (w2h << 3 | w2l >>> 29) ^ w2h >>> 6) + (w4l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x72176fba + w4l | 0;
    th = 0x6f067aa + w4h + (tl >>> 0 < w4l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 69

    w5l = w5l + w14l | 0;
    w5h = w5h + w14h + (w5l >>> 0 < w14l >>> 0 ? 1 : 0) | 0;
    xl = (w6l >>> 1 | w6h << 31) ^ (w6l >>> 8 | w6h << 24) ^ (w6l >>> 7 | w6h << 25) | 0;
    w5l = w5l + xl | 0;
    w5h = w5h + ((w6h >>> 1 | w6l << 31) ^ (w6h >>> 8 | w6l << 24) ^ w6h >>> 7) + (w5l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w3l >>> 19 | w3h << 13) ^ (w3l << 3 | w3h >>> 29) ^ (w3l >>> 6 | w3h << 26) | 0;
    w5l = w5l + xl | 0;
    w5h = w5h + ((w3h >>> 19 | w3l << 13) ^ (w3h << 3 | w3l >>> 29) ^ w3h >>> 6) + (w5l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xa2c898a6 + w5l | 0;
    th = 0xa637dc5 + w5h + (tl >>> 0 < w5l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 70

    w6l = w6l + w15l | 0;
    w6h = w6h + w15h + (w6l >>> 0 < w15l >>> 0 ? 1 : 0) | 0;
    xl = (w7l >>> 1 | w7h << 31) ^ (w7l >>> 8 | w7h << 24) ^ (w7l >>> 7 | w7h << 25) | 0;
    w6l = w6l + xl | 0;
    w6h = w6h + ((w7h >>> 1 | w7l << 31) ^ (w7h >>> 8 | w7l << 24) ^ w7h >>> 7) + (w6l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w4l >>> 19 | w4h << 13) ^ (w4l << 3 | w4h >>> 29) ^ (w4l >>> 6 | w4h << 26) | 0;
    w6l = w6l + xl | 0;
    w6h = w6h + ((w4h >>> 19 | w4l << 13) ^ (w4h << 3 | w4l >>> 29) ^ w4h >>> 6) + (w6l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xbef90dae + w6l | 0;
    th = 0x113f9804 + w6h + (tl >>> 0 < w6l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 71

    w7l = w7l + w0l | 0;
    w7h = w7h + w0h + (w7l >>> 0 < w0l >>> 0 ? 1 : 0) | 0;
    xl = (w8l >>> 1 | w8h << 31) ^ (w8l >>> 8 | w8h << 24) ^ (w8l >>> 7 | w8h << 25) | 0;
    w7l = w7l + xl | 0;
    w7h = w7h + ((w8h >>> 1 | w8l << 31) ^ (w8h >>> 8 | w8l << 24) ^ w8h >>> 7) + (w7l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w5l >>> 19 | w5h << 13) ^ (w5l << 3 | w5h >>> 29) ^ (w5l >>> 6 | w5h << 26) | 0;
    w7l = w7l + xl | 0;
    w7h = w7h + ((w5h >>> 19 | w5l << 13) ^ (w5h << 3 | w5l >>> 29) ^ w5h >>> 6) + (w7l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x131c471b + w7l | 0;
    th = 0x1b710b35 + w7h + (tl >>> 0 < w7l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 72

    w8l = w8l + w1l | 0;
    w8h = w8h + w1h + (w8l >>> 0 < w1l >>> 0 ? 1 : 0) | 0;
    xl = (w9l >>> 1 | w9h << 31) ^ (w9l >>> 8 | w9h << 24) ^ (w9l >>> 7 | w9h << 25) | 0;
    w8l = w8l + xl | 0;
    w8h = w8h + ((w9h >>> 1 | w9l << 31) ^ (w9h >>> 8 | w9l << 24) ^ w9h >>> 7) + (w8l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w6l >>> 19 | w6h << 13) ^ (w6l << 3 | w6h >>> 29) ^ (w6l >>> 6 | w6h << 26) | 0;
    w8l = w8l + xl | 0;
    w8h = w8h + ((w6h >>> 19 | w6l << 13) ^ (w6h << 3 | w6l >>> 29) ^ w6h >>> 6) + (w8l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x23047d84 + w8l | 0;
    th = 0x28db77f5 + w8h + (tl >>> 0 < w8l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 73

    w9l = w9l + w2l | 0;
    w9h = w9h + w2h + (w9l >>> 0 < w2l >>> 0 ? 1 : 0) | 0;
    xl = (w10l >>> 1 | w10h << 31) ^ (w10l >>> 8 | w10h << 24) ^ (w10l >>> 7 | w10h << 25) | 0;
    w9l = w9l + xl | 0;
    w9h = w9h + ((w10h >>> 1 | w10l << 31) ^ (w10h >>> 8 | w10l << 24) ^ w10h >>> 7) + (w9l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w7l >>> 19 | w7h << 13) ^ (w7l << 3 | w7h >>> 29) ^ (w7l >>> 6 | w7h << 26) | 0;
    w9l = w9l + xl | 0;
    w9h = w9h + ((w7h >>> 19 | w7l << 13) ^ (w7h << 3 | w7l >>> 29) ^ w7h >>> 6) + (w9l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x40c72493 + w9l | 0;
    th = 0x32caab7b + w9h + (tl >>> 0 < w9l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 74

    w10l = w10l + w3l | 0;
    w10h = w10h + w3h + (w10l >>> 0 < w3l >>> 0 ? 1 : 0) | 0;
    xl = (w11l >>> 1 | w11h << 31) ^ (w11l >>> 8 | w11h << 24) ^ (w11l >>> 7 | w11h << 25) | 0;
    w10l = w10l + xl | 0;
    w10h = w10h + ((w11h >>> 1 | w11l << 31) ^ (w11h >>> 8 | w11l << 24) ^ w11h >>> 7) + (w10l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w8l >>> 19 | w8h << 13) ^ (w8l << 3 | w8h >>> 29) ^ (w8l >>> 6 | w8h << 26) | 0;
    w10l = w10l + xl | 0;
    w10h = w10h + ((w8h >>> 19 | w8l << 13) ^ (w8h << 3 | w8l >>> 29) ^ w8h >>> 6) + (w10l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x15c9bebc + w10l | 0;
    th = 0x3c9ebe0a + w10h + (tl >>> 0 < w10l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 75

    w11l = w11l + w4l | 0;
    w11h = w11h + w4h + (w11l >>> 0 < w4l >>> 0 ? 1 : 0) | 0;
    xl = (w12l >>> 1 | w12h << 31) ^ (w12l >>> 8 | w12h << 24) ^ (w12l >>> 7 | w12h << 25) | 0;
    w11l = w11l + xl | 0;
    w11h = w11h + ((w12h >>> 1 | w12l << 31) ^ (w12h >>> 8 | w12l << 24) ^ w12h >>> 7) + (w11l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w9l >>> 19 | w9h << 13) ^ (w9l << 3 | w9h >>> 29) ^ (w9l >>> 6 | w9h << 26) | 0;
    w11l = w11l + xl | 0;
    w11h = w11h + ((w9h >>> 19 | w9l << 13) ^ (w9h << 3 | w9l >>> 29) ^ w9h >>> 6) + (w11l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x9c100d4c + w11l | 0;
    th = 0x431d67c4 + w11h + (tl >>> 0 < w11l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 76

    w12l = w12l + w5l | 0;
    w12h = w12h + w5h + (w12l >>> 0 < w5l >>> 0 ? 1 : 0) | 0;
    xl = (w13l >>> 1 | w13h << 31) ^ (w13l >>> 8 | w13h << 24) ^ (w13l >>> 7 | w13h << 25) | 0;
    w12l = w12l + xl | 0;
    w12h = w12h + ((w13h >>> 1 | w13l << 31) ^ (w13h >>> 8 | w13l << 24) ^ w13h >>> 7) + (w12l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w10l >>> 19 | w10h << 13) ^ (w10l << 3 | w10h >>> 29) ^ (w10l >>> 6 | w10h << 26) | 0;
    w12l = w12l + xl | 0;
    w12h = w12h + ((w10h >>> 19 | w10l << 13) ^ (w10h << 3 | w10l >>> 29) ^ w10h >>> 6) + (w12l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xcb3e42b6 + w12l | 0;
    th = 0x4cc5d4be + w12h + (tl >>> 0 < w12l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 77

    w13l = w13l + w6l | 0;
    w13h = w13h + w6h + (w13l >>> 0 < w6l >>> 0 ? 1 : 0) | 0;
    xl = (w14l >>> 1 | w14h << 31) ^ (w14l >>> 8 | w14h << 24) ^ (w14l >>> 7 | w14h << 25) | 0;
    w13l = w13l + xl | 0;
    w13h = w13h + ((w14h >>> 1 | w14l << 31) ^ (w14h >>> 8 | w14l << 24) ^ w14h >>> 7) + (w13l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w11l >>> 19 | w11h << 13) ^ (w11l << 3 | w11h >>> 29) ^ (w11l >>> 6 | w11h << 26) | 0;
    w13l = w13l + xl | 0;
    w13h = w13h + ((w11h >>> 19 | w11l << 13) ^ (w11h << 3 | w11l >>> 29) ^ w11h >>> 6) + (w13l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0xfc657e2a + w13l | 0;
    th = 0x597f299c + w13h + (tl >>> 0 < w13l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 78

    w14l = w14l + w7l | 0;
    w14h = w14h + w7h + (w14l >>> 0 < w7l >>> 0 ? 1 : 0) | 0;
    xl = (w15l >>> 1 | w15h << 31) ^ (w15l >>> 8 | w15h << 24) ^ (w15l >>> 7 | w15h << 25) | 0;
    w14l = w14l + xl | 0;
    w14h = w14h + ((w15h >>> 1 | w15l << 31) ^ (w15h >>> 8 | w15l << 24) ^ w15h >>> 7) + (w14l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w12l >>> 19 | w12h << 13) ^ (w12l << 3 | w12h >>> 29) ^ (w12l >>> 6 | w12h << 26) | 0;
    w14l = w14l + xl | 0;
    w14h = w14h + ((w12h >>> 19 | w12l << 13) ^ (w12h << 3 | w12l >>> 29) ^ w12h >>> 6) + (w14l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x3ad6faec + w14l | 0;
    th = 0x5fcb6fab + w14h + (tl >>> 0 < w14l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0; // 79

    w15l = w15l + w8l | 0;
    w15h = w15h + w8h + (w15l >>> 0 < w8l >>> 0 ? 1 : 0) | 0;
    xl = (w0l >>> 1 | w0h << 31) ^ (w0l >>> 8 | w0h << 24) ^ (w0l >>> 7 | w0h << 25) | 0;
    w15l = w15l + xl | 0;
    w15h = w15h + ((w0h >>> 1 | w0l << 31) ^ (w0h >>> 8 | w0l << 24) ^ w0h >>> 7) + (w15l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = (w13l >>> 19 | w13h << 13) ^ (w13l << 3 | w13h >>> 29) ^ (w13l >>> 6 | w13h << 26) | 0;
    w15l = w15l + xl | 0;
    w15h = w15h + ((w13h >>> 19 | w13l << 13) ^ (w13h << 3 | w13l >>> 29) ^ w13h >>> 6) + (w15l >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    tl = 0x4a475817 + w15l | 0;
    th = 0x6c44198c + w15h + (tl >>> 0 < w15l >>> 0 ? 1 : 0) | 0;
    tl = tl + hl | 0;
    th = th + hh + (tl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
    xl = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9) | 0;
    tl = tl + xl | 0;
    th = th + ((eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    xl = gl ^ el & (fl ^ gl) | 0;
    tl = tl + xl | 0;
    th = th + (gh ^ eh & (fh ^ gh)) + (tl >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    hl = gl;
    hh = gh;
    gl = fl;
    gh = fh;
    fl = el;
    fh = eh;
    el = dl + tl | 0;
    eh = dh + th + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    dl = cl;
    dh = ch;
    cl = bl;
    ch = bh;
    bl = al;
    bh = ah;
    al = tl + (bl & cl ^ dl & (bl ^ cl)) | 0;
    ah = th + (bh & ch ^ dh & (bh ^ ch)) + (al >>> 0 < tl >>> 0 ? 1 : 0) | 0;
    xl = (bl >>> 28 | bh << 4) ^ (bl << 30 | bh >>> 2) ^ (bl << 25 | bh >>> 7) | 0;
    al = al + xl | 0;
    ah = ah + ((bh >>> 28 | bl << 4) ^ (bh << 30 | bl >>> 2) ^ (bh << 25 | bl >>> 7)) + (al >>> 0 < xl >>> 0 ? 1 : 0) | 0;
    H0l = H0l + al | 0;
    H0h = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0) | 0;
    H1l = H1l + bl | 0;
    H1h = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0) | 0;
    H2l = H2l + cl | 0;
    H2h = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0) | 0;
    H3l = H3l + dl | 0;
    H3h = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0) | 0;
    H4l = H4l + el | 0;
    H4h = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0) | 0;
    H5l = H5l + fl | 0;
    H5h = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0) | 0;
    H6l = H6l + gl | 0;
    H6h = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0) | 0;
    H7l = H7l + hl | 0;
    H7h = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0) | 0;
  }

  function _core_heap(offset) {
    offset = offset | 0;

    _core(HEAP[offset | 0] << 24 | HEAP[offset | 1] << 16 | HEAP[offset | 2] << 8 | HEAP[offset | 3], HEAP[offset | 4] << 24 | HEAP[offset | 5] << 16 | HEAP[offset | 6] << 8 | HEAP[offset | 7], HEAP[offset | 8] << 24 | HEAP[offset | 9] << 16 | HEAP[offset | 10] << 8 | HEAP[offset | 11], HEAP[offset | 12] << 24 | HEAP[offset | 13] << 16 | HEAP[offset | 14] << 8 | HEAP[offset | 15], HEAP[offset | 16] << 24 | HEAP[offset | 17] << 16 | HEAP[offset | 18] << 8 | HEAP[offset | 19], HEAP[offset | 20] << 24 | HEAP[offset | 21] << 16 | HEAP[offset | 22] << 8 | HEAP[offset | 23], HEAP[offset | 24] << 24 | HEAP[offset | 25] << 16 | HEAP[offset | 26] << 8 | HEAP[offset | 27], HEAP[offset | 28] << 24 | HEAP[offset | 29] << 16 | HEAP[offset | 30] << 8 | HEAP[offset | 31], HEAP[offset | 32] << 24 | HEAP[offset | 33] << 16 | HEAP[offset | 34] << 8 | HEAP[offset | 35], HEAP[offset | 36] << 24 | HEAP[offset | 37] << 16 | HEAP[offset | 38] << 8 | HEAP[offset | 39], HEAP[offset | 40] << 24 | HEAP[offset | 41] << 16 | HEAP[offset | 42] << 8 | HEAP[offset | 43], HEAP[offset | 44] << 24 | HEAP[offset | 45] << 16 | HEAP[offset | 46] << 8 | HEAP[offset | 47], HEAP[offset | 48] << 24 | HEAP[offset | 49] << 16 | HEAP[offset | 50] << 8 | HEAP[offset | 51], HEAP[offset | 52] << 24 | HEAP[offset | 53] << 16 | HEAP[offset | 54] << 8 | HEAP[offset | 55], HEAP[offset | 56] << 24 | HEAP[offset | 57] << 16 | HEAP[offset | 58] << 8 | HEAP[offset | 59], HEAP[offset | 60] << 24 | HEAP[offset | 61] << 16 | HEAP[offset | 62] << 8 | HEAP[offset | 63], HEAP[offset | 64] << 24 | HEAP[offset | 65] << 16 | HEAP[offset | 66] << 8 | HEAP[offset | 67], HEAP[offset | 68] << 24 | HEAP[offset | 69] << 16 | HEAP[offset | 70] << 8 | HEAP[offset | 71], HEAP[offset | 72] << 24 | HEAP[offset | 73] << 16 | HEAP[offset | 74] << 8 | HEAP[offset | 75], HEAP[offset | 76] << 24 | HEAP[offset | 77] << 16 | HEAP[offset | 78] << 8 | HEAP[offset | 79], HEAP[offset | 80] << 24 | HEAP[offset | 81] << 16 | HEAP[offset | 82] << 8 | HEAP[offset | 83], HEAP[offset | 84] << 24 | HEAP[offset | 85] << 16 | HEAP[offset | 86] << 8 | HEAP[offset | 87], HEAP[offset | 88] << 24 | HEAP[offset | 89] << 16 | HEAP[offset | 90] << 8 | HEAP[offset | 91], HEAP[offset | 92] << 24 | HEAP[offset | 93] << 16 | HEAP[offset | 94] << 8 | HEAP[offset | 95], HEAP[offset | 96] << 24 | HEAP[offset | 97] << 16 | HEAP[offset | 98] << 8 | HEAP[offset | 99], HEAP[offset | 100] << 24 | HEAP[offset | 101] << 16 | HEAP[offset | 102] << 8 | HEAP[offset | 103], HEAP[offset | 104] << 24 | HEAP[offset | 105] << 16 | HEAP[offset | 106] << 8 | HEAP[offset | 107], HEAP[offset | 108] << 24 | HEAP[offset | 109] << 16 | HEAP[offset | 110] << 8 | HEAP[offset | 111], HEAP[offset | 112] << 24 | HEAP[offset | 113] << 16 | HEAP[offset | 114] << 8 | HEAP[offset | 115], HEAP[offset | 116] << 24 | HEAP[offset | 117] << 16 | HEAP[offset | 118] << 8 | HEAP[offset | 119], HEAP[offset | 120] << 24 | HEAP[offset | 121] << 16 | HEAP[offset | 122] << 8 | HEAP[offset | 123], HEAP[offset | 124] << 24 | HEAP[offset | 125] << 16 | HEAP[offset | 126] << 8 | HEAP[offset | 127]);
  } // offset — multiple of 32


  function _state_to_heap(output) {
    output = output | 0;
    HEAP[output | 0] = H0h >>> 24;
    HEAP[output | 1] = H0h >>> 16 & 255;
    HEAP[output | 2] = H0h >>> 8 & 255;
    HEAP[output | 3] = H0h & 255;
    HEAP[output | 4] = H0l >>> 24;
    HEAP[output | 5] = H0l >>> 16 & 255;
    HEAP[output | 6] = H0l >>> 8 & 255;
    HEAP[output | 7] = H0l & 255;
    HEAP[output | 8] = H1h >>> 24;
    HEAP[output | 9] = H1h >>> 16 & 255;
    HEAP[output | 10] = H1h >>> 8 & 255;
    HEAP[output | 11] = H1h & 255;
    HEAP[output | 12] = H1l >>> 24;
    HEAP[output | 13] = H1l >>> 16 & 255;
    HEAP[output | 14] = H1l >>> 8 & 255;
    HEAP[output | 15] = H1l & 255;
    HEAP[output | 16] = H2h >>> 24;
    HEAP[output | 17] = H2h >>> 16 & 255;
    HEAP[output | 18] = H2h >>> 8 & 255;
    HEAP[output | 19] = H2h & 255;
    HEAP[output | 20] = H2l >>> 24;
    HEAP[output | 21] = H2l >>> 16 & 255;
    HEAP[output | 22] = H2l >>> 8 & 255;
    HEAP[output | 23] = H2l & 255;
    HEAP[output | 24] = H3h >>> 24;
    HEAP[output | 25] = H3h >>> 16 & 255;
    HEAP[output | 26] = H3h >>> 8 & 255;
    HEAP[output | 27] = H3h & 255;
    HEAP[output | 28] = H3l >>> 24;
    HEAP[output | 29] = H3l >>> 16 & 255;
    HEAP[output | 30] = H3l >>> 8 & 255;
    HEAP[output | 31] = H3l & 255;
    HEAP[output | 32] = H4h >>> 24;
    HEAP[output | 33] = H4h >>> 16 & 255;
    HEAP[output | 34] = H4h >>> 8 & 255;
    HEAP[output | 35] = H4h & 255;
    HEAP[output | 36] = H4l >>> 24;
    HEAP[output | 37] = H4l >>> 16 & 255;
    HEAP[output | 38] = H4l >>> 8 & 255;
    HEAP[output | 39] = H4l & 255;
    HEAP[output | 40] = H5h >>> 24;
    HEAP[output | 41] = H5h >>> 16 & 255;
    HEAP[output | 42] = H5h >>> 8 & 255;
    HEAP[output | 43] = H5h & 255;
    HEAP[output | 44] = H5l >>> 24;
    HEAP[output | 45] = H5l >>> 16 & 255;
    HEAP[output | 46] = H5l >>> 8 & 255;
    HEAP[output | 47] = H5l & 255;
    HEAP[output | 48] = H6h >>> 24;
    HEAP[output | 49] = H6h >>> 16 & 255;
    HEAP[output | 50] = H6h >>> 8 & 255;
    HEAP[output | 51] = H6h & 255;
    HEAP[output | 52] = H6l >>> 24;
    HEAP[output | 53] = H6l >>> 16 & 255;
    HEAP[output | 54] = H6l >>> 8 & 255;
    HEAP[output | 55] = H6l & 255;
    HEAP[output | 56] = H7h >>> 24;
    HEAP[output | 57] = H7h >>> 16 & 255;
    HEAP[output | 58] = H7h >>> 8 & 255;
    HEAP[output | 59] = H7h & 255;
    HEAP[output | 60] = H7l >>> 24;
    HEAP[output | 61] = H7l >>> 16 & 255;
    HEAP[output | 62] = H7l >>> 8 & 255;
    HEAP[output | 63] = H7l & 255;
  }

  function reset() {
    H0h = 0x6a09e667;
    H0l = 0xf3bcc908;
    H1h = 0xbb67ae85;
    H1l = 0x84caa73b;
    H2h = 0x3c6ef372;
    H2l = 0xfe94f82b;
    H3h = 0xa54ff53a;
    H3l = 0x5f1d36f1;
    H4h = 0x510e527f;
    H4l = 0xade682d1;
    H5h = 0x9b05688c;
    H5l = 0x2b3e6c1f;
    H6h = 0x1f83d9ab;
    H6l = 0xfb41bd6b;
    H7h = 0x5be0cd19;
    H7l = 0x137e2179;
    TOTAL0 = TOTAL1 = 0;
  }

  function init(h0h, h0l, h1h, h1l, h2h, h2l, h3h, h3l, h4h, h4l, h5h, h5l, h6h, h6l, h7h, h7l, total0, total1) {
    h0h = h0h | 0;
    h0l = h0l | 0;
    h1h = h1h | 0;
    h1l = h1l | 0;
    h2h = h2h | 0;
    h2l = h2l | 0;
    h3h = h3h | 0;
    h3l = h3l | 0;
    h4h = h4h | 0;
    h4l = h4l | 0;
    h5h = h5h | 0;
    h5l = h5l | 0;
    h6h = h6h | 0;
    h6l = h6l | 0;
    h7h = h7h | 0;
    h7l = h7l | 0;
    total0 = total0 | 0;
    total1 = total1 | 0;
    H0h = h0h;
    H0l = h0l;
    H1h = h1h;
    H1l = h1l;
    H2h = h2h;
    H2l = h2l;
    H3h = h3h;
    H3l = h3l;
    H4h = h4h;
    H4l = h4l;
    H5h = h5h;
    H5l = h5l;
    H6h = h6h;
    H6l = h6l;
    H7h = h7h;
    H7l = h7l;
    TOTAL0 = total0;
    TOTAL1 = total1;
  } // offset — multiple of 128


  function process(offset, length) {
    offset = offset | 0;
    length = length | 0;
    var hashed = 0;
    if (offset & 127) return -1;

    while ((length | 0) >= 128) {
      _core_heap(offset);

      offset = offset + 128 | 0;
      length = length - 128 | 0;
      hashed = hashed + 128 | 0;
    }

    TOTAL0 = TOTAL0 + hashed | 0;
    if (TOTAL0 >>> 0 < hashed >>> 0) TOTAL1 = TOTAL1 + 1 | 0;
    return hashed | 0;
  } // offset — multiple of 128
  // output — multiple of 64


  function finish(offset, length, output) {
    offset = offset | 0;
    length = length | 0;
    output = output | 0;
    var hashed = 0,
        i = 0;
    if (offset & 127) return -1;
    if (~output) if (output & 63) return -1;

    if ((length | 0) >= 128) {
      hashed = process(offset, length) | 0;
      if ((hashed | 0) == -1) return -1;
      offset = offset + hashed | 0;
      length = length - hashed | 0;
    }

    hashed = hashed + length | 0;
    TOTAL0 = TOTAL0 + length | 0;
    if (TOTAL0 >>> 0 < length >>> 0) TOTAL1 = TOTAL1 + 1 | 0;
    HEAP[offset | length] = 0x80;

    if ((length | 0) >= 112) {
      for (i = length + 1 | 0; (i | 0) < 128; i = i + 1 | 0) {
        HEAP[offset | i] = 0x00;
      }

      _core_heap(offset);

      length = 0;
      HEAP[offset | 0] = 0;
    }

    for (i = length + 1 | 0; (i | 0) < 123; i = i + 1 | 0) {
      HEAP[offset | i] = 0;
    }

    HEAP[offset | 120] = TOTAL1 >>> 21 & 255;
    HEAP[offset | 121] = TOTAL1 >>> 13 & 255;
    HEAP[offset | 122] = TOTAL1 >>> 5 & 255;
    HEAP[offset | 123] = TOTAL1 << 3 & 255 | TOTAL0 >>> 29;
    HEAP[offset | 124] = TOTAL0 >>> 21 & 255;
    HEAP[offset | 125] = TOTAL0 >>> 13 & 255;
    HEAP[offset | 126] = TOTAL0 >>> 5 & 255;
    HEAP[offset | 127] = TOTAL0 << 3 & 255;

    _core_heap(offset);

    if (~output) _state_to_heap(output);
    return hashed | 0;
  }

  function hmac_reset() {
    H0h = I0h;
    H0l = I0l;
    H1h = I1h;
    H1l = I1l;
    H2h = I2h;
    H2l = I2l;
    H3h = I3h;
    H3l = I3l;
    H4h = I4h;
    H4l = I4l;
    H5h = I5h;
    H5l = I5l;
    H6h = I6h;
    H6l = I6l;
    H7h = I7h;
    H7l = I7l;
    TOTAL0 = 128;
    TOTAL1 = 0;
  }

  function _hmac_opad() {
    H0h = O0h;
    H0l = O0l;
    H1h = O1h;
    H1l = O1l;
    H2h = O2h;
    H2l = O2l;
    H3h = O3h;
    H3l = O3l;
    H4h = O4h;
    H4l = O4l;
    H5h = O5h;
    H5l = O5l;
    H6h = O6h;
    H6l = O6l;
    H7h = O7h;
    H7l = O7l;
    TOTAL0 = 128;
    TOTAL1 = 0;
  }

  function hmac_init(p0h, p0l, p1h, p1l, p2h, p2l, p3h, p3l, p4h, p4l, p5h, p5l, p6h, p6l, p7h, p7l, p8h, p8l, p9h, p9l, p10h, p10l, p11h, p11l, p12h, p12l, p13h, p13l, p14h, p14l, p15h, p15l) {
    p0h = p0h | 0;
    p0l = p0l | 0;
    p1h = p1h | 0;
    p1l = p1l | 0;
    p2h = p2h | 0;
    p2l = p2l | 0;
    p3h = p3h | 0;
    p3l = p3l | 0;
    p4h = p4h | 0;
    p4l = p4l | 0;
    p5h = p5h | 0;
    p5l = p5l | 0;
    p6h = p6h | 0;
    p6l = p6l | 0;
    p7h = p7h | 0;
    p7l = p7l | 0;
    p8h = p8h | 0;
    p8l = p8l | 0;
    p9h = p9h | 0;
    p9l = p9l | 0;
    p10h = p10h | 0;
    p10l = p10l | 0;
    p11h = p11h | 0;
    p11l = p11l | 0;
    p12h = p12h | 0;
    p12l = p12l | 0;
    p13h = p13h | 0;
    p13l = p13l | 0;
    p14h = p14h | 0;
    p14l = p14l | 0;
    p15h = p15h | 0;
    p15l = p15l | 0; // opad

    reset();

    _core(p0h ^ 0x5c5c5c5c, p0l ^ 0x5c5c5c5c, p1h ^ 0x5c5c5c5c, p1l ^ 0x5c5c5c5c, p2h ^ 0x5c5c5c5c, p2l ^ 0x5c5c5c5c, p3h ^ 0x5c5c5c5c, p3l ^ 0x5c5c5c5c, p4h ^ 0x5c5c5c5c, p4l ^ 0x5c5c5c5c, p5h ^ 0x5c5c5c5c, p5l ^ 0x5c5c5c5c, p6h ^ 0x5c5c5c5c, p6l ^ 0x5c5c5c5c, p7h ^ 0x5c5c5c5c, p7l ^ 0x5c5c5c5c, p8h ^ 0x5c5c5c5c, p8l ^ 0x5c5c5c5c, p9h ^ 0x5c5c5c5c, p9l ^ 0x5c5c5c5c, p10h ^ 0x5c5c5c5c, p10l ^ 0x5c5c5c5c, p11h ^ 0x5c5c5c5c, p11l ^ 0x5c5c5c5c, p12h ^ 0x5c5c5c5c, p12l ^ 0x5c5c5c5c, p13h ^ 0x5c5c5c5c, p13l ^ 0x5c5c5c5c, p14h ^ 0x5c5c5c5c, p14l ^ 0x5c5c5c5c, p15h ^ 0x5c5c5c5c, p15l ^ 0x5c5c5c5c);

    O0h = H0h;
    O0l = H0l;
    O1h = H1h;
    O1l = H1l;
    O2h = H2h;
    O2l = H2l;
    O3h = H3h;
    O3l = H3l;
    O4h = H4h;
    O4l = H4l;
    O5h = H5h;
    O5l = H5l;
    O6h = H6h;
    O6l = H6l;
    O7h = H7h;
    O7l = H7l; // ipad

    reset();

    _core(p0h ^ 0x36363636, p0l ^ 0x36363636, p1h ^ 0x36363636, p1l ^ 0x36363636, p2h ^ 0x36363636, p2l ^ 0x36363636, p3h ^ 0x36363636, p3l ^ 0x36363636, p4h ^ 0x36363636, p4l ^ 0x36363636, p5h ^ 0x36363636, p5l ^ 0x36363636, p6h ^ 0x36363636, p6l ^ 0x36363636, p7h ^ 0x36363636, p7l ^ 0x36363636, p8h ^ 0x36363636, p8l ^ 0x36363636, p9h ^ 0x36363636, p9l ^ 0x36363636, p10h ^ 0x36363636, p10l ^ 0x36363636, p11h ^ 0x36363636, p11l ^ 0x36363636, p12h ^ 0x36363636, p12l ^ 0x36363636, p13h ^ 0x36363636, p13l ^ 0x36363636, p14h ^ 0x36363636, p14l ^ 0x36363636, p15h ^ 0x36363636, p15l ^ 0x36363636);

    I0h = H0h;
    I0l = H0l;
    I1h = H1h;
    I1l = H1l;
    I2h = H2h;
    I2l = H2l;
    I3h = H3h;
    I3l = H3l;
    I4h = H4h;
    I4l = H4l;
    I5h = H5h;
    I5l = H5l;
    I6h = H6h;
    I6l = H6l;
    I7h = H7h;
    I7l = H7l;
    TOTAL0 = 128;
    TOTAL1 = 0;
  } // offset — multiple of 128
  // output — multiple of 64


  function hmac_finish(offset, length, output) {
    offset = offset | 0;
    length = length | 0;
    output = output | 0;
    var t0h = 0,
        t0l = 0,
        t1h = 0,
        t1l = 0,
        t2h = 0,
        t2l = 0,
        t3h = 0,
        t3l = 0,
        t4h = 0,
        t4l = 0,
        t5h = 0,
        t5l = 0,
        t6h = 0,
        t6l = 0,
        t7h = 0,
        t7l = 0,
        hashed = 0;
    if (offset & 127) return -1;
    if (~output) if (output & 63) return -1;
    hashed = finish(offset, length, -1) | 0;
    t0h = H0h;
    t0l = H0l;
    t1h = H1h;
    t1l = H1l;
    t2h = H2h;
    t2l = H2l;
    t3h = H3h;
    t3l = H3l;
    t4h = H4h;
    t4l = H4l;
    t5h = H5h;
    t5l = H5l;
    t6h = H6h;
    t6l = H6l;
    t7h = H7h;
    t7l = H7l;

    _hmac_opad();

    _core(t0h, t0l, t1h, t1l, t2h, t2l, t3h, t3l, t4h, t4l, t5h, t5l, t6h, t6l, t7h, t7l, 0x80000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1536);

    if (~output) _state_to_heap(output);
    return hashed | 0;
  } // salt is assumed to be already processed
  // offset — multiple of 128
  // output — multiple of 64


  function pbkdf2_generate_block(offset, length, block, count, output) {
    offset = offset | 0;
    length = length | 0;
    block = block | 0;
    count = count | 0;
    output = output | 0;
    var h0h = 0,
        h0l = 0,
        h1h = 0,
        h1l = 0,
        h2h = 0,
        h2l = 0,
        h3h = 0,
        h3l = 0,
        h4h = 0,
        h4l = 0,
        h5h = 0,
        h5l = 0,
        h6h = 0,
        h6l = 0,
        h7h = 0,
        h7l = 0,
        t0h = 0,
        t0l = 0,
        t1h = 0,
        t1l = 0,
        t2h = 0,
        t2l = 0,
        t3h = 0,
        t3l = 0,
        t4h = 0,
        t4l = 0,
        t5h = 0,
        t5l = 0,
        t6h = 0,
        t6l = 0,
        t7h = 0,
        t7l = 0;
    if (offset & 127) return -1;
    if (~output) if (output & 63) return -1; // pad block number into heap
    // FIXME probable OOB write

    HEAP[offset + length | 0] = block >>> 24;
    HEAP[offset + length + 1 | 0] = block >>> 16 & 255;
    HEAP[offset + length + 2 | 0] = block >>> 8 & 255;
    HEAP[offset + length + 3 | 0] = block & 255; // finish first iteration

    hmac_finish(offset, length + 4 | 0, -1) | 0;
    h0h = t0h = H0h;
    h0l = t0l = H0l;
    h1h = t1h = H1h;
    h1l = t1l = H1l;
    h2h = t2h = H2h;
    h2l = t2l = H2l;
    h3h = t3h = H3h;
    h3l = t3l = H3l;
    h4h = t4h = H4h;
    h4l = t4l = H4l;
    h5h = t5h = H5h;
    h5l = t5l = H5l;
    h6h = t6h = H6h;
    h6l = t6l = H6l;
    h7h = t7h = H7h;
    h7l = t7l = H7l;
    count = count - 1 | 0; // perform the rest iterations

    while ((count | 0) > 0) {
      hmac_reset();

      _core(t0h, t0l, t1h, t1l, t2h, t2l, t3h, t3l, t4h, t4l, t5h, t5l, t6h, t6l, t7h, t7l, 0x80000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1536);

      t0h = H0h;
      t0l = H0l;
      t1h = H1h;
      t1l = H1l;
      t2h = H2h;
      t2l = H2l;
      t3h = H3h;
      t3l = H3l;
      t4h = H4h;
      t4l = H4l;
      t5h = H5h;
      t5l = H5l;
      t6h = H6h;
      t6l = H6l;
      t7h = H7h;
      t7l = H7l;

      _hmac_opad();

      _core(t0h, t0l, t1h, t1l, t2h, t2l, t3h, t3l, t4h, t4l, t5h, t5l, t6h, t6l, t7h, t7l, 0x80000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1536);

      t0h = H0h;
      t0l = H0l;
      t1h = H1h;
      t1l = H1l;
      t2h = H2h;
      t2l = H2l;
      t3h = H3h;
      t3l = H3l;
      t4h = H4h;
      t4l = H4l;
      t5h = H5h;
      t5l = H5l;
      t6h = H6h;
      t6l = H6l;
      t7h = H7h;
      t7l = H7l;
      h0h = h0h ^ H0h;
      h0l = h0l ^ H0l;
      h1h = h1h ^ H1h;
      h1l = h1l ^ H1l;
      h2h = h2h ^ H2h;
      h2l = h2l ^ H2l;
      h3h = h3h ^ H3h;
      h3l = h3l ^ H3l;
      h4h = h4h ^ H4h;
      h4l = h4l ^ H4l;
      h5h = h5h ^ H5h;
      h5l = h5l ^ H5l;
      h6h = h6h ^ H6h;
      h6l = h6l ^ H6l;
      h7h = h7h ^ H7h;
      h7l = h7l ^ H7l;
      count = count - 1 | 0;
    }

    H0h = h0h;
    H0l = h0l;
    H1h = h1h;
    H1l = h1l;
    H2h = h2h;
    H2l = h2l;
    H3h = h3h;
    H3l = h3l;
    H4h = h4h;
    H4l = h4l;
    H5h = h5h;
    H5l = h5l;
    H6h = h6h;
    H6l = h6l;
    H7h = h7h;
    H7l = h7l;
    if (~output) _state_to_heap(output);
    return 0;
  }

  return {
    // SHA512
    reset: reset,
    init: init,
    process: process,
    finish: finish,
    // HMAC-SHA512
    hmac_reset: hmac_reset,
    hmac_init: hmac_init,
    hmac_finish: hmac_finish,
    // PBKDF2-HMAC-SHA512
    pbkdf2_generate_block: pbkdf2_generate_block
  };
};

var _sha512_block_size = 128;
var _sha512_hash_size = 64;

var Sha512 =
/*#__PURE__*/
function (_Hash3) {
  _inherits(Sha512, _Hash3);

  function Sha512() {
    var _this8;

    _classCallCheck(this, Sha512);

    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(Sha512).call(this));
    _this8.NAME = 'sha512';
    _this8.BLOCK_SIZE = _sha512_block_size;
    _this8.HASH_SIZE = _sha512_hash_size;
    _this8.heap = _heap_init();
    _this8.asm = sha512_asm({
      Uint8Array: Uint8Array
    }, null, _this8.heap.buffer);

    _this8.reset();

    return _this8;
  }

  return Sha512;
}(Hash);

Sha512.NAME = 'sha512';

var Hmac =
/*#__PURE__*/
function () {
  function Hmac(hash, password, verify) {
    _classCallCheck(this, Hmac);

    if (!hash.HASH_SIZE) throw new SyntaxError("option 'hash' supplied doesn't seem to be a valid hash function");
    this.hash = hash;
    this.BLOCK_SIZE = this.hash.BLOCK_SIZE;
    this.HMAC_SIZE = this.hash.HASH_SIZE;
    this.result = null;
    this.key = _hmac_key(this.hash, password);
    var ipad = new Uint8Array(this.key);

    for (var i = 0; i < ipad.length; ++i) {
      ipad[i] ^= 0x36;
    }

    this.hash.reset().process(ipad);

    if (verify !== undefined) {
      this._hmac_init_verify(verify);
    } else {
      this.verify = null;
    }
  }

  _createClass(Hmac, [{
    key: "process",
    value: function process(data) {
      if (this.result !== null) throw new IllegalStateError('state must be reset before processing new data');
      this.hash.process(data);
      return this;
    }
  }, {
    key: "finish",
    value: function finish() {
      if (this.result !== null) throw new IllegalStateError('state must be reset before processing new data');
      var inner_result = this.hash.finish().result;
      var opad = new Uint8Array(this.key);

      for (var i = 0; i < opad.length; ++i) {
        opad[i] ^= 0x5c;
      }

      var verify = this.verify;
      var result = this.hash.reset().process(opad).process(inner_result).finish().result;

      if (verify) {
        if (verify.length === result.length) {
          var diff = 0;

          for (var _i5 = 0; _i5 < verify.length; _i5++) {
            diff |= verify[_i5] ^ result[_i5];
          }

          if (diff !== 0) throw new Error("HMAC verification failed, hash value doesn't match");
        } else {
          throw new Error("HMAC verification failed, lengths doesn't match");
        }
      }

      this.result = result;
      return this;
    }
  }, {
    key: "_hmac_init_verify",
    value: function _hmac_init_verify(verify) {
      if (verify.length !== this.HMAC_SIZE) throw new IllegalArgumentError('illegal verification tag size');
      this.verify = verify;
    }
  }]);

  return Hmac;
}();

function _hmac_key(hash, password) {
  var key = new Uint8Array(hash.BLOCK_SIZE);

  if (password.length > hash.BLOCK_SIZE) {
    key.set(hash.reset().process(password).finish().result);
  } else {
    key.set(password);
  }

  return key;
}

var HmacSha1 =
/*#__PURE__*/
function (_Hmac) {
  _inherits(HmacSha1, _Hmac);

  function HmacSha1(password, verify) {
    var _this9;

    _classCallCheck(this, HmacSha1);

    var hash = new Sha1(); // Calculate ipad, init the underlying engine, calculate this.key

    _this9 = _possibleConstructorReturn(this, _getPrototypeOf(HmacSha1).call(this, hash, password, verify));

    _this9.reset();

    if (verify !== undefined) {
      _this9._hmac_init_verify(verify);
    } else {
      _this9.verify = null;
    }

    return _possibleConstructorReturn(_this9, _assertThisInitialized(_assertThisInitialized(_this9)));
  }

  _createClass(HmacSha1, [{
    key: "reset",
    value: function reset() {
      this.result = null;
      var key = this.key;
      this.hash.reset().asm.hmac_init(key[0] << 24 | key[1] << 16 | key[2] << 8 | key[3], key[4] << 24 | key[5] << 16 | key[6] << 8 | key[7], key[8] << 24 | key[9] << 16 | key[10] << 8 | key[11], key[12] << 24 | key[13] << 16 | key[14] << 8 | key[15], key[16] << 24 | key[17] << 16 | key[18] << 8 | key[19], key[20] << 24 | key[21] << 16 | key[22] << 8 | key[23], key[24] << 24 | key[25] << 16 | key[26] << 8 | key[27], key[28] << 24 | key[29] << 16 | key[30] << 8 | key[31], key[32] << 24 | key[33] << 16 | key[34] << 8 | key[35], key[36] << 24 | key[37] << 16 | key[38] << 8 | key[39], key[40] << 24 | key[41] << 16 | key[42] << 8 | key[43], key[44] << 24 | key[45] << 16 | key[46] << 8 | key[47], key[48] << 24 | key[49] << 16 | key[50] << 8 | key[51], key[52] << 24 | key[53] << 16 | key[54] << 8 | key[55], key[56] << 24 | key[57] << 16 | key[58] << 8 | key[59], key[60] << 24 | key[61] << 16 | key[62] << 8 | key[63]);
      return this;
    }
  }, {
    key: "finish",
    value: function finish() {
      if (this.result !== null) throw new IllegalStateError('state must be reset before processing new data');
      var hash = this.hash;
      var asm = this.hash.asm;
      var heap = this.hash.heap;
      asm.hmac_finish(hash.pos, hash.len, 0);
      var verify = this.verify;
      var result = new Uint8Array(_sha1_hash_size);
      result.set(heap.subarray(0, _sha1_hash_size));

      if (verify) {
        if (verify.length === result.length) {
          var diff = 0;

          for (var i = 0; i < verify.length; i++) {
            diff |= verify[i] ^ result[i];
          }

          if (diff !== 0) throw new Error("HMAC verification failed, hash value doesn't match");
        } else {
          throw new Error("HMAC verification failed, lengths doesn't match");
        }
      } else {
        this.result = result;
      }

      return this;
    }
  }]);

  return HmacSha1;
}(Hmac);

var HmacSha256 =
/*#__PURE__*/
function (_Hmac2) {
  _inherits(HmacSha256, _Hmac2);

  function HmacSha256(password, verify) {
    var _this10;

    _classCallCheck(this, HmacSha256);

    var hash = new Sha256(); // Calculate ipad, init the underlying engine, calculate this.key

    _this10 = _possibleConstructorReturn(this, _getPrototypeOf(HmacSha256).call(this, hash, password, verify));

    _this10.reset();

    if (verify !== undefined) {
      _this10._hmac_init_verify(verify);
    } else {
      _this10.verify = null;
    }

    return _possibleConstructorReturn(_this10, _assertThisInitialized(_assertThisInitialized(_this10)));
  }

  _createClass(HmacSha256, [{
    key: "reset",
    value: function reset() {
      var key = this.key;
      this.hash.reset().asm.hmac_init(key[0] << 24 | key[1] << 16 | key[2] << 8 | key[3], key[4] << 24 | key[5] << 16 | key[6] << 8 | key[7], key[8] << 24 | key[9] << 16 | key[10] << 8 | key[11], key[12] << 24 | key[13] << 16 | key[14] << 8 | key[15], key[16] << 24 | key[17] << 16 | key[18] << 8 | key[19], key[20] << 24 | key[21] << 16 | key[22] << 8 | key[23], key[24] << 24 | key[25] << 16 | key[26] << 8 | key[27], key[28] << 24 | key[29] << 16 | key[30] << 8 | key[31], key[32] << 24 | key[33] << 16 | key[34] << 8 | key[35], key[36] << 24 | key[37] << 16 | key[38] << 8 | key[39], key[40] << 24 | key[41] << 16 | key[42] << 8 | key[43], key[44] << 24 | key[45] << 16 | key[46] << 8 | key[47], key[48] << 24 | key[49] << 16 | key[50] << 8 | key[51], key[52] << 24 | key[53] << 16 | key[54] << 8 | key[55], key[56] << 24 | key[57] << 16 | key[58] << 8 | key[59], key[60] << 24 | key[61] << 16 | key[62] << 8 | key[63]);
      return this;
    }
  }, {
    key: "finish",
    value: function finish() {
      if (this.key === null) throw new IllegalStateError('no key is associated with the instance');
      if (this.result !== null) throw new IllegalStateError('state must be reset before processing new data');
      var hash = this.hash;
      var asm = this.hash.asm;
      var heap = this.hash.heap;
      asm.hmac_finish(hash.pos, hash.len, 0);
      var verify = this.verify;
      var result = new Uint8Array(_sha256_hash_size);
      result.set(heap.subarray(0, _sha256_hash_size));

      if (verify) {
        if (verify.length === result.length) {
          var diff = 0;

          for (var i = 0; i < verify.length; i++) {
            diff |= verify[i] ^ result[i];
          }

          if (diff !== 0) throw new Error("HMAC verification failed, hash value doesn't match");
        } else {
          throw new Error("HMAC verification failed, lengths doesn't match");
        }
      } else {
        this.result = result;
      }

      return this;
    }
  }]);

  return HmacSha256;
}(Hmac);

var HmacSha512 =
/*#__PURE__*/
function (_Hmac3) {
  _inherits(HmacSha512, _Hmac3);

  function HmacSha512(password, verify) {
    var _this11;

    _classCallCheck(this, HmacSha512);

    var hash = new Sha512(); // Calculate ipad, init the underlying engine, calculate this.key

    _this11 = _possibleConstructorReturn(this, _getPrototypeOf(HmacSha512).call(this, hash, password, verify));

    _this11.reset();

    if (verify !== undefined) {
      _this11._hmac_init_verify(verify);
    } else {
      _this11.verify = null;
    }

    return _possibleConstructorReturn(_this11, _assertThisInitialized(_assertThisInitialized(_this11)));
  }

  _createClass(HmacSha512, [{
    key: "reset",
    value: function reset() {
      var key = this.key;
      this.hash.reset().asm.hmac_init(key[0] << 24 | key[1] << 16 | key[2] << 8 | key[3], key[4] << 24 | key[5] << 16 | key[6] << 8 | key[7], key[8] << 24 | key[9] << 16 | key[10] << 8 | key[11], key[12] << 24 | key[13] << 16 | key[14] << 8 | key[15], key[16] << 24 | key[17] << 16 | key[18] << 8 | key[19], key[20] << 24 | key[21] << 16 | key[22] << 8 | key[23], key[24] << 24 | key[25] << 16 | key[26] << 8 | key[27], key[28] << 24 | key[29] << 16 | key[30] << 8 | key[31], key[32] << 24 | key[33] << 16 | key[34] << 8 | key[35], key[36] << 24 | key[37] << 16 | key[38] << 8 | key[39], key[40] << 24 | key[41] << 16 | key[42] << 8 | key[43], key[44] << 24 | key[45] << 16 | key[46] << 8 | key[47], key[48] << 24 | key[49] << 16 | key[50] << 8 | key[51], key[52] << 24 | key[53] << 16 | key[54] << 8 | key[55], key[56] << 24 | key[57] << 16 | key[58] << 8 | key[59], key[60] << 24 | key[61] << 16 | key[62] << 8 | key[63], key[64] << 24 | key[65] << 16 | key[66] << 8 | key[67], key[68] << 24 | key[69] << 16 | key[70] << 8 | key[71], key[72] << 24 | key[73] << 16 | key[74] << 8 | key[75], key[76] << 24 | key[77] << 16 | key[78] << 8 | key[79], key[80] << 24 | key[81] << 16 | key[82] << 8 | key[83], key[84] << 24 | key[85] << 16 | key[86] << 8 | key[87], key[88] << 24 | key[89] << 16 | key[90] << 8 | key[91], key[92] << 24 | key[93] << 16 | key[94] << 8 | key[95], key[96] << 24 | key[97] << 16 | key[98] << 8 | key[99], key[100] << 24 | key[101] << 16 | key[102] << 8 | key[103], key[104] << 24 | key[105] << 16 | key[106] << 8 | key[107], key[108] << 24 | key[109] << 16 | key[110] << 8 | key[111], key[112] << 24 | key[113] << 16 | key[114] << 8 | key[115], key[116] << 24 | key[117] << 16 | key[118] << 8 | key[119], key[120] << 24 | key[121] << 16 | key[122] << 8 | key[123], key[124] << 24 | key[125] << 16 | key[126] << 8 | key[127]);
      return this;
    }
  }, {
    key: "finish",
    value: function finish() {
      if (this.key === null) throw new IllegalStateError('no key is associated with the instance');
      if (this.result !== null) throw new IllegalStateError('state must be reset before processing new data');
      var hash = this.hash;
      var asm = this.hash.asm;
      var heap = this.hash.heap;
      asm.hmac_finish(hash.pos, hash.len, 0);
      var verify = this.verify;
      var result = new Uint8Array(_sha512_hash_size);
      result.set(heap.subarray(0, _sha512_hash_size));

      if (verify) {
        if (verify.length === result.length) {
          var diff = 0;

          for (var i = 0; i < verify.length; i++) {
            diff |= verify[i] ^ result[i];
          }

          if (diff !== 0) throw new Error("HMAC verification failed, hash value doesn't match");
        } else {
          throw new Error("HMAC verification failed, lengths doesn't match");
        }
      } else {
        this.result = result;
      }

      return this;
    }
  }]);

  return HmacSha512;
}(Hmac);

function Pbkdf2HmacSha1(password, salt, count, length) {
  var hmac = new HmacSha1(password);
  var result = new Uint8Array(length);
  var blocks = Math.ceil(length / hmac.HMAC_SIZE);

  for (var i = 1; i <= blocks; ++i) {
    var j = (i - 1) * hmac.HMAC_SIZE;
    var l = (i < blocks ? 0 : length % hmac.HMAC_SIZE) || hmac.HMAC_SIZE;
    hmac.reset().process(salt);
    hmac.hash.asm.pbkdf2_generate_block(hmac.hash.pos, hmac.hash.len, i, count, 0);
    result.set(hmac.hash.heap.subarray(0, l), j);
  }

  return result;
}

function Pbkdf2HmacSha256(password, salt, count, length) {
  var hmac = new HmacSha256(password);
  var result = new Uint8Array(length);
  var blocks = Math.ceil(length / hmac.HMAC_SIZE);

  for (var i = 1; i <= blocks; ++i) {
    var j = (i - 1) * hmac.HMAC_SIZE;
    var l = (i < blocks ? 0 : length % hmac.HMAC_SIZE) || hmac.HMAC_SIZE;
    hmac.reset().process(salt);
    hmac.hash.asm.pbkdf2_generate_block(hmac.hash.pos, hmac.hash.len, i, count, 0);
    result.set(hmac.hash.heap.subarray(0, l), j);
  }

  return result;
}

function Pbkdf2HmacSha512(password, salt, count, length) {
  var hmac = new HmacSha512(password);
  var result = new Uint8Array(length);
  var blocks = Math.ceil(length / hmac.HMAC_SIZE);

  for (var i = 1; i <= blocks; ++i) {
    var j = (i - 1) * hmac.HMAC_SIZE;
    var l = (i < blocks ? 0 : length % hmac.HMAC_SIZE) || hmac.HMAC_SIZE;
    hmac.reset().process(salt);
    hmac.hash.asm.pbkdf2_generate_block(hmac.hash.pos, hmac.hash.len, i, count, 0);
    result.set(hmac.hash.heap.subarray(0, l), j);
  }

  return result;
}

var RSA =
/*#__PURE__*/
function () {
  function RSA(key) {
    _classCallCheck(this, RSA);

    var l = key.length;
    if (l !== 2 && l !== 3 && l !== 8) throw new SyntaxError('unexpected key type');
    var k0 = new Modulus(new BigNumber(key[0]));
    var k1 = new BigNumber(key[1]);
    this.key = {
      0: k0,
      1: k1
    };

    if (l > 2) {
      this.key[2] = new BigNumber(key[2]);
    }

    if (l > 3) {
      this.key[3] = new Modulus(new BigNumber(key[3]));
      this.key[4] = new Modulus(new BigNumber(key[4]));
      this.key[5] = new BigNumber(key[5]);
      this.key[6] = new BigNumber(key[6]);
      this.key[7] = new BigNumber(key[7]);
    }
  }

  _createClass(RSA, [{
    key: "encrypt",
    value: function encrypt(msg) {
      if (!this.key) throw new IllegalStateError('no key is associated with the instance');
      if (this.key[0].compare(msg) <= 0) throw new RangeError('data too large');
      var m = this.key[0];
      var e = this.key[1];
      var result = m.power(msg, e).toBytes();
      var bytelen = m.bitLength + 7 >> 3;

      if (result.length < bytelen) {
        var r = new Uint8Array(bytelen);
        r.set(result, bytelen - result.length);
        result = r;
      }

      this.result = result;
      return this;
    }
  }, {
    key: "decrypt",
    value: function decrypt(msg) {
      if (this.key[0].compare(msg) <= 0) throw new RangeError('data too large');
      var result;
      var m;

      if (this.key[3] !== undefined) {
        m = this.key[0];
        var p = this.key[3];
        var q = this.key[4];
        var dp = this.key[5];
        var dq = this.key[6];
        var u = this.key[7];
        var x = p.power(msg, dp);
        var y = q.power(msg, dq);
        var t = x.subtract(y);

        while (t.sign < 0) {
          t = t.add(p);
        }

        var h = p.reduce(u.multiply(t));
        result = h.multiply(q).add(y).clamp(m.bitLength).toBytes();
      } else {
        m = this.key[0];
        var d = this.key[2];
        result = m.power(msg, d).toBytes();
      }

      var bytelen = m.bitLength + 7 >> 3;

      if (result.length < bytelen) {
        var r = new Uint8Array(bytelen);
        r.set(result, bytelen - result.length);
        result = r;
      }

      this.result = result;
      return this;
    }
  }]);

  return RSA;
}();

var RSA_OAEP =
/*#__PURE__*/
function () {
  function RSA_OAEP(key, hash, label) {
    _classCallCheck(this, RSA_OAEP);

    this.rsa = new RSA(key);
    this.hash = hash;

    if (label !== undefined) {
      this.label = label.length > 0 ? label : null;
    } else {
      this.label = null;
    }
  }

  _createClass(RSA_OAEP, [{
    key: "encrypt",
    value: function encrypt(data, random) {
      var key_size = Math.ceil(this.rsa.key[0].bitLength / 8);
      var hash_size = this.hash.HASH_SIZE;
      var data_length = data.byteLength || data.length || 0;
      var ps_length = key_size - data_length - 2 * hash_size - 2;
      if (data_length > key_size - 2 * this.hash.HASH_SIZE - 2) throw new IllegalArgumentError('data too large');
      var message = new Uint8Array(key_size);
      var seed = message.subarray(1, hash_size + 1);
      var data_block = message.subarray(hash_size + 1);
      data_block.set(data, hash_size + ps_length + 1);
      data_block.set(this.hash.process(this.label || new Uint8Array(0)).finish().result, 0);
      data_block[hash_size + ps_length] = 1;

      if (random !== undefined) {
        if (seed.length !== random.length) throw new IllegalArgumentError('random size must equal the hash size');
        seed.set(random);
      } else {
        getRandomValues(seed);
      }

      var data_block_mask = this.RSA_MGF1_generate(seed, data_block.length);

      for (var i = 0; i < data_block.length; i++) {
        data_block[i] ^= data_block_mask[i];
      }

      var seed_mask = this.RSA_MGF1_generate(data_block, seed.length);

      for (var _i6 = 0; _i6 < seed.length; _i6++) {
        seed[_i6] ^= seed_mask[_i6];
      }

      this.rsa.encrypt(new BigNumber(message));
      return new Uint8Array(this.rsa.result);
    }
  }, {
    key: "decrypt",
    value: function decrypt(data) {
      if (!this.rsa.key) throw new IllegalStateError('no key is associated with the instance');
      var key_size = Math.ceil(this.rsa.key[0].bitLength / 8);
      var hash_size = this.hash.HASH_SIZE;
      var data_length = data.byteLength || data.length || 0;
      if (data_length !== key_size) throw new IllegalArgumentError('bad data');
      this.rsa.decrypt(new BigNumber(data));
      var z = this.rsa.result[0];
      var seed = this.rsa.result.subarray(1, hash_size + 1);
      var data_block = this.rsa.result.subarray(hash_size + 1);
      if (z !== 0) throw new SecurityError('decryption failed');
      var seed_mask = this.RSA_MGF1_generate(data_block, seed.length);

      for (var i = 0; i < seed.length; i++) {
        seed[i] ^= seed_mask[i];
      }

      var data_block_mask = this.RSA_MGF1_generate(seed, data_block.length);

      for (var _i7 = 0; _i7 < data_block.length; _i7++) {
        data_block[_i7] ^= data_block_mask[_i7];
      }

      var lhash = this.hash.reset().process(this.label || new Uint8Array(0)).finish().result;

      for (var _i8 = 0; _i8 < hash_size; _i8++) {
        if (lhash[_i8] !== data_block[_i8]) throw new SecurityError('decryption failed');
      }

      var ps_end = hash_size;

      for (; ps_end < data_block.length; ps_end++) {
        var psz = data_block[ps_end];
        if (psz === 1) break;
        if (psz !== 0) throw new SecurityError('decryption failed');
      }

      if (ps_end === data_block.length) throw new SecurityError('decryption failed');
      this.rsa.result = data_block.subarray(ps_end + 1);
      return new Uint8Array(this.rsa.result);
    }
  }, {
    key: "RSA_MGF1_generate",
    value: function RSA_MGF1_generate(seed) {
      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var hash_size = this.hash.HASH_SIZE; //    if ( length > (hash_size * 0x100000000) )
      //        throw new IllegalArgumentError("mask length too large");

      var mask = new Uint8Array(length);
      var counter = new Uint8Array(4);
      var chunks = Math.ceil(length / hash_size);

      for (var i = 0; i < chunks; i++) {
        counter[0] = i >>> 24, counter[1] = i >>> 16 & 255, counter[2] = i >>> 8 & 255, counter[3] = i & 255;
        var submask = mask.subarray(i * hash_size);
        var chunk = this.hash.reset().process(seed).process(counter).finish().result;
        if (chunk.length > submask.length) chunk = chunk.subarray(0, submask.length);
        submask.set(chunk);
      }

      return mask;
    }
  }]);

  return RSA_OAEP;
}();

var RSA_PSS =
/*#__PURE__*/
function () {
  function RSA_PSS(key, hash) {
    var saltLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;

    _classCallCheck(this, RSA_PSS);

    this.rsa = new RSA(key);
    this.hash = hash;
    this.saltLength = saltLength;
    if (this.saltLength < 0) throw new TypeError('saltLength should be a non-negative number');
    if (this.rsa.key !== null && Math.ceil((this.rsa.key[0].bitLength - 1) / 8) < this.hash.HASH_SIZE + this.saltLength + 2) throw new SyntaxError('saltLength is too large');
  }

  _createClass(RSA_PSS, [{
    key: "sign",
    value: function sign(data, random) {
      var key_bits = this.rsa.key[0].bitLength;
      var hash_size = this.hash.HASH_SIZE;
      var message_length = Math.ceil((key_bits - 1) / 8);
      var salt_length = this.saltLength;
      var ps_length = message_length - salt_length - hash_size - 2;
      var message = new Uint8Array(message_length);
      var h_block = message.subarray(message_length - hash_size - 1, message_length - 1);
      var d_block = message.subarray(0, message_length - hash_size - 1);
      var d_salt = d_block.subarray(ps_length + 1);
      var m_block = new Uint8Array(8 + hash_size + salt_length);
      var m_hash = m_block.subarray(8, 8 + hash_size);
      var m_salt = m_block.subarray(8 + hash_size);
      m_hash.set(this.hash.process(data).finish().result);

      if (salt_length > 0) {
        if (random !== undefined) {
          if (m_salt.length !== random.length) throw new IllegalArgumentError('random size must equal the salt size');
          m_salt.set(random);
        } else {
          getRandomValues(m_salt);
        }
      }

      d_block[ps_length] = 1;
      d_salt.set(m_salt);
      h_block.set(this.hash.reset().process(m_block).finish().result);
      var d_block_mask = this.RSA_MGF1_generate(h_block, d_block.length);

      for (var i = 0; i < d_block.length; i++) {
        d_block[i] ^= d_block_mask[i];
      }

      message[message_length - 1] = 0xbc;
      var zbits = 8 * message_length - key_bits + 1;
      if (zbits % 8) message[0] &= 0xff >>> zbits;
      this.rsa.decrypt(new BigNumber(message));
      return this.rsa.result;
    }
  }, {
    key: "verify",
    value: function verify(signature, data) {
      var key_bits = this.rsa.key[0].bitLength;
      var hash_size = this.hash.HASH_SIZE;
      var message_length = Math.ceil((key_bits - 1) / 8);
      var salt_length = this.saltLength;
      var ps_length = message_length - salt_length - hash_size - 2;
      this.rsa.encrypt(new BigNumber(signature));
      var message = this.rsa.result;
      if (message[message_length - 1] !== 0xbc) throw new SecurityError('bad signature');
      var h_block = message.subarray(message_length - hash_size - 1, message_length - 1);
      var d_block = message.subarray(0, message_length - hash_size - 1);
      var d_salt = d_block.subarray(ps_length + 1);
      var zbits = 8 * message_length - key_bits + 1;
      if (zbits % 8 && message[0] >>> 8 - zbits) throw new SecurityError('bad signature');
      var d_block_mask = this.RSA_MGF1_generate(h_block, d_block.length);

      for (var i = 0; i < d_block.length; i++) {
        d_block[i] ^= d_block_mask[i];
      }

      if (zbits % 8) message[0] &= 0xff >>> zbits;

      for (var _i9 = 0; _i9 < ps_length; _i9++) {
        if (d_block[_i9] !== 0) throw new SecurityError('bad signature');
      }

      if (d_block[ps_length] !== 1) throw new SecurityError('bad signature');
      var m_block = new Uint8Array(8 + hash_size + salt_length);
      var m_hash = m_block.subarray(8, 8 + hash_size);
      var m_salt = m_block.subarray(8 + hash_size);
      m_hash.set(this.hash.reset().process(data).finish().result);
      m_salt.set(d_salt);
      var h_block_verify = this.hash.reset().process(m_block).finish().result;

      for (var _i10 = 0; _i10 < hash_size; _i10++) {
        if (h_block[_i10] !== h_block_verify[_i10]) throw new SecurityError('bad signature');
      }
    }
  }, {
    key: "RSA_MGF1_generate",
    value: function RSA_MGF1_generate(seed) {
      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var hash_size = this.hash.HASH_SIZE; //    if ( length > (hash_size * 0x100000000) )
      //        throw new IllegalArgumentError("mask length too large");

      var mask = new Uint8Array(length);
      var counter = new Uint8Array(4);
      var chunks = Math.ceil(length / hash_size);

      for (var i = 0; i < chunks; i++) {
        counter[0] = i >>> 24, counter[1] = i >>> 16 & 255, counter[2] = i >>> 8 & 255, counter[3] = i & 255;
        var submask = mask.subarray(i * hash_size);
        var chunk = this.hash.reset().process(seed).process(counter).finish().result;
        if (chunk.length > submask.length) chunk = chunk.subarray(0, submask.length);
        submask.set(chunk);
      }

      return mask;
    }
  }]);

  return RSA_PSS;
}();

var RSA_PKCS1_v1_5 =
/*#__PURE__*/
function () {
  function RSA_PKCS1_v1_5(key, hash) {
    _classCallCheck(this, RSA_PKCS1_v1_5);

    this.rsa = new RSA(key);
    this.hash = hash;
  }

  _createClass(RSA_PKCS1_v1_5, [{
    key: "sign",
    value: function sign(data) {
      if (!this.rsa.key) {
        throw new IllegalStateError('no key is associated with the instance');
      }

      var prefix = getHashPrefix(this.hash);
      var hash_size = this.hash.HASH_SIZE;
      var t_len = prefix.length + hash_size;
      var k = this.rsa.key[0].bitLength + 7 >> 3;

      if (k < t_len + 11) {
        throw new Error('Message too long');
      }

      var m_hash = new Uint8Array(hash_size);
      m_hash.set(this.hash.process(data).finish().result); // EM = 0x00 || 0x01 || PS || 0x00 || T

      var em = new Uint8Array(k);
      var i = 0;
      em[i++] = 0; // 0x00

      em[i++] = 1; // 0x01
      // PS

      for (i; i < k - t_len - 1; i++) {
        em[i] = 0xff;
      }

      em[i++] = 0;
      em.set(prefix, i); // 0x00
      // T

      em.set(m_hash, em.length - hash_size);
      this.rsa.decrypt(new BigNumber(em));
      return this.rsa.result;
    }
  }, {
    key: "verify",
    value: function verify(signature, data) {
      var prefix = getHashPrefix(this.hash);
      var hash_size = this.hash.HASH_SIZE;
      var t_len = prefix.length + hash_size;
      var k = this.rsa.key[0].bitLength + 7 >> 3;

      if (k < t_len + 11) {
        throw new SecurityError('Bad signature');
      }

      this.rsa.encrypt(new BigNumber(signature));
      var m_hash = new Uint8Array(hash_size);
      m_hash.set(this.hash.process(data).finish().result);
      var res = 1; // EM = 0x00 || 0x01 || PS || 0x00 || T

      var decryptedSignature = this.rsa.result;
      var i = 0;
      res &= decryptedSignature[i++] === 0 ? 1 : 0; // 0x00

      res &= decryptedSignature[i++] === 1 ? 1 : 0; // 0x01
      // PS

      for (i; i < k - t_len - 1; i++) {
        res &= decryptedSignature[i] === 0xff ? 1 : 0;
      }

      res &= decryptedSignature[i++] === 0 ? 1 : 0; // 0x00
      // T

      var j = 0;
      var n = i + prefix.length; // prefix

      for (i; i < n; i++) {
        res &= decryptedSignature[i] === prefix[j++] ? 1 : 0;
      }

      j = 0;
      n = i + m_hash.length; // hash

      for (i; i < n; i++) {
        res &= decryptedSignature[i] === m_hash[j++] ? 1 : 0;
      }

      if (!res) {
        throw new SecurityError('Bad signature');
      }
    }
  }]);

  return RSA_PKCS1_v1_5;
}();

var HASH_PREFIXES = {
  sha1: new Uint8Array([0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2b, 0x0e, 0x03, 0x02, 0x1a, 0x05, 0x00, 0x04, 0x14]),
  sha256: new Uint8Array([0x30, 0x31, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20]),
  sha384: new Uint8Array([0x30, 0x41, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x02, 0x05, 0x00, 0x04, 0x30]),
  sha512: new Uint8Array([0x30, 0x51, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x03, 0x05, 0x00, 0x04, 0x40])
};

function getHashPrefix(hash) {
  var prefix = HASH_PREFIXES[hash.NAME];

  if (!prefix) {
    throw new Error("Cannot get hash prefix for hash algorithm '" + hash.NAME + "'");
  }

  return prefix;
}


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1.js":
/*!******************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var asn1 = exports;
asn1.bignum = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
asn1.define = __webpack_require__(/*! ./asn1/api */ "./node_modules/asn1.js/lib/asn1/api.js").define;
asn1.base = __webpack_require__(/*! ./asn1/base */ "./node_modules/asn1.js/lib/asn1/base/index.js");
asn1.constants = __webpack_require__(/*! ./asn1/constants */ "./node_modules/asn1.js/lib/asn1/constants/index.js");
asn1.decoders = __webpack_require__(/*! ./asn1/decoders */ "./node_modules/asn1.js/lib/asn1/decoders/index.js");
asn1.encoders = __webpack_require__(/*! ./asn1/encoders */ "./node_modules/asn1.js/lib/asn1/encoders/index.js");

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/api.js":
/*!**********************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/api.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var asn1 = __webpack_require__(/*! ../asn1 */ "./node_modules/asn1.js/lib/asn1.js");

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var api = exports;

api.define = function define(name, body) {
  return new Entity(name, body);
};

function Entity(name, body) {
  this.name = name;
  this.body = body;
  this.decoders = {};
  this.encoders = {};
}

;

Entity.prototype._createNamed = function createNamed(base) {
  var named;

  try {
    named = __webpack_require__(/*! vm */ "./node_modules/vm-browserify/index.js").runInThisContext('(function ' + this.name + '(entity) {\n' + '  this._initNamed(entity);\n' + '})');
  } catch (e) {
    named = function named(entity) {
      this._initNamed(entity);
    };
  }

  inherits(named, base);

  named.prototype._initNamed = function initnamed(entity) {
    base.call(this, entity);
  };

  return new named(this);
};

Entity.prototype._getDecoder = function _getDecoder(enc) {
  enc = enc || 'der'; // Lazily create decoder

  if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed(asn1.decoders[enc]);
  return this.decoders[enc];
};

Entity.prototype.decode = function decode(data, enc, options) {
  return this._getDecoder(enc).decode(data, options);
};

Entity.prototype._getEncoder = function _getEncoder(enc) {
  enc = enc || 'der'; // Lazily create encoder

  if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed(asn1.encoders[enc]);
  return this.encoders[enc];
};

Entity.prototype.encode = function encode(data, enc,
/* internal */
reporter) {
  return this._getEncoder(enc).encode(data, reporter);
};

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/base/buffer.js":
/*!******************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/base/buffer.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var Reporter = __webpack_require__(/*! ../base */ "./node_modules/asn1.js/lib/asn1/base/index.js").Reporter;

var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js").Buffer;

function DecoderBuffer(base, options) {
  Reporter.call(this, options);

  if (!Buffer.isBuffer(base)) {
    this.error('Input not Buffer');
    return;
  }

  this.base = base;
  this.offset = 0;
  this.length = base.length;
}

inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;

DecoderBuffer.prototype.save = function save() {
  return {
    offset: this.offset,
    reporter: Reporter.prototype.save.call(this)
  };
};

DecoderBuffer.prototype.restore = function restore(save) {
  // Return skipped data
  var res = new DecoderBuffer(this.base);
  res.offset = save.offset;
  res.length = this.offset;
  this.offset = save.offset;
  Reporter.prototype.restore.call(this, save.reporter);
  return res;
};

DecoderBuffer.prototype.isEmpty = function isEmpty() {
  return this.offset === this.length;
};

DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
  if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);else return this.error(fail || 'DecoderBuffer overrun');
};

DecoderBuffer.prototype.skip = function skip(bytes, fail) {
  if (!(this.offset + bytes <= this.length)) return this.error(fail || 'DecoderBuffer overrun');
  var res = new DecoderBuffer(this.base); // Share reporter state

  res._reporterState = this._reporterState;
  res.offset = this.offset;
  res.length = this.offset + bytes;
  this.offset += bytes;
  return res;
};

DecoderBuffer.prototype.raw = function raw(save) {
  return this.base.slice(save ? save.offset : this.offset, this.length);
};

function EncoderBuffer(value, reporter) {
  if (Array.isArray(value)) {
    this.length = 0;
    this.value = value.map(function (item) {
      if (!(item instanceof EncoderBuffer)) item = new EncoderBuffer(item, reporter);
      this.length += item.length;
      return item;
    }, this);
  } else if (typeof value === 'number') {
    if (!(0 <= value && value <= 0xff)) return reporter.error('non-byte EncoderBuffer value');
    this.value = value;
    this.length = 1;
  } else if (typeof value === 'string') {
    this.value = value;
    this.length = Buffer.byteLength(value);
  } else if (Buffer.isBuffer(value)) {
    this.value = value;
    this.length = value.length;
  } else {
    return reporter.error('Unsupported type: ' + _typeof(value));
  }
}

exports.EncoderBuffer = EncoderBuffer;

EncoderBuffer.prototype.join = function join(out, offset) {
  if (!out) out = new Buffer(this.length);
  if (!offset) offset = 0;
  if (this.length === 0) return out;

  if (Array.isArray(this.value)) {
    this.value.forEach(function (item) {
      item.join(out, offset);
      offset += item.length;
    });
  } else {
    if (typeof this.value === 'number') out[offset] = this.value;else if (typeof this.value === 'string') out.write(this.value, offset);else if (Buffer.isBuffer(this.value)) this.value.copy(out, offset);
    offset += this.length;
  }

  return out;
};

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/base/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/base/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var base = exports;
base.Reporter = __webpack_require__(/*! ./reporter */ "./node_modules/asn1.js/lib/asn1/base/reporter.js").Reporter;
base.DecoderBuffer = __webpack_require__(/*! ./buffer */ "./node_modules/asn1.js/lib/asn1/base/buffer.js").DecoderBuffer;
base.EncoderBuffer = __webpack_require__(/*! ./buffer */ "./node_modules/asn1.js/lib/asn1/base/buffer.js").EncoderBuffer;
base.Node = __webpack_require__(/*! ./node */ "./node_modules/asn1.js/lib/asn1/base/node.js");

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/base/node.js":
/*!****************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/base/node.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var Reporter = __webpack_require__(/*! ../base */ "./node_modules/asn1.js/lib/asn1/base/index.js").Reporter;

var EncoderBuffer = __webpack_require__(/*! ../base */ "./node_modules/asn1.js/lib/asn1/base/index.js").EncoderBuffer;

var DecoderBuffer = __webpack_require__(/*! ../base */ "./node_modules/asn1.js/lib/asn1/base/index.js").DecoderBuffer;

var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js"); // Supported tags


var tags = ['seq', 'seqof', 'set', 'setof', 'objid', 'bool', 'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc', 'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str', 'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr']; // Public methods list

var methods = ['key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice', 'any', 'contains'].concat(tags); // Overrided methods list

var overrided = ['_peekTag', '_decodeTag', '_use', '_decodeStr', '_decodeObjid', '_decodeTime', '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList', '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime', '_encodeNull', '_encodeInt', '_encodeBool'];

function Node(enc, parent) {
  var state = {};
  this._baseState = state;
  state.enc = enc;
  state.parent = parent || null;
  state.children = null; // State

  state.tag = null;
  state.args = null;
  state.reverseArgs = null;
  state.choice = null;
  state.optional = false;
  state.any = false;
  state.obj = false;
  state.use = null;
  state.useDecoder = null;
  state.key = null;
  state['default'] = null;
  state.explicit = null;
  state.implicit = null;
  state.contains = null; // Should create new instance on each method

  if (!state.parent) {
    state.children = [];

    this._wrap();
  }
}

module.exports = Node;
var stateProps = ['enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice', 'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit', 'implicit', 'contains'];

Node.prototype.clone = function clone() {
  var state = this._baseState;
  var cstate = {};
  stateProps.forEach(function (prop) {
    cstate[prop] = state[prop];
  });
  var res = new this.constructor(cstate.parent);
  res._baseState = cstate;
  return res;
};

Node.prototype._wrap = function wrap() {
  var state = this._baseState;
  methods.forEach(function (method) {
    this[method] = function _wrappedMethod() {
      var clone = new this.constructor(this);
      state.children.push(clone);
      return clone[method].apply(clone, arguments);
    };
  }, this);
};

Node.prototype._init = function init(body) {
  var state = this._baseState;
  assert(state.parent === null);
  body.call(this); // Filter children

  state.children = state.children.filter(function (child) {
    return child._baseState.parent === this;
  }, this);
  assert.equal(state.children.length, 1, 'Root node can have only one child');
};

Node.prototype._useArgs = function useArgs(args) {
  var state = this._baseState; // Filter children and args

  var children = args.filter(function (arg) {
    return arg instanceof this.constructor;
  }, this);
  args = args.filter(function (arg) {
    return !(arg instanceof this.constructor);
  }, this);

  if (children.length !== 0) {
    assert(state.children === null);
    state.children = children; // Replace parent to maintain backward link

    children.forEach(function (child) {
      child._baseState.parent = this;
    }, this);
  }

  if (args.length !== 0) {
    assert(state.args === null);
    state.args = args;
    state.reverseArgs = args.map(function (arg) {
      if (_typeof(arg) !== 'object' || arg.constructor !== Object) return arg;
      var res = {};
      Object.keys(arg).forEach(function (key) {
        if (key == (key | 0)) key |= 0;
        var value = arg[key];
        res[value] = key;
      });
      return res;
    });
  }
}; //
// Overrided methods
//


overrided.forEach(function (method) {
  Node.prototype[method] = function _overrided() {
    var state = this._baseState;
    throw new Error(method + ' not implemented for encoding: ' + state.enc);
  };
}); //
// Public methods
//

tags.forEach(function (tag) {
  Node.prototype[tag] = function _tagMethod() {
    var state = this._baseState;
    var args = Array.prototype.slice.call(arguments);
    assert(state.tag === null);
    state.tag = tag;

    this._useArgs(args);

    return this;
  };
});

Node.prototype.use = function use(item) {
  assert(item);
  var state = this._baseState;
  assert(state.use === null);
  state.use = item;
  return this;
};

Node.prototype.optional = function optional() {
  var state = this._baseState;
  state.optional = true;
  return this;
};

Node.prototype.def = function def(val) {
  var state = this._baseState;
  assert(state['default'] === null);
  state['default'] = val;
  state.optional = true;
  return this;
};

Node.prototype.explicit = function explicit(num) {
  var state = this._baseState;
  assert(state.explicit === null && state.implicit === null);
  state.explicit = num;
  return this;
};

Node.prototype.implicit = function implicit(num) {
  var state = this._baseState;
  assert(state.explicit === null && state.implicit === null);
  state.implicit = num;
  return this;
};

Node.prototype.obj = function obj() {
  var state = this._baseState;
  var args = Array.prototype.slice.call(arguments);
  state.obj = true;
  if (args.length !== 0) this._useArgs(args);
  return this;
};

Node.prototype.key = function key(newKey) {
  var state = this._baseState;
  assert(state.key === null);
  state.key = newKey;
  return this;
};

Node.prototype.any = function any() {
  var state = this._baseState;
  state.any = true;
  return this;
};

Node.prototype.choice = function choice(obj) {
  var state = this._baseState;
  assert(state.choice === null);
  state.choice = obj;

  this._useArgs(Object.keys(obj).map(function (key) {
    return obj[key];
  }));

  return this;
};

Node.prototype.contains = function contains(item) {
  var state = this._baseState;
  assert(state.use === null);
  state.contains = item;
  return this;
}; //
// Decoding
//


Node.prototype._decode = function decode(input, options) {
  var state = this._baseState; // Decode root node

  if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));
  var result = state['default'];
  var present = true;
  var prevKey = null;
  if (state.key !== null) prevKey = input.enterKey(state.key); // Check if tag is there

  if (state.optional) {
    var tag = null;
    if (state.explicit !== null) tag = state.explicit;else if (state.implicit !== null) tag = state.implicit;else if (state.tag !== null) tag = state.tag;

    if (tag === null && !state.any) {
      // Trial and Error
      var save = input.save();

      try {
        if (state.choice === null) this._decodeGeneric(state.tag, input, options);else this._decodeChoice(input, options);
        present = true;
      } catch (e) {
        present = false;
      }

      input.restore(save);
    } else {
      present = this._peekTag(input, tag, state.any);
      if (input.isError(present)) return present;
    }
  } // Push object on stack


  var prevObj;
  if (state.obj && present) prevObj = input.enterObject();

  if (present) {
    // Unwrap explicit values
    if (state.explicit !== null) {
      var explicit = this._decodeTag(input, state.explicit);

      if (input.isError(explicit)) return explicit;
      input = explicit;
    }

    var start = input.offset; // Unwrap implicit and normal values

    if (state.use === null && state.choice === null) {
      if (state.any) var save = input.save();

      var body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);

      if (input.isError(body)) return body;
      if (state.any) result = input.raw(save);else input = body;
    }

    if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, 'tagged');
    if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, 'content'); // Select proper method for tag

    if (state.any) result = result;else if (state.choice === null) result = this._decodeGeneric(state.tag, input, options);else result = this._decodeChoice(input, options);
    if (input.isError(result)) return result; // Decode children

    if (!state.any && state.choice === null && state.children !== null) {
      state.children.forEach(function decodeChildren(child) {
        // NOTE: We are ignoring errors here, to let parser continue with other
        // parts of encoded data
        child._decode(input, options);
      });
    } // Decode contained/encoded by schema, only in bit or octet strings


    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
      var data = new DecoderBuffer(result);
      result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
    }
  } // Pop object


  if (state.obj && present) result = input.leaveObject(prevObj); // Set key

  if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);else if (prevKey !== null) input.exitKey(prevKey);
  return result;
};

Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
  var state = this._baseState;
  if (tag === 'seq' || tag === 'set') return null;
  if (tag === 'seqof' || tag === 'setof') return this._decodeList(input, tag, state.args[0], options);else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);else if (tag === 'objid' && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);else if (tag === 'objid') return this._decodeObjid(input, null, null, options);else if (tag === 'gentime' || tag === 'utctime') return this._decodeTime(input, tag, options);else if (tag === 'null_') return this._decodeNull(input, options);else if (tag === 'bool') return this._decodeBool(input, options);else if (tag === 'objDesc') return this._decodeStr(input, tag, options);else if (tag === 'int' || tag === 'enum') return this._decodeInt(input, state.args && state.args[0], options);

  if (state.use !== null) {
    return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
  } else {
    return input.error('unknown tag: ' + tag);
  }
};

Node.prototype._getUse = function _getUse(entity, obj) {
  var state = this._baseState; // Create altered use decoder if implicit is set

  state.useDecoder = this._use(entity, obj);
  assert(state.useDecoder._baseState.parent === null);
  state.useDecoder = state.useDecoder._baseState.children[0];

  if (state.implicit !== state.useDecoder._baseState.implicit) {
    state.useDecoder = state.useDecoder.clone();
    state.useDecoder._baseState.implicit = state.implicit;
  }

  return state.useDecoder;
};

Node.prototype._decodeChoice = function decodeChoice(input, options) {
  var state = this._baseState;
  var result = null;
  var match = false;
  Object.keys(state.choice).some(function (key) {
    var save = input.save();
    var node = state.choice[key];

    try {
      var value = node._decode(input, options);

      if (input.isError(value)) return false;
      result = {
        type: key,
        value: value
      };
      match = true;
    } catch (e) {
      input.restore(save);
      return false;
    }

    return true;
  }, this);
  if (!match) return input.error('Choice not matched');
  return result;
}; //
// Encoding
//


Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
  return new EncoderBuffer(data, this.reporter);
};

Node.prototype._encode = function encode(data, reporter, parent) {
  var state = this._baseState;
  if (state['default'] !== null && state['default'] === data) return;

  var result = this._encodeValue(data, reporter, parent);

  if (result === undefined) return;
  if (this._skipDefault(result, reporter, parent)) return;
  return result;
};

Node.prototype._encodeValue = function encode(data, reporter, parent) {
  var state = this._baseState; // Decode root node

  if (state.parent === null) return state.children[0]._encode(data, reporter || new Reporter());
  var result = null; // Set reporter to share it with a child class

  this.reporter = reporter; // Check if data is there

  if (state.optional && data === undefined) {
    if (state['default'] !== null) data = state['default'];else return;
  } // Encode children first


  var content = null;
  var primitive = false;

  if (state.any) {
    // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
  } else if (state.choice) {
    result = this._encodeChoice(data, reporter);
  } else if (state.contains) {
    content = this._getUse(state.contains, parent)._encode(data, reporter);
    primitive = true;
  } else if (state.children) {
    content = state.children.map(function (child) {
      if (child._baseState.tag === 'null_') return child._encode(null, reporter, data);
      if (child._baseState.key === null) return reporter.error('Child should have a key');
      var prevKey = reporter.enterKey(child._baseState.key);
      if (_typeof(data) !== 'object') return reporter.error('Child expected, but input is not object');

      var res = child._encode(data[child._baseState.key], reporter, data);

      reporter.leaveKey(prevKey);
      return res;
    }, this).filter(function (child) {
      return child;
    });
    content = this._createEncoderBuffer(content);
  } else {
    if (state.tag === 'seqof' || state.tag === 'setof') {
      // TODO(indutny): this should be thrown on DSL level
      if (!(state.args && state.args.length === 1)) return reporter.error('Too many args for : ' + state.tag);
      if (!Array.isArray(data)) return reporter.error('seqof/setof, but data is not Array');
      var child = this.clone();
      child._baseState.implicit = null;
      content = this._createEncoderBuffer(data.map(function (item) {
        var state = this._baseState;
        return this._getUse(state.args[0], data)._encode(item, reporter);
      }, child));
    } else if (state.use !== null) {
      result = this._getUse(state.use, parent)._encode(data, reporter);
    } else {
      content = this._encodePrimitive(state.tag, data);
      primitive = true;
    }
  } // Encode data itself


  var result;

  if (!state.any && state.choice === null) {
    var tag = state.implicit !== null ? state.implicit : state.tag;
    var cls = state.implicit === null ? 'universal' : 'context';

    if (tag === null) {
      if (state.use === null) reporter.error('Tag could be omitted only for .use()');
    } else {
      if (state.use === null) result = this._encodeComposite(tag, primitive, cls, content);
    }
  } // Wrap in explicit


  if (state.explicit !== null) result = this._encodeComposite(state.explicit, false, 'context', result);
  return result;
};

Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
  var state = this._baseState;
  var node = state.choice[data.type];

  if (!node) {
    assert(false, data.type + ' not found in ' + JSON.stringify(Object.keys(state.choice)));
  }

  return node._encode(data.value, reporter);
};

Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
  var state = this._baseState;
  if (/str$/.test(tag)) return this._encodeStr(data, tag);else if (tag === 'objid' && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);else if (tag === 'objid') return this._encodeObjid(data, null, null);else if (tag === 'gentime' || tag === 'utctime') return this._encodeTime(data, tag);else if (tag === 'null_') return this._encodeNull();else if (tag === 'int' || tag === 'enum') return this._encodeInt(data, state.args && state.reverseArgs[0]);else if (tag === 'bool') return this._encodeBool(data);else if (tag === 'objDesc') return this._encodeStr(data, tag);else throw new Error('Unsupported tag: ' + tag);
};

Node.prototype._isNumstr = function isNumstr(str) {
  return /^[0-9 ]*$/.test(str);
};

Node.prototype._isPrintstr = function isPrintstr(str) {
  return /^[A-Za-z0-9 '\(\)\+,\-\.\/:=\?]*$/.test(str);
};

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/base/reporter.js":
/*!********************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/base/reporter.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

function Reporter(options) {
  this._reporterState = {
    obj: null,
    path: [],
    options: options || {},
    errors: []
  };
}

exports.Reporter = Reporter;

Reporter.prototype.isError = function isError(obj) {
  return obj instanceof ReporterError;
};

Reporter.prototype.save = function save() {
  var state = this._reporterState;
  return {
    obj: state.obj,
    pathLen: state.path.length
  };
};

Reporter.prototype.restore = function restore(data) {
  var state = this._reporterState;
  state.obj = data.obj;
  state.path = state.path.slice(0, data.pathLen);
};

Reporter.prototype.enterKey = function enterKey(key) {
  return this._reporterState.path.push(key);
};

Reporter.prototype.exitKey = function exitKey(index) {
  var state = this._reporterState;
  state.path = state.path.slice(0, index - 1);
};

Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
  var state = this._reporterState;
  this.exitKey(index);
  if (state.obj !== null) state.obj[key] = value;
};

Reporter.prototype.path = function path() {
  return this._reporterState.path.join('/');
};

Reporter.prototype.enterObject = function enterObject() {
  var state = this._reporterState;
  var prev = state.obj;
  state.obj = {};
  return prev;
};

Reporter.prototype.leaveObject = function leaveObject(prev) {
  var state = this._reporterState;
  var now = state.obj;
  state.obj = prev;
  return now;
};

Reporter.prototype.error = function error(msg) {
  var err;
  var state = this._reporterState;
  var inherited = msg instanceof ReporterError;

  if (inherited) {
    err = msg;
  } else {
    err = new ReporterError(state.path.map(function (elem) {
      return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
  }

  if (!state.options.partial) throw err;
  if (!inherited) state.errors.push(err);
  return err;
};

Reporter.prototype.wrapResult = function wrapResult(result) {
  var state = this._reporterState;
  if (!state.options.partial) return result;
  return {
    result: this.isError(result) ? null : result,
    errors: state.errors
  };
};

function ReporterError(path, msg) {
  this.path = path;
  this.rethrow(msg);
}

;
inherits(ReporterError, Error);

ReporterError.prototype.rethrow = function rethrow(msg) {
  this.message = msg + ' at: ' + (this.path || '(shallow)');
  if (Error.captureStackTrace) Error.captureStackTrace(this, ReporterError);

  if (!this.stack) {
    try {
      // IE only adds stack when thrown
      throw new Error(this.message);
    } catch (e) {
      this.stack = e.stack;
    }
  }

  return this;
};

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/constants/der.js":
/*!********************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/constants/der.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var constants = __webpack_require__(/*! ../constants */ "./node_modules/asn1.js/lib/asn1/constants/index.js");

exports.tagClass = {
  0: 'universal',
  1: 'application',
  2: 'context',
  3: 'private'
};
exports.tagClassByName = constants._reverse(exports.tagClass);
exports.tag = {
  0x00: 'end',
  0x01: 'bool',
  0x02: 'int',
  0x03: 'bitstr',
  0x04: 'octstr',
  0x05: 'null_',
  0x06: 'objid',
  0x07: 'objDesc',
  0x08: 'external',
  0x09: 'real',
  0x0a: 'enum',
  0x0b: 'embed',
  0x0c: 'utf8str',
  0x0d: 'relativeOid',
  0x10: 'seq',
  0x11: 'set',
  0x12: 'numstr',
  0x13: 'printstr',
  0x14: 't61str',
  0x15: 'videostr',
  0x16: 'ia5str',
  0x17: 'utctime',
  0x18: 'gentime',
  0x19: 'graphstr',
  0x1a: 'iso646str',
  0x1b: 'genstr',
  0x1c: 'unistr',
  0x1d: 'charstr',
  0x1e: 'bmpstr'
};
exports.tagByName = constants._reverse(exports.tag);

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/constants/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/constants/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var constants = exports; // Helper

constants._reverse = function reverse(map) {
  var res = {};
  Object.keys(map).forEach(function (key) {
    // Convert key to integer if it is stringified
    if ((key | 0) == key) key = key | 0;
    var value = map[key];
    res[value] = key;
  });
  return res;
};

constants.der = __webpack_require__(/*! ./der */ "./node_modules/asn1.js/lib/asn1/constants/der.js");

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/decoders/der.js":
/*!*******************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/decoders/der.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var asn1 = __webpack_require__(/*! ../../asn1 */ "./node_modules/asn1.js/lib/asn1.js");

var base = asn1.base;
var bignum = asn1.bignum; // Import DER constants

var der = asn1.constants.der;

function DERDecoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity; // Construct base tree

  this.tree = new DERNode();

  this.tree._init(entity.body);
}

;
module.exports = DERDecoder;

DERDecoder.prototype.decode = function decode(data, options) {
  if (!(data instanceof base.DecoderBuffer)) data = new base.DecoderBuffer(data, options);
  return this.tree._decode(data, options);
}; // Tree methods


function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}

inherits(DERNode, base.Node);

DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
  if (buffer.isEmpty()) return false;
  var state = buffer.save();
  var decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
  if (buffer.isError(decodedTag)) return decodedTag;
  buffer.restore(state);
  return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + 'of' === tag || any;
};

DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
  var decodedTag = derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
  if (buffer.isError(decodedTag)) return decodedTag;
  var len = derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"'); // Failure

  if (buffer.isError(len)) return len;

  if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + 'of' !== tag) {
    return buffer.error('Failed to match tag: "' + tag + '"');
  }

  if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: "' + tag + '"'); // Indefinite length... find END tag

  var state = buffer.save();

  var res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');

  if (buffer.isError(res)) return res;
  len = buffer.offset - state.offset;
  buffer.restore(state);
  return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};

DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
  while (true) {
    var tag = derDecodeTag(buffer, fail);
    if (buffer.isError(tag)) return tag;
    var len = derDecodeLen(buffer, tag.primitive, fail);
    if (buffer.isError(len)) return len;
    var res;
    if (tag.primitive || len !== null) res = buffer.skip(len);else res = this._skipUntilEnd(buffer, fail); // Failure

    if (buffer.isError(res)) return res;
    if (tag.tagStr === 'end') break;
  }
};

DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
  var result = [];

  while (!buffer.isEmpty()) {
    var possibleEnd = this._peekTag(buffer, 'end');

    if (buffer.isError(possibleEnd)) return possibleEnd;
    var res = decoder.decode(buffer, 'der', options);
    if (buffer.isError(res) && possibleEnd) break;
    result.push(res);
  }

  return result;
};

DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
  if (tag === 'bitstr') {
    var unused = buffer.readUInt8();
    if (buffer.isError(unused)) return unused;
    return {
      unused: unused,
      data: buffer.raw()
    };
  } else if (tag === 'bmpstr') {
    var raw = buffer.raw();
    if (raw.length % 2 === 1) return buffer.error('Decoding of string type: bmpstr length mismatch');
    var str = '';

    for (var i = 0; i < raw.length / 2; i++) {
      str += String.fromCharCode(raw.readUInt16BE(i * 2));
    }

    return str;
  } else if (tag === 'numstr') {
    var numstr = buffer.raw().toString('ascii');

    if (!this._isNumstr(numstr)) {
      return buffer.error('Decoding of string type: ' + 'numstr unsupported characters');
    }

    return numstr;
  } else if (tag === 'octstr') {
    return buffer.raw();
  } else if (tag === 'objDesc') {
    return buffer.raw();
  } else if (tag === 'printstr') {
    var printstr = buffer.raw().toString('ascii');

    if (!this._isPrintstr(printstr)) {
      return buffer.error('Decoding of string type: ' + 'printstr unsupported characters');
    }

    return printstr;
  } else if (/str$/.test(tag)) {
    return buffer.raw().toString();
  } else {
    return buffer.error('Decoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
  var result;
  var identifiers = [];
  var ident = 0;

  while (!buffer.isEmpty()) {
    var subident = buffer.readUInt8();
    ident <<= 7;
    ident |= subident & 0x7f;

    if ((subident & 0x80) === 0) {
      identifiers.push(ident);
      ident = 0;
    }
  }

  if (subident & 0x80) identifiers.push(ident);
  var first = identifiers[0] / 40 | 0;
  var second = identifiers[0] % 40;
  if (relative) result = identifiers;else result = [first, second].concat(identifiers.slice(1));

  if (values) {
    var tmp = values[result.join(' ')];
    if (tmp === undefined) tmp = values[result.join('.')];
    if (tmp !== undefined) result = tmp;
  }

  return result;
};

DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
  var str = buffer.raw().toString();

  if (tag === 'gentime') {
    var year = str.slice(0, 4) | 0;
    var mon = str.slice(4, 6) | 0;
    var day = str.slice(6, 8) | 0;
    var hour = str.slice(8, 10) | 0;
    var min = str.slice(10, 12) | 0;
    var sec = str.slice(12, 14) | 0;
  } else if (tag === 'utctime') {
    var year = str.slice(0, 2) | 0;
    var mon = str.slice(2, 4) | 0;
    var day = str.slice(4, 6) | 0;
    var hour = str.slice(6, 8) | 0;
    var min = str.slice(8, 10) | 0;
    var sec = str.slice(10, 12) | 0;
    if (year < 70) year = 2000 + year;else year = 1900 + year;
  } else {
    return buffer.error('Decoding ' + tag + ' time is not supported yet');
  }

  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};

DERNode.prototype._decodeNull = function decodeNull(buffer) {
  return null;
};

DERNode.prototype._decodeBool = function decodeBool(buffer) {
  var res = buffer.readUInt8();
  if (buffer.isError(res)) return res;else return res !== 0;
};

DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
  // Bigint, return as it is (assume big endian)
  var raw = buffer.raw();
  var res = new bignum(raw);
  if (values) res = values[res.toString(10)] || res;
  return res;
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function') entity = entity(obj);
  return entity._getDecoder('der').tree;
}; // Utility methods


function derDecodeTag(buf, fail) {
  var tag = buf.readUInt8(fail);
  if (buf.isError(tag)) return tag;
  var cls = der.tagClass[tag >> 6];
  var primitive = (tag & 0x20) === 0; // Multi-octet tag - load

  if ((tag & 0x1f) === 0x1f) {
    var oct = tag;
    tag = 0;

    while ((oct & 0x80) === 0x80) {
      oct = buf.readUInt8(fail);
      if (buf.isError(oct)) return oct;
      tag <<= 7;
      tag |= oct & 0x7f;
    }
  } else {
    tag &= 0x1f;
  }

  var tagStr = der.tag[tag];
  return {
    cls: cls,
    primitive: primitive,
    tag: tag,
    tagStr: tagStr
  };
}

function derDecodeLen(buf, primitive, fail) {
  var len = buf.readUInt8(fail);
  if (buf.isError(len)) return len; // Indefinite form

  if (!primitive && len === 0x80) return null; // Definite form

  if ((len & 0x80) === 0) {
    // Short form
    return len;
  } // Long form


  var num = len & 0x7f;
  if (num > 4) return buf.error('length octect is too long');
  len = 0;

  for (var i = 0; i < num; i++) {
    len <<= 8;
    var j = buf.readUInt8(fail);
    if (buf.isError(j)) return j;
    len |= j;
  }

  return len;
}

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/decoders/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/decoders/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var decoders = exports;
decoders.der = __webpack_require__(/*! ./der */ "./node_modules/asn1.js/lib/asn1/decoders/der.js");
decoders.pem = __webpack_require__(/*! ./pem */ "./node_modules/asn1.js/lib/asn1/decoders/pem.js");

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/decoders/pem.js":
/*!*******************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/decoders/pem.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js").Buffer;

var DERDecoder = __webpack_require__(/*! ./der */ "./node_modules/asn1.js/lib/asn1/decoders/der.js");

function PEMDecoder(entity) {
  DERDecoder.call(this, entity);
  this.enc = 'pem';
}

;
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;

PEMDecoder.prototype.decode = function decode(data, options) {
  var lines = data.toString().split(/[\r\n]+/g);
  var label = options.label.toUpperCase();
  var re = /^-----(BEGIN|END) ([^-]+)-----$/;
  var start = -1;
  var end = -1;

  for (var i = 0; i < lines.length; i++) {
    var match = lines[i].match(re);
    if (match === null) continue;
    if (match[2] !== label) continue;

    if (start === -1) {
      if (match[1] !== 'BEGIN') break;
      start = i;
    } else {
      if (match[1] !== 'END') break;
      end = i;
      break;
    }
  }

  if (start === -1 || end === -1) throw new Error('PEM section not found for: ' + label);
  var base64 = lines.slice(start + 1, end).join(''); // Remove excessive symbols

  base64.replace(/[^a-z0-9\+\/=]+/gi, '');
  var input = new Buffer(base64, 'base64');
  return DERDecoder.prototype.decode.call(this, input, options);
};

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/encoders/der.js":
/*!*******************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/encoders/der.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js").Buffer;

var asn1 = __webpack_require__(/*! ../../asn1 */ "./node_modules/asn1.js/lib/asn1.js");

var base = asn1.base; // Import DER constants

var der = asn1.constants.der;

function DEREncoder(entity) {
  this.enc = 'der';
  this.name = entity.name;
  this.entity = entity; // Construct base tree

  this.tree = new DERNode();

  this.tree._init(entity.body);
}

;
module.exports = DEREncoder;

DEREncoder.prototype.encode = function encode(data, reporter) {
  return this.tree._encode(data, reporter).join();
}; // Tree methods


function DERNode(parent) {
  base.Node.call(this, 'der', parent);
}

inherits(DERNode, base.Node);

DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
  var encodedTag = encodeTag(tag, primitive, cls, this.reporter); // Short form

  if (content.length < 0x80) {
    var header = new Buffer(2);
    header[0] = encodedTag;
    header[1] = content.length;
    return this._createEncoderBuffer([header, content]);
  } // Long form
  // Count octets required to store length


  var lenOctets = 1;

  for (var i = content.length; i >= 0x100; i >>= 8) {
    lenOctets++;
  }

  var header = new Buffer(1 + 1 + lenOctets);
  header[0] = encodedTag;
  header[1] = 0x80 | lenOctets;

  for (var i = 1 + lenOctets, j = content.length; j > 0; i--, j >>= 8) {
    header[i] = j & 0xff;
  }

  return this._createEncoderBuffer([header, content]);
};

DERNode.prototype._encodeStr = function encodeStr(str, tag) {
  if (tag === 'bitstr') {
    return this._createEncoderBuffer([str.unused | 0, str.data]);
  } else if (tag === 'bmpstr') {
    var buf = new Buffer(str.length * 2);

    for (var i = 0; i < str.length; i++) {
      buf.writeUInt16BE(str.charCodeAt(i), i * 2);
    }

    return this._createEncoderBuffer(buf);
  } else if (tag === 'numstr') {
    if (!this._isNumstr(str)) {
      return this.reporter.error('Encoding of string type: numstr supports ' + 'only digits and space');
    }

    return this._createEncoderBuffer(str);
  } else if (tag === 'printstr') {
    if (!this._isPrintstr(str)) {
      return this.reporter.error('Encoding of string type: printstr supports ' + 'only latin upper and lower case letters, ' + 'digits, space, apostrophe, left and rigth ' + 'parenthesis, plus sign, comma, hyphen, ' + 'dot, slash, colon, equal sign, ' + 'question mark');
    }

    return this._createEncoderBuffer(str);
  } else if (/str$/.test(tag)) {
    return this._createEncoderBuffer(str);
  } else if (tag === 'objDesc') {
    return this._createEncoderBuffer(str);
  } else {
    return this.reporter.error('Encoding of string type: ' + tag + ' unsupported');
  }
};

DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
  if (typeof id === 'string') {
    if (!values) return this.reporter.error('string objid given, but no values map found');
    if (!values.hasOwnProperty(id)) return this.reporter.error('objid not found in values map');
    id = values[id].split(/[\s\.]+/g);

    for (var i = 0; i < id.length; i++) {
      id[i] |= 0;
    }
  } else if (Array.isArray(id)) {
    id = id.slice();

    for (var i = 0; i < id.length; i++) {
      id[i] |= 0;
    }
  }

  if (!Array.isArray(id)) {
    return this.reporter.error('objid() should be either array or string, ' + 'got: ' + JSON.stringify(id));
  }

  if (!relative) {
    if (id[1] >= 40) return this.reporter.error('Second objid identifier OOB');
    id.splice(0, 2, id[0] * 40 + id[1]);
  } // Count number of octets


  var size = 0;

  for (var i = 0; i < id.length; i++) {
    var ident = id[i];

    for (size++; ident >= 0x80; ident >>= 7) {
      size++;
    }
  }

  var objid = new Buffer(size);
  var offset = objid.length - 1;

  for (var i = id.length - 1; i >= 0; i--) {
    var ident = id[i];
    objid[offset--] = ident & 0x7f;

    while ((ident >>= 7) > 0) {
      objid[offset--] = 0x80 | ident & 0x7f;
    }
  }

  return this._createEncoderBuffer(objid);
};

function two(num) {
  if (num < 10) return '0' + num;else return num;
}

DERNode.prototype._encodeTime = function encodeTime(time, tag) {
  var str;
  var date = new Date(time);

  if (tag === 'gentime') {
    str = [two(date.getFullYear()), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), 'Z'].join('');
  } else if (tag === 'utctime') {
    str = [two(date.getFullYear() % 100), two(date.getUTCMonth() + 1), two(date.getUTCDate()), two(date.getUTCHours()), two(date.getUTCMinutes()), two(date.getUTCSeconds()), 'Z'].join('');
  } else {
    this.reporter.error('Encoding ' + tag + ' time is not supported yet');
  }

  return this._encodeStr(str, 'octstr');
};

DERNode.prototype._encodeNull = function encodeNull() {
  return this._createEncoderBuffer('');
};

DERNode.prototype._encodeInt = function encodeInt(num, values) {
  if (typeof num === 'string') {
    if (!values) return this.reporter.error('String int or enum given, but no values map');

    if (!values.hasOwnProperty(num)) {
      return this.reporter.error('Values map doesn\'t contain: ' + JSON.stringify(num));
    }

    num = values[num];
  } // Bignum, assume big endian


  if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
    var numArray = num.toArray();

    if (!num.sign && numArray[0] & 0x80) {
      numArray.unshift(0);
    }

    num = new Buffer(numArray);
  }

  if (Buffer.isBuffer(num)) {
    var size = num.length;
    if (num.length === 0) size++;
    var out = new Buffer(size);
    num.copy(out);
    if (num.length === 0) out[0] = 0;
    return this._createEncoderBuffer(out);
  }

  if (num < 0x80) return this._createEncoderBuffer(num);
  if (num < 0x100) return this._createEncoderBuffer([0, num]);
  var size = 1;

  for (var i = num; i >= 0x100; i >>= 8) {
    size++;
  }

  var out = new Array(size);

  for (var i = out.length - 1; i >= 0; i--) {
    out[i] = num & 0xff;
    num >>= 8;
  }

  if (out[0] & 0x80) {
    out.unshift(0);
  }

  return this._createEncoderBuffer(new Buffer(out));
};

DERNode.prototype._encodeBool = function encodeBool(value) {
  return this._createEncoderBuffer(value ? 0xff : 0);
};

DERNode.prototype._use = function use(entity, obj) {
  if (typeof entity === 'function') entity = entity(obj);
  return entity._getEncoder('der').tree;
};

DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
  var state = this._baseState;
  var i;
  if (state['default'] === null) return false;
  var data = dataBuffer.join();
  if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();
  if (data.length !== state.defaultBuffer.length) return false;

  for (i = 0; i < data.length; i++) {
    if (data[i] !== state.defaultBuffer[i]) return false;
  }

  return true;
}; // Utility methods


function encodeTag(tag, primitive, cls, reporter) {
  var res;
  if (tag === 'seqof') tag = 'seq';else if (tag === 'setof') tag = 'set';
  if (der.tagByName.hasOwnProperty(tag)) res = der.tagByName[tag];else if (typeof tag === 'number' && (tag | 0) === tag) res = tag;else return reporter.error('Unknown tag: ' + tag);
  if (res >= 0x1f) return reporter.error('Multi-octet tag encoding unsupported');
  if (!primitive) res |= 0x20;
  res |= der.tagClassByName[cls || 'universal'] << 6;
  return res;
}

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/encoders/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/encoders/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var encoders = exports;
encoders.der = __webpack_require__(/*! ./der */ "./node_modules/asn1.js/lib/asn1/encoders/der.js");
encoders.pem = __webpack_require__(/*! ./pem */ "./node_modules/asn1.js/lib/asn1/encoders/pem.js");

/***/ }),

/***/ "./node_modules/asn1.js/lib/asn1/encoders/pem.js":
/*!*******************************************************!*\
  !*** ./node_modules/asn1.js/lib/asn1/encoders/pem.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var DEREncoder = __webpack_require__(/*! ./der */ "./node_modules/asn1.js/lib/asn1/encoders/der.js");

function PEMEncoder(entity) {
  DEREncoder.call(this, entity);
  this.enc = 'pem';
}

;
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;

PEMEncoder.prototype.encode = function encode(data, options) {
  var buf = DEREncoder.prototype.encode.call(this, data);
  var p = buf.toString('base64');
  var out = ['-----BEGIN ' + options.label + '-----'];

  for (var i = 0; i < p.length; i += 64) {
    out.push(p.slice(i, i + 64));
  }

  out.push('-----END ' + options.label + '-----');
  return out.join('\n');
};

/***/ }),

/***/ "./node_modules/base-x/index.js":
/*!**************************************!*\
  !*** ./node_modules/base-x/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// base-x encoding / decoding
// Copyright (c) 2018 base-x contributors
// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

module.exports = function base(ALPHABET) {
  if (ALPHABET.length >= 255) throw new TypeError('Alphabet too long');
  var BASE_MAP = new Uint8Array(256);
  BASE_MAP.fill(255);

  for (var i = 0; i < ALPHABET.length; i++) {
    var x = ALPHABET.charAt(i);
    var xc = x.charCodeAt(0);
    if (BASE_MAP[xc] !== 255) throw new TypeError(x + ' is ambiguous');
    BASE_MAP[xc] = i;
  }

  var BASE = ALPHABET.length;
  var LEADER = ALPHABET.charAt(0);
  var FACTOR = Math.log(BASE) / Math.log(256); // log(BASE) / log(256), rounded up

  var iFACTOR = Math.log(256) / Math.log(BASE); // log(256) / log(BASE), rounded up

  function encode(source) {
    if (!Buffer.isBuffer(source)) throw new TypeError('Expected Buffer');
    if (source.length === 0) return ''; // Skip & count leading zeroes.

    var zeroes = 0;
    var length = 0;
    var pbegin = 0;
    var pend = source.length;

    while (pbegin !== pend && source[pbegin] === 0) {
      pbegin++;
      zeroes++;
    } // Allocate enough space in big-endian base58 representation.


    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
    var b58 = new Uint8Array(size); // Process the bytes.

    while (pbegin !== pend) {
      var carry = source[pbegin]; // Apply "b58 = b58 * 256 + ch".

      var _i = 0;

      for (var _it = size - 1; (carry !== 0 || _i < length) && _it !== -1; _it--, _i++) {
        carry += 256 * b58[_it] >>> 0;
        b58[_it] = carry % BASE >>> 0;
        carry = carry / BASE >>> 0;
      }

      if (carry !== 0) throw new Error('Non-zero carry');
      length = _i;
      pbegin++;
    } // Skip leading zeroes in base58 result.


    var it = size - length;

    while (it !== size && b58[it] === 0) {
      it++;
    } // Translate the result into a string.


    var str = LEADER.repeat(zeroes);

    for (; it < size; ++it) {
      str += ALPHABET.charAt(b58[it]);
    }

    return str;
  }

  function decodeUnsafe(source) {
    if (typeof source !== 'string') throw new TypeError('Expected String');
    if (source.length === 0) return Buffer.alloc(0);
    var psz = 0; // Skip leading spaces.

    if (source[psz] === ' ') return; // Skip and count leading '1's.

    var zeroes = 0;
    var length = 0;

    while (source[psz] === LEADER) {
      zeroes++;
      psz++;
    } // Allocate enough space in big-endian base256 representation.


    var size = (source.length - psz) * FACTOR + 1 >>> 0; // log(58) / log(256), rounded up.

    var b256 = new Uint8Array(size); // Process the characters.

    while (source[psz]) {
      // Decode character
      var carry = BASE_MAP[source.charCodeAt(psz)]; // Invalid character

      if (carry === 255) return;
      var _i2 = 0;

      for (var _it2 = size - 1; (carry !== 0 || _i2 < length) && _it2 !== -1; _it2--, _i2++) {
        carry += BASE * b256[_it2] >>> 0;
        b256[_it2] = carry % 256 >>> 0;
        carry = carry / 256 >>> 0;
      }

      if (carry !== 0) throw new Error('Non-zero carry');
      length = _i2;
      psz++;
    } // Skip trailing spaces.


    if (source[psz] === ' ') return; // Skip leading zeroes in b256.

    var it = size - length;

    while (it !== size && b256[it] === 0) {
      it++;
    }

    var vch = Buffer.allocUnsafe(zeroes + (size - it));
    vch.fill(0x00, 0, zeroes);
    var j = zeroes;

    while (it !== size) {
      vch[j++] = b256[it++];
    }

    return vch;
  }

  function decode(string) {
    var buffer = decodeUnsafe(string);
    if (buffer) return buffer;
    throw new Error('Non-base' + BASE + ' character');
  }

  return {
    encode: encode,
    decodeUnsafe: decodeUnsafe,
    decode: decode
  };
};

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
} // Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications


revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function getLens(b64) {
  var len = b64.length;

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  } // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42


  var validLen = b64.indexOf('=');
  if (validLen === -1) validLen = len;
  var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
  return [validLen, placeHoldersLen];
} // base64 is 4/3 + up to two characters of the original data


function byteLength(b64) {
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function _byteLength(b64, validLen, placeHoldersLen) {
  return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}

function toByteArray(b64) {
  var tmp;
  var lens = getLens(b64);
  var validLen = lens[0];
  var placeHoldersLen = lens[1];
  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
  var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars

  var len = placeHoldersLen > 0 ? validLen - 4 : validLen;

  for (var i = 0; i < len; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[curByte++] = tmp >> 16 & 0xFF;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[curByte++] = tmp & 0xFF;
  }

  if (placeHoldersLen === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[curByte++] = tmp >> 8 & 0xFF;
    arr[curByte++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];

  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
    output.push(tripletToBase64(tmp));
  }

  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

  var parts = [];
  var maxChunkLength = 16383; // must be multiple of 3
  // go through the array every three bytes, we'll deal with trailing stuff later

  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  } // pad the end with zeros, but make sure to not forget the extra bytes


  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
  }

  return parts.join('');
}

/***/ }),

/***/ "./node_modules/bn.js/lib/bn.js":
/*!**************************************!*\
  !*** ./node_modules/bn.js/lib/bn.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (module, exports) {
  'use strict'; // Utils

  function assert(val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  } // Could use `inherits` module, but don't want to move from single file
  // architecture yet.


  function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;

    var TempCtor = function TempCtor() {};

    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  } // BN


  function BN(number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0; // Reduction context

    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }

  if (_typeof(module) === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;
  var Buffer;

  try {
    Buffer = __webpack_require__(/*! buffer */ 3).Buffer;
  } catch (e) {}

  BN.isBN = function isBN(num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && _typeof(num) === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max(left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min(left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init(number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (_typeof(number) === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }

    assert(base === (base | 0) && base >= 2 && base <= 36);
    number = number.toString().replace(/\s+/g, '');
    var start = 0;

    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();
    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber(number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }

    if (number < 0x4000000) {
      this.words = [number & 0x3ffffff];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)

      this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];
      this.length = 3;
    }

    if (endian !== 'le') return; // Reverse the bytes

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray(number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');

    if (number.length <= 0) {
      this.words = [0];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);

    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;

    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
        this.words[j] |= w << off & 0x3ffffff;
        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
        off += 24;

        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
        this.words[j] |= w << off & 0x3ffffff;
        this.words[j + 1] = w >>> 26 - off & 0x3ffffff;
        off += 24;

        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }

    return this.strip();
  };

  function parseHex(str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);

    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;
      r <<= 4; // 'a' - 'f'

      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa; // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa; // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }

    return r;
  }

  BN.prototype._parseHex = function _parseHex(number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);

    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w; // Scan 24-bit chunks and add them to the number

    var off = 0;

    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= w << off & 0x3ffffff; // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb

      this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
      off += 24;

      if (off >= 26) {
        off -= 26;
        j++;
      }
    }

    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= w << off & 0x3ffffff;
      this.words[j + 1] |= w >>> 26 - off & 0x3fffff;
    }

    this.strip();
  };

  function parseBase(str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);

    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;
      r *= mul; // 'a'

      if (c >= 49) {
        r += c - 49 + 0xa; // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa; // '0' - '9'
      } else {
        r += c;
      }
    }

    return r;
  }

  BN.prototype._parseBase = function _parseBase(number, base, start) {
    // Initialize as zero
    this.words = [0];
    this.length = 1; // Find length of limb in base

    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }

    limbLen--;
    limbPow = limbPow / base | 0;
    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;
    var word = 0;

    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);
      this.imuln(limbPow);

      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);

      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy(dest) {
    dest.words = new Array(this.length);

    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }

    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone() {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand(size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }

    return this;
  }; // Remove leading `0` from `this`


  BN.prototype.strip = function strip() {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }

    return this._normSign();
  };

  BN.prototype._normSign = function _normSign() {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }

    return this;
  };

  BN.prototype.inspect = function inspect() {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };
  /*
   var zeros = [];
  var groupSizes = [];
  var groupBases = [];
   var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }
   */


  var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];
  var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];
  var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];

  BN.prototype.toString = function toString(base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;
    var out;

    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;

      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = ((w << off | carry) & 0xffffff).toString(16);
        carry = w >>> 24 - off & 0xffffff;

        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }

        off += 2;

        if (off >= 26) {
          off -= 26;
          i--;
        }
      }

      if (carry !== 0) {
        out = carry.toString(16) + out;
      }

      while (out.length % padding !== 0) {
        out = '0' + out;
      }

      if (this.negative !== 0) {
        out = '-' + out;
      }

      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base]; // var groupBase = Math.pow(base, groupSize);

      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;

      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }

      if (this.isZero()) {
        out = '0' + out;
      }

      while (out.length % padding !== 0) {
        out = '0' + out;
      }

      if (this.negative !== 0) {
        out = '-' + out;
      }

      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber() {
    var ret = this.words[0];

    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + this.words[1] * 0x4000000;
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }

    return this.negative !== 0 ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON() {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer(endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray(endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');
    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);
    var b, i;
    var q = this.clone();

    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);
        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);
        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits(w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits(w) {
      var t = w;
      var r = 0;

      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }

      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }

      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }

      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }

      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits(w) {
    // Short-cut
    if (w === 0) return 26;
    var t = w;
    var r = 0;

    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }

    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }

    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }

    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }

    if ((t & 0x1) === 0) {
      r++;
    }

    return r;
  }; // Return number of used bits in a BN


  BN.prototype.bitLength = function bitLength() {
    var w = this.words[this.length - 1];

    var hi = this._countBits(w);

    return (this.length - 1) * 26 + hi;
  };

  function toBitArray(num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = bit / 26 | 0;
      var wbit = bit % 26;
      w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
    }

    return w;
  } // Number of trailing zero bits


  BN.prototype.zeroBits = function zeroBits() {
    if (this.isZero()) return 0;
    var r = 0;

    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);

      r += b;
      if (b !== 26) break;
    }

    return r;
  };

  BN.prototype.byteLength = function byteLength() {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos(width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }

    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos(width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }

    return this.clone();
  };

  BN.prototype.isNeg = function isNeg() {
    return this.negative !== 0;
  }; // Return negative clone of `this`


  BN.prototype.neg = function neg() {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg() {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  }; // Or `num` with `this` in-place


  BN.prototype.iuor = function iuor(num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior(num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  }; // Or `num` with `this`


  BN.prototype.or = function or(num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor(num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  }; // And `num` with `this` in-place


  BN.prototype.iuand = function iuand(num) {
    // b = min-length(num, this)
    var b;

    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;
    return this.strip();
  };

  BN.prototype.iand = function iand(num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  }; // And `num` with `this`


  BN.prototype.and = function and(num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand(num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  }; // Xor `num` with `this` in-place


  BN.prototype.iuxor = function iuxor(num) {
    // a.length > b.length
    var a;
    var b;

    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;
    return this.strip();
  };

  BN.prototype.ixor = function ixor(num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  }; // Xor `num` with `this`


  BN.prototype.xor = function xor(num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor(num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  }; // Not ``this`` with ``width`` bitwidth


  BN.prototype.inotn = function inotn(width) {
    assert(typeof width === 'number' && width >= 0);
    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26; // Extend the buffer with leading zeroes

    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    } // Handle complete words


    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    } // Handle the residue


    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;
    } // And remove leading zeroes


    return this.strip();
  };

  BN.prototype.notn = function notn(width) {
    return this.clone().inotn(width);
  }; // Set `bit` of `this`


  BN.prototype.setn = function setn(bit, val) {
    assert(typeof bit === 'number' && bit >= 0);
    var off = bit / 26 | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | 1 << wbit;
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  }; // Add `num` to `this` in-place


  BN.prototype.iadd = function iadd(num) {
    var r; // negative + positive

    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign(); // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    } // a.length > b.length


    var a, b;

    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;

    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;

    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++; // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  }; // Add `num` to `this`


  BN.prototype.add = function add(num) {
    var res;

    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);
    return num.clone().iadd(this);
  }; // Subtract `num` from `this` in-place


  BN.prototype.isub = function isub(num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign(); // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    } // At this point both numbers are positive


    var cmp = this.cmp(num); // Optimization - zeroify

    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    } // a > b


    var a, b;

    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;

    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    } // Copy rest of the words


    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  }; // Subtract `num` from `this`


  BN.prototype.sub = function sub(num) {
    return this.clone().isub(num);
  };

  function smallMulTo(self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = self.length + num.length | 0;
    out.length = len;
    len = len - 1 | 0; // Peel one iteration (compiler can't do it, because of code complexity)

    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;
    var lo = r & 0x3ffffff;
    var carry = r / 0x4000000 | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);

      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += r / 0x4000000 | 0;
        rword = r & 0x3ffffff;
      }

      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }

    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  } // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).


  var comb10MulTo = function comb10MulTo(self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;
    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */

    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = mid + Math.imul(ah0, bl0) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */

    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = mid + Math.imul(ah1, bl0) | 0;
    hi = Math.imul(ah1, bh0);
    lo = lo + Math.imul(al0, bl1) | 0;
    mid = mid + Math.imul(al0, bh1) | 0;
    mid = mid + Math.imul(ah0, bl1) | 0;
    hi = hi + Math.imul(ah0, bh1) | 0;
    var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */

    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = mid + Math.imul(ah2, bl0) | 0;
    hi = Math.imul(ah2, bh0);
    lo = lo + Math.imul(al1, bl1) | 0;
    mid = mid + Math.imul(al1, bh1) | 0;
    mid = mid + Math.imul(ah1, bl1) | 0;
    hi = hi + Math.imul(ah1, bh1) | 0;
    lo = lo + Math.imul(al0, bl2) | 0;
    mid = mid + Math.imul(al0, bh2) | 0;
    mid = mid + Math.imul(ah0, bl2) | 0;
    hi = hi + Math.imul(ah0, bh2) | 0;
    var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */

    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = mid + Math.imul(ah3, bl0) | 0;
    hi = Math.imul(ah3, bh0);
    lo = lo + Math.imul(al2, bl1) | 0;
    mid = mid + Math.imul(al2, bh1) | 0;
    mid = mid + Math.imul(ah2, bl1) | 0;
    hi = hi + Math.imul(ah2, bh1) | 0;
    lo = lo + Math.imul(al1, bl2) | 0;
    mid = mid + Math.imul(al1, bh2) | 0;
    mid = mid + Math.imul(ah1, bl2) | 0;
    hi = hi + Math.imul(ah1, bh2) | 0;
    lo = lo + Math.imul(al0, bl3) | 0;
    mid = mid + Math.imul(al0, bh3) | 0;
    mid = mid + Math.imul(ah0, bl3) | 0;
    hi = hi + Math.imul(ah0, bh3) | 0;
    var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */

    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = mid + Math.imul(ah4, bl0) | 0;
    hi = Math.imul(ah4, bh0);
    lo = lo + Math.imul(al3, bl1) | 0;
    mid = mid + Math.imul(al3, bh1) | 0;
    mid = mid + Math.imul(ah3, bl1) | 0;
    hi = hi + Math.imul(ah3, bh1) | 0;
    lo = lo + Math.imul(al2, bl2) | 0;
    mid = mid + Math.imul(al2, bh2) | 0;
    mid = mid + Math.imul(ah2, bl2) | 0;
    hi = hi + Math.imul(ah2, bh2) | 0;
    lo = lo + Math.imul(al1, bl3) | 0;
    mid = mid + Math.imul(al1, bh3) | 0;
    mid = mid + Math.imul(ah1, bl3) | 0;
    hi = hi + Math.imul(ah1, bh3) | 0;
    lo = lo + Math.imul(al0, bl4) | 0;
    mid = mid + Math.imul(al0, bh4) | 0;
    mid = mid + Math.imul(ah0, bl4) | 0;
    hi = hi + Math.imul(ah0, bh4) | 0;
    var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */

    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = mid + Math.imul(ah5, bl0) | 0;
    hi = Math.imul(ah5, bh0);
    lo = lo + Math.imul(al4, bl1) | 0;
    mid = mid + Math.imul(al4, bh1) | 0;
    mid = mid + Math.imul(ah4, bl1) | 0;
    hi = hi + Math.imul(ah4, bh1) | 0;
    lo = lo + Math.imul(al3, bl2) | 0;
    mid = mid + Math.imul(al3, bh2) | 0;
    mid = mid + Math.imul(ah3, bl2) | 0;
    hi = hi + Math.imul(ah3, bh2) | 0;
    lo = lo + Math.imul(al2, bl3) | 0;
    mid = mid + Math.imul(al2, bh3) | 0;
    mid = mid + Math.imul(ah2, bl3) | 0;
    hi = hi + Math.imul(ah2, bh3) | 0;
    lo = lo + Math.imul(al1, bl4) | 0;
    mid = mid + Math.imul(al1, bh4) | 0;
    mid = mid + Math.imul(ah1, bl4) | 0;
    hi = hi + Math.imul(ah1, bh4) | 0;
    lo = lo + Math.imul(al0, bl5) | 0;
    mid = mid + Math.imul(al0, bh5) | 0;
    mid = mid + Math.imul(ah0, bl5) | 0;
    hi = hi + Math.imul(ah0, bh5) | 0;
    var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */

    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = mid + Math.imul(ah6, bl0) | 0;
    hi = Math.imul(ah6, bh0);
    lo = lo + Math.imul(al5, bl1) | 0;
    mid = mid + Math.imul(al5, bh1) | 0;
    mid = mid + Math.imul(ah5, bl1) | 0;
    hi = hi + Math.imul(ah5, bh1) | 0;
    lo = lo + Math.imul(al4, bl2) | 0;
    mid = mid + Math.imul(al4, bh2) | 0;
    mid = mid + Math.imul(ah4, bl2) | 0;
    hi = hi + Math.imul(ah4, bh2) | 0;
    lo = lo + Math.imul(al3, bl3) | 0;
    mid = mid + Math.imul(al3, bh3) | 0;
    mid = mid + Math.imul(ah3, bl3) | 0;
    hi = hi + Math.imul(ah3, bh3) | 0;
    lo = lo + Math.imul(al2, bl4) | 0;
    mid = mid + Math.imul(al2, bh4) | 0;
    mid = mid + Math.imul(ah2, bl4) | 0;
    hi = hi + Math.imul(ah2, bh4) | 0;
    lo = lo + Math.imul(al1, bl5) | 0;
    mid = mid + Math.imul(al1, bh5) | 0;
    mid = mid + Math.imul(ah1, bl5) | 0;
    hi = hi + Math.imul(ah1, bh5) | 0;
    lo = lo + Math.imul(al0, bl6) | 0;
    mid = mid + Math.imul(al0, bh6) | 0;
    mid = mid + Math.imul(ah0, bl6) | 0;
    hi = hi + Math.imul(ah0, bh6) | 0;
    var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */

    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = mid + Math.imul(ah7, bl0) | 0;
    hi = Math.imul(ah7, bh0);
    lo = lo + Math.imul(al6, bl1) | 0;
    mid = mid + Math.imul(al6, bh1) | 0;
    mid = mid + Math.imul(ah6, bl1) | 0;
    hi = hi + Math.imul(ah6, bh1) | 0;
    lo = lo + Math.imul(al5, bl2) | 0;
    mid = mid + Math.imul(al5, bh2) | 0;
    mid = mid + Math.imul(ah5, bl2) | 0;
    hi = hi + Math.imul(ah5, bh2) | 0;
    lo = lo + Math.imul(al4, bl3) | 0;
    mid = mid + Math.imul(al4, bh3) | 0;
    mid = mid + Math.imul(ah4, bl3) | 0;
    hi = hi + Math.imul(ah4, bh3) | 0;
    lo = lo + Math.imul(al3, bl4) | 0;
    mid = mid + Math.imul(al3, bh4) | 0;
    mid = mid + Math.imul(ah3, bl4) | 0;
    hi = hi + Math.imul(ah3, bh4) | 0;
    lo = lo + Math.imul(al2, bl5) | 0;
    mid = mid + Math.imul(al2, bh5) | 0;
    mid = mid + Math.imul(ah2, bl5) | 0;
    hi = hi + Math.imul(ah2, bh5) | 0;
    lo = lo + Math.imul(al1, bl6) | 0;
    mid = mid + Math.imul(al1, bh6) | 0;
    mid = mid + Math.imul(ah1, bl6) | 0;
    hi = hi + Math.imul(ah1, bh6) | 0;
    lo = lo + Math.imul(al0, bl7) | 0;
    mid = mid + Math.imul(al0, bh7) | 0;
    mid = mid + Math.imul(ah0, bl7) | 0;
    hi = hi + Math.imul(ah0, bh7) | 0;
    var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */

    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = mid + Math.imul(ah8, bl0) | 0;
    hi = Math.imul(ah8, bh0);
    lo = lo + Math.imul(al7, bl1) | 0;
    mid = mid + Math.imul(al7, bh1) | 0;
    mid = mid + Math.imul(ah7, bl1) | 0;
    hi = hi + Math.imul(ah7, bh1) | 0;
    lo = lo + Math.imul(al6, bl2) | 0;
    mid = mid + Math.imul(al6, bh2) | 0;
    mid = mid + Math.imul(ah6, bl2) | 0;
    hi = hi + Math.imul(ah6, bh2) | 0;
    lo = lo + Math.imul(al5, bl3) | 0;
    mid = mid + Math.imul(al5, bh3) | 0;
    mid = mid + Math.imul(ah5, bl3) | 0;
    hi = hi + Math.imul(ah5, bh3) | 0;
    lo = lo + Math.imul(al4, bl4) | 0;
    mid = mid + Math.imul(al4, bh4) | 0;
    mid = mid + Math.imul(ah4, bl4) | 0;
    hi = hi + Math.imul(ah4, bh4) | 0;
    lo = lo + Math.imul(al3, bl5) | 0;
    mid = mid + Math.imul(al3, bh5) | 0;
    mid = mid + Math.imul(ah3, bl5) | 0;
    hi = hi + Math.imul(ah3, bh5) | 0;
    lo = lo + Math.imul(al2, bl6) | 0;
    mid = mid + Math.imul(al2, bh6) | 0;
    mid = mid + Math.imul(ah2, bl6) | 0;
    hi = hi + Math.imul(ah2, bh6) | 0;
    lo = lo + Math.imul(al1, bl7) | 0;
    mid = mid + Math.imul(al1, bh7) | 0;
    mid = mid + Math.imul(ah1, bl7) | 0;
    hi = hi + Math.imul(ah1, bh7) | 0;
    lo = lo + Math.imul(al0, bl8) | 0;
    mid = mid + Math.imul(al0, bh8) | 0;
    mid = mid + Math.imul(ah0, bl8) | 0;
    hi = hi + Math.imul(ah0, bh8) | 0;
    var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */

    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = mid + Math.imul(ah9, bl0) | 0;
    hi = Math.imul(ah9, bh0);
    lo = lo + Math.imul(al8, bl1) | 0;
    mid = mid + Math.imul(al8, bh1) | 0;
    mid = mid + Math.imul(ah8, bl1) | 0;
    hi = hi + Math.imul(ah8, bh1) | 0;
    lo = lo + Math.imul(al7, bl2) | 0;
    mid = mid + Math.imul(al7, bh2) | 0;
    mid = mid + Math.imul(ah7, bl2) | 0;
    hi = hi + Math.imul(ah7, bh2) | 0;
    lo = lo + Math.imul(al6, bl3) | 0;
    mid = mid + Math.imul(al6, bh3) | 0;
    mid = mid + Math.imul(ah6, bl3) | 0;
    hi = hi + Math.imul(ah6, bh3) | 0;
    lo = lo + Math.imul(al5, bl4) | 0;
    mid = mid + Math.imul(al5, bh4) | 0;
    mid = mid + Math.imul(ah5, bl4) | 0;
    hi = hi + Math.imul(ah5, bh4) | 0;
    lo = lo + Math.imul(al4, bl5) | 0;
    mid = mid + Math.imul(al4, bh5) | 0;
    mid = mid + Math.imul(ah4, bl5) | 0;
    hi = hi + Math.imul(ah4, bh5) | 0;
    lo = lo + Math.imul(al3, bl6) | 0;
    mid = mid + Math.imul(al3, bh6) | 0;
    mid = mid + Math.imul(ah3, bl6) | 0;
    hi = hi + Math.imul(ah3, bh6) | 0;
    lo = lo + Math.imul(al2, bl7) | 0;
    mid = mid + Math.imul(al2, bh7) | 0;
    mid = mid + Math.imul(ah2, bl7) | 0;
    hi = hi + Math.imul(ah2, bh7) | 0;
    lo = lo + Math.imul(al1, bl8) | 0;
    mid = mid + Math.imul(al1, bh8) | 0;
    mid = mid + Math.imul(ah1, bl8) | 0;
    hi = hi + Math.imul(ah1, bh8) | 0;
    lo = lo + Math.imul(al0, bl9) | 0;
    mid = mid + Math.imul(al0, bh9) | 0;
    mid = mid + Math.imul(ah0, bl9) | 0;
    hi = hi + Math.imul(ah0, bh9) | 0;
    var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */

    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = mid + Math.imul(ah9, bl1) | 0;
    hi = Math.imul(ah9, bh1);
    lo = lo + Math.imul(al8, bl2) | 0;
    mid = mid + Math.imul(al8, bh2) | 0;
    mid = mid + Math.imul(ah8, bl2) | 0;
    hi = hi + Math.imul(ah8, bh2) | 0;
    lo = lo + Math.imul(al7, bl3) | 0;
    mid = mid + Math.imul(al7, bh3) | 0;
    mid = mid + Math.imul(ah7, bl3) | 0;
    hi = hi + Math.imul(ah7, bh3) | 0;
    lo = lo + Math.imul(al6, bl4) | 0;
    mid = mid + Math.imul(al6, bh4) | 0;
    mid = mid + Math.imul(ah6, bl4) | 0;
    hi = hi + Math.imul(ah6, bh4) | 0;
    lo = lo + Math.imul(al5, bl5) | 0;
    mid = mid + Math.imul(al5, bh5) | 0;
    mid = mid + Math.imul(ah5, bl5) | 0;
    hi = hi + Math.imul(ah5, bh5) | 0;
    lo = lo + Math.imul(al4, bl6) | 0;
    mid = mid + Math.imul(al4, bh6) | 0;
    mid = mid + Math.imul(ah4, bl6) | 0;
    hi = hi + Math.imul(ah4, bh6) | 0;
    lo = lo + Math.imul(al3, bl7) | 0;
    mid = mid + Math.imul(al3, bh7) | 0;
    mid = mid + Math.imul(ah3, bl7) | 0;
    hi = hi + Math.imul(ah3, bh7) | 0;
    lo = lo + Math.imul(al2, bl8) | 0;
    mid = mid + Math.imul(al2, bh8) | 0;
    mid = mid + Math.imul(ah2, bl8) | 0;
    hi = hi + Math.imul(ah2, bh8) | 0;
    lo = lo + Math.imul(al1, bl9) | 0;
    mid = mid + Math.imul(al1, bh9) | 0;
    mid = mid + Math.imul(ah1, bl9) | 0;
    hi = hi + Math.imul(ah1, bh9) | 0;
    var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */

    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = mid + Math.imul(ah9, bl2) | 0;
    hi = Math.imul(ah9, bh2);
    lo = lo + Math.imul(al8, bl3) | 0;
    mid = mid + Math.imul(al8, bh3) | 0;
    mid = mid + Math.imul(ah8, bl3) | 0;
    hi = hi + Math.imul(ah8, bh3) | 0;
    lo = lo + Math.imul(al7, bl4) | 0;
    mid = mid + Math.imul(al7, bh4) | 0;
    mid = mid + Math.imul(ah7, bl4) | 0;
    hi = hi + Math.imul(ah7, bh4) | 0;
    lo = lo + Math.imul(al6, bl5) | 0;
    mid = mid + Math.imul(al6, bh5) | 0;
    mid = mid + Math.imul(ah6, bl5) | 0;
    hi = hi + Math.imul(ah6, bh5) | 0;
    lo = lo + Math.imul(al5, bl6) | 0;
    mid = mid + Math.imul(al5, bh6) | 0;
    mid = mid + Math.imul(ah5, bl6) | 0;
    hi = hi + Math.imul(ah5, bh6) | 0;
    lo = lo + Math.imul(al4, bl7) | 0;
    mid = mid + Math.imul(al4, bh7) | 0;
    mid = mid + Math.imul(ah4, bl7) | 0;
    hi = hi + Math.imul(ah4, bh7) | 0;
    lo = lo + Math.imul(al3, bl8) | 0;
    mid = mid + Math.imul(al3, bh8) | 0;
    mid = mid + Math.imul(ah3, bl8) | 0;
    hi = hi + Math.imul(ah3, bh8) | 0;
    lo = lo + Math.imul(al2, bl9) | 0;
    mid = mid + Math.imul(al2, bh9) | 0;
    mid = mid + Math.imul(ah2, bl9) | 0;
    hi = hi + Math.imul(ah2, bh9) | 0;
    var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */

    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = mid + Math.imul(ah9, bl3) | 0;
    hi = Math.imul(ah9, bh3);
    lo = lo + Math.imul(al8, bl4) | 0;
    mid = mid + Math.imul(al8, bh4) | 0;
    mid = mid + Math.imul(ah8, bl4) | 0;
    hi = hi + Math.imul(ah8, bh4) | 0;
    lo = lo + Math.imul(al7, bl5) | 0;
    mid = mid + Math.imul(al7, bh5) | 0;
    mid = mid + Math.imul(ah7, bl5) | 0;
    hi = hi + Math.imul(ah7, bh5) | 0;
    lo = lo + Math.imul(al6, bl6) | 0;
    mid = mid + Math.imul(al6, bh6) | 0;
    mid = mid + Math.imul(ah6, bl6) | 0;
    hi = hi + Math.imul(ah6, bh6) | 0;
    lo = lo + Math.imul(al5, bl7) | 0;
    mid = mid + Math.imul(al5, bh7) | 0;
    mid = mid + Math.imul(ah5, bl7) | 0;
    hi = hi + Math.imul(ah5, bh7) | 0;
    lo = lo + Math.imul(al4, bl8) | 0;
    mid = mid + Math.imul(al4, bh8) | 0;
    mid = mid + Math.imul(ah4, bl8) | 0;
    hi = hi + Math.imul(ah4, bh8) | 0;
    lo = lo + Math.imul(al3, bl9) | 0;
    mid = mid + Math.imul(al3, bh9) | 0;
    mid = mid + Math.imul(ah3, bl9) | 0;
    hi = hi + Math.imul(ah3, bh9) | 0;
    var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */

    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = mid + Math.imul(ah9, bl4) | 0;
    hi = Math.imul(ah9, bh4);
    lo = lo + Math.imul(al8, bl5) | 0;
    mid = mid + Math.imul(al8, bh5) | 0;
    mid = mid + Math.imul(ah8, bl5) | 0;
    hi = hi + Math.imul(ah8, bh5) | 0;
    lo = lo + Math.imul(al7, bl6) | 0;
    mid = mid + Math.imul(al7, bh6) | 0;
    mid = mid + Math.imul(ah7, bl6) | 0;
    hi = hi + Math.imul(ah7, bh6) | 0;
    lo = lo + Math.imul(al6, bl7) | 0;
    mid = mid + Math.imul(al6, bh7) | 0;
    mid = mid + Math.imul(ah6, bl7) | 0;
    hi = hi + Math.imul(ah6, bh7) | 0;
    lo = lo + Math.imul(al5, bl8) | 0;
    mid = mid + Math.imul(al5, bh8) | 0;
    mid = mid + Math.imul(ah5, bl8) | 0;
    hi = hi + Math.imul(ah5, bh8) | 0;
    lo = lo + Math.imul(al4, bl9) | 0;
    mid = mid + Math.imul(al4, bh9) | 0;
    mid = mid + Math.imul(ah4, bl9) | 0;
    hi = hi + Math.imul(ah4, bh9) | 0;
    var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */

    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = mid + Math.imul(ah9, bl5) | 0;
    hi = Math.imul(ah9, bh5);
    lo = lo + Math.imul(al8, bl6) | 0;
    mid = mid + Math.imul(al8, bh6) | 0;
    mid = mid + Math.imul(ah8, bl6) | 0;
    hi = hi + Math.imul(ah8, bh6) | 0;
    lo = lo + Math.imul(al7, bl7) | 0;
    mid = mid + Math.imul(al7, bh7) | 0;
    mid = mid + Math.imul(ah7, bl7) | 0;
    hi = hi + Math.imul(ah7, bh7) | 0;
    lo = lo + Math.imul(al6, bl8) | 0;
    mid = mid + Math.imul(al6, bh8) | 0;
    mid = mid + Math.imul(ah6, bl8) | 0;
    hi = hi + Math.imul(ah6, bh8) | 0;
    lo = lo + Math.imul(al5, bl9) | 0;
    mid = mid + Math.imul(al5, bh9) | 0;
    mid = mid + Math.imul(ah5, bl9) | 0;
    hi = hi + Math.imul(ah5, bh9) | 0;
    var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */

    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = mid + Math.imul(ah9, bl6) | 0;
    hi = Math.imul(ah9, bh6);
    lo = lo + Math.imul(al8, bl7) | 0;
    mid = mid + Math.imul(al8, bh7) | 0;
    mid = mid + Math.imul(ah8, bl7) | 0;
    hi = hi + Math.imul(ah8, bh7) | 0;
    lo = lo + Math.imul(al7, bl8) | 0;
    mid = mid + Math.imul(al7, bh8) | 0;
    mid = mid + Math.imul(ah7, bl8) | 0;
    hi = hi + Math.imul(ah7, bh8) | 0;
    lo = lo + Math.imul(al6, bl9) | 0;
    mid = mid + Math.imul(al6, bh9) | 0;
    mid = mid + Math.imul(ah6, bl9) | 0;
    hi = hi + Math.imul(ah6, bh9) | 0;
    var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */

    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = mid + Math.imul(ah9, bl7) | 0;
    hi = Math.imul(ah9, bh7);
    lo = lo + Math.imul(al8, bl8) | 0;
    mid = mid + Math.imul(al8, bh8) | 0;
    mid = mid + Math.imul(ah8, bl8) | 0;
    hi = hi + Math.imul(ah8, bh8) | 0;
    lo = lo + Math.imul(al7, bl9) | 0;
    mid = mid + Math.imul(al7, bh9) | 0;
    mid = mid + Math.imul(ah7, bl9) | 0;
    hi = hi + Math.imul(ah7, bh9) | 0;
    var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */

    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = mid + Math.imul(ah9, bl8) | 0;
    hi = Math.imul(ah9, bh8);
    lo = lo + Math.imul(al8, bl9) | 0;
    mid = mid + Math.imul(al8, bh9) | 0;
    mid = mid + Math.imul(ah8, bl9) | 0;
    hi = hi + Math.imul(ah8, bh9) | 0;
    var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */

    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = mid + Math.imul(ah9, bl9) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;
    c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;

    if (c !== 0) {
      o[19] = c;
      out.length++;
    }

    return out;
  }; // Polyfill comb


  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo(self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;
    var carry = 0;
    var hncarry = 0;

    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);

      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;
        var lo = r & 0x3ffffff;
        ncarry = ncarry + (r / 0x4000000 | 0) | 0;
        lo = lo + rword | 0;
        rword = lo & 0x3ffffff;
        ncarry = ncarry + (lo >>> 26) | 0;
        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }

      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }

    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo(self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo(num, out) {
    var res;
    var len = this.length + num.length;

    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  }; // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion


  function FFTM(x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT(N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;

    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  }; // Returns binary-reversed representation of `x`


  FFTM.prototype.revBin = function revBin(x, l, N) {
    if (x === 0 || x === N - 1) return x;
    var rb = 0;

    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << l - i - 1;
      x >>= 1;
    }

    return rb;
  }; // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm


  FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;
      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];
          var ro = rtws[p + j + s];
          var io = itws[p + j + s];
          var rx = rtwdf_ * ro - itwdf_ * io;
          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;
          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;
          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;
          /* jshint maxdepth : false */

          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;
            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;

    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];
      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;
      t = iws[i];
      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b(ws, N) {
    var carry = 0;

    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;
      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
    var carry = 0;

    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);
      rws[2 * i] = carry & 0x1fff;
      carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff;
      carry = carry >>> 13;
    } // Pad with zeroes


    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub(N) {
    var ph = new Array(N);

    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp(x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);
    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);
    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);
    var rmws = out.words;
    rmws.length = N;
    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);
    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);
    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  }; // Multiply `this` by `num`


  BN.prototype.mul = function mul(num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  }; // Multiply employing FFT


  BN.prototype.mulf = function mulf(num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  }; // In-place Multiplication


  BN.prototype.imul = function imul(num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln(num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000); // Carry

    var carry = 0;

    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += w / 0x4000000 | 0; // NOTE: lo is 27bit maximum

      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln(num) {
    return this.clone().imuln(num);
  }; // `this` * `this`


  BN.prototype.sqr = function sqr() {
    return this.mul(this);
  }; // `this` * `this` in-place


  BN.prototype.isqr = function isqr() {
    return this.imul(this.clone());
  }; // Math.pow(`this`, `num`)


  BN.prototype.pow = function pow(num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1); // Skip leading zeroes

    var res = this;

    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;
        res = res.mul(q);
      }
    }

    return res;
  }; // Shift-left in-place


  BN.prototype.iushln = function iushln(bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = 0x3ffffff >>> 26 - r << 26 - r;
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = (this.words[i] | 0) - newCarry << r;
        this.words[i] = c | carry;
        carry = newCarry >>> 26 - r;
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln(bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  }; // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits


  BN.prototype.iushrn = function iushrn(bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;

    if (hint) {
      h = (hint - hint % 26) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
    var maskedWords = extended;
    h -= s;
    h = Math.max(0, h); // Extended mode, copy masked part

    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }

      maskedWords.length = s;
    }

    if (s === 0) {// No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;

      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;

    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = carry << 26 - r | word >>> r;
      carry = word & mask;
    } // Push carried bits as a mask


    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn(bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  }; // Shift-left


  BN.prototype.shln = function shln(bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln(bits) {
    return this.clone().iushln(bits);
  }; // Shift-right


  BN.prototype.shrn = function shrn(bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn(bits) {
    return this.clone().iushrn(bits);
  }; // Test if n bit is set


  BN.prototype.testn = function testn(bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r; // Fast case: bit is much higher than all existing words

    if (this.length <= s) return false; // Check bit and return

    var w = this.words[s];
    return !!(w & q);
  }; // Return only lowers bits of number (in-place)


  BN.prototype.imaskn = function imaskn(bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }

    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  }; // Return only lowers bits of number


  BN.prototype.maskn = function maskn(bits) {
    return this.clone().imaskn(bits);
  }; // Add plain number `num` to `this`


  BN.prototype.iaddn = function iaddn(num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num); // Possible sign change

    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    } // Add without checks


    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn(num) {
    this.words[0] += num; // Carry

    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;

      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }

    this.length = Math.max(this.length, i + 1);
    return this;
  }; // Subtract plain number `num` from `this`


  BN.prototype.isubn = function isubn(num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn(num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn(num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs() {
    this.negative = 0;
    return this;
  };

  BN.prototype.abs = function abs() {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;

    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - (right / 0x4000000 | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }

    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip(); // Subtraction overflow

    assert(carry === -1);
    carry = 0;

    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }

    this.negative = 1;
    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv(num, mode) {
    var shift = this.length - num.length;
    var a = this.clone();
    var b = num; // Normalize

    var bhi = b.words[b.length - 1] | 0;

    var bhiBits = this._countBits(bhi);

    shift = 26 - bhiBits;

    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    } // Initialize quotient


    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);

      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);

    if (diff.negative === 0) {
      a = diff;

      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0); // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)

      qj = Math.min(qj / bhi | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);

      while (a.negative !== 0) {
        qj--;
        a.negative = 0;

        a._ishlnsubmul(b, 1, j);

        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }

      if (q) {
        q.words[j] = qj;
      }
    }

    if (q) {
      q.strip();
    }

    a.strip(); // Denormalize

    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  }; // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested


  BN.prototype.divmod = function divmod(num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;

    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();

        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();

        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    } // Both numbers are positive at this point
    // Strip both numbers to approximate shift value


    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    } // Very short reduction


    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  }; // Find `this` / `num`


  BN.prototype.div = function div(num) {
    return this.divmod(num, 'div', false).div;
  }; // Find `this` % `num`


  BN.prototype.mod = function mod(num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod(num) {
    return this.divmod(num, 'mod', true).mod;
  }; // Find Round(`this` / `num`)


  BN.prototype.divRound = function divRound(num) {
    var dm = this.divmod(num); // Fast case - exact division

    if (dm.mod.isZero()) return dm.div;
    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half); // Round down

    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div; // Round up

    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn(num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;
    var acc = 0;

    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  }; // In-place division by number


  BN.prototype.idivn = function idivn(num) {
    assert(num <= 0x3ffffff);
    var carry = 0;

    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = w / num | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn(num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd(p) {
    assert(p.negative === 0);
    assert(!p.isZero());
    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    } // A * x + B * y = x


    var A = new BN(1);
    var B = new BN(0); // C * x + D * y = y

    var C = new BN(0);
    var D = new BN(1);
    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
        ;
      }

      if (i > 0) {
        x.iushrn(i);

        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
        ;
      }

      if (j > 0) {
        y.iushrn(j);

        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  }; // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed


  BN.prototype._invmp = function _invmp(p) {
    assert(p.negative === 0);
    assert(!p.isZero());
    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);
    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) {
        ;
      }

      if (i > 0) {
        a.iushrn(i);

        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) {
        ;
      }

      if (j > 0) {
        b.iushrn(j);

        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;

    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd(num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();
    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0; // Remove common factor of two

    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }

      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);

      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  }; // Invert number in the field F(num)


  BN.prototype.invm = function invm(num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven() {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd() {
    return (this.words[0] & 1) === 1;
  }; // And first word and num


  BN.prototype.andln = function andln(num) {
    return this.words[0] & num;
  }; // Increment at the bit position in-line


  BN.prototype.bincn = function bincn(bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r; // Fast case: bit is much higher than all existing words

    if (this.length <= s) {
      this._expand(s + 1);

      this.words[s] |= q;
      return this;
    } // Add bit and propagate, if needed


    var carry = q;

    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.isZero = function isZero() {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn(num) {
    var negative = num < 0;
    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;
    this.strip();
    var res;

    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');
      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }

    if (this.negative !== 0) return -res | 0;
    return res;
  }; // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`


  BN.prototype.cmp = function cmp(num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;
    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  }; // Unsigned comparison


  BN.prototype.ucmp = function ucmp(num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;
    var res = 0;

    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;
      if (a === b) continue;

      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }

      break;
    }

    return res;
  };

  BN.prototype.gtn = function gtn(num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt(num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten(num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte(num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn(num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt(num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten(num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte(num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn(num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq(num) {
    return this.cmp(num) === 0;
  }; //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //


  BN.red = function red(num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed(ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed() {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed(ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed(ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd(num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd(num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub(num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub(num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl(num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul(num) {
    assert(this.red, 'redMul works only with red numbers');

    this.red._verify2(this, num);

    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul(num) {
    assert(this.red, 'redMul works only with red numbers');

    this.red._verify2(this, num);

    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr() {
    assert(this.red, 'redSqr works only with red numbers');

    this.red._verify1(this);

    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr() {
    assert(this.red, 'redISqr works only with red numbers');

    this.red._verify1(this);

    return this.red.isqr(this);
  }; // Square root over p


  BN.prototype.redSqrt = function redSqrt() {
    assert(this.red, 'redSqrt works only with red numbers');

    this.red._verify1(this);

    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm() {
    assert(this.red, 'redInvm works only with red numbers');

    this.red._verify1(this);

    return this.red.invm(this);
  }; // Return negative clone of `this` % `red modulo`


  BN.prototype.redNeg = function redNeg() {
    assert(this.red, 'redNeg works only with red numbers');

    this.red._verify1(this);

    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow(num) {
    assert(this.red && !num.red, 'redPow(normalNum)');

    this.red._verify1(this);

    return this.red.pow(this, num);
  }; // Prime numbers with efficient reduction


  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  }; // Pseudo-Mersenne prime

  function MPrime(name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);
    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp() {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce(num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);

    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split(input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK(num) {
    return num.imul(this.k);
  };

  function K256() {
    MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }

  inherits(K256, MPrime);

  K256.prototype.split = function split(input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;
    var outLen = Math.min(input.length, 9);

    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }

    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    } // Shift by 9 limbs


    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
      prev = next;
    }

    prev >>>= 22;
    input.words[i - 10] = prev;

    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK(num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2; // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390

    var lo = 0;

    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + (lo / 0x4000000 | 0);
    } // Fast length reduction


    if (num.words[num.length - 1] === 0) {
      num.length--;

      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }

    return num;
  };

  function P224() {
    MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }

  inherits(P224, MPrime);

  function P192() {
    MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }

  inherits(P192, MPrime);

  function P25519() {
    // 2 ^ 255 - 19
    MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }

  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK(num) {
    // K = 0x13
    var carry = 0;

    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;
      num.words[i] = lo;
      carry = hi;
    }

    if (carry !== 0) {
      num.words[num.length++] = carry;
    }

    return num;
  }; // Exported mostly for testing purposes, use plain name instead


  BN._prime = function prime(name) {
    // Cached version of prime
    if (primes[name]) return primes[name];
    var prime;

    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }

    primes[name] = prime;
    return prime;
  }; //
  // Base reduction engine
  //


  function Red(m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);

      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1(a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2(a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red, 'red works only with red numbers');
  };

  Red.prototype.imod = function imod(a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg(a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add(a, b) {
    this._verify2(a, b);

    var res = a.add(b);

    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }

    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd(a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);

    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }

    return res;
  };

  Red.prototype.sub = function sub(a, b) {
    this._verify2(a, b);

    var res = a.sub(b);

    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Red.prototype.isub = function isub(a, b) {
    this._verify2(a, b);

    var res = a.isub(b);

    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }

    return res;
  };

  Red.prototype.shl = function shl(a, num) {
    this._verify1(a);

    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul(a, b) {
    this._verify2(a, b);

    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul(a, b) {
    this._verify2(a, b);

    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr(a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr(a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt(a) {
    if (a.isZero()) return a.clone();
    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1); // Fast case

    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    } // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)


    var q = this.m.subn(1);
    var s = 0;

    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }

    assert(!q.isZero());
    var one = new BN(1).toRed(this);
    var nOne = one.redNeg(); // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.

    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;

    while (t.cmp(one) !== 0) {
      var tmp = t;

      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }

      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));
      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm(a) {
    var inv = a._invmp(this.m);

    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow(a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();
    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;

    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;

    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];

      for (var j = start - 1; j >= 0; j--) {
        var bit = word >> j & 1;

        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }

      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo(num) {
    var r = num.umod(this.m);
    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom(num) {
    var res = num.clone();
    res.red = null;
    return res;
  }; //
  // Montgomery method engine
  //


  BN.mont = function mont(num) {
    return new Mont(num);
  };

  function Mont(m) {
    Red.call(this, m);
    this.shift = this.m.bitLength();

    if (this.shift % 26 !== 0) {
      this.shift += 26 - this.shift % 26;
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);
    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }

  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo(num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom(num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul(a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul(a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm(a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/brorand/index.js":
/*!***************************************!*\
  !*** ./node_modules/brorand/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var r;

module.exports = function rand(len) {
  if (!r) r = new Rand(null);
  return r.generate(len);
};

function Rand(rand) {
  this.rand = rand;
}

module.exports.Rand = Rand;

Rand.prototype.generate = function generate(len) {
  return this._rand(len);
}; // Emulate crypto API using randy


Rand.prototype._rand = function _rand(n) {
  if (this.rand.getBytes) return this.rand.getBytes(n);
  var res = new Uint8Array(n);

  for (var i = 0; i < res.length; i++) {
    res[i] = this.rand.getByte();
  }

  return res;
};

if ((typeof self === "undefined" ? "undefined" : _typeof(self)) === 'object') {
  if (self.crypto && self.crypto.getRandomValues) {
    // Modern browsers
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.crypto.getRandomValues(arr);
      return arr;
    };
  } else if (self.msCrypto && self.msCrypto.getRandomValues) {
    // IE
    Rand.prototype._rand = function _rand(n) {
      var arr = new Uint8Array(n);
      self.msCrypto.getRandomValues(arr);
      return arr;
    }; // Safari's WebWorkers do not have `crypto`

  } else if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === 'object') {
    // Old junk
    Rand.prototype._rand = function () {
      throw new Error('Not implemented yet');
    };
  }
} else {
  // Node.js or Web worker with no crypto support
  try {
    var crypto = __webpack_require__(/*! crypto */ 4);

    if (typeof crypto.randomBytes !== 'function') throw new Error('Not supported');

    Rand.prototype._rand = function _rand(n) {
      return crypto.randomBytes(n);
    };
  } catch (e) {}
}

/***/ }),

/***/ "./node_modules/browserify-aes/aes.js":
/*!********************************************!*\
  !*** ./node_modules/browserify-aes/aes.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/
var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

function asUInt32Array(buf) {
  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
  var len = buf.length / 4 | 0;
  var out = new Array(len);

  for (var i = 0; i < len; i++) {
    out[i] = buf.readUInt32BE(i * 4);
  }

  return out;
}

function scrubVec(v) {
  for (var i = 0; i < v.length; v++) {
    v[i] = 0;
  }
}

function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
  var SUB_MIX0 = SUB_MIX[0];
  var SUB_MIX1 = SUB_MIX[1];
  var SUB_MIX2 = SUB_MIX[2];
  var SUB_MIX3 = SUB_MIX[3];
  var s0 = M[0] ^ keySchedule[0];
  var s1 = M[1] ^ keySchedule[1];
  var s2 = M[2] ^ keySchedule[2];
  var s3 = M[3] ^ keySchedule[3];
  var t0, t1, t2, t3;
  var ksRow = 4;

  for (var round = 1; round < nRounds; round++) {
    t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 0xff] ^ SUB_MIX2[s2 >>> 8 & 0xff] ^ SUB_MIX3[s3 & 0xff] ^ keySchedule[ksRow++];
    t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 0xff] ^ SUB_MIX2[s3 >>> 8 & 0xff] ^ SUB_MIX3[s0 & 0xff] ^ keySchedule[ksRow++];
    t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 0xff] ^ SUB_MIX2[s0 >>> 8 & 0xff] ^ SUB_MIX3[s1 & 0xff] ^ keySchedule[ksRow++];
    t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 0xff] ^ SUB_MIX2[s1 >>> 8 & 0xff] ^ SUB_MIX3[s2 & 0xff] ^ keySchedule[ksRow++];
    s0 = t0;
    s1 = t1;
    s2 = t2;
    s3 = t3;
  }

  t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
  t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
  t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
  t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
  t0 = t0 >>> 0;
  t1 = t1 >>> 0;
  t2 = t2 >>> 0;
  t3 = t3 >>> 0;
  return [t0, t1, t2, t3];
} // AES constants


var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

var G = function () {
  // Compute double table
  var d = new Array(256);

  for (var j = 0; j < 256; j++) {
    if (j < 128) {
      d[j] = j << 1;
    } else {
      d[j] = j << 1 ^ 0x11b;
    }
  }

  var SBOX = [];
  var INV_SBOX = [];
  var SUB_MIX = [[], [], [], []];
  var INV_SUB_MIX = [[], [], [], []]; // Walk GF(2^8)

  var x = 0;
  var xi = 0;

  for (var i = 0; i < 256; ++i) {
    // Compute sbox
    var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
    sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
    SBOX[x] = sx;
    INV_SBOX[sx] = x; // Compute multiplication

    var x2 = d[x];
    var x4 = d[x2];
    var x8 = d[x4]; // Compute sub bytes, mix columns tables

    var t = d[sx] * 0x101 ^ sx * 0x1010100;
    SUB_MIX[0][x] = t << 24 | t >>> 8;
    SUB_MIX[1][x] = t << 16 | t >>> 16;
    SUB_MIX[2][x] = t << 8 | t >>> 24;
    SUB_MIX[3][x] = t; // Compute inv sub bytes, inv mix columns tables

    t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
    INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
    INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
    INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
    INV_SUB_MIX[3][sx] = t;

    if (x === 0) {
      x = xi = 1;
    } else {
      x = x2 ^ d[d[d[x8 ^ x2]]];
      xi ^= d[d[xi]];
    }
  }

  return {
    SBOX: SBOX,
    INV_SBOX: INV_SBOX,
    SUB_MIX: SUB_MIX,
    INV_SUB_MIX: INV_SUB_MIX
  };
}();

function AES(key) {
  this._key = asUInt32Array(key);

  this._reset();
}

AES.blockSize = 4 * 4;
AES.keySize = 256 / 8;
AES.prototype.blockSize = AES.blockSize;
AES.prototype.keySize = AES.keySize;

AES.prototype._reset = function () {
  var keyWords = this._key;
  var keySize = keyWords.length;
  var nRounds = keySize + 6;
  var ksRows = (nRounds + 1) * 4;
  var keySchedule = [];

  for (var k = 0; k < keySize; k++) {
    keySchedule[k] = keyWords[k];
  }

  for (k = keySize; k < ksRows; k++) {
    var t = keySchedule[k - 1];

    if (k % keySize === 0) {
      t = t << 8 | t >>> 24;
      t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff];
      t ^= RCON[k / keySize | 0] << 24;
    } else if (keySize > 6 && k % keySize === 4) {
      t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff];
    }

    keySchedule[k] = keySchedule[k - keySize] ^ t;
  }

  var invKeySchedule = [];

  for (var ik = 0; ik < ksRows; ik++) {
    var ksR = ksRows - ik;
    var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];

    if (ik < 4 || ksR <= 4) {
      invKeySchedule[ik] = tt;
    } else {
      invKeySchedule[ik] = G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[tt >>> 16 & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[tt >>> 8 & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[tt & 0xff]];
    }
  }

  this._nRounds = nRounds;
  this._keySchedule = keySchedule;
  this._invKeySchedule = invKeySchedule;
};

AES.prototype.encryptBlockRaw = function (M) {
  M = asUInt32Array(M);
  return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds);
};

AES.prototype.encryptBlock = function (M) {
  var out = this.encryptBlockRaw(M);
  var buf = Buffer.allocUnsafe(16);
  buf.writeUInt32BE(out[0], 0);
  buf.writeUInt32BE(out[1], 4);
  buf.writeUInt32BE(out[2], 8);
  buf.writeUInt32BE(out[3], 12);
  return buf;
};

AES.prototype.decryptBlock = function (M) {
  M = asUInt32Array(M); // swap

  var m1 = M[1];
  M[1] = M[3];
  M[3] = m1;
  var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);
  var buf = Buffer.allocUnsafe(16);
  buf.writeUInt32BE(out[0], 0);
  buf.writeUInt32BE(out[3], 4);
  buf.writeUInt32BE(out[2], 8);
  buf.writeUInt32BE(out[1], 12);
  return buf;
};

AES.prototype.scrub = function () {
  scrubVec(this._keySchedule);
  scrubVec(this._invKeySchedule);
  scrubVec(this._key);
};

module.exports.AES = AES;

/***/ }),

/***/ "./node_modules/browserify-aes/authCipher.js":
/*!***************************************************!*\
  !*** ./node_modules/browserify-aes/authCipher.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var aes = __webpack_require__(/*! ./aes */ "./node_modules/browserify-aes/aes.js");

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var Transform = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js");

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var GHASH = __webpack_require__(/*! ./ghash */ "./node_modules/browserify-aes/ghash.js");

var xor = __webpack_require__(/*! buffer-xor */ "./node_modules/buffer-xor/index.js");

var incr32 = __webpack_require__(/*! ./incr32 */ "./node_modules/browserify-aes/incr32.js");

function xorTest(a, b) {
  var out = 0;
  if (a.length !== b.length) out++;
  var len = Math.min(a.length, b.length);

  for (var i = 0; i < len; ++i) {
    out += a[i] ^ b[i];
  }

  return out;
}

function calcIv(self, iv, ck) {
  if (iv.length === 12) {
    self._finID = Buffer.concat([iv, Buffer.from([0, 0, 0, 1])]);
    return Buffer.concat([iv, Buffer.from([0, 0, 0, 2])]);
  }

  var ghash = new GHASH(ck);
  var len = iv.length;
  var toPad = len % 16;
  ghash.update(iv);

  if (toPad) {
    toPad = 16 - toPad;
    ghash.update(Buffer.alloc(toPad, 0));
  }

  ghash.update(Buffer.alloc(8, 0));
  var ivBits = len * 8;
  var tail = Buffer.alloc(8);
  tail.writeUIntBE(ivBits, 0, 8);
  ghash.update(tail);
  self._finID = ghash.state;
  var out = Buffer.from(self._finID);
  incr32(out);
  return out;
}

function StreamCipher(mode, key, iv, decrypt) {
  Transform.call(this);
  var h = Buffer.alloc(4, 0);
  this._cipher = new aes.AES(key);

  var ck = this._cipher.encryptBlock(h);

  this._ghash = new GHASH(ck);
  iv = calcIv(this, iv, ck);
  this._prev = Buffer.from(iv);
  this._cache = Buffer.allocUnsafe(0);
  this._secCache = Buffer.allocUnsafe(0);
  this._decrypt = decrypt;
  this._alen = 0;
  this._len = 0;
  this._mode = mode;
  this._authTag = null;
  this._called = false;
}

inherits(StreamCipher, Transform);

StreamCipher.prototype._update = function (chunk) {
  if (!this._called && this._alen) {
    var rump = 16 - this._alen % 16;

    if (rump < 16) {
      rump = Buffer.alloc(rump, 0);

      this._ghash.update(rump);
    }
  }

  this._called = true;

  var out = this._mode.encrypt(this, chunk);

  if (this._decrypt) {
    this._ghash.update(chunk);
  } else {
    this._ghash.update(out);
  }

  this._len += chunk.length;
  return out;
};

StreamCipher.prototype._final = function () {
  if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data');
  var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
  if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data');
  this._authTag = tag;

  this._cipher.scrub();
};

StreamCipher.prototype.getAuthTag = function getAuthTag() {
  if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state');
  return this._authTag;
};

StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
  if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state');
  this._authTag = tag;
};

StreamCipher.prototype.setAAD = function setAAD(buf) {
  if (this._called) throw new Error('Attempting to set AAD in unsupported state');

  this._ghash.update(buf);

  this._alen += buf.length;
};

module.exports = StreamCipher;

/***/ }),

/***/ "./node_modules/browserify-aes/browser.js":
/*!************************************************!*\
  !*** ./node_modules/browserify-aes/browser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ciphers = __webpack_require__(/*! ./encrypter */ "./node_modules/browserify-aes/encrypter.js");

var deciphers = __webpack_require__(/*! ./decrypter */ "./node_modules/browserify-aes/decrypter.js");

var modes = __webpack_require__(/*! ./modes/list.json */ "./node_modules/browserify-aes/modes/list.json");

function getCiphers() {
  return Object.keys(modes);
}

exports.createCipher = exports.Cipher = ciphers.createCipher;
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;
exports.createDecipher = exports.Decipher = deciphers.createDecipher;
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;
exports.listCiphers = exports.getCiphers = getCiphers;

/***/ }),

/***/ "./node_modules/browserify-aes/decrypter.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/decrypter.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var AuthCipher = __webpack_require__(/*! ./authCipher */ "./node_modules/browserify-aes/authCipher.js");

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var MODES = __webpack_require__(/*! ./modes */ "./node_modules/browserify-aes/modes/index.js");

var StreamCipher = __webpack_require__(/*! ./streamCipher */ "./node_modules/browserify-aes/streamCipher.js");

var Transform = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js");

var aes = __webpack_require__(/*! ./aes */ "./node_modules/browserify-aes/aes.js");

var ebtk = __webpack_require__(/*! evp_bytestokey */ "./node_modules/evp_bytestokey/index.js");

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

function Decipher(mode, key, iv) {
  Transform.call(this);
  this._cache = new Splitter();
  this._last = void 0;
  this._cipher = new aes.AES(key);
  this._prev = Buffer.from(iv);
  this._mode = mode;
  this._autopadding = true;
}

inherits(Decipher, Transform);

Decipher.prototype._update = function (data) {
  this._cache.add(data);

  var chunk;
  var thing;
  var out = [];

  while (chunk = this._cache.get(this._autopadding)) {
    thing = this._mode.decrypt(this, chunk);
    out.push(thing);
  }

  return Buffer.concat(out);
};

Decipher.prototype._final = function () {
  var chunk = this._cache.flush();

  if (this._autopadding) {
    return unpad(this._mode.decrypt(this, chunk));
  } else if (chunk) {
    throw new Error('data not multiple of block length');
  }
};

Decipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo;
  return this;
};

function Splitter() {
  this.cache = Buffer.allocUnsafe(0);
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data]);
};

Splitter.prototype.get = function (autoPadding) {
  var out;

  if (autoPadding) {
    if (this.cache.length > 16) {
      out = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      return out;
    }
  } else {
    if (this.cache.length >= 16) {
      out = this.cache.slice(0, 16);
      this.cache = this.cache.slice(16);
      return out;
    }
  }

  return null;
};

Splitter.prototype.flush = function () {
  if (this.cache.length) return this.cache;
};

function unpad(last) {
  var padded = last[15];

  if (padded < 1 || padded > 16) {
    throw new Error('unable to decrypt data');
  }

  var i = -1;

  while (++i < padded) {
    if (last[i + (16 - padded)] !== padded) {
      throw new Error('unable to decrypt data');
    }
  }

  if (padded === 16) return;
  return last.slice(0, 16 - padded);
}

function createDecipheriv(suite, password, iv) {
  var config = MODES[suite.toLowerCase()];
  if (!config) throw new TypeError('invalid suite type');
  if (typeof iv === 'string') iv = Buffer.from(iv);
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);
  if (typeof password === 'string') password = Buffer.from(password);
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv, true);
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv, true);
  }

  return new Decipher(config.module, password, iv);
}

function createDecipher(suite, password) {
  var config = MODES[suite.toLowerCase()];
  if (!config) throw new TypeError('invalid suite type');
  var keys = ebtk(password, false, config.key, config.iv);
  return createDecipheriv(suite, keys.key, keys.iv);
}

exports.createDecipher = createDecipher;
exports.createDecipheriv = createDecipheriv;

/***/ }),

/***/ "./node_modules/browserify-aes/encrypter.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/encrypter.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var MODES = __webpack_require__(/*! ./modes */ "./node_modules/browserify-aes/modes/index.js");

var AuthCipher = __webpack_require__(/*! ./authCipher */ "./node_modules/browserify-aes/authCipher.js");

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var StreamCipher = __webpack_require__(/*! ./streamCipher */ "./node_modules/browserify-aes/streamCipher.js");

var Transform = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js");

var aes = __webpack_require__(/*! ./aes */ "./node_modules/browserify-aes/aes.js");

var ebtk = __webpack_require__(/*! evp_bytestokey */ "./node_modules/evp_bytestokey/index.js");

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

function Cipher(mode, key, iv) {
  Transform.call(this);
  this._cache = new Splitter();
  this._cipher = new aes.AES(key);
  this._prev = Buffer.from(iv);
  this._mode = mode;
  this._autopadding = true;
}

inherits(Cipher, Transform);

Cipher.prototype._update = function (data) {
  this._cache.add(data);

  var chunk;
  var thing;
  var out = [];

  while (chunk = this._cache.get()) {
    thing = this._mode.encrypt(this, chunk);
    out.push(thing);
  }

  return Buffer.concat(out);
};

var PADDING = Buffer.alloc(16, 0x10);

Cipher.prototype._final = function () {
  var chunk = this._cache.flush();

  if (this._autopadding) {
    chunk = this._mode.encrypt(this, chunk);

    this._cipher.scrub();

    return chunk;
  }

  if (!chunk.equals(PADDING)) {
    this._cipher.scrub();

    throw new Error('data not multiple of block length');
  }
};

Cipher.prototype.setAutoPadding = function (setTo) {
  this._autopadding = !!setTo;
  return this;
};

function Splitter() {
  this.cache = Buffer.allocUnsafe(0);
}

Splitter.prototype.add = function (data) {
  this.cache = Buffer.concat([this.cache, data]);
};

Splitter.prototype.get = function () {
  if (this.cache.length > 15) {
    var out = this.cache.slice(0, 16);
    this.cache = this.cache.slice(16);
    return out;
  }

  return null;
};

Splitter.prototype.flush = function () {
  var len = 16 - this.cache.length;
  var padBuff = Buffer.allocUnsafe(len);
  var i = -1;

  while (++i < len) {
    padBuff.writeUInt8(len, i);
  }

  return Buffer.concat([this.cache, padBuff]);
};

function createCipheriv(suite, password, iv) {
  var config = MODES[suite.toLowerCase()];
  if (!config) throw new TypeError('invalid suite type');
  if (typeof password === 'string') password = Buffer.from(password);
  if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);
  if (typeof iv === 'string') iv = Buffer.from(iv);
  if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);

  if (config.type === 'stream') {
    return new StreamCipher(config.module, password, iv);
  } else if (config.type === 'auth') {
    return new AuthCipher(config.module, password, iv);
  }

  return new Cipher(config.module, password, iv);
}

function createCipher(suite, password) {
  var config = MODES[suite.toLowerCase()];
  if (!config) throw new TypeError('invalid suite type');
  var keys = ebtk(password, false, config.key, config.iv);
  return createCipheriv(suite, keys.key, keys.iv);
}

exports.createCipheriv = createCipheriv;
exports.createCipher = createCipher;

/***/ }),

/***/ "./node_modules/browserify-aes/ghash.js":
/*!**********************************************!*\
  !*** ./node_modules/browserify-aes/ghash.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var ZEROES = Buffer.alloc(16, 0);

function toArray(buf) {
  return [buf.readUInt32BE(0), buf.readUInt32BE(4), buf.readUInt32BE(8), buf.readUInt32BE(12)];
}

function fromArray(out) {
  var buf = Buffer.allocUnsafe(16);
  buf.writeUInt32BE(out[0] >>> 0, 0);
  buf.writeUInt32BE(out[1] >>> 0, 4);
  buf.writeUInt32BE(out[2] >>> 0, 8);
  buf.writeUInt32BE(out[3] >>> 0, 12);
  return buf;
}

function GHASH(key) {
  this.h = key;
  this.state = Buffer.alloc(16, 0);
  this.cache = Buffer.allocUnsafe(0);
} // from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua


GHASH.prototype.ghash = function (block) {
  var i = -1;

  while (++i < block.length) {
    this.state[i] ^= block[i];
  }

  this._multiply();
};

GHASH.prototype._multiply = function () {
  var Vi = toArray(this.h);
  var Zi = [0, 0, 0, 0];
  var j, xi, lsbVi;
  var i = -1;

  while (++i < 128) {
    xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;

    if (xi) {
      // Z_i+1 = Z_i ^ V_i
      Zi[0] ^= Vi[0];
      Zi[1] ^= Vi[1];
      Zi[2] ^= Vi[2];
      Zi[3] ^= Vi[3];
    } // Store the value of LSB(V_i)


    lsbVi = (Vi[3] & 1) !== 0; // V_i+1 = V_i >> 1

    for (j = 3; j > 0; j--) {
      Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
    }

    Vi[0] = Vi[0] >>> 1; // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R

    if (lsbVi) {
      Vi[0] = Vi[0] ^ 0xe1 << 24;
    }
  }

  this.state = fromArray(Zi);
};

GHASH.prototype.update = function (buf) {
  this.cache = Buffer.concat([this.cache, buf]);
  var chunk;

  while (this.cache.length >= 16) {
    chunk = this.cache.slice(0, 16);
    this.cache = this.cache.slice(16);
    this.ghash(chunk);
  }
};

GHASH.prototype.final = function (abl, bl) {
  if (this.cache.length) {
    this.ghash(Buffer.concat([this.cache, ZEROES], 16));
  }

  this.ghash(fromArray([0, abl, 0, bl]));
  return this.state;
};

module.exports = GHASH;

/***/ }),

/***/ "./node_modules/browserify-aes/incr32.js":
/*!***********************************************!*\
  !*** ./node_modules/browserify-aes/incr32.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function incr32(iv) {
  var len = iv.length;
  var item;

  while (len--) {
    item = iv.readUInt8(len);

    if (item === 255) {
      iv.writeUInt8(0, len);
    } else {
      item++;
      iv.writeUInt8(item, len);
      break;
    }
  }
}

module.exports = incr32;

/***/ }),

/***/ "./node_modules/browserify-aes/modes/cbc.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/modes/cbc.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var xor = __webpack_require__(/*! buffer-xor */ "./node_modules/buffer-xor/index.js");

exports.encrypt = function (self, block) {
  var data = xor(block, self._prev);
  self._prev = self._cipher.encryptBlock(data);
  return self._prev;
};

exports.decrypt = function (self, block) {
  var pad = self._prev;
  self._prev = block;

  var out = self._cipher.decryptBlock(block);

  return xor(out, pad);
};

/***/ }),

/***/ "./node_modules/browserify-aes/modes/cfb.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/modes/cfb.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var xor = __webpack_require__(/*! buffer-xor */ "./node_modules/buffer-xor/index.js");

function encryptStart(self, data, decrypt) {
  var len = data.length;
  var out = xor(data, self._cache);
  self._cache = self._cache.slice(len);
  self._prev = Buffer.concat([self._prev, decrypt ? data : out]);
  return out;
}

exports.encrypt = function (self, data, decrypt) {
  var out = Buffer.allocUnsafe(0);
  var len;

  while (data.length) {
    if (self._cache.length === 0) {
      self._cache = self._cipher.encryptBlock(self._prev);
      self._prev = Buffer.allocUnsafe(0);
    }

    if (self._cache.length <= data.length) {
      len = self._cache.length;
      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);
      data = data.slice(len);
    } else {
      out = Buffer.concat([out, encryptStart(self, data, decrypt)]);
      break;
    }
  }

  return out;
};

/***/ }),

/***/ "./node_modules/browserify-aes/modes/cfb1.js":
/*!***************************************************!*\
  !*** ./node_modules/browserify-aes/modes/cfb1.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

function encryptByte(self, byteParam, decrypt) {
  var pad;
  var i = -1;
  var len = 8;
  var out = 0;
  var bit, value;

  while (++i < len) {
    pad = self._cipher.encryptBlock(self._prev);
    bit = byteParam & 1 << 7 - i ? 0x80 : 0;
    value = pad[0] ^ bit;
    out += (value & 0x80) >> i % 8;
    self._prev = shiftIn(self._prev, decrypt ? bit : value);
  }

  return out;
}

function shiftIn(buffer, value) {
  var len = buffer.length;
  var i = -1;
  var out = Buffer.allocUnsafe(buffer.length);
  buffer = Buffer.concat([buffer, Buffer.from([value])]);

  while (++i < len) {
    out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
  }

  return out;
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length;
  var out = Buffer.allocUnsafe(len);
  var i = -1;

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt);
  }

  return out;
};

/***/ }),

/***/ "./node_modules/browserify-aes/modes/cfb8.js":
/*!***************************************************!*\
  !*** ./node_modules/browserify-aes/modes/cfb8.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

function encryptByte(self, byteParam, decrypt) {
  var pad = self._cipher.encryptBlock(self._prev);

  var out = pad[0] ^ byteParam;
  self._prev = Buffer.concat([self._prev.slice(1), Buffer.from([decrypt ? byteParam : out])]);
  return out;
}

exports.encrypt = function (self, chunk, decrypt) {
  var len = chunk.length;
  var out = Buffer.allocUnsafe(len);
  var i = -1;

  while (++i < len) {
    out[i] = encryptByte(self, chunk[i], decrypt);
  }

  return out;
};

/***/ }),

/***/ "./node_modules/browserify-aes/modes/ctr.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/modes/ctr.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var xor = __webpack_require__(/*! buffer-xor */ "./node_modules/buffer-xor/index.js");

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var incr32 = __webpack_require__(/*! ../incr32 */ "./node_modules/browserify-aes/incr32.js");

function getBlock(self) {
  var out = self._cipher.encryptBlockRaw(self._prev);

  incr32(self._prev);
  return out;
}

var blockSize = 16;

exports.encrypt = function (self, chunk) {
  var chunkNum = Math.ceil(chunk.length / blockSize);
  var start = self._cache.length;
  self._cache = Buffer.concat([self._cache, Buffer.allocUnsafe(chunkNum * blockSize)]);

  for (var i = 0; i < chunkNum; i++) {
    var out = getBlock(self);
    var offset = start + i * blockSize;

    self._cache.writeUInt32BE(out[0], offset + 0);

    self._cache.writeUInt32BE(out[1], offset + 4);

    self._cache.writeUInt32BE(out[2], offset + 8);

    self._cache.writeUInt32BE(out[3], offset + 12);
  }

  var pad = self._cache.slice(0, chunk.length);

  self._cache = self._cache.slice(chunk.length);
  return xor(chunk, pad);
};

/***/ }),

/***/ "./node_modules/browserify-aes/modes/ecb.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/modes/ecb.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.encrypt = function (self, block) {
  return self._cipher.encryptBlock(block);
};

exports.decrypt = function (self, block) {
  return self._cipher.decryptBlock(block);
};

/***/ }),

/***/ "./node_modules/browserify-aes/modes/index.js":
/*!****************************************************!*\
  !*** ./node_modules/browserify-aes/modes/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var modeModules = {
  ECB: __webpack_require__(/*! ./ecb */ "./node_modules/browserify-aes/modes/ecb.js"),
  CBC: __webpack_require__(/*! ./cbc */ "./node_modules/browserify-aes/modes/cbc.js"),
  CFB: __webpack_require__(/*! ./cfb */ "./node_modules/browserify-aes/modes/cfb.js"),
  CFB8: __webpack_require__(/*! ./cfb8 */ "./node_modules/browserify-aes/modes/cfb8.js"),
  CFB1: __webpack_require__(/*! ./cfb1 */ "./node_modules/browserify-aes/modes/cfb1.js"),
  OFB: __webpack_require__(/*! ./ofb */ "./node_modules/browserify-aes/modes/ofb.js"),
  CTR: __webpack_require__(/*! ./ctr */ "./node_modules/browserify-aes/modes/ctr.js"),
  GCM: __webpack_require__(/*! ./ctr */ "./node_modules/browserify-aes/modes/ctr.js")
};

var modes = __webpack_require__(/*! ./list.json */ "./node_modules/browserify-aes/modes/list.json");

for (var key in modes) {
  modes[key].module = modeModules[modes[key].mode];
}

module.exports = modes;

/***/ }),

/***/ "./node_modules/browserify-aes/modes/list.json":
/*!*****************************************************!*\
  !*** ./node_modules/browserify-aes/modes/list.json ***!
  \*****************************************************/
/*! exports provided: aes-128-ecb, aes-192-ecb, aes-256-ecb, aes-128-cbc, aes-192-cbc, aes-256-cbc, aes128, aes192, aes256, aes-128-cfb, aes-192-cfb, aes-256-cfb, aes-128-cfb8, aes-192-cfb8, aes-256-cfb8, aes-128-cfb1, aes-192-cfb1, aes-256-cfb1, aes-128-ofb, aes-192-ofb, aes-256-ofb, aes-128-ctr, aes-192-ctr, aes-256-ctr, aes-128-gcm, aes-192-gcm, aes-256-gcm, default */
/***/ (function(module) {

module.exports = {"aes-128-ecb":{"cipher":"AES","key":128,"iv":0,"mode":"ECB","type":"block"},"aes-192-ecb":{"cipher":"AES","key":192,"iv":0,"mode":"ECB","type":"block"},"aes-256-ecb":{"cipher":"AES","key":256,"iv":0,"mode":"ECB","type":"block"},"aes-128-cbc":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes-192-cbc":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes-256-cbc":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes128":{"cipher":"AES","key":128,"iv":16,"mode":"CBC","type":"block"},"aes192":{"cipher":"AES","key":192,"iv":16,"mode":"CBC","type":"block"},"aes256":{"cipher":"AES","key":256,"iv":16,"mode":"CBC","type":"block"},"aes-128-cfb":{"cipher":"AES","key":128,"iv":16,"mode":"CFB","type":"stream"},"aes-192-cfb":{"cipher":"AES","key":192,"iv":16,"mode":"CFB","type":"stream"},"aes-256-cfb":{"cipher":"AES","key":256,"iv":16,"mode":"CFB","type":"stream"},"aes-128-cfb8":{"cipher":"AES","key":128,"iv":16,"mode":"CFB8","type":"stream"},"aes-192-cfb8":{"cipher":"AES","key":192,"iv":16,"mode":"CFB8","type":"stream"},"aes-256-cfb8":{"cipher":"AES","key":256,"iv":16,"mode":"CFB8","type":"stream"},"aes-128-cfb1":{"cipher":"AES","key":128,"iv":16,"mode":"CFB1","type":"stream"},"aes-192-cfb1":{"cipher":"AES","key":192,"iv":16,"mode":"CFB1","type":"stream"},"aes-256-cfb1":{"cipher":"AES","key":256,"iv":16,"mode":"CFB1","type":"stream"},"aes-128-ofb":{"cipher":"AES","key":128,"iv":16,"mode":"OFB","type":"stream"},"aes-192-ofb":{"cipher":"AES","key":192,"iv":16,"mode":"OFB","type":"stream"},"aes-256-ofb":{"cipher":"AES","key":256,"iv":16,"mode":"OFB","type":"stream"},"aes-128-ctr":{"cipher":"AES","key":128,"iv":16,"mode":"CTR","type":"stream"},"aes-192-ctr":{"cipher":"AES","key":192,"iv":16,"mode":"CTR","type":"stream"},"aes-256-ctr":{"cipher":"AES","key":256,"iv":16,"mode":"CTR","type":"stream"},"aes-128-gcm":{"cipher":"AES","key":128,"iv":12,"mode":"GCM","type":"auth"},"aes-192-gcm":{"cipher":"AES","key":192,"iv":12,"mode":"GCM","type":"auth"},"aes-256-gcm":{"cipher":"AES","key":256,"iv":12,"mode":"GCM","type":"auth"}};

/***/ }),

/***/ "./node_modules/browserify-aes/modes/ofb.js":
/*!**************************************************!*\
  !*** ./node_modules/browserify-aes/modes/ofb.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var xor = __webpack_require__(/*! buffer-xor */ "./node_modules/buffer-xor/index.js");

function getBlock(self) {
  self._prev = self._cipher.encryptBlock(self._prev);
  return self._prev;
}

exports.encrypt = function (self, chunk) {
  while (self._cache.length < chunk.length) {
    self._cache = Buffer.concat([self._cache, getBlock(self)]);
  }

  var pad = self._cache.slice(0, chunk.length);

  self._cache = self._cache.slice(chunk.length);
  return xor(chunk, pad);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/browserify-aes/streamCipher.js":
/*!*****************************************************!*\
  !*** ./node_modules/browserify-aes/streamCipher.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var aes = __webpack_require__(/*! ./aes */ "./node_modules/browserify-aes/aes.js");

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var Transform = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js");

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

function StreamCipher(mode, key, iv, decrypt) {
  Transform.call(this);
  this._cipher = new aes.AES(key);
  this._prev = Buffer.from(iv);
  this._cache = Buffer.allocUnsafe(0);
  this._secCache = Buffer.allocUnsafe(0);
  this._decrypt = decrypt;
  this._mode = mode;
}

inherits(StreamCipher, Transform);

StreamCipher.prototype._update = function (chunk) {
  return this._mode.encrypt(this, chunk, this._decrypt);
};

StreamCipher.prototype._final = function () {
  this._cipher.scrub();
};

module.exports = StreamCipher;

/***/ }),

/***/ "./node_modules/browserify-cipher/browser.js":
/*!***************************************************!*\
  !*** ./node_modules/browserify-cipher/browser.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DES = __webpack_require__(/*! browserify-des */ "./node_modules/browserify-des/index.js");

var aes = __webpack_require__(/*! browserify-aes/browser */ "./node_modules/browserify-aes/browser.js");

var aesModes = __webpack_require__(/*! browserify-aes/modes */ "./node_modules/browserify-aes/modes/index.js");

var desModes = __webpack_require__(/*! browserify-des/modes */ "./node_modules/browserify-des/modes.js");

var ebtk = __webpack_require__(/*! evp_bytestokey */ "./node_modules/evp_bytestokey/index.js");

function createCipher(suite, password) {
  suite = suite.toLowerCase();
  var keyLen, ivLen;

  if (aesModes[suite]) {
    keyLen = aesModes[suite].key;
    ivLen = aesModes[suite].iv;
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8;
    ivLen = desModes[suite].iv;
  } else {
    throw new TypeError('invalid suite type');
  }

  var keys = ebtk(password, false, keyLen, ivLen);
  return createCipheriv(suite, keys.key, keys.iv);
}

function createDecipher(suite, password) {
  suite = suite.toLowerCase();
  var keyLen, ivLen;

  if (aesModes[suite]) {
    keyLen = aesModes[suite].key;
    ivLen = aesModes[suite].iv;
  } else if (desModes[suite]) {
    keyLen = desModes[suite].key * 8;
    ivLen = desModes[suite].iv;
  } else {
    throw new TypeError('invalid suite type');
  }

  var keys = ebtk(password, false, keyLen, ivLen);
  return createDecipheriv(suite, keys.key, keys.iv);
}

function createCipheriv(suite, key, iv) {
  suite = suite.toLowerCase();
  if (aesModes[suite]) return aes.createCipheriv(suite, key, iv);
  if (desModes[suite]) return new DES({
    key: key,
    iv: iv,
    mode: suite
  });
  throw new TypeError('invalid suite type');
}

function createDecipheriv(suite, key, iv) {
  suite = suite.toLowerCase();
  if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv);
  if (desModes[suite]) return new DES({
    key: key,
    iv: iv,
    mode: suite,
    decrypt: true
  });
  throw new TypeError('invalid suite type');
}

function getCiphers() {
  return Object.keys(desModes).concat(aes.getCiphers());
}

exports.createCipher = exports.Cipher = createCipher;
exports.createCipheriv = exports.Cipheriv = createCipheriv;
exports.createDecipher = exports.Decipher = createDecipher;
exports.createDecipheriv = exports.Decipheriv = createDecipheriv;
exports.listCiphers = exports.getCiphers = getCiphers;

/***/ }),

/***/ "./node_modules/browserify-des/index.js":
/*!**********************************************!*\
  !*** ./node_modules/browserify-des/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var CipherBase = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js");

var des = __webpack_require__(/*! des.js */ "./node_modules/des.js/lib/des.js");

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var modes = {
  'des-ede3-cbc': des.CBC.instantiate(des.EDE),
  'des-ede3': des.EDE,
  'des-ede-cbc': des.CBC.instantiate(des.EDE),
  'des-ede': des.EDE,
  'des-cbc': des.CBC.instantiate(des.DES),
  'des-ecb': des.DES
};
modes.des = modes['des-cbc'];
modes.des3 = modes['des-ede3-cbc'];
module.exports = DES;
inherits(DES, CipherBase);

function DES(opts) {
  CipherBase.call(this);
  var modeName = opts.mode.toLowerCase();
  var mode = modes[modeName];
  var type;

  if (opts.decrypt) {
    type = 'decrypt';
  } else {
    type = 'encrypt';
  }

  var key = opts.key;

  if (!Buffer.isBuffer(key)) {
    key = Buffer.from(key);
  }

  if (modeName === 'des-ede' || modeName === 'des-ede-cbc') {
    key = Buffer.concat([key, key.slice(0, 8)]);
  }

  var iv = opts.iv;

  if (!Buffer.isBuffer(iv)) {
    iv = Buffer.from(iv);
  }

  this._des = mode.create({
    key: key,
    iv: iv,
    type: type
  });
}

DES.prototype._update = function (data) {
  return Buffer.from(this._des.update(data));
};

DES.prototype._final = function () {
  return Buffer.from(this._des.final());
};

/***/ }),

/***/ "./node_modules/browserify-des/modes.js":
/*!**********************************************!*\
  !*** ./node_modules/browserify-des/modes.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports['des-ecb'] = {
  key: 8,
  iv: 0
};
exports['des-cbc'] = exports.des = {
  key: 8,
  iv: 8
};
exports['des-ede3-cbc'] = exports.des3 = {
  key: 24,
  iv: 8
};
exports['des-ede3'] = {
  key: 24,
  iv: 0
};
exports['des-ede-cbc'] = {
  key: 16,
  iv: 8
};
exports['des-ede'] = {
  key: 16,
  iv: 0
};

/***/ }),

/***/ "./node_modules/browserify-rsa/index.js":
/*!**********************************************!*\
  !*** ./node_modules/browserify-rsa/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var bn = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

var randomBytes = __webpack_require__(/*! randombytes */ "./node_modules/randombytes/browser.js");

module.exports = crt;

function blind(priv) {
  var r = getr(priv);
  var blinder = r.toRed(bn.mont(priv.modulus)).redPow(new bn(priv.publicExponent)).fromRed();
  return {
    blinder: blinder,
    unblinder: r.invm(priv.modulus)
  };
}

function crt(msg, priv) {
  var blinds = blind(priv);
  var len = priv.modulus.byteLength();
  var mod = bn.mont(priv.modulus);
  var blinded = new bn(msg).mul(blinds.blinder).umod(priv.modulus);
  var c1 = blinded.toRed(bn.mont(priv.prime1));
  var c2 = blinded.toRed(bn.mont(priv.prime2));
  var qinv = priv.coefficient;
  var p = priv.prime1;
  var q = priv.prime2;
  var m1 = c1.redPow(priv.exponent1);
  var m2 = c2.redPow(priv.exponent2);
  m1 = m1.fromRed();
  m2 = m2.fromRed();
  var h = m1.isub(m2).imul(qinv).umod(p);
  h.imul(q);
  m2.iadd(h);
  return new Buffer(m2.imul(blinds.unblinder).umod(priv.modulus).toArray(false, len));
}

crt.getr = getr;

function getr(priv) {
  var len = priv.modulus.byteLength();
  var r = new bn(randomBytes(len));

  while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2)) {
    r = new bn(randomBytes(len));
  }

  return r;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/browserify-sign/algos.js":
/*!***********************************************!*\
  !*** ./node_modules/browserify-sign/algos.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./browser/algorithms.json */ "./node_modules/browserify-sign/browser/algorithms.json");

/***/ }),

/***/ "./node_modules/browserify-sign/browser/algorithms.json":
/*!**************************************************************!*\
  !*** ./node_modules/browserify-sign/browser/algorithms.json ***!
  \**************************************************************/
/*! exports provided: sha224WithRSAEncryption, RSA-SHA224, sha256WithRSAEncryption, RSA-SHA256, sha384WithRSAEncryption, RSA-SHA384, sha512WithRSAEncryption, RSA-SHA512, RSA-SHA1, ecdsa-with-SHA1, sha256, sha224, sha384, sha512, DSA-SHA, DSA-SHA1, DSA, DSA-WITH-SHA224, DSA-SHA224, DSA-WITH-SHA256, DSA-SHA256, DSA-WITH-SHA384, DSA-SHA384, DSA-WITH-SHA512, DSA-SHA512, DSA-RIPEMD160, ripemd160WithRSA, RSA-RIPEMD160, md5WithRSAEncryption, RSA-MD5, default */
/***/ (function(module) {

module.exports = {"sha224WithRSAEncryption":{"sign":"rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"RSA-SHA224":{"sign":"ecdsa/rsa","hash":"sha224","id":"302d300d06096086480165030402040500041c"},"sha256WithRSAEncryption":{"sign":"rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"RSA-SHA256":{"sign":"ecdsa/rsa","hash":"sha256","id":"3031300d060960864801650304020105000420"},"sha384WithRSAEncryption":{"sign":"rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"RSA-SHA384":{"sign":"ecdsa/rsa","hash":"sha384","id":"3041300d060960864801650304020205000430"},"sha512WithRSAEncryption":{"sign":"rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA512":{"sign":"ecdsa/rsa","hash":"sha512","id":"3051300d060960864801650304020305000440"},"RSA-SHA1":{"sign":"rsa","hash":"sha1","id":"3021300906052b0e03021a05000414"},"ecdsa-with-SHA1":{"sign":"ecdsa","hash":"sha1","id":""},"sha256":{"sign":"ecdsa","hash":"sha256","id":""},"sha224":{"sign":"ecdsa","hash":"sha224","id":""},"sha384":{"sign":"ecdsa","hash":"sha384","id":""},"sha512":{"sign":"ecdsa","hash":"sha512","id":""},"DSA-SHA":{"sign":"dsa","hash":"sha1","id":""},"DSA-SHA1":{"sign":"dsa","hash":"sha1","id":""},"DSA":{"sign":"dsa","hash":"sha1","id":""},"DSA-WITH-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-SHA224":{"sign":"dsa","hash":"sha224","id":""},"DSA-WITH-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-SHA256":{"sign":"dsa","hash":"sha256","id":""},"DSA-WITH-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-SHA384":{"sign":"dsa","hash":"sha384","id":""},"DSA-WITH-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-SHA512":{"sign":"dsa","hash":"sha512","id":""},"DSA-RIPEMD160":{"sign":"dsa","hash":"rmd160","id":""},"ripemd160WithRSA":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"RSA-RIPEMD160":{"sign":"rsa","hash":"rmd160","id":"3021300906052b2403020105000414"},"md5WithRSAEncryption":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"},"RSA-MD5":{"sign":"rsa","hash":"md5","id":"3020300c06082a864886f70d020505000410"}};

/***/ }),

/***/ "./node_modules/browserify-sign/browser/curves.json":
/*!**********************************************************!*\
  !*** ./node_modules/browserify-sign/browser/curves.json ***!
  \**********************************************************/
/*! exports provided: 1.3.132.0.10, 1.3.132.0.33, 1.2.840.10045.3.1.1, 1.2.840.10045.3.1.7, 1.3.132.0.34, 1.3.132.0.35, default */
/***/ (function(module) {

module.exports = {"1.3.132.0.10":"secp256k1","1.3.132.0.33":"p224","1.2.840.10045.3.1.1":"p192","1.2.840.10045.3.1.7":"p256","1.3.132.0.34":"p384","1.3.132.0.35":"p521"};

/***/ }),

/***/ "./node_modules/browserify-sign/browser/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/browserify-sign/browser/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(/*! create-hash */ "./node_modules/create-hash/browser.js");

var stream = __webpack_require__(/*! stream */ "./node_modules/stream-browserify/index.js");

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var sign = __webpack_require__(/*! ./sign */ "./node_modules/browserify-sign/browser/sign.js");

var verify = __webpack_require__(/*! ./verify */ "./node_modules/browserify-sign/browser/verify.js");

var algorithms = __webpack_require__(/*! ./algorithms.json */ "./node_modules/browserify-sign/browser/algorithms.json");

Object.keys(algorithms).forEach(function (key) {
  algorithms[key].id = new Buffer(algorithms[key].id, 'hex');
  algorithms[key.toLowerCase()] = algorithms[key];
});

function Sign(algorithm) {
  stream.Writable.call(this);
  var data = algorithms[algorithm];
  if (!data) throw new Error('Unknown message digest');
  this._hashType = data.hash;
  this._hash = createHash(data.hash);
  this._tag = data.id;
  this._signType = data.sign;
}

inherits(Sign, stream.Writable);

Sign.prototype._write = function _write(data, _, done) {
  this._hash.update(data);

  done();
};

Sign.prototype.update = function update(data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc);

  this._hash.update(data);

  return this;
};

Sign.prototype.sign = function signMethod(key, enc) {
  this.end();

  var hash = this._hash.digest();

  var sig = sign(hash, key, this._hashType, this._signType, this._tag);
  return enc ? sig.toString(enc) : sig;
};

function Verify(algorithm) {
  stream.Writable.call(this);
  var data = algorithms[algorithm];
  if (!data) throw new Error('Unknown message digest');
  this._hash = createHash(data.hash);
  this._tag = data.id;
  this._signType = data.sign;
}

inherits(Verify, stream.Writable);

Verify.prototype._write = function _write(data, _, done) {
  this._hash.update(data);

  done();
};

Verify.prototype.update = function update(data, enc) {
  if (typeof data === 'string') data = new Buffer(data, enc);

  this._hash.update(data);

  return this;
};

Verify.prototype.verify = function verifyMethod(key, sig, enc) {
  if (typeof sig === 'string') sig = new Buffer(sig, enc);
  this.end();

  var hash = this._hash.digest();

  return verify(sig, hash, key, this._signType, this._tag);
};

function createSign(algorithm) {
  return new Sign(algorithm);
}

function createVerify(algorithm) {
  return new Verify(algorithm);
}

module.exports = {
  Sign: createSign,
  Verify: createVerify,
  createSign: createSign,
  createVerify: createVerify
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/browserify-sign/browser/sign.js":
/*!******************************************************!*\
  !*** ./node_modules/browserify-sign/browser/sign.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var createHmac = __webpack_require__(/*! create-hmac */ "./node_modules/create-hmac/browser.js");

var crt = __webpack_require__(/*! browserify-rsa */ "./node_modules/browserify-rsa/index.js");

var EC = __webpack_require__(/*! elliptic */ "./node_modules/elliptic/lib/elliptic.js").ec;

var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

var parseKeys = __webpack_require__(/*! parse-asn1 */ "./node_modules/parse-asn1/index.js");

var curves = __webpack_require__(/*! ./curves.json */ "./node_modules/browserify-sign/browser/curves.json");

function sign(hash, key, hashType, signType, tag) {
  var priv = parseKeys(key);

  if (priv.curve) {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
    return ecSign(hash, priv);
  } else if (priv.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong private key type');
    return dsaSign(hash, priv, hashType);
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
  }

  hash = Buffer.concat([tag, hash]);
  var len = priv.modulus.byteLength();
  var pad = [0, 1];

  while (hash.length + pad.length + 1 < len) {
    pad.push(0xff);
  }

  pad.push(0x00);
  var i = -1;

  while (++i < hash.length) {
    pad.push(hash[i]);
  }

  var out = crt(pad, priv);
  return out;
}

function ecSign(hash, priv) {
  var curveId = curves[priv.curve.join('.')];
  if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'));
  var curve = new EC(curveId);
  var key = curve.keyFromPrivate(priv.privateKey);
  var out = key.sign(hash);
  return new Buffer(out.toDER());
}

function dsaSign(hash, priv, algo) {
  var x = priv.params.priv_key;
  var p = priv.params.p;
  var q = priv.params.q;
  var g = priv.params.g;
  var r = new BN(0);
  var k;
  var H = bits2int(hash, q).mod(q);
  var s = false;
  var kv = getKey(x, q, hash, algo);

  while (s === false) {
    k = makeKey(q, kv, algo);
    r = makeR(g, k, p, q);
    s = k.invm(q).imul(H.add(x.mul(r))).mod(q);

    if (s.cmpn(0) === 0) {
      s = false;
      r = new BN(0);
    }
  }

  return toDER(r, s);
}

function toDER(r, s) {
  r = r.toArray();
  s = s.toArray(); // Pad values

  if (r[0] & 0x80) r = [0].concat(r);
  if (s[0] & 0x80) s = [0].concat(s);
  var total = r.length + s.length + 4;
  var res = [0x30, total, 0x02, r.length];
  res = res.concat(r, [0x02, s.length], s);
  return new Buffer(res);
}

function getKey(x, q, hash, algo) {
  x = new Buffer(x.toArray());

  if (x.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - x.length);
    zeros.fill(0);
    x = Buffer.concat([zeros, x]);
  }

  var hlen = hash.length;
  var hbits = bits2octets(hash, q);
  var v = new Buffer(hlen);
  v.fill(1);
  var k = new Buffer(hlen);
  k.fill(0);
  k = createHmac(algo, k).update(v).update(new Buffer([0])).update(x).update(hbits).digest();
  v = createHmac(algo, k).update(v).digest();
  k = createHmac(algo, k).update(v).update(new Buffer([1])).update(x).update(hbits).digest();
  v = createHmac(algo, k).update(v).digest();
  return {
    k: k,
    v: v
  };
}

function bits2int(obits, q) {
  var bits = new BN(obits);
  var shift = (obits.length << 3) - q.bitLength();
  if (shift > 0) bits.ishrn(shift);
  return bits;
}

function bits2octets(bits, q) {
  bits = bits2int(bits, q);
  bits = bits.mod(q);
  var out = new Buffer(bits.toArray());

  if (out.length < q.byteLength()) {
    var zeros = new Buffer(q.byteLength() - out.length);
    zeros.fill(0);
    out = Buffer.concat([zeros, out]);
  }

  return out;
}

function makeKey(q, kv, algo) {
  var t;
  var k;

  do {
    t = new Buffer(0);

    while (t.length * 8 < q.bitLength()) {
      kv.v = createHmac(algo, kv.k).update(kv.v).digest();
      t = Buffer.concat([t, kv.v]);
    }

    k = bits2int(t, q);
    kv.k = createHmac(algo, kv.k).update(kv.v).update(new Buffer([0])).digest();
    kv.v = createHmac(algo, kv.k).update(kv.v).digest();
  } while (k.cmp(q) !== -1);

  return k;
}

function makeR(g, k, p, q) {
  return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);
}

module.exports = sign;
module.exports.getKey = getKey;
module.exports.makeKey = makeKey;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/browserify-sign/browser/verify.js":
/*!********************************************************!*\
  !*** ./node_modules/browserify-sign/browser/verify.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

var EC = __webpack_require__(/*! elliptic */ "./node_modules/elliptic/lib/elliptic.js").ec;

var parseKeys = __webpack_require__(/*! parse-asn1 */ "./node_modules/parse-asn1/index.js");

var curves = __webpack_require__(/*! ./curves.json */ "./node_modules/browserify-sign/browser/curves.json");

function verify(sig, hash, key, signType, tag) {
  var pub = parseKeys(key);

  if (pub.type === 'ec') {
    // rsa keys can be interpreted as ecdsa ones in openssl
    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
    return ecVerify(sig, hash, pub);
  } else if (pub.type === 'dsa') {
    if (signType !== 'dsa') throw new Error('wrong public key type');
    return dsaVerify(sig, hash, pub);
  } else {
    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
  }

  hash = Buffer.concat([tag, hash]);
  var len = pub.modulus.byteLength();
  var pad = [1];
  var padNum = 0;

  while (hash.length + pad.length + 2 < len) {
    pad.push(0xff);
    padNum++;
  }

  pad.push(0x00);
  var i = -1;

  while (++i < hash.length) {
    pad.push(hash[i]);
  }

  pad = new Buffer(pad);
  var red = BN.mont(pub.modulus);
  sig = new BN(sig).toRed(red);
  sig = sig.redPow(new BN(pub.publicExponent));
  sig = new Buffer(sig.fromRed().toArray());
  var out = padNum < 8 ? 1 : 0;
  len = Math.min(sig.length, pad.length);
  if (sig.length !== pad.length) out = 1;
  i = -1;

  while (++i < len) {
    out |= sig[i] ^ pad[i];
  }

  return out === 0;
}

function ecVerify(sig, hash, pub) {
  var curveId = curves[pub.data.algorithm.curve.join('.')];
  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'));
  var curve = new EC(curveId);
  var pubkey = pub.data.subjectPrivateKey.data;
  return curve.verify(hash, sig, pubkey);
}

function dsaVerify(sig, hash, pub) {
  var p = pub.data.p;
  var q = pub.data.q;
  var g = pub.data.g;
  var y = pub.data.pub_key;
  var unpacked = parseKeys.signature.decode(sig, 'der');
  var s = unpacked.s;
  var r = unpacked.r;
  checkValue(s, q);
  checkValue(r, q);
  var montp = BN.mont(p);
  var w = s.invm(q);
  var v = g.toRed(montp).redPow(new BN(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
  return v.cmp(r) === 0;
}

function checkValue(b, q) {
  if (b.cmpn(0) <= 0) throw new Error('invalid sig');
  if (b.cmp(q) >= q) throw new Error('invalid sig');
}

module.exports = verify;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/bs58/index.js":
/*!************************************!*\
  !*** ./node_modules/bs58/index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var basex = __webpack_require__(/*! base-x */ "./node_modules/base-x/index.js");

var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
module.exports = basex(ALPHABET);

/***/ }),

/***/ "./node_modules/bs58check/base.js":
/*!****************************************!*\
  !*** ./node_modules/bs58check/base.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var base58 = __webpack_require__(/*! bs58 */ "./node_modules/bs58/index.js");

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

module.exports = function (checksumFn) {
  // Encode a buffer as a base58-check encoded string
  function encode(payload) {
    var checksum = checksumFn(payload);
    return base58.encode(Buffer.concat([payload, checksum], payload.length + 4));
  }

  function decodeRaw(buffer) {
    var payload = buffer.slice(0, -4);
    var checksum = buffer.slice(-4);
    var newChecksum = checksumFn(payload);
    if (checksum[0] ^ newChecksum[0] | checksum[1] ^ newChecksum[1] | checksum[2] ^ newChecksum[2] | checksum[3] ^ newChecksum[3]) return;
    return payload;
  } // Decode a base58-check encoded string to a buffer, no result if checksum is wrong


  function decodeUnsafe(string) {
    var buffer = base58.decodeUnsafe(string);
    if (!buffer) return;
    return decodeRaw(buffer);
  }

  function decode(string) {
    var buffer = base58.decode(string);
    var payload = decodeRaw(buffer, checksumFn);
    if (!payload) throw new Error('Invalid checksum');
    return payload;
  }

  return {
    encode: encode,
    decode: decode,
    decodeUnsafe: decodeUnsafe
  };
};

/***/ }),

/***/ "./node_modules/bs58check/index.js":
/*!*****************************************!*\
  !*** ./node_modules/bs58check/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createHash = __webpack_require__(/*! create-hash */ "./node_modules/create-hash/browser.js");

var bs58checkBase = __webpack_require__(/*! ./base */ "./node_modules/bs58check/base.js"); // SHA256(SHA256(buffer))


function sha256x2(buffer) {
  var tmp = createHash('sha256').update(buffer).digest();
  return createHash('sha256').update(tmp).digest();
}

module.exports = bs58checkBase(sha256x2);

/***/ }),

/***/ "./node_modules/buffer-xor/index.js":
/*!******************************************!*\
  !*** ./node_modules/buffer-xor/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function xor(a, b) {
  var length = Math.min(a.length, b.length);
  var buffer = new Buffer(length);

  for (var i = 0; i < length; ++i) {
    buffer[i] = a[i] ^ b[i];
  }

  return buffer;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

/* eslint-disable no-proto */


var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js");

var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js");

var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js");

exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */

Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
/*
 * Export kMaxLength after typed array support is determined.
 */

exports.kMaxLength = kMaxLength();

function typedArraySupport() {
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = {
      __proto__: Uint8Array.prototype,
      foo: function foo() {
        return 42;
      }
    };
    return arr.foo() === 42 && // typed array instances can be augmented
    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
  } catch (e) {
    return false;
  }
}

function kMaxLength() {
  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}

function createBuffer(that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length');
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length);
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length);
    }

    that.length = length;
  }

  return that;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */


function Buffer(arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length);
  } // Common case.


  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error('If encoding is specified then the first argument must be a string');
    }

    return allocUnsafe(this, arg);
  }

  return from(this, arg, encodingOrOffset, length);
}

Buffer.poolSize = 8192; // not used by this implementation
// TODO: Legacy, not needed anymore. Remove in next major version.

Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype;
  return arr;
};

function from(that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length);
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset);
  }

  return fromObject(that, value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/


Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length);
};

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array;

  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    });
  }
}

function assertSize(size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number');
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative');
  }
}

function alloc(that, size, fill, encoding) {
  assertSize(size);

  if (size <= 0) {
    return createBuffer(that, size);
  }

  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
  }

  return createBuffer(that, size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/


Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding);
};

function allocUnsafe(that, size) {
  assertSize(size);
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0;
    }
  }

  return that;
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */


Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */


Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size);
};

function fromString(that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8';
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding');
  }

  var length = byteLength(string, encoding) | 0;
  that = createBuffer(that, length);
  var actual = that.write(string, encoding);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
  }

  return that;
}

function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  that = createBuffer(that, length);

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255;
  }

  return that;
}

function fromArrayBuffer(that, array, byteOffset, length) {
  array.byteLength; // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array);
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset);
  } else {
    array = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array;
    that.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
  }

  return that;
}

function fromObject(that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    that = createBuffer(that, len);

    if (that.length === 0) {
      return that;
    }

    obj.copy(that, 0, 0, len);
    return that;
  }

  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }

      return fromArrayLike(that, obj);
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}

function checked(length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
  }

  return length | 0;
}

function SlowBuffer(length) {
  if (+length != length) {
    // eslint-disable-line eqeqeq
    length = 0;
  }

  return Buffer.alloc(+length);
}

Buffer.isBuffer = function isBuffer(b) {
  return !!(b != null && b._isBuffer);
};

Buffer.compare = function compare(a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers');
  }

  if (a === b) return 0;
  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
};

Buffer.isEncoding = function isEncoding(encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true;

    default:
      return false;
  }
};

Buffer.concat = function concat(list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return Buffer.alloc(0);
  }

  var i;

  if (length === undefined) {
    length = 0;

    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = Buffer.allocUnsafe(length);
  var pos = 0;

  for (i = 0; i < list.length; ++i) {
    var buf = list[i];

    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }

    buf.copy(buffer, pos);
    pos += buf.length;
  }

  return buffer;
};

function byteLength(string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }

  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }

  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0; // Use a for loop to avoid recursion

  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len;

      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length;

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2;

      case 'hex':
        return len >>> 1;

      case 'base64':
        return base64ToBytes(string).length;

      default:
        if (loweredCase) return utf8ToBytes(string).length; // assume utf8

        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
}

Buffer.byteLength = byteLength;

function slowToString(encoding, start, end) {
  var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.
  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

  if (start === undefined || start < 0) {
    start = 0;
  } // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.


  if (start > this.length) {
    return '';
  }

  if (end === undefined || end > this.length) {
    end = this.length;
  }

  if (end <= 0) {
    return '';
  } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


  end >>>= 0;
  start >>>= 0;

  if (end <= start) {
    return '';
  }

  if (!encoding) encoding = 'utf8';

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end);

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end);

      case 'ascii':
        return asciiSlice(this, start, end);

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end);

      case 'base64':
        return base64Slice(this, start, end);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = (encoding + '').toLowerCase();
        loweredCase = true;
    }
  }
} // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.


Buffer.prototype._isBuffer = true;

function swap(b, n, m) {
  var i = b[n];
  b[n] = b[m];
  b[m] = i;
}

Buffer.prototype.swap16 = function swap16() {
  var len = this.length;

  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits');
  }

  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1);
  }

  return this;
};

Buffer.prototype.swap32 = function swap32() {
  var len = this.length;

  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits');
  }

  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3);
    swap(this, i + 1, i + 2);
  }

  return this;
};

Buffer.prototype.swap64 = function swap64() {
  var len = this.length;

  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits');
  }

  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7);
    swap(this, i + 1, i + 6);
    swap(this, i + 2, i + 5);
    swap(this, i + 3, i + 4);
  }

  return this;
};

Buffer.prototype.toString = function toString() {
  var length = this.length | 0;
  if (length === 0) return '';
  if (arguments.length === 0) return utf8Slice(this, 0, length);
  return slowToString.apply(this, arguments);
};

Buffer.prototype.equals = function equals(b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
  if (this === b) return true;
  return Buffer.compare(this, b) === 0;
};

Buffer.prototype.inspect = function inspect() {
  var str = '';
  var max = exports.INSPECT_MAX_BYTES;

  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
    if (this.length > max) str += ' ... ';
  }

  return '<Buffer ' + str + '>';
};

Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer');
  }

  if (start === undefined) {
    start = 0;
  }

  if (end === undefined) {
    end = target ? target.length : 0;
  }

  if (thisStart === undefined) {
    thisStart = 0;
  }

  if (thisEnd === undefined) {
    thisEnd = this.length;
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index');
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0;
  }

  if (thisStart >= thisEnd) {
    return -1;
  }

  if (start >= end) {
    return 1;
  }

  start >>>= 0;
  end >>>= 0;
  thisStart >>>= 0;
  thisEnd >>>= 0;
  if (this === target) return 0;
  var x = thisEnd - thisStart;
  var y = end - start;
  var len = Math.min(x, y);
  var thisCopy = this.slice(thisStart, thisEnd);
  var targetCopy = target.slice(start, end);

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i];
      y = targetCopy[i];
      break;
    }
  }

  if (x < y) return -1;
  if (y < x) return 1;
  return 0;
}; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf


function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1; // Normalize byteOffset

  if (typeof byteOffset === 'string') {
    encoding = byteOffset;
    byteOffset = 0;
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff;
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000;
  }

  byteOffset = +byteOffset; // Coerce to Number.

  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
  } // Normalize byteOffset: negative offsets start from the end of the buffer


  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

  if (byteOffset >= buffer.length) {
    if (dir) return -1;else byteOffset = buffer.length - 1;
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0;else return -1;
  } // Normalize val


  if (typeof val === 'string') {
    val = Buffer.from(val, encoding);
  } // Finally, search either indexOf (if dir is true) or lastIndexOf


  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1;
    }

    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
  } else if (typeof val === 'number') {
    val = val & 0xFF; // Search for a byte value [0-255]

    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
      }
    }

    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
  }

  throw new TypeError('val must be string, number or Buffer');
}

function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
  var indexSize = 1;
  var arrLength = arr.length;
  var valLength = val.length;

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase();

    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1;
      }

      indexSize = 2;
      arrLength /= 2;
      valLength /= 2;
      byteOffset /= 2;
    }
  }

  function read(buf, i) {
    if (indexSize === 1) {
      return buf[i];
    } else {
      return buf.readUInt16BE(i * indexSize);
    }
  }

  var i;

  if (dir) {
    var foundIndex = -1;

    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i;
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
      } else {
        if (foundIndex !== -1) i -= i - foundIndex;
        foundIndex = -1;
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

    for (i = byteOffset; i >= 0; i--) {
      var found = true;

      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false;
          break;
        }
      }

      if (found) return i;
    }
  }

  return -1;
}

Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1;
};

Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};

Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};

function hexWrite(buf, string, offset, length) {
  offset = Number(offset) || 0;
  var remaining = buf.length - offset;

  if (!length) {
    length = remaining;
  } else {
    length = Number(length);

    if (length > remaining) {
      length = remaining;
    }
  } // must be an even number of digits


  var strLen = string.length;
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

  if (length > strLen / 2) {
    length = strLen / 2;
  }

  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(parsed)) return i;
    buf[offset + i] = parsed;
  }

  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function asciiWrite(buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length);
}

function latin1Write(buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length);
}

function base64Write(buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length);
}

function ucs2Write(buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}

Buffer.prototype.write = function write(string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8';
    length = this.length;
    offset = 0; // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset;
    length = this.length;
    offset = 0; // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0;

    if (isFinite(length)) {
      length = length | 0;
      if (encoding === undefined) encoding = 'utf8';
    } else {
      encoding = length;
      length = undefined;
    } // legacy write(string, encoding, offset, length) - remove in v0.13

  } else {
    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  if (!encoding) encoding = 'utf8';
  var loweredCase = false;

  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length);

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length);

      case 'ascii':
        return asciiWrite(this, string, offset, length);

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length);

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length);

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length);

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
        encoding = ('' + encoding).toLowerCase();
        loweredCase = true;
    }
  }
};

Buffer.prototype.toJSON = function toJSON() {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};

function base64Slice(buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf);
  } else {
    return base64.fromByteArray(buf.slice(start, end));
  }
}

function utf8Slice(buf, start, end) {
  end = Math.min(buf.length, end);
  var res = [];
  var i = start;

  while (i < end) {
    var firstByte = buf[i];
    var codePoint = null;
    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint;

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte;
          }

          break;

        case 2:
          secondByte = buf[i + 1];

          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 3:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint;
            }
          }

          break;

        case 4:
          secondByte = buf[i + 1];
          thirdByte = buf[i + 2];
          fourthByte = buf[i + 3];

          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint;
            }
          }

      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD;
      bytesPerSequence = 1;
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000;
      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
      codePoint = 0xDC00 | codePoint & 0x3FF;
    }

    res.push(codePoint);
    i += bytesPerSequence;
  }

  return decodeCodePointsArray(res);
} // Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety


var MAX_ARGUMENTS_LENGTH = 0x1000;

function decodeCodePointsArray(codePoints) {
  var len = codePoints.length;

  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
  } // Decode in chunks to avoid "call stack size exceeded".


  var res = '';
  var i = 0;

  while (i < len) {
    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
  }

  return res;
}

function asciiSlice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F);
  }

  return ret;
}

function latin1Slice(buf, start, end) {
  var ret = '';
  end = Math.min(buf.length, end);

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i]);
  }

  return ret;
}

function hexSlice(buf, start, end) {
  var len = buf.length;
  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;
  var out = '';

  for (var i = start; i < end; ++i) {
    out += toHex(buf[i]);
  }

  return out;
}

function utf16leSlice(buf, start, end) {
  var bytes = buf.slice(start, end);
  var res = '';

  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
  }

  return res;
}

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;
  var newBuf;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end);
    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);

    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */


function checkOffset(offset, ext, length) {
  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}

Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  return val;
};

Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    checkOffset(offset, byteLength, this.length);
  }

  var val = this[offset + --byteLength];
  var mul = 1;

  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul;
  }

  return val;
};

Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  return this[offset];
};

Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] | this[offset + 1] << 8;
};

Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  return this[offset] << 8 | this[offset + 1];
};

Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};

Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};

Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var val = this[offset];
  var mul = 1;
  var i = 0;

  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
  offset = offset | 0;
  byteLength = byteLength | 0;
  if (!noAssert) checkOffset(offset, byteLength, this.length);
  var i = byteLength;
  var mul = 1;
  var val = this[offset + --i];

  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul;
  }

  mul *= 0x80;
  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
  return val;
};

Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length);
  if (!(this[offset] & 0x80)) return this[offset];
  return (0xff - this[offset] + 1) * -1;
};

Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset] | this[offset + 1] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length);
  var val = this[offset + 1] | this[offset] << 8;
  return val & 0x8000 ? val | 0xFFFF0000 : val;
};

Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};

Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};

Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, true, 23, 4);
};

Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length);
  return ieee754.read(this, offset, false, 23, 4);
};

Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, true, 52, 8);
};

Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length);
  return ieee754.read(this, offset, false, 52, 8);
};

function checkInt(buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
}

Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var mul = 1;
  var i = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;
  byteLength = byteLength | 0;

  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
    checkInt(this, value, offset, byteLength, maxBytes, 0);
  }

  var i = byteLength - 1;
  var mul = 1;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = value / mul & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  this[offset] = value & 0xff;
  return offset + 1;
};

function objectWriteUInt16(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1;

  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }

  return offset + 2;
};

Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }

  return offset + 2;
};

function objectWriteUInt32(buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1;

  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }

  return offset + 4;
};

Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }

  return offset + 4;
};

Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = 0;
  var mul = 1;
  var sub = 0;
  this[offset] = value & 0xFF;

  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
  value = +value;
  offset = offset | 0;

  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1);
    checkInt(this, value, offset, byteLength, limit - 1, -limit);
  }

  var i = byteLength - 1;
  var mul = 1;
  var sub = 0;
  this[offset + i] = value & 0xFF;

  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1;
    }

    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
  }

  return offset + byteLength;
};

Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
  if (value < 0) value = 0xff + value + 1;
  this[offset] = value & 0xff;
  return offset + 1;
};

Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
  } else {
    objectWriteUInt16(this, value, offset, true);
  }

  return offset + 2;
};

Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
  } else {
    objectWriteUInt16(this, value, offset, false);
  }

  return offset + 2;
};

Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
  } else {
    objectWriteUInt32(this, value, offset, true);
  }

  return offset + 4;
};

Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
  value = +value;
  offset = offset | 0;
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
  if (value < 0) value = 0xffffffff + value + 1;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
  } else {
    objectWriteUInt32(this, value, offset, false);
  }

  return offset + 4;
};

function checkIEEE754(buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range');
  if (offset < 0) throw new RangeError('Index out of range');
}

function writeFloat(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }

  ieee754.write(buf, value, offset, littleEndian, 23, 4);
  return offset + 4;
}

Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert);
};

Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert);
};

function writeDouble(buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }

  ieee754.write(buf, value, offset, littleEndian, 52, 8);
  return offset + 8;
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert);
};

Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert);
}; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }

  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

  if (end > this.length) end = this.length;

  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }

  return len;
}; // Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])


Buffer.prototype.fill = function fill(val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start;
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      encoding = end;
      end = this.length;
    }

    if (val.length === 1) {
      var code = val.charCodeAt(0);

      if (code < 256) {
        val = code;
      }
    }

    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string');
    }

    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding);
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  } // Invalid ranges are not set to a default, so can range check early.


  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;
  if (!val) val = 0;
  var i;

  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
    var len = bytes.length;

    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
}; // HELPER FUNCTIONS
// ================


var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

function base64clean(str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

  if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

  while (str.length % 4 !== 0) {
    str = str + '=';
  }

  return str;
}

function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i); // is surrogate component

    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } // valid lead


        leadSurrogate = codePoint;
        continue;
      } // 2 leads in a row


      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      } // valid surrogate pair


      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null; // encode utf8

    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function asciiToBytes(str) {
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
  }

  return byteArray;
}

function utf16leToBytes(str, units) {
  var c, hi, lo;
  var byteArray = [];

  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break;
    c = str.charCodeAt(i);
    hi = c >> 8;
    lo = c % 256;
    byteArray.push(lo);
    byteArray.push(hi);
  }

  return byteArray;
}

function base64ToBytes(str) {
  return base64.toByteArray(base64clean(str));
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }

  return i;
}

function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/can-promise/index.js":
/*!*******************************************!*\
  !*** ./node_modules/can-promise/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var G = __webpack_require__(/*! window-or-global */ "./node_modules/window-or-global/lib/index.js");

module.exports = function () {
  return typeof G.Promise === 'function' && typeof G.Promise.prototype.then === 'function';
};

/***/ }),

/***/ "./node_modules/cipher-base/index.js":
/*!*******************************************!*\
  !*** ./node_modules/cipher-base/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var Transform = __webpack_require__(/*! stream */ "./node_modules/stream-browserify/index.js").Transform;

var StringDecoder = __webpack_require__(/*! string_decoder */ "./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

function CipherBase(hashMode) {
  Transform.call(this);
  this.hashMode = typeof hashMode === 'string';

  if (this.hashMode) {
    this[hashMode] = this._finalOrDigest;
  } else {
    this.final = this._finalOrDigest;
  }

  if (this._final) {
    this.__final = this._final;
    this._final = null;
  }

  this._decoder = null;
  this._encoding = null;
}

inherits(CipherBase, Transform);

CipherBase.prototype.update = function (data, inputEnc, outputEnc) {
  if (typeof data === 'string') {
    data = Buffer.from(data, inputEnc);
  }

  var outData = this._update(data);

  if (this.hashMode) return this;

  if (outputEnc) {
    outData = this._toString(outData, outputEnc);
  }

  return outData;
};

CipherBase.prototype.setAutoPadding = function () {};

CipherBase.prototype.getAuthTag = function () {
  throw new Error('trying to get auth tag in unsupported state');
};

CipherBase.prototype.setAuthTag = function () {
  throw new Error('trying to set auth tag in unsupported state');
};

CipherBase.prototype.setAAD = function () {
  throw new Error('trying to set aad in unsupported state');
};

CipherBase.prototype._transform = function (data, _, next) {
  var err;

  try {
    if (this.hashMode) {
      this._update(data);
    } else {
      this.push(this._update(data));
    }
  } catch (e) {
    err = e;
  } finally {
    next(err);
  }
};

CipherBase.prototype._flush = function (done) {
  var err;

  try {
    this.push(this.__final());
  } catch (e) {
    err = e;
  }

  done(err);
};

CipherBase.prototype._finalOrDigest = function (outputEnc) {
  var outData = this.__final() || Buffer.alloc(0);

  if (outputEnc) {
    outData = this._toString(outData, outputEnc, true);
  }

  return outData;
};

CipherBase.prototype._toString = function (value, enc, fin) {
  if (!this._decoder) {
    this._decoder = new StringDecoder(enc);
    this._encoding = enc;
  }

  if (this._encoding !== enc) throw new Error('can\'t switch encodings');

  var out = this._decoder.write(value);

  if (fin) {
    out += this._decoder.end();
  }

  return out;
};

module.exports = CipherBase;

/***/ }),

/***/ "./node_modules/circular-json/build/circular-json.node.js":
/*!****************************************************************!*\
  !*** ./node_modules/circular-json/build/circular-json.node.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
Copyright (C) 2013-2017 by Andrea Giammarchi - @WebReflection

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/
var // should be a not so common char
// possibly one JSON does not encode
// possibly one encodeURIComponent does not encode
// right now this char is '~' but this might change in the future
specialChar = '~',
    safeSpecialChar = '\\x' + ('0' + specialChar.charCodeAt(0).toString(16)).slice(-2),
    escapedSafeSpecialChar = '\\' + safeSpecialChar,
    specialCharRG = new RegExp(safeSpecialChar, 'g'),
    safeSpecialCharRG = new RegExp(escapedSafeSpecialChar, 'g'),
    safeStartWithSpecialCharRG = new RegExp('(?:^|([^\\\\]))' + escapedSafeSpecialChar),
    indexOf = [].indexOf || function (v) {
  for (var i = this.length; i-- && this[i] !== v;) {
    ;
  }

  return i;
},
    $String = String // there's no way to drop warnings in JSHint
// about new String ... well, I need that here!
// faked, and happy linter!
;

function generateReplacer(value, replacer, resolve) {
  var doNotIgnore = false,
      inspect = !!replacer,
      path = [],
      all = [value],
      seen = [value],
      mapp = [resolve ? specialChar : '[Circular]'],
      last = value,
      lvl = 1,
      i,
      fn;

  if (inspect) {
    fn = _typeof(replacer) === 'object' ? function (key, value) {
      return key !== '' && replacer.indexOf(key) < 0 ? void 0 : value;
    } : replacer;
  }

  return function (key, value) {
    // the replacer has rights to decide
    // if a new object should be returned
    // or if there's some key to drop
    // let's call it here rather than "too late"
    if (inspect) value = fn.call(this, key, value); // first pass should be ignored, since it's just the initial object

    if (doNotIgnore) {
      if (last !== this) {
        i = lvl - indexOf.call(all, this) - 1;
        lvl -= i;
        all.splice(lvl, all.length);
        path.splice(lvl - 1, path.length);
        last = this;
      } // console.log(lvl, key, path);


      if (_typeof(value) === 'object' && value) {
        // if object isn't referring to parent object, add to the
        // object path stack. Otherwise it is already there.
        if (indexOf.call(all, value) < 0) {
          all.push(last = value);
        }

        lvl = all.length;
        i = indexOf.call(seen, value);

        if (i < 0) {
          i = seen.push(value) - 1;

          if (resolve) {
            // key cannot contain specialChar but could be not a string
            path.push(('' + key).replace(specialCharRG, safeSpecialChar));
            mapp[i] = specialChar + path.join(specialChar);
          } else {
            mapp[i] = mapp[0];
          }
        } else {
          value = mapp[i];
        }
      } else {
        if (typeof value === 'string' && resolve) {
          // ensure no special char involved on deserialization
          // in this case only first char is important
          // no need to replace all value (better performance)
          value = value.replace(safeSpecialChar, escapedSafeSpecialChar).replace(specialChar, safeSpecialChar);
        }
      }
    } else {
      doNotIgnore = true;
    }

    return value;
  };
}

function retrieveFromPath(current, keys) {
  for (var i = 0, length = keys.length; i < length; current = current[// keys should be normalized back here
  keys[i++].replace(safeSpecialCharRG, specialChar)]) {
    ;
  }

  return current;
}

function generateReviver(reviver) {
  return function (key, value) {
    var isString = typeof value === 'string';

    if (isString && value.charAt(0) === specialChar) {
      return new $String(value.slice(1));
    }

    if (key === '') value = regenerate(value, value, {}); // again, only one needed, do not use the RegExp for this replacement
    // only keys need the RegExp

    if (isString) value = value.replace(safeStartWithSpecialCharRG, '$1' + specialChar).replace(escapedSafeSpecialChar, safeSpecialChar);
    return reviver ? reviver.call(this, key, value) : value;
  };
}

function regenerateArray(root, current, retrieve) {
  for (var i = 0, length = current.length; i < length; i++) {
    current[i] = regenerate(root, current[i], retrieve);
  }

  return current;
}

function regenerateObject(root, current, retrieve) {
  for (var key in current) {
    if (current.hasOwnProperty(key)) {
      current[key] = regenerate(root, current[key], retrieve);
    }
  }

  return current;
}

function regenerate(root, current, retrieve) {
  return current instanceof Array ? // fast Array reconstruction
  regenerateArray(root, current, retrieve) : current instanceof $String ? // root is an empty string
  current.length ? retrieve.hasOwnProperty(current) ? retrieve[current] : retrieve[current] = retrieveFromPath(root, current.split(specialChar)) : root : current instanceof Object ? // dedicated Object parser
  regenerateObject(root, current, retrieve) : // value as it is
  current;
}

var CircularJSON = {
  stringify: function stringify(value, replacer, space, doNotResolve) {
    return CircularJSON.parser.stringify(value, generateReplacer(value, replacer, !doNotResolve), space);
  },
  parse: function parse(text, reviver) {
    return CircularJSON.parser.parse(text, generateReviver(reviver));
  },
  // A parser should be an API 1:1 compatible with JSON
  // it should expose stringify and parse methods.
  // The default parser is the native JSON.
  parser: JSON
};
module.exports = CircularJSON;

/***/ }),

/***/ "./node_modules/core-util-is/lib/util.js":
/*!***********************************************!*\
  !*** ./node_modules/core-util-is/lib/util.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }

  return objectToString(arg) === '[object Array]';
}

exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}

exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}

exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}

exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}

exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}

exports.isString = isString;

function isSymbol(arg) {
  return _typeof(arg) === 'symbol';
}

exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}

exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}

exports.isRegExp = isRegExp;

function isObject(arg) {
  return _typeof(arg) === 'object' && arg !== null;
}

exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}

exports.isDate = isDate;

function isError(e) {
  return objectToString(e) === '[object Error]' || e instanceof Error;
}

exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}

exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || _typeof(arg) === 'symbol' || // ES6 symbol
  typeof arg === 'undefined';
}

exports.isPrimitive = isPrimitive;
exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/create-ecdh/browser.js":
/*!*********************************************!*\
  !*** ./node_modules/create-ecdh/browser.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var elliptic = __webpack_require__(/*! elliptic */ "./node_modules/elliptic/lib/elliptic.js");

var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

module.exports = function createECDH(curve) {
  return new ECDH(curve);
};

var aliases = {
  secp256k1: {
    name: 'secp256k1',
    byteLength: 32
  },
  secp224r1: {
    name: 'p224',
    byteLength: 28
  },
  prime256v1: {
    name: 'p256',
    byteLength: 32
  },
  prime192v1: {
    name: 'p192',
    byteLength: 24
  },
  ed25519: {
    name: 'ed25519',
    byteLength: 32
  },
  secp384r1: {
    name: 'p384',
    byteLength: 48
  },
  secp521r1: {
    name: 'p521',
    byteLength: 66
  }
};
aliases.p224 = aliases.secp224r1;
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
aliases.p384 = aliases.secp384r1;
aliases.p521 = aliases.secp521r1;

function ECDH(curve) {
  this.curveType = aliases[curve];

  if (!this.curveType) {
    this.curveType = {
      name: curve
    };
  }

  this.curve = new elliptic.ec(this.curveType.name); // eslint-disable-line new-cap

  this.keys = void 0;
}

ECDH.prototype.generateKeys = function (enc, format) {
  this.keys = this.curve.genKeyPair();
  return this.getPublicKey(enc, format);
};

ECDH.prototype.computeSecret = function (other, inenc, enc) {
  inenc = inenc || 'utf8';

  if (!Buffer.isBuffer(other)) {
    other = new Buffer(other, inenc);
  }

  var otherPub = this.curve.keyFromPublic(other).getPublic();
  var out = otherPub.mul(this.keys.getPrivate()).getX();
  return formatReturnValue(out, enc, this.curveType.byteLength);
};

ECDH.prototype.getPublicKey = function (enc, format) {
  var key = this.keys.getPublic(format === 'compressed', true);

  if (format === 'hybrid') {
    if (key[key.length - 1] % 2) {
      key[0] = 7;
    } else {
      key[0] = 6;
    }
  }

  return formatReturnValue(key, enc);
};

ECDH.prototype.getPrivateKey = function (enc) {
  return formatReturnValue(this.keys.getPrivate(), enc);
};

ECDH.prototype.setPublicKey = function (pub, enc) {
  enc = enc || 'utf8';

  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }

  this.keys._importPublic(pub);

  return this;
};

ECDH.prototype.setPrivateKey = function (priv, enc) {
  enc = enc || 'utf8';

  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }

  var _priv = new BN(priv);

  _priv = _priv.toString(16);
  this.keys = this.curve.genKeyPair();

  this.keys._importPrivate(_priv);

  return this;
};

function formatReturnValue(bn, enc, len) {
  if (!Array.isArray(bn)) {
    bn = bn.toArray();
  }

  var buf = new Buffer(bn);

  if (len && buf.length < len) {
    var zeros = new Buffer(len - buf.length);
    zeros.fill(0);
    buf = Buffer.concat([zeros, buf]);
  }

  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/create-hash/browser.js":
/*!*********************************************!*\
  !*** ./node_modules/create-hash/browser.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var MD5 = __webpack_require__(/*! md5.js */ "./node_modules/md5.js/index.js");

var RIPEMD160 = __webpack_require__(/*! ripemd160 */ "./node_modules/ripemd160/index.js");

var sha = __webpack_require__(/*! sha.js */ "./node_modules/sha.js/index.js");

var Base = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js");

function Hash(hash) {
  Base.call(this, 'digest');
  this._hash = hash;
}

inherits(Hash, Base);

Hash.prototype._update = function (data) {
  this._hash.update(data);
};

Hash.prototype._final = function () {
  return this._hash.digest();
};

module.exports = function createHash(alg) {
  alg = alg.toLowerCase();
  if (alg === 'md5') return new MD5();
  if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160();
  return new Hash(sha(alg));
};

/***/ }),

/***/ "./node_modules/create-hash/md5.js":
/*!*****************************************!*\
  !*** ./node_modules/create-hash/md5.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var MD5 = __webpack_require__(/*! md5.js */ "./node_modules/md5.js/index.js");

module.exports = function (buffer) {
  return new MD5().update(buffer).digest();
};

/***/ }),

/***/ "./node_modules/create-hmac/browser.js":
/*!*********************************************!*\
  !*** ./node_modules/create-hmac/browser.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var Legacy = __webpack_require__(/*! ./legacy */ "./node_modules/create-hmac/legacy.js");

var Base = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js");

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var md5 = __webpack_require__(/*! create-hash/md5 */ "./node_modules/create-hash/md5.js");

var RIPEMD160 = __webpack_require__(/*! ripemd160 */ "./node_modules/ripemd160/index.js");

var sha = __webpack_require__(/*! sha.js */ "./node_modules/sha.js/index.js");

var ZEROS = Buffer.alloc(128);

function Hmac(alg, key) {
  Base.call(this, 'digest');

  if (typeof key === 'string') {
    key = Buffer.from(key);
  }

  var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
  this._alg = alg;
  this._key = key;

  if (key.length > blocksize) {
    var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);
    key = hash.update(key).digest();
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize);
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
  var opad = this._opad = Buffer.allocUnsafe(blocksize);

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36;
    opad[i] = key[i] ^ 0x5C;
  }

  this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);

  this._hash.update(ipad);
}

inherits(Hmac, Base);

Hmac.prototype._update = function (data) {
  this._hash.update(data);
};

Hmac.prototype._final = function () {
  var h = this._hash.digest();

  var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg);
  return hash.update(this._opad).update(h).digest();
};

module.exports = function createHmac(alg, key) {
  alg = alg.toLowerCase();

  if (alg === 'rmd160' || alg === 'ripemd160') {
    return new Hmac('rmd160', key);
  }

  if (alg === 'md5') {
    return new Legacy(md5, key);
  }

  return new Hmac(alg, key);
};

/***/ }),

/***/ "./node_modules/create-hmac/legacy.js":
/*!********************************************!*\
  !*** ./node_modules/create-hmac/legacy.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var Base = __webpack_require__(/*! cipher-base */ "./node_modules/cipher-base/index.js");

var ZEROS = Buffer.alloc(128);
var blocksize = 64;

function Hmac(alg, key) {
  Base.call(this, 'digest');

  if (typeof key === 'string') {
    key = Buffer.from(key);
  }

  this._alg = alg;
  this._key = key;

  if (key.length > blocksize) {
    key = alg(key);
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize);
  }

  var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
  var opad = this._opad = Buffer.allocUnsafe(blocksize);

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36;
    opad[i] = key[i] ^ 0x5C;
  }

  this._hash = [ipad];
}

inherits(Hmac, Base);

Hmac.prototype._update = function (data) {
  this._hash.push(data);
};

Hmac.prototype._final = function () {
  var h = this._alg(Buffer.concat(this._hash));

  return this._alg(Buffer.concat([this._opad, h]));
};

module.exports = Hmac;

/***/ }),

/***/ "./node_modules/crypto-browserify/index.js":
/*!*************************************************!*\
  !*** ./node_modules/crypto-browserify/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = __webpack_require__(/*! randombytes */ "./node_modules/randombytes/browser.js");
exports.createHash = exports.Hash = __webpack_require__(/*! create-hash */ "./node_modules/create-hash/browser.js");
exports.createHmac = exports.Hmac = __webpack_require__(/*! create-hmac */ "./node_modules/create-hmac/browser.js");

var algos = __webpack_require__(/*! browserify-sign/algos */ "./node_modules/browserify-sign/algos.js");

var algoKeys = Object.keys(algos);
var hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys);

exports.getHashes = function () {
  return hashes;
};

var p = __webpack_require__(/*! pbkdf2 */ "./node_modules/pbkdf2/browser.js");

exports.pbkdf2 = p.pbkdf2;
exports.pbkdf2Sync = p.pbkdf2Sync;

var aes = __webpack_require__(/*! browserify-cipher */ "./node_modules/browserify-cipher/browser.js");

exports.Cipher = aes.Cipher;
exports.createCipher = aes.createCipher;
exports.Cipheriv = aes.Cipheriv;
exports.createCipheriv = aes.createCipheriv;
exports.Decipher = aes.Decipher;
exports.createDecipher = aes.createDecipher;
exports.Decipheriv = aes.Decipheriv;
exports.createDecipheriv = aes.createDecipheriv;
exports.getCiphers = aes.getCiphers;
exports.listCiphers = aes.listCiphers;

var dh = __webpack_require__(/*! diffie-hellman */ "./node_modules/diffie-hellman/browser.js");

exports.DiffieHellmanGroup = dh.DiffieHellmanGroup;
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;
exports.getDiffieHellman = dh.getDiffieHellman;
exports.createDiffieHellman = dh.createDiffieHellman;
exports.DiffieHellman = dh.DiffieHellman;

var sign = __webpack_require__(/*! browserify-sign */ "./node_modules/browserify-sign/browser/index.js");

exports.createSign = sign.createSign;
exports.Sign = sign.Sign;
exports.createVerify = sign.createVerify;
exports.Verify = sign.Verify;
exports.createECDH = __webpack_require__(/*! create-ecdh */ "./node_modules/create-ecdh/browser.js");

var publicEncrypt = __webpack_require__(/*! public-encrypt */ "./node_modules/public-encrypt/browser.js");

exports.publicEncrypt = publicEncrypt.publicEncrypt;
exports.privateEncrypt = publicEncrypt.privateEncrypt;
exports.publicDecrypt = publicEncrypt.publicDecrypt;
exports.privateDecrypt = publicEncrypt.privateDecrypt; // the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })

var rf = __webpack_require__(/*! randomfill */ "./node_modules/randomfill/browser.js");

exports.randomFill = rf.randomFill;
exports.randomFillSync = rf.randomFillSync;

exports.createCredentials = function () {
  throw new Error(['sorry, createCredentials is not implemented yet', 'we accept pull requests', 'https://github.com/crypto-browserify/crypto-browserify'].join('\n'));
};

exports.constants = {
  'DH_CHECK_P_NOT_SAFE_PRIME': 2,
  'DH_CHECK_P_NOT_PRIME': 1,
  'DH_UNABLE_TO_CHECK_GENERATOR': 4,
  'DH_NOT_SUITABLE_GENERATOR': 8,
  'NPN_ENABLED': 1,
  'ALPN_ENABLED': 1,
  'RSA_PKCS1_PADDING': 1,
  'RSA_SSLV23_PADDING': 2,
  'RSA_NO_PADDING': 3,
  'RSA_PKCS1_OAEP_PADDING': 4,
  'RSA_X931_PADDING': 5,
  'RSA_PKCS1_PSS_PADDING': 6,
  'POINT_CONVERSION_COMPRESSED': 2,
  'POINT_CONVERSION_UNCOMPRESSED': 4,
  'POINT_CONVERSION_HYBRID': 6
};

/***/ }),

/***/ "./node_modules/css-loader/lib/css-base.js":
/*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media " + item[2] + "{" + content + "}";
      } else {
        return content;
      }
    }).join("");
  }; // import a list of modules into the list


  list.i = function (modules, mediaQuery) {
    if (typeof modules === "string") modules = [[null, modules, ""]];
    var alreadyImportedModules = {};

    for (var i = 0; i < this.length; i++) {
      var id = this[i][0];
      if (typeof id === "number") alreadyImportedModules[id] = true;
    }

    for (i = 0; i < modules.length; i++) {
      var item = modules[i]; // skip already imported module
      // this implementation is not 100% perfect for weird media query combinations
      //  when a module is imported multiple times with different media queries.
      //  I hope this will never occur (Hey this way we have smaller bundles)

      if (typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
        if (mediaQuery && !item[2]) {
          item[2] = mediaQuery;
        } else if (mediaQuery) {
          item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
        }

        list.push(item);
      }
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || '';
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;
  return '/*# ' + data + ' */';
}

/***/ }),

/***/ "./node_modules/css-loader/lib/url/escape.js":
/*!***************************************************!*\
  !*** ./node_modules/css-loader/lib/url/escape.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function escape(url) {
  if (typeof url !== 'string') {
    return url;
  } // If url is already wrapped in quotes, remove them


  if (/^['"].*['"]$/.test(url)) {
    url = url.slice(1, -1);
  } // Should url be wrapped?
  // See https://drafts.csswg.org/css-values-3/#urls


  if (/["'() \t\n]/.test(url)) {
    return '"' + url.replace(/"/g, '\\"').replace(/\n/g, '\\n') + '"';
  }

  return url;
};

/***/ }),

/***/ "./node_modules/deepmerge/dist/es.js":
/*!*******************************************!*\
  !*** ./node_modules/deepmerge/dist/es.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var isMergeableObject = function isMergeableObject(value) {
  return isNonNullObject(value) && !isSpecial(value);
};

function isNonNullObject(value) {
  return !!value && _typeof(value) === 'object';
}

function isSpecial(value) {
  var stringValue = Object.prototype.toString.call(value);
  return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);
} // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25


var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
  return value.$$typeof === REACT_ELEMENT_TYPE;
}

function emptyTarget(val) {
  return Array.isArray(val) ? [] : {};
}

function cloneUnlessOtherwiseSpecified(value, options) {
  return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
}

function defaultArrayMerge(target, source, options) {
  return target.concat(source).map(function (element) {
    return cloneUnlessOtherwiseSpecified(element, options);
  });
}

function mergeObject(target, source, options) {
  var destination = {};

  if (options.isMergeableObject(target)) {
    Object.keys(target).forEach(function (key) {
      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    });
  }

  Object.keys(source).forEach(function (key) {
    if (!options.isMergeableObject(source[key]) || !target[key]) {
      destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
    } else {
      destination[key] = deepmerge(target[key], source[key], options);
    }
  });
  return destination;
}

function deepmerge(target, source, options) {
  options = options || {};
  options.arrayMerge = options.arrayMerge || defaultArrayMerge;
  options.isMergeableObject = options.isMergeableObject || isMergeableObject;
  var sourceIsArray = Array.isArray(source);
  var targetIsArray = Array.isArray(target);
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

  if (!sourceAndTargetTypesMatch) {
    return cloneUnlessOtherwiseSpecified(source, options);
  } else if (sourceIsArray) {
    return options.arrayMerge(target, source, options);
  } else {
    return mergeObject(target, source, options);
  }
}

deepmerge.all = function deepmergeAll(array, options) {
  if (!Array.isArray(array)) {
    throw new Error('first argument should be an array');
  }

  return array.reduce(function (prev, next) {
    return deepmerge(prev, next, options);
  }, {});
};

var deepmerge_1 = deepmerge;
/* harmony default export */ __webpack_exports__["default"] = (deepmerge_1);

/***/ }),

/***/ "./node_modules/des.js/lib/des.js":
/*!****************************************!*\
  !*** ./node_modules/des.js/lib/des.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.utils = __webpack_require__(/*! ./des/utils */ "./node_modules/des.js/lib/des/utils.js");
exports.Cipher = __webpack_require__(/*! ./des/cipher */ "./node_modules/des.js/lib/des/cipher.js");
exports.DES = __webpack_require__(/*! ./des/des */ "./node_modules/des.js/lib/des/des.js");
exports.CBC = __webpack_require__(/*! ./des/cbc */ "./node_modules/des.js/lib/des/cbc.js");
exports.EDE = __webpack_require__(/*! ./des/ede */ "./node_modules/des.js/lib/des/ede.js");

/***/ }),

/***/ "./node_modules/des.js/lib/des/cbc.js":
/*!********************************************!*\
  !*** ./node_modules/des.js/lib/des/cbc.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var proto = {};

function CBCState(iv) {
  assert.equal(iv.length, 8, 'Invalid IV length');
  this.iv = new Array(8);

  for (var i = 0; i < this.iv.length; i++) {
    this.iv[i] = iv[i];
  }
}

function instantiate(Base) {
  function CBC(options) {
    Base.call(this, options);

    this._cbcInit();
  }

  inherits(CBC, Base);
  var keys = Object.keys(proto);

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    CBC.prototype[key] = proto[key];
  }

  CBC.create = function create(options) {
    return new CBC(options);
  };

  return CBC;
}

exports.instantiate = instantiate;

proto._cbcInit = function _cbcInit() {
  var state = new CBCState(this.options.iv);
  this._cbcState = state;
};

proto._update = function _update(inp, inOff, out, outOff) {
  var state = this._cbcState;
  var superProto = this.constructor.super_.prototype;
  var iv = state.iv;

  if (this.type === 'encrypt') {
    for (var i = 0; i < this.blockSize; i++) {
      iv[i] ^= inp[inOff + i];
    }

    superProto._update.call(this, iv, 0, out, outOff);

    for (var i = 0; i < this.blockSize; i++) {
      iv[i] = out[outOff + i];
    }
  } else {
    superProto._update.call(this, inp, inOff, out, outOff);

    for (var i = 0; i < this.blockSize; i++) {
      out[outOff + i] ^= iv[i];
    }

    for (var i = 0; i < this.blockSize; i++) {
      iv[i] = inp[inOff + i];
    }
  }
};

/***/ }),

/***/ "./node_modules/des.js/lib/des/cipher.js":
/*!***********************************************!*\
  !*** ./node_modules/des.js/lib/des/cipher.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

function Cipher(options) {
  this.options = options;
  this.type = this.options.type;
  this.blockSize = 8;

  this._init();

  this.buffer = new Array(this.blockSize);
  this.bufferOff = 0;
}

module.exports = Cipher;

Cipher.prototype._init = function _init() {// Might be overrided
};

Cipher.prototype.update = function update(data) {
  if (data.length === 0) return [];
  if (this.type === 'decrypt') return this._updateDecrypt(data);else return this._updateEncrypt(data);
};

Cipher.prototype._buffer = function _buffer(data, off) {
  // Append data to buffer
  var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);

  for (var i = 0; i < min; i++) {
    this.buffer[this.bufferOff + i] = data[off + i];
  }

  this.bufferOff += min; // Shift next

  return min;
};

Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
  this._update(this.buffer, 0, out, off);

  this.bufferOff = 0;
  return this.blockSize;
};

Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
  var inputOff = 0;
  var outputOff = 0;
  var count = (this.bufferOff + data.length) / this.blockSize | 0;
  var out = new Array(count * this.blockSize);

  if (this.bufferOff !== 0) {
    inputOff += this._buffer(data, inputOff);
    if (this.bufferOff === this.buffer.length) outputOff += this._flushBuffer(out, outputOff);
  } // Write blocks


  var max = data.length - (data.length - inputOff) % this.blockSize;

  for (; inputOff < max; inputOff += this.blockSize) {
    this._update(data, inputOff, out, outputOff);

    outputOff += this.blockSize;
  } // Queue rest


  for (; inputOff < data.length; inputOff++, this.bufferOff++) {
    this.buffer[this.bufferOff] = data[inputOff];
  }

  return out;
};

Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
  var inputOff = 0;
  var outputOff = 0;
  var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
  var out = new Array(count * this.blockSize); // TODO(indutny): optimize it, this is far from optimal

  for (; count > 0; count--) {
    inputOff += this._buffer(data, inputOff);
    outputOff += this._flushBuffer(out, outputOff);
  } // Buffer rest of the input


  inputOff += this._buffer(data, inputOff);
  return out;
};

Cipher.prototype.final = function final(buffer) {
  var first;
  if (buffer) first = this.update(buffer);
  var last;
  if (this.type === 'encrypt') last = this._finalEncrypt();else last = this._finalDecrypt();
  if (first) return first.concat(last);else return last;
};

Cipher.prototype._pad = function _pad(buffer, off) {
  if (off === 0) return false;

  while (off < buffer.length) {
    buffer[off++] = 0;
  }

  return true;
};

Cipher.prototype._finalEncrypt = function _finalEncrypt() {
  if (!this._pad(this.buffer, this.bufferOff)) return [];
  var out = new Array(this.blockSize);

  this._update(this.buffer, 0, out, 0);

  return out;
};

Cipher.prototype._unpad = function _unpad(buffer) {
  return buffer;
};

Cipher.prototype._finalDecrypt = function _finalDecrypt() {
  assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
  var out = new Array(this.blockSize);

  this._flushBuffer(out, 0);

  return this._unpad(out);
};

/***/ }),

/***/ "./node_modules/des.js/lib/des/des.js":
/*!********************************************!*\
  !*** ./node_modules/des.js/lib/des/des.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var des = __webpack_require__(/*! ../des */ "./node_modules/des.js/lib/des.js");

var utils = des.utils;
var Cipher = des.Cipher;

function DESState() {
  this.tmp = new Array(2);
  this.keys = null;
}

function DES(options) {
  Cipher.call(this, options);
  var state = new DESState();
  this._desState = state;
  this.deriveKeys(state, options.key);
}

inherits(DES, Cipher);
module.exports = DES;

DES.create = function create(options) {
  return new DES(options);
};

var shiftTable = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1];

DES.prototype.deriveKeys = function deriveKeys(state, key) {
  state.keys = new Array(16 * 2);
  assert.equal(key.length, this.blockSize, 'Invalid key length');
  var kL = utils.readUInt32BE(key, 0);
  var kR = utils.readUInt32BE(key, 4);
  utils.pc1(kL, kR, state.tmp, 0);
  kL = state.tmp[0];
  kR = state.tmp[1];

  for (var i = 0; i < state.keys.length; i += 2) {
    var shift = shiftTable[i >>> 1];
    kL = utils.r28shl(kL, shift);
    kR = utils.r28shl(kR, shift);
    utils.pc2(kL, kR, state.keys, i);
  }
};

DES.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._desState;
  var l = utils.readUInt32BE(inp, inOff);
  var r = utils.readUInt32BE(inp, inOff + 4); // Initial Permutation

  utils.ip(l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];
  if (this.type === 'encrypt') this._encrypt(state, l, r, state.tmp, 0);else this._decrypt(state, l, r, state.tmp, 0);
  l = state.tmp[0];
  r = state.tmp[1];
  utils.writeUInt32BE(out, l, outOff);
  utils.writeUInt32BE(out, r, outOff + 4);
};

DES.prototype._pad = function _pad(buffer, off) {
  var value = buffer.length - off;

  for (var i = off; i < buffer.length; i++) {
    buffer[i] = value;
  }

  return true;
};

DES.prototype._unpad = function _unpad(buffer) {
  var pad = buffer[buffer.length - 1];

  for (var i = buffer.length - pad; i < buffer.length; i++) {
    assert.equal(buffer[i], pad);
  }

  return buffer.slice(0, buffer.length - pad);
};

DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
  var l = lStart;
  var r = rStart; // Apply f() x16 times

  for (var i = 0; i < state.keys.length; i += 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1]; // f(r, k)

    utils.expand(r, state.tmp, 0);
    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);
    var t = r;
    r = (l ^ f) >>> 0;
    l = t;
  } // Reverse Initial Permutation


  utils.rip(r, l, out, off);
};

DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
  var l = rStart;
  var r = lStart; // Apply f() x16 times

  for (var i = state.keys.length - 2; i >= 0; i -= 2) {
    var keyL = state.keys[i];
    var keyR = state.keys[i + 1]; // f(r, k)

    utils.expand(l, state.tmp, 0);
    keyL ^= state.tmp[0];
    keyR ^= state.tmp[1];
    var s = utils.substitute(keyL, keyR);
    var f = utils.permute(s);
    var t = l;
    l = (r ^ f) >>> 0;
    r = t;
  } // Reverse Initial Permutation


  utils.rip(l, r, out, off);
};

/***/ }),

/***/ "./node_modules/des.js/lib/des/ede.js":
/*!********************************************!*\
  !*** ./node_modules/des.js/lib/des/ede.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var des = __webpack_require__(/*! ../des */ "./node_modules/des.js/lib/des.js");

var Cipher = des.Cipher;
var DES = des.DES;

function EDEState(type, key) {
  assert.equal(key.length, 24, 'Invalid key length');
  var k1 = key.slice(0, 8);
  var k2 = key.slice(8, 16);
  var k3 = key.slice(16, 24);

  if (type === 'encrypt') {
    this.ciphers = [DES.create({
      type: 'encrypt',
      key: k1
    }), DES.create({
      type: 'decrypt',
      key: k2
    }), DES.create({
      type: 'encrypt',
      key: k3
    })];
  } else {
    this.ciphers = [DES.create({
      type: 'decrypt',
      key: k3
    }), DES.create({
      type: 'encrypt',
      key: k2
    }), DES.create({
      type: 'decrypt',
      key: k1
    })];
  }
}

function EDE(options) {
  Cipher.call(this, options);
  var state = new EDEState(this.type, this.options.key);
  this._edeState = state;
}

inherits(EDE, Cipher);
module.exports = EDE;

EDE.create = function create(options) {
  return new EDE(options);
};

EDE.prototype._update = function _update(inp, inOff, out, outOff) {
  var state = this._edeState;

  state.ciphers[0]._update(inp, inOff, out, outOff);

  state.ciphers[1]._update(out, outOff, out, outOff);

  state.ciphers[2]._update(out, outOff, out, outOff);
};

EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

/***/ }),

/***/ "./node_modules/des.js/lib/des/utils.js":
/*!**********************************************!*\
  !*** ./node_modules/des.js/lib/des/utils.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.readUInt32BE = function readUInt32BE(bytes, off) {
  var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
  return res >>> 0;
};

exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
  bytes[0 + off] = value >>> 24;
  bytes[1 + off] = value >>> 16 & 0xff;
  bytes[2 + off] = value >>> 8 & 0xff;
  bytes[3 + off] = value & 0xff;
};

exports.ip = function ip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= inR >>> j + i & 1;
    }

    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= inL >>> j + i & 1;
    }
  }

  for (var i = 6; i >= 0; i -= 2) {
    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= inR >>> j + i & 1;
    }

    for (var j = 1; j <= 25; j += 8) {
      outR <<= 1;
      outR |= inL >>> j + i & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.rip = function rip(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;

  for (var i = 0; i < 4; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outL <<= 1;
      outL |= inR >>> j + i & 1;
      outL <<= 1;
      outL |= inL >>> j + i & 1;
    }
  }

  for (var i = 4; i < 8; i++) {
    for (var j = 24; j >= 0; j -= 8) {
      outR <<= 1;
      outR |= inR >>> j + i & 1;
      outR <<= 1;
      outR |= inL >>> j + i & 1;
    }
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.pc1 = function pc1(inL, inR, out, off) {
  var outL = 0;
  var outR = 0; // 7, 15, 23, 31, 39, 47, 55, 63
  // 6, 14, 22, 30, 39, 47, 55, 63
  // 5, 13, 21, 29, 39, 47, 55, 63
  // 4, 12, 20, 28

  for (var i = 7; i >= 5; i--) {
    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= inR >> j + i & 1;
    }

    for (var j = 0; j <= 24; j += 8) {
      outL <<= 1;
      outL |= inL >> j + i & 1;
    }
  }

  for (var j = 0; j <= 24; j += 8) {
    outL <<= 1;
    outL |= inR >> j + i & 1;
  } // 1, 9, 17, 25, 33, 41, 49, 57
  // 2, 10, 18, 26, 34, 42, 50, 58
  // 3, 11, 19, 27, 35, 43, 51, 59
  // 36, 44, 52, 60


  for (var i = 1; i <= 3; i++) {
    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= inR >> j + i & 1;
    }

    for (var j = 0; j <= 24; j += 8) {
      outR <<= 1;
      outR |= inL >> j + i & 1;
    }
  }

  for (var j = 0; j <= 24; j += 8) {
    outR <<= 1;
    outR |= inL >> j + i & 1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.r28shl = function r28shl(num, shift) {
  return num << shift & 0xfffffff | num >>> 28 - shift;
};

var pc2table = [// inL => outL
14, 11, 17, 4, 27, 23, 25, 0, 13, 22, 7, 18, 5, 9, 16, 24, 2, 20, 12, 21, 1, 8, 15, 26, // inR => outR
15, 4, 25, 19, 9, 1, 26, 16, 5, 11, 23, 8, 12, 7, 17, 0, 22, 3, 10, 14, 6, 20, 27, 24];

exports.pc2 = function pc2(inL, inR, out, off) {
  var outL = 0;
  var outR = 0;
  var len = pc2table.length >>> 1;

  for (var i = 0; i < len; i++) {
    outL <<= 1;
    outL |= inL >>> pc2table[i] & 0x1;
  }

  for (var i = len; i < pc2table.length; i++) {
    outR <<= 1;
    outR |= inR >>> pc2table[i] & 0x1;
  }

  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

exports.expand = function expand(r, out, off) {
  var outL = 0;
  var outR = 0;
  outL = (r & 1) << 5 | r >>> 27;

  for (var i = 23; i >= 15; i -= 4) {
    outL <<= 6;
    outL |= r >>> i & 0x3f;
  }

  for (var i = 11; i >= 3; i -= 4) {
    outR |= r >>> i & 0x3f;
    outR <<= 6;
  }

  outR |= (r & 0x1f) << 1 | r >>> 31;
  out[off + 0] = outL >>> 0;
  out[off + 1] = outR >>> 0;
};

var sTable = [14, 0, 4, 15, 13, 7, 1, 4, 2, 14, 15, 2, 11, 13, 8, 1, 3, 10, 10, 6, 6, 12, 12, 11, 5, 9, 9, 5, 0, 3, 7, 8, 4, 15, 1, 12, 14, 8, 8, 2, 13, 4, 6, 9, 2, 1, 11, 7, 15, 5, 12, 11, 9, 3, 7, 14, 3, 10, 10, 0, 5, 6, 0, 13, 15, 3, 1, 13, 8, 4, 14, 7, 6, 15, 11, 2, 3, 8, 4, 14, 9, 12, 7, 0, 2, 1, 13, 10, 12, 6, 0, 9, 5, 11, 10, 5, 0, 13, 14, 8, 7, 10, 11, 1, 10, 3, 4, 15, 13, 4, 1, 2, 5, 11, 8, 6, 12, 7, 6, 12, 9, 0, 3, 5, 2, 14, 15, 9, 10, 13, 0, 7, 9, 0, 14, 9, 6, 3, 3, 4, 15, 6, 5, 10, 1, 2, 13, 8, 12, 5, 7, 14, 11, 12, 4, 11, 2, 15, 8, 1, 13, 1, 6, 10, 4, 13, 9, 0, 8, 6, 15, 9, 3, 8, 0, 7, 11, 4, 1, 15, 2, 14, 12, 3, 5, 11, 10, 5, 14, 2, 7, 12, 7, 13, 13, 8, 14, 11, 3, 5, 0, 6, 6, 15, 9, 0, 10, 3, 1, 4, 2, 7, 8, 2, 5, 12, 11, 1, 12, 10, 4, 14, 15, 9, 10, 3, 6, 15, 9, 0, 0, 6, 12, 10, 11, 1, 7, 13, 13, 8, 15, 9, 1, 4, 3, 5, 14, 11, 5, 12, 2, 7, 8, 2, 4, 14, 2, 14, 12, 11, 4, 2, 1, 12, 7, 4, 10, 7, 11, 13, 6, 1, 8, 5, 5, 0, 3, 15, 15, 10, 13, 3, 0, 9, 14, 8, 9, 6, 4, 11, 2, 8, 1, 12, 11, 7, 10, 1, 13, 14, 7, 2, 8, 13, 15, 6, 9, 15, 12, 0, 5, 9, 6, 10, 3, 4, 0, 5, 14, 3, 12, 10, 1, 15, 10, 4, 15, 2, 9, 7, 2, 12, 6, 9, 8, 5, 0, 6, 13, 1, 3, 13, 4, 14, 14, 0, 7, 11, 5, 3, 11, 8, 9, 4, 14, 3, 15, 2, 5, 12, 2, 9, 8, 5, 12, 15, 3, 10, 7, 11, 0, 14, 4, 1, 10, 7, 1, 6, 13, 0, 11, 8, 6, 13, 4, 13, 11, 0, 2, 11, 14, 7, 15, 4, 0, 9, 8, 1, 13, 10, 3, 14, 12, 3, 9, 5, 7, 12, 5, 2, 10, 15, 6, 8, 1, 6, 1, 6, 4, 11, 11, 13, 13, 8, 12, 1, 3, 4, 7, 10, 14, 7, 10, 9, 15, 5, 6, 0, 8, 15, 0, 14, 5, 2, 9, 3, 2, 12, 13, 1, 2, 15, 8, 13, 4, 8, 6, 10, 15, 3, 11, 7, 1, 4, 10, 12, 9, 5, 3, 6, 14, 11, 5, 0, 0, 14, 12, 9, 7, 2, 7, 2, 11, 1, 4, 14, 1, 7, 9, 4, 12, 10, 14, 8, 2, 13, 0, 15, 6, 12, 10, 9, 13, 0, 15, 3, 3, 5, 5, 6, 8, 11];

exports.substitute = function substitute(inL, inR) {
  var out = 0;

  for (var i = 0; i < 4; i++) {
    var b = inL >>> 18 - i * 6 & 0x3f;
    var sb = sTable[i * 0x40 + b];
    out <<= 4;
    out |= sb;
  }

  for (var i = 0; i < 4; i++) {
    var b = inR >>> 18 - i * 6 & 0x3f;
    var sb = sTable[4 * 0x40 + i * 0x40 + b];
    out <<= 4;
    out |= sb;
  }

  return out >>> 0;
};

var permuteTable = [16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7];

exports.permute = function permute(num) {
  var out = 0;

  for (var i = 0; i < permuteTable.length; i++) {
    out <<= 1;
    out |= num >>> permuteTable[i] & 0x1;
  }

  return out >>> 0;
};

exports.padSplit = function padSplit(num, size, group) {
  var str = num.toString(2);

  while (str.length < size) {
    str = '0' + str;
  }

  var out = [];

  for (var i = 0; i < size; i += group) {
    out.push(str.slice(i, i + group));
  }

  return out.join(' ');
};

/***/ }),

/***/ "./node_modules/diffie-hellman/browser.js":
/*!************************************************!*\
  !*** ./node_modules/diffie-hellman/browser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var generatePrime = __webpack_require__(/*! ./lib/generatePrime */ "./node_modules/diffie-hellman/lib/generatePrime.js");

var primes = __webpack_require__(/*! ./lib/primes.json */ "./node_modules/diffie-hellman/lib/primes.json");

var DH = __webpack_require__(/*! ./lib/dh */ "./node_modules/diffie-hellman/lib/dh.js");

function getDiffieHellman(mod) {
  var prime = new Buffer(primes[mod].prime, 'hex');
  var gen = new Buffer(primes[mod].gen, 'hex');
  return new DH(prime, gen);
}

var ENCODINGS = {
  'binary': true,
  'hex': true,
  'base64': true
};

function createDiffieHellman(prime, enc, generator, genc) {
  if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) {
    return createDiffieHellman(prime, 'binary', enc, generator);
  }

  enc = enc || 'binary';
  genc = genc || 'binary';
  generator = generator || new Buffer([2]);

  if (!Buffer.isBuffer(generator)) {
    generator = new Buffer(generator, genc);
  }

  if (typeof prime === 'number') {
    return new DH(generatePrime(prime, generator), generator, true);
  }

  if (!Buffer.isBuffer(prime)) {
    prime = new Buffer(prime, enc);
  }

  return new DH(prime, generator, true);
}

exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/diffie-hellman/lib/dh.js":
/*!***********************************************!*\
  !*** ./node_modules/diffie-hellman/lib/dh.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

var MillerRabin = __webpack_require__(/*! miller-rabin */ "./node_modules/miller-rabin/lib/mr.js");

var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);

var primes = __webpack_require__(/*! ./generatePrime */ "./node_modules/diffie-hellman/lib/generatePrime.js");

var randomBytes = __webpack_require__(/*! randombytes */ "./node_modules/randombytes/browser.js");

module.exports = DH;

function setPublicKey(pub, enc) {
  enc = enc || 'utf8';

  if (!Buffer.isBuffer(pub)) {
    pub = new Buffer(pub, enc);
  }

  this._pub = new BN(pub);
  return this;
}

function setPrivateKey(priv, enc) {
  enc = enc || 'utf8';

  if (!Buffer.isBuffer(priv)) {
    priv = new Buffer(priv, enc);
  }

  this._priv = new BN(priv);
  return this;
}

var primeCache = {};

function checkPrime(prime, generator) {
  var gen = generator.toString('hex');
  var hex = [gen, prime.toString(16)].join('_');

  if (hex in primeCache) {
    return primeCache[hex];
  }

  var error = 0;

  if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
    //not a prime so +1
    error += 1;

    if (gen === '02' || gen === '05') {
      // we'd be able to check the generator
      // it would fail so +8
      error += 8;
    } else {
      //we wouldn't be able to test the generator
      // so +4
      error += 4;
    }

    primeCache[hex] = error;
    return error;
  }

  if (!millerRabin.test(prime.shrn(1))) {
    //not a safe prime
    error += 2;
  }

  var rem;

  switch (gen) {
    case '02':
      if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) {
        // unsuidable generator
        error += 8;
      }

      break;

    case '05':
      rem = prime.mod(TEN);

      if (rem.cmp(THREE) && rem.cmp(SEVEN)) {
        // prime mod 10 needs to equal 3 or 7
        error += 8;
      }

      break;

    default:
      error += 4;
  }

  primeCache[hex] = error;
  return error;
}

function DH(prime, generator, malleable) {
  this.setGenerator(generator);
  this.__prime = new BN(prime);
  this._prime = BN.mont(this.__prime);
  this._primeLen = prime.length;
  this._pub = undefined;
  this._priv = undefined;
  this._primeCode = undefined;

  if (malleable) {
    this.setPublicKey = setPublicKey;
    this.setPrivateKey = setPrivateKey;
  } else {
    this._primeCode = 8;
  }
}

Object.defineProperty(DH.prototype, 'verifyError', {
  enumerable: true,
  get: function get() {
    if (typeof this._primeCode !== 'number') {
      this._primeCode = checkPrime(this.__prime, this.__gen);
    }

    return this._primeCode;
  }
});

DH.prototype.generateKeys = function () {
  if (!this._priv) {
    this._priv = new BN(randomBytes(this._primeLen));
  }

  this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
  return this.getPublicKey();
};

DH.prototype.computeSecret = function (other) {
  other = new BN(other);
  other = other.toRed(this._prime);
  var secret = other.redPow(this._priv).fromRed();
  var out = new Buffer(secret.toArray());
  var prime = this.getPrime();

  if (out.length < prime.length) {
    var front = new Buffer(prime.length - out.length);
    front.fill(0);
    out = Buffer.concat([front, out]);
  }

  return out;
};

DH.prototype.getPublicKey = function getPublicKey(enc) {
  return formatReturnValue(this._pub, enc);
};

DH.prototype.getPrivateKey = function getPrivateKey(enc) {
  return formatReturnValue(this._priv, enc);
};

DH.prototype.getPrime = function (enc) {
  return formatReturnValue(this.__prime, enc);
};

DH.prototype.getGenerator = function (enc) {
  return formatReturnValue(this._gen, enc);
};

DH.prototype.setGenerator = function (gen, enc) {
  enc = enc || 'utf8';

  if (!Buffer.isBuffer(gen)) {
    gen = new Buffer(gen, enc);
  }

  this.__gen = gen;
  this._gen = new BN(gen);
  return this;
};

function formatReturnValue(bn, enc) {
  var buf = new Buffer(bn.toArray());

  if (!enc) {
    return buf;
  } else {
    return buf.toString(enc);
  }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/diffie-hellman/lib/generatePrime.js":
/*!**********************************************************!*\
  !*** ./node_modules/diffie-hellman/lib/generatePrime.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var randomBytes = __webpack_require__(/*! randombytes */ "./node_modules/randombytes/browser.js");

module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;

var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

var TWENTYFOUR = new BN(24);

var MillerRabin = __webpack_require__(/*! miller-rabin */ "./node_modules/miller-rabin/lib/mr.js");

var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;

function _getPrimes() {
  if (primes !== null) return primes;
  var limit = 0x100000;
  var res = [];
  res[0] = 2;

  for (var i = 1, k = 3; k < limit; k += 2) {
    var sqrt = Math.ceil(Math.sqrt(k));

    for (var j = 0; j < i && res[j] <= sqrt; j++) {
      if (k % res[j] === 0) break;
    }

    if (i !== j && res[j] <= sqrt) continue;
    res[i++] = k;
  }

  primes = res;
  return res;
}

function simpleSieve(p) {
  var primes = _getPrimes();

  for (var i = 0; i < primes.length; i++) {
    if (p.modn(primes[i]) === 0) {
      if (p.cmpn(primes[i]) === 0) {
        return true;
      } else {
        return false;
      }
    }
  }

  return true;
}

function fermatTest(p) {
  var red = BN.mont(p);
  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}

function findPrime(bits, gen) {
  if (bits < 16) {
    // this is what openssl does
    if (gen === 2 || gen === 5) {
      return new BN([0x8c, 0x7b]);
    } else {
      return new BN([0x8c, 0x27]);
    }
  }

  gen = new BN(gen);
  var num, n2;

  while (true) {
    num = new BN(randomBytes(Math.ceil(bits / 8)));

    while (num.bitLength() > bits) {
      num.ishrn(1);
    }

    if (num.isEven()) {
      num.iadd(ONE);
    }

    if (!num.testn(1)) {
      num.iadd(TWO);
    }

    if (!gen.cmp(TWO)) {
      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {
        num.iadd(FOUR);
      }
    } else if (!gen.cmp(FIVE)) {
      while (num.mod(TEN).cmp(THREE)) {
        num.iadd(FOUR);
      }
    }

    n2 = num.shrn(1);

    if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) {
      return num;
    }
  }
}

/***/ }),

/***/ "./node_modules/diffie-hellman/lib/primes.json":
/*!*****************************************************!*\
  !*** ./node_modules/diffie-hellman/lib/primes.json ***!
  \*****************************************************/
/*! exports provided: modp1, modp2, modp5, modp14, modp15, modp16, modp17, modp18, default */
/***/ (function(module) {

module.exports = {"modp1":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff"},"modp2":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff"},"modp5":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff"},"modp14":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff"},"modp15":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff"},"modp16":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff"},"modp17":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff"},"modp18":{"gen":"02","prime":"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff"}};

/***/ }),

/***/ "./node_modules/dijkstrajs/dijkstra.js":
/*!*********************************************!*\
  !*** ./node_modules/dijkstrajs/dijkstra.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/******************************************************************************
 * Created 2008-08-19.
 *
 * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.
 *
 * Copyright (C) 2008
 *   Wyatt Baldwin <self@wyattbaldwin.com>
 *   All rights reserved
 *
 * Licensed under the MIT license.
 *
 *   http://www.opensource.org/licenses/mit-license.php
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *****************************************************************************/

var dijkstra = {
  single_source_shortest_paths: function single_source_shortest_paths(graph, s, d) {
    // Predecessor map for each node that has been encountered.
    // node ID => predecessor node ID
    var predecessors = {}; // Costs of shortest paths from s to all nodes encountered.
    // node ID => cost

    var costs = {};
    costs[s] = 0; // Costs of shortest paths from s to all nodes encountered; differs from
    // `costs` in that it provides easy access to the node that currently has
    // the known shortest path from s.
    // XXX: Do we actually need both `costs` and `open`?

    var open = dijkstra.PriorityQueue.make();
    open.push(s, 0);
    var closest, u, v, cost_of_s_to_u, adjacent_nodes, cost_of_e, cost_of_s_to_u_plus_cost_of_e, cost_of_s_to_v, first_visit;

    while (!open.empty()) {
      // In the nodes remaining in graph that have a known cost from s,
      // find the node, u, that currently has the shortest path from s.
      closest = open.pop();
      u = closest.value;
      cost_of_s_to_u = closest.cost; // Get nodes adjacent to u...

      adjacent_nodes = graph[u] || {}; // ...and explore the edges that connect u to those nodes, updating
      // the cost of the shortest paths to any or all of those nodes as
      // necessary. v is the node across the current edge from u.

      for (v in adjacent_nodes) {
        if (adjacent_nodes.hasOwnProperty(v)) {
          // Get the cost of the edge running from u to v.
          cost_of_e = adjacent_nodes[v]; // Cost of s to u plus the cost of u to v across e--this is *a*
          // cost from s to v that may or may not be less than the current
          // known cost to v.

          cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e; // If we haven't visited v yet OR if the current known cost from s to
          // v is greater than the new cost we just found (cost of s to u plus
          // cost of u to v across e), update v's cost in the cost list and
          // update v's predecessor in the predecessor list (it's now u).

          cost_of_s_to_v = costs[v];
          first_visit = typeof costs[v] === 'undefined';

          if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {
            costs[v] = cost_of_s_to_u_plus_cost_of_e;
            open.push(v, cost_of_s_to_u_plus_cost_of_e);
            predecessors[v] = u;
          }
        }
      }
    }

    if (typeof d !== 'undefined' && typeof costs[d] === 'undefined') {
      var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');
      throw new Error(msg);
    }

    return predecessors;
  },
  extract_shortest_path_from_predecessor_list: function extract_shortest_path_from_predecessor_list(predecessors, d) {
    var nodes = [];
    var u = d;
    var predecessor;

    while (u) {
      nodes.push(u);
      predecessor = predecessors[u];
      u = predecessors[u];
    }

    nodes.reverse();
    return nodes;
  },
  find_path: function find_path(graph, s, d) {
    var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);
    return dijkstra.extract_shortest_path_from_predecessor_list(predecessors, d);
  },

  /**
   * A very naive priority queue implementation.
   */
  PriorityQueue: {
    make: function make(opts) {
      var T = dijkstra.PriorityQueue,
          t = {},
          key;
      opts = opts || {};

      for (key in T) {
        if (T.hasOwnProperty(key)) {
          t[key] = T[key];
        }
      }

      t.queue = [];
      t.sorter = opts.sorter || T.default_sorter;
      return t;
    },
    default_sorter: function default_sorter(a, b) {
      return a.cost - b.cost;
    },

    /**
     * Add a new item to the queue and ensure the highest priority element
     * is at the front of the queue.
     */
    push: function push(value, cost) {
      var item = {
        value: value,
        cost: cost
      };
      this.queue.push(item);
      this.queue.sort(this.sorter);
    },

    /**
     * Return the highest priority element in the queue.
     */
    pop: function pop() {
      return this.queue.shift();
    },
    empty: function empty() {
      return this.queue.length === 0;
    }
  }
}; // node.js module exports

if (true) {
  module.exports = dijkstra;
}

/***/ }),

/***/ "./node_modules/dnode-protocol/index.js":
/*!**********************************************!*\
  !*** ./node_modules/dnode-protocol/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var EventEmitter = __webpack_require__(/*! events */ "./node_modules/events/events.js").EventEmitter;

var scrubber = __webpack_require__(/*! ./lib/scrub */ "./node_modules/dnode-protocol/lib/scrub.js");

var objectKeys = __webpack_require__(/*! ./lib/keys */ "./node_modules/dnode-protocol/lib/keys.js");

var forEach = __webpack_require__(/*! ./lib/foreach */ "./node_modules/dnode-protocol/lib/foreach.js");

var isEnumerable = __webpack_require__(/*! ./lib/is_enum */ "./node_modules/dnode-protocol/lib/is_enum.js");

module.exports = function (cons, opts) {
  return new Proto(cons, opts);
};

(function () {
  // browsers bleh
  for (var key in EventEmitter.prototype) {
    Proto.prototype[key] = EventEmitter.prototype[key];
  }
})();

function Proto(cons, opts) {
  var self = this;
  EventEmitter.call(self);
  if (!opts) opts = {};
  self.remote = {};
  self.callbacks = {
    local: [],
    remote: []
  };
  self.wrap = opts.wrap;
  self.unwrap = opts.unwrap;
  self.scrubber = scrubber(self.callbacks.local);

  if (typeof cons === 'function') {
    self.instance = new cons(self.remote, self);
  } else self.instance = cons || {};
}

Proto.prototype.start = function () {
  this.request('methods', [this.instance]);
};

Proto.prototype.cull = function (id) {
  delete this.callbacks.remote[id];
  this.emit('request', {
    method: 'cull',
    arguments: [id]
  });
};

Proto.prototype.request = function (method, args) {
  var scrub = this.scrubber.scrub(args);
  this.emit('request', {
    method: method,
    arguments: scrub.arguments,
    callbacks: scrub.callbacks,
    links: scrub.links
  });
};

Proto.prototype.handle = function (req) {
  var self = this;
  var args = self.scrubber.unscrub(req, function (id) {
    if (self.callbacks.remote[id] === undefined) {
      // create a new function only if one hasn't already been created
      // for a particular id
      var cb = function cb() {
        self.request(id, [].slice.apply(arguments));
      };

      self.callbacks.remote[id] = self.wrap ? self.wrap(cb, id) : cb;
      return cb;
    }

    return self.unwrap ? self.unwrap(self.callbacks.remote[id], id) : self.callbacks.remote[id];
  });

  if (req.method === 'methods') {
    self.handleMethods(args[0]);
  } else if (req.method === 'cull') {
    forEach(args, function (id) {
      delete self.callbacks.local[id];
    });
  } else if (typeof req.method === 'string') {
    if (isEnumerable(self.instance, req.method)) {
      self.apply(self.instance[req.method], args);
    } else {
      self.emit('fail', new Error('request for non-enumerable method: ' + req.method));
    }
  } else if (typeof req.method == 'number') {
    var fn = self.callbacks.local[req.method];

    if (!fn) {
      self.emit('fail', new Error('no such method'));
    } else self.apply(fn, args);
  }
};

Proto.prototype.handleMethods = function (methods) {
  var self = this;

  if (_typeof(methods) != 'object') {
    methods = {};
  } // copy since assignment discards the previous refs


  forEach(objectKeys(self.remote), function (key) {
    delete self.remote[key];
  });
  forEach(objectKeys(methods), function (key) {
    self.remote[key] = methods[key];
  });
  self.emit('remote', self.remote);
  self.emit('ready');
};

Proto.prototype.apply = function (f, args) {
  try {
    f.apply(undefined, args);
  } catch (err) {
    this.emit('error', err);
  }
};

/***/ }),

/***/ "./node_modules/dnode-protocol/lib/foreach.js":
/*!****************************************************!*\
  !*** ./node_modules/dnode-protocol/lib/foreach.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function forEach(xs, f) {
  if (xs.forEach) return xs.forEach(f);

  for (var i = 0; i < xs.length; i++) {
    f.call(xs, xs[i], i);
  }
};

/***/ }),

/***/ "./node_modules/dnode-protocol/lib/is_enum.js":
/*!****************************************************!*\
  !*** ./node_modules/dnode-protocol/lib/is_enum.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var objectKeys = __webpack_require__(/*! ./keys */ "./node_modules/dnode-protocol/lib/keys.js");

module.exports = function (obj, key) {
  if (Object.prototype.propertyIsEnumerable) {
    return Object.prototype.propertyIsEnumerable.call(obj, key);
  }

  var keys = objectKeys(obj);

  for (var i = 0; i < keys.length; i++) {
    if (key === keys[i]) return true;
  }

  return false;
};

/***/ }),

/***/ "./node_modules/dnode-protocol/lib/keys.js":
/*!*************************************************!*\
  !*** ./node_modules/dnode-protocol/lib/keys.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};

/***/ }),

/***/ "./node_modules/dnode-protocol/lib/scrub.js":
/*!**************************************************!*\
  !*** ./node_modules/dnode-protocol/lib/scrub.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var traverse = __webpack_require__(/*! traverse */ "./node_modules/traverse/index.js");

var objectKeys = __webpack_require__(/*! ./keys */ "./node_modules/dnode-protocol/lib/keys.js");

var forEach = __webpack_require__(/*! ./foreach */ "./node_modules/dnode-protocol/lib/foreach.js");

function indexOf(xs, x) {
  if (xs.indexOf) return xs.indexOf(x);

  for (var i = 0; i < xs.length; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
} // scrub callbacks out of requests in order to call them again later


module.exports = function (callbacks) {
  return new Scrubber(callbacks);
};

function Scrubber(callbacks) {
  this.callbacks = callbacks;
} // Take the functions out and note them for future use


Scrubber.prototype.scrub = function (obj) {
  var self = this;
  var paths = {};
  var links = [];
  var args = traverse(obj).map(function (node) {
    if (typeof node === 'function') {
      var i = indexOf(self.callbacks, node);

      if (i >= 0 && !(i in paths)) {
        // Keep previous function IDs only for the first function
        // found. This is somewhat suboptimal but the alternatives
        // are worse.
        paths[i] = this.path;
      } else {
        var id = self.callbacks.length;
        self.callbacks.push(node);
        paths[id] = this.path;
      }

      this.update('[Function]');
    } else if (this.circular) {
      links.push({
        from: this.circular.path,
        to: this.path
      });
      this.update('[Circular]');
    }
  });
  return {
    arguments: args,
    callbacks: paths,
    links: links
  };
}; // Replace callbacks. The supplied function should take a callback id and
// return a callback of its own.


Scrubber.prototype.unscrub = function (msg, f) {
  var args = msg.arguments || [];
  forEach(objectKeys(msg.callbacks || {}), function (sid) {
    var id = parseInt(sid, 10);
    var path = msg.callbacks[id];
    traverse.set(args, path, f(id));
  });
  forEach(msg.links || [], function (link) {
    var value = traverse.get(args, link.from);
    traverse.set(args, link.to, value);
  });
  return args;
};

/***/ }),

/***/ "./node_modules/dnode/browser.js":
/*!***************************************!*\
  !*** ./node_modules/dnode/browser.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var dnode = __webpack_require__(/*! ./lib/dnode */ "./node_modules/dnode/lib/dnode.js");

module.exports = function (cons, opts) {
  return new dnode(cons, opts);
};

/***/ }),

/***/ "./node_modules/dnode/lib/dnode.js":
/*!*****************************************!*\
  !*** ./node_modules/dnode/lib/dnode.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var protocol = __webpack_require__(/*! dnode-protocol */ "./node_modules/dnode-protocol/index.js");

var Stream = __webpack_require__(/*! stream */ "./node_modules/stream-browserify/index.js");

var json = (typeof JSON === "undefined" ? "undefined" : _typeof(JSON)) === 'object' ? JSON : __webpack_require__(/*! jsonify */ "./node_modules/jsonify/index.js");
module.exports = dnode;
dnode.prototype = {};

(function () {
  // browsers etc
  for (var key in Stream.prototype) {
    dnode.prototype[key] = Stream.prototype[key];
  }
})();

function dnode(cons, opts) {
  Stream.call(this);
  var self = this;
  self.opts = opts || {};
  self.cons = typeof cons === 'function' ? cons : function () {
    return cons || {};
  };
  self.readable = true;
  self.writable = true;
  process.nextTick(function () {
    if (self._ended) return;
    self.proto = self._createProto();
    self.proto.start();
    if (!self._handleQueue) return;

    for (var i = 0; i < self._handleQueue.length; i++) {
      self.handle(self._handleQueue[i]);
    }
  });
}

dnode.prototype._createProto = function () {
  var self = this;
  var proto = protocol(function (remote) {
    if (self._ended) return;
    var ref = self.cons.call(this, remote, self);
    if (_typeof(ref) !== 'object') ref = this;
    self.emit('local', ref, self);
    return ref;
  }, self.opts.proto);
  proto.on('remote', function (remote) {
    self.emit('remote', remote, self);
    self.emit('ready'); // backwards compatability, deprecated
  });
  proto.on('request', function (req) {
    if (!self.readable) return;

    if (self.opts.emit === 'object') {
      self.emit('data', req);
    } else self.emit('data', json.stringify(req) + '\n');
  });
  proto.on('fail', function (err) {
    // errors that the remote end was responsible for
    self.emit('fail', err);
  });
  proto.on('error', function (err) {
    // errors that the local code was responsible for
    self.emit('error', err);
  });
  return proto;
};

dnode.prototype.write = function (buf) {
  if (this._ended) return;
  var self = this;
  var row;

  if (buf && _typeof(buf) === 'object' && buf.constructor && buf.constructor.name === 'Buffer' && buf.length && typeof buf.slice === 'function') {
    // treat like a buffer
    if (!self._bufs) self._bufs = []; // treat like a buffer

    for (var i = 0, j = 0; i < buf.length; i++) {
      if (buf[i] === 0x0a) {
        self._bufs.push(buf.slice(j, i));

        var line = '';

        for (var k = 0; k < self._bufs.length; k++) {
          line += String(self._bufs[k]);
        }

        try {
          row = json.parse(line);
        } catch (err) {
          return self.end();
        }

        j = i + 1;
        self.handle(row);
        self._bufs = [];
      }
    }

    if (j < buf.length) self._bufs.push(buf.slice(j, buf.length));
  } else if (buf && _typeof(buf) === 'object') {
    // .isBuffer() without the Buffer
    // Use self to pipe JSONStream.parse() streams.
    self.handle(buf);
  } else {
    if (typeof buf !== 'string') buf = String(buf);
    if (!self._line) self._line = '';

    for (var i = 0; i < buf.length; i++) {
      if (buf.charCodeAt(i) === 0x0a) {
        try {
          row = json.parse(self._line);
        } catch (err) {
          return self.end();
        }

        self._line = '';
        self.handle(row);
      } else self._line += buf.charAt(i);
    }
  }
};

dnode.prototype.handle = function (row) {
  if (!this.proto) {
    if (!this._handleQueue) this._handleQueue = [];

    this._handleQueue.push(row);
  } else this.proto.handle(row);
};

dnode.prototype.end = function () {
  if (this._ended) return;
  this._ended = true;
  this.writable = false;
  this.readable = false;
  this.emit('end');
};

dnode.prototype.destroy = function () {
  this.end();
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic.js":
/*!***********************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var elliptic = exports;
elliptic.version = __webpack_require__(/*! ../package.json */ "./node_modules/elliptic/package.json").version;
elliptic.utils = __webpack_require__(/*! ./elliptic/utils */ "./node_modules/elliptic/lib/elliptic/utils.js");
elliptic.rand = __webpack_require__(/*! brorand */ "./node_modules/brorand/index.js");
elliptic.curve = __webpack_require__(/*! ./elliptic/curve */ "./node_modules/elliptic/lib/elliptic/curve/index.js");
elliptic.curves = __webpack_require__(/*! ./elliptic/curves */ "./node_modules/elliptic/lib/elliptic/curves.js"); // Protocols

elliptic.ec = __webpack_require__(/*! ./elliptic/ec */ "./node_modules/elliptic/lib/elliptic/ec/index.js");
elliptic.eddsa = __webpack_require__(/*! ./elliptic/eddsa */ "./node_modules/elliptic/lib/elliptic/eddsa/index.js");

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/base.js":
/*!**********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/base.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

var elliptic = __webpack_require__(/*! ../../elliptic */ "./node_modules/elliptic/lib/elliptic.js");

var utils = elliptic.utils;
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new BN(conf.p, 16); // Use Montgomery, when there is no fast reduction for the prime

  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p); // Useful for many curves

  this.zero = new BN(0).toRed(this.red);
  this.one = new BN(1).toRed(this.red);
  this.two = new BN(2).toRed(this.red); // Curve configuration, optional

  this.n = conf.n && new BN(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed); // Temporary arrays

  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4); // Generalized Greg Maxwell's trick

  var adjustCount = this.n && this.p.div(this.n);

  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}

module.exports = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert(p.precomputed);

  var doubles = p._getDoubles();

  var naf = getNAF(k, 1);
  var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3; // Translate into more windowed form

  var repr = [];

  for (var j = 0; j < naf.length; j += doubles.step) {
    var nafW = 0;

    for (var k = j + doubles.step - 1; k >= j; k--) {
      nafW = (nafW << 1) + naf[k];
    }

    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);

  for (var i = I; i > 0; i--) {
    for (var j = 0; j < repr.length; j++) {
      var nafW = repr[j];
      if (nafW === i) b = b.mixedAdd(doubles.points[j]);else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
    }

    a = a.add(b);
  }

  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4; // Precompute window

  var nafPoints = p._getNAFPoints(w);

  w = nafPoints.wnd;
  var wnd = nafPoints.points; // Get NAF form

  var naf = getNAF(k, w); // Add `this`*(N+1) for every w-NAF index

  var acc = this.jpoint(null, null, null);

  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var k = 0; i >= 0 && naf[i] === 0; i--) {
      k++;
    }

    if (i >= 0) k++;
    acc = acc.dblp(k);
    if (i < 0) break;
    var z = naf[i];
    assert(z !== 0);

    if (p.type === 'affine') {
      // J +- P
      if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
    } else {
      // J +- J
      if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);else acc = acc.add(wnd[-z - 1 >> 1].neg());
    }
  }

  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3; // Fill all arrays

  var max = 0;

  for (var i = 0; i < len; i++) {
    var p = points[i];

    var nafPoints = p._getNAFPoints(defW);

    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  } // Comb small window NAFs


  for (var i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;

    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a]);
      naf[b] = getNAF(coeffs[b], wndWidth[b]);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [points[a],
    /* 1 */
    null,
    /* 3 */
    null,
    /* 5 */
    points[b]
    /* 7 */
    ]; // Try to avoid Projective points, if possible

    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [-3,
    /* -1 -1 */
    -1,
    /* -1 0 */
    -5,
    /* -1 1 */
    -7,
    /* 0 -1 */
    0,
    /* 0 0 */
    7,
    /* 0 1 */
    5,
    /* 1 -1 */
    1,
    /* 1 0 */
    3
    /* 1 1 */
    ];
    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);

    for (var j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;
      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;

  for (var i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;

      for (var j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0) zero = false;
      }

      if (!zero) break;
      k++;
      i--;
    }

    if (i >= 0) k++;
    acc = acc.dblp(k);
    if (i < 0) break;

    for (var j = 0; j < len; j++) {
      var z = tmp[j];
      var p;
      if (z === 0) continue;else if (z > 0) p = wnd[j][z - 1 >> 1];else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
      if (p.type === 'affine') acc = acc.mixedAdd(p);else acc = acc.add(p);
    }
  } // Zeroify references


  for (var i = 0; i < len; i++) {
    wnd[i] = null;
  }

  if (jacobianResult) return acc;else return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}

BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function eq()
/*other*/
{
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils.toArray(bytes, enc);
  var len = this.p.byteLength(); // uncompressed, hybrid-odd, hybrid-even

  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06) assert(bytes[bytes.length - 1] % 2 === 0);else if (bytes[0] === 0x07) assert(bytes[bytes.length - 1] % 2 === 1);
    var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }

  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);
  if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);
  return [0x04].concat(x, this.getY().toArray('be', len));
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed) return this;
  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;
  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed) return false;
  var doubles = this.precomputed.doubles;
  if (!doubles) return false;
  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
  var doubles = [this];
  var acc = this;

  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++) {
      acc = acc.dbl();
    }

    doubles.push(acc);
  }

  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
  var res = [this];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();

  for (var i = 1; i < max; i++) {
    res[i] = res[i - 1].add(dbl);
  }

  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;

  for (var i = 0; i < k; i++) {
    r = r.dbl();
  }

  return r;
};

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/edwards.js":
/*!*************************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/edwards.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = __webpack_require__(/*! ../curve */ "./node_modules/elliptic/lib/elliptic/curve/index.js");

var elliptic = __webpack_require__(/*! ../../elliptic */ "./node_modules/elliptic/lib/elliptic.js");

var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var Base = curve.base;
var assert = elliptic.utils.assert;

function EdwardsCurve(conf) {
  // NOTE: Important as we are creating point in Base.call()
  this.twisted = (conf.a | 0) !== 1;
  this.mOneA = this.twisted && (conf.a | 0) === -1;
  this.extended = this.mOneA;
  Base.call(this, 'edwards', conf);
  this.a = new BN(conf.a, 16).umod(this.red.m);
  this.a = this.a.toRed(this.red);
  this.c = new BN(conf.c, 16).toRed(this.red);
  this.c2 = this.c.redSqr();
  this.d = new BN(conf.d, 16).toRed(this.red);
  this.dd = this.d.redAdd(this.d);
  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
  this.oneC = (conf.c | 0) === 1;
}

inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;

EdwardsCurve.prototype._mulA = function _mulA(num) {
  if (this.mOneA) return num.redNeg();else return this.a.redMul(num);
};

EdwardsCurve.prototype._mulC = function _mulC(num) {
  if (this.oneC) return num;else return this.c.redMul(num);
}; // Just for compatibility with Short curve


EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
  return this.point(x, y, z, t);
};

EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red) x = x.toRed(this.red);
  var x2 = x.redSqr();
  var rhs = this.c2.redSub(this.a.redMul(x2));
  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
  var y2 = rhs.redMul(lhs.redInvm());
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
  return this.point(x, y);
};

EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
  y = new BN(y, 16);
  if (!y.red) y = y.toRed(this.red); // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)

  var y2 = y.redSqr();
  var lhs = y2.redSub(this.c2);
  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
  var x2 = lhs.redMul(rhs.redInvm());

  if (x2.cmp(this.zero) === 0) {
    if (odd) throw new Error('invalid point');else return this.point(this.zero, y);
  }

  var x = x2.redSqrt();
  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error('invalid point');
  if (x.fromRed().isOdd() !== odd) x = x.redNeg();
  return this.point(x, y);
};

EdwardsCurve.prototype.validate = function validate(point) {
  if (point.isInfinity()) return true; // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)

  point.normalize();
  var x2 = point.x.redSqr();
  var y2 = point.y.redSqr();
  var lhs = x2.redMul(this.a).redAdd(y2);
  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
  return lhs.cmp(rhs) === 0;
};

function Point(curve, x, y, z, t) {
  Base.BasePoint.call(this, curve, 'projective');

  if (x === null && y === null && z === null) {
    this.x = this.curve.zero;
    this.y = this.curve.one;
    this.z = this.curve.one;
    this.t = this.curve.zero;
    this.zOne = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = z ? new BN(z, 16) : this.curve.one;
    this.t = t && new BN(t, 16);
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one; // Use extended coordinates

    if (this.curve.extended && !this.t) {
      this.t = this.x.redMul(this.y);
      if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
    }
  }
}

inherits(Point, Base.BasePoint);

EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

EdwardsCurve.prototype.point = function point(x, y, z, t) {
  return new Point(this, x, y, z, t);
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1], obj[2]);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
};

Point.prototype._extDbl = function _extDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #doubling-dbl-2008-hwcd
  // 4M + 4S
  // A = X1^2
  var a = this.x.redSqr(); // B = Y1^2

  var b = this.y.redSqr(); // C = 2 * Z1^2

  var c = this.z.redSqr();
  c = c.redIAdd(c); // D = a * A

  var d = this.curve._mulA(a); // E = (X1 + Y1)^2 - A - B


  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b); // G = D + B

  var g = d.redAdd(b); // F = G - C

  var f = g.redSub(c); // H = D - B

  var h = d.redSub(b); // X3 = E * F

  var nx = e.redMul(f); // Y3 = G * H

  var ny = g.redMul(h); // T3 = E * H

  var nt = e.redMul(h); // Z3 = F * G

  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projDbl = function _projDbl() {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #doubling-dbl-2008-bbjlp
  //     #doubling-dbl-2007-bl
  // and others
  // Generally 3M + 4S or 2M + 4S
  // B = (X1 + Y1)^2
  var b = this.x.redAdd(this.y).redSqr(); // C = X1^2

  var c = this.x.redSqr(); // D = Y1^2

  var d = this.y.redSqr();
  var nx;
  var ny;
  var nz;

  if (this.curve.twisted) {
    // E = a * C
    var e = this.curve._mulA(c); // F = E + D


    var f = e.redAdd(d);

    if (this.zOne) {
      // X3 = (B - C - D) * (F - 2)
      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two)); // Y3 = F * (E - D)

      ny = f.redMul(e.redSub(d)); // Z3 = F^2 - 2 * F

      nz = f.redSqr().redSub(f).redSub(f);
    } else {
      // H = Z1^2
      var h = this.z.redSqr(); // J = F - 2 * H

      var j = f.redSub(h).redISub(h); // X3 = (B-C-D)*J

      nx = b.redSub(c).redISub(d).redMul(j); // Y3 = F * (E - D)

      ny = f.redMul(e.redSub(d)); // Z3 = F * J

      nz = f.redMul(j);
    }
  } else {
    // E = C + D
    var e = c.redAdd(d); // H = (c * Z1)^2

    var h = this.curve._mulC(this.z).redSqr(); // J = E - 2 * H


    var j = e.redSub(h).redSub(h); // X3 = c * (B - E) * J

    nx = this.curve._mulC(b.redISub(e)).redMul(j); // Y3 = c * E * (C - D)

    ny = this.curve._mulC(e).redMul(c.redISub(d)); // Z3 = E * J

    nz = e.redMul(j);
  }

  return this.curve.point(nx, ny, nz);
};

Point.prototype.dbl = function dbl() {
  if (this.isInfinity()) return this; // Double in extended coordinates

  if (this.curve.extended) return this._extDbl();else return this._projDbl();
};

Point.prototype._extAdd = function _extAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
  //     #addition-add-2008-hwcd-3
  // 8M
  // A = (Y1 - X1) * (Y2 - X2)
  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x)); // B = (Y1 + X1) * (Y2 + X2)

  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x)); // C = T1 * k * T2

  var c = this.t.redMul(this.curve.dd).redMul(p.t); // D = Z1 * 2 * Z2

  var d = this.z.redMul(p.z.redAdd(p.z)); // E = B - A

  var e = b.redSub(a); // F = D - C

  var f = d.redSub(c); // G = D + C

  var g = d.redAdd(c); // H = B + A

  var h = b.redAdd(a); // X3 = E * F

  var nx = e.redMul(f); // Y3 = G * H

  var ny = g.redMul(h); // T3 = E * H

  var nt = e.redMul(h); // Z3 = F * G

  var nz = f.redMul(g);
  return this.curve.point(nx, ny, nz, nt);
};

Point.prototype._projAdd = function _projAdd(p) {
  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
  //     #addition-add-2008-bbjlp
  //     #addition-add-2007-bl
  // 10M + 1S
  // A = Z1 * Z2
  var a = this.z.redMul(p.z); // B = A^2

  var b = a.redSqr(); // C = X1 * X2

  var c = this.x.redMul(p.x); // D = Y1 * Y2

  var d = this.y.redMul(p.y); // E = d * C * D

  var e = this.curve.d.redMul(c).redMul(d); // F = B - E

  var f = b.redSub(e); // G = B + E

  var g = b.redAdd(e); // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)

  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
  var nx = a.redMul(f).redMul(tmp);
  var ny;
  var nz;

  if (this.curve.twisted) {
    // Y3 = A * G * (D - a * C)
    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c))); // Z3 = F * G

    nz = f.redMul(g);
  } else {
    // Y3 = A * G * (D - C)
    ny = a.redMul(g).redMul(d.redSub(c)); // Z3 = c * F * G

    nz = this.curve._mulC(f).redMul(g);
  }

  return this.curve.point(nx, ny, nz);
};

Point.prototype.add = function add(p) {
  if (this.isInfinity()) return p;
  if (p.isInfinity()) return this;
  if (this.curve.extended) return this._extAdd(p);else return this._projAdd(p);
};

Point.prototype.mul = function mul(k) {
  if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, false);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
  return this.curve._wnafMulAdd(1, [this, p], [k1, k2], 2, true);
};

Point.prototype.normalize = function normalize() {
  if (this.zOne) return this; // Normalize coordinates

  var zi = this.z.redInvm();
  this.x = this.x.redMul(zi);
  this.y = this.y.redMul(zi);
  if (this.t) this.t = this.t.redMul(zi);
  this.z = this.curve.one;
  this.zOne = true;
  return this;
};

Point.prototype.neg = function neg() {
  return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
};

Point.prototype.getX = function getX() {
  this.normalize();
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  this.normalize();
  return this.y.fromRed();
};

Point.prototype.eq = function eq(other) {
  return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
};

Point.prototype.eqXToP = function eqXToP(x) {
  var rx = x.toRed(this.curve.red).redMul(this.z);
  if (this.x.cmp(rx) === 0) return true;
  var xc = x.clone();
  var t = this.curve.redN.redMul(this.z);

  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0) return false;
    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0) return true;
  }
}; // Compatibility with BaseCurve


Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = exports;
curve.base = __webpack_require__(/*! ./base */ "./node_modules/elliptic/lib/elliptic/curve/base.js");
curve.short = __webpack_require__(/*! ./short */ "./node_modules/elliptic/lib/elliptic/curve/short.js");
curve.mont = __webpack_require__(/*! ./mont */ "./node_modules/elliptic/lib/elliptic/curve/mont.js");
curve.edwards = __webpack_require__(/*! ./edwards */ "./node_modules/elliptic/lib/elliptic/curve/edwards.js");

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/mont.js":
/*!**********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/mont.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = __webpack_require__(/*! ../curve */ "./node_modules/elliptic/lib/elliptic/curve/index.js");

var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var Base = curve.base;

var elliptic = __webpack_require__(/*! ../../elliptic */ "./node_modules/elliptic/lib/elliptic.js");

var utils = elliptic.utils;

function MontCurve(conf) {
  Base.call(this, 'mont', conf);
  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.i4 = new BN(4).toRed(this.red).redInvm();
  this.two = new BN(2).toRed(this.red);
  this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}

inherits(MontCurve, Base);
module.exports = MontCurve;

MontCurve.prototype.validate = function validate(point) {
  var x = point.normalize().x;
  var x2 = x.redSqr();
  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
  var y = rhs.redSqrt();
  return y.redSqr().cmp(rhs) === 0;
};

function Point(curve, x, z) {
  Base.BasePoint.call(this, curve, 'projective');

  if (x === null && z === null) {
    this.x = this.curve.one;
    this.z = this.curve.zero;
  } else {
    this.x = new BN(x, 16);
    this.z = new BN(z, 16);
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
  }
}

inherits(Point, Base.BasePoint);

MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  return this.point(utils.toArray(bytes, enc), 1);
};

MontCurve.prototype.point = function point(x, z) {
  return new Point(this, x, z);
};

MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
  return Point.fromJSON(this, obj);
};

Point.prototype.precompute = function precompute() {// No-op
};

Point.prototype._encode = function _encode() {
  return this.getX().toArray('be', this.curve.p.byteLength());
};

Point.fromJSON = function fromJSON(curve, obj) {
  return new Point(curve, obj[0], obj[1] || curve.one);
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

Point.prototype.dbl = function dbl() {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
  // 2M + 2S + 4A
  // A = X1 + Z1
  var a = this.x.redAdd(this.z); // AA = A^2

  var aa = a.redSqr(); // B = X1 - Z1

  var b = this.x.redSub(this.z); // BB = B^2

  var bb = b.redSqr(); // C = AA - BB

  var c = aa.redSub(bb); // X3 = AA * BB

  var nx = aa.redMul(bb); // Z3 = C * (BB + A24 * C)

  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
  return this.curve.point(nx, nz);
};

Point.prototype.add = function add() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.diffAdd = function diffAdd(p, diff) {
  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
  // 4M + 2S + 6A
  // A = X2 + Z2
  var a = this.x.redAdd(this.z); // B = X2 - Z2

  var b = this.x.redSub(this.z); // C = X3 + Z3

  var c = p.x.redAdd(p.z); // D = X3 - Z3

  var d = p.x.redSub(p.z); // DA = D * A

  var da = d.redMul(a); // CB = C * B

  var cb = c.redMul(b); // X5 = Z1 * (DA + CB)^2

  var nx = diff.z.redMul(da.redAdd(cb).redSqr()); // Z5 = X1 * (DA - CB)^2

  var nz = diff.x.redMul(da.redISub(cb).redSqr());
  return this.curve.point(nx, nz);
};

Point.prototype.mul = function mul(k) {
  var t = k.clone();
  var a = this; // (N / 2) * Q + Q

  var b = this.curve.point(null, null); // (N / 2) * Q

  var c = this; // Q

  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1)) {
    bits.push(t.andln(1));
  }

  for (var i = bits.length - 1; i >= 0; i--) {
    if (bits[i] === 0) {
      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
      a = a.diffAdd(b, c); // N * Q = 2 * ((N / 2) * Q + Q))

      b = b.dbl();
    } else {
      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
      b = a.diffAdd(b, c); // N * Q + Q = 2 * ((N / 2) * Q + Q)

      a = a.dbl();
    }
  }

  return b;
};

Point.prototype.mulAdd = function mulAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.jumlAdd = function jumlAdd() {
  throw new Error('Not supported on Montgomery curve');
};

Point.prototype.eq = function eq(other) {
  return this.getX().cmp(other.getX()) === 0;
};

Point.prototype.normalize = function normalize() {
  this.x = this.x.redMul(this.z.redInvm());
  this.z = this.curve.one;
  return this;
};

Point.prototype.getX = function getX() {
  // Normalize coordinates
  this.normalize();
  return this.x.fromRed();
};

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curve/short.js":
/*!***********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curve/short.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curve = __webpack_require__(/*! ../curve */ "./node_modules/elliptic/lib/elliptic/curve/index.js");

var elliptic = __webpack_require__(/*! ../../elliptic */ "./node_modules/elliptic/lib/elliptic.js");

var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var Base = curve.base;
var assert = elliptic.utils.assert;

function ShortCurve(conf) {
  Base.call(this, 'short', conf);
  this.a = new BN(conf.a, 16).toRed(this.red);
  this.b = new BN(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();
  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0; // If the curve is endomorphic, precalculate beta and lambda

  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}

inherits(ShortCurve, Base);
module.exports = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return; // Compute beta and lambda, that lambda * P = (beta * Px; Py)

  var beta;
  var lambda;

  if (conf.beta) {
    beta = new BN(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p); // Choose the smallest beta


    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }

  if (conf.lambda) {
    lambda = new BN(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);

    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  } // Get basis vectors, used for balanced length-two representation


  var basis;

  if (conf.basis) {
    basis = conf.basis.map(function (vec) {
      return {
        a: new BN(vec.a, 16),
        b: new BN(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : BN.mont(num);
  var tinv = new BN(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();
  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [l1, l2];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2)); // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt

  var u = lambda;
  var v = this.n.clone();
  var x1 = new BN(1);
  var y1 = new BN(0);
  var x2 = new BN(0);
  var y2 = new BN(1); // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)

  var a0;
  var b0; // First vector

  var a1;
  var b1; // Second vector

  var a2;
  var b2;
  var prevR;
  var i = 0;
  var r;
  var x;

  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }

    prevR = r;
    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }

  a2 = r.neg();
  b2 = x;
  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());

  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  } // Normalize signs


  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }

  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [{
    a: a1,
    b: b1
  }, {
    a: a2,
    b: b2
  }];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];
  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);
  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b); // Calculate answer

  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return {
    k1: k1,
    k2: k2
  };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new BN(x, 16);
  if (!x.red) x = x.toRed(this.red);
  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point'); // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf) return true;
  var x = point.x;
  var y = point.y;
  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;

  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);

    var p = points[i];

    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }

    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }

  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult); // Clean-up references to points and coefficients


  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }

  return res;
};

function Point(curve, x, y, isRed) {
  Base.BasePoint.call(this, curve, 'affine');

  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16); // Force redgomery representation when loading from JSON

    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }

    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}

inherits(Point, Base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo) return;
  var pre = this.precomputed;
  if (pre && pre.beta) return pre.beta;
  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);

  if (pre) {
    var curve = this.curve;

    var endoMul = function endoMul(p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };

    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }

  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed) return [this.x, this.y];
  return [this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  }];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string') obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2]) return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [res].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [res].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf) return p; // P + O = P

  if (p.inf) return this; // P + P = 2P

  if (this.eq(p)) return this.dbl(); // P + (-P) = O

  if (this.neg().eq(p)) return this.curve.point(null, null); // P + Q = O

  if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf) return this; // 2P = O

  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
  var a = this.curve.a;
  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new BN(k, 16);
  if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else if (this.curve.endo) return this.curve._endoWnafMulAdd([this], [k]);else return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [this, p2];
  var coeffs = [k1, k2];
  if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [this, p2];
  var coeffs = [k1, k2];
  if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf) return this;
  var res = this.curve.point(this.x, this.y.redNeg());

  if (_precompute && this.precomputed) {
    var pre = this.precomputed;

    var negate = function negate(p) {
      return p.neg();
    };

    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }

  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf) return this.curve.jpoint(null, null, null);
  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  Base.BasePoint.call(this, curve, 'jacobian');

  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new BN(0);
  } else {
    this.x = new BN(x, 16);
    this.y = new BN(y, 16);
    this.z = new BN(z, 16);
  }

  if (!this.x.red) this.x = this.x.toRed(this.curve.red);
  if (!this.y.red) this.y = this.y.toRed(this.curve.red);
  if (!this.z.red) this.z = this.z.toRed(this.curve.red);
  this.zOne = this.z === this.curve.one;
}

inherits(JPoint, Base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity()) return this.curve.point(null, null);
  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);
  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity()) return p; // P + O = P

  if (p.isInfinity()) return this; // 12M + 4S + 7A

  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));
  var h = u1.redSub(u2);
  var r = s1.redSub(s2);

  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);
  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);
  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity()) return p.toJ(); // P + O = P

  if (p.isInfinity()) return this; // 8M + 3S + 7A

  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);
  var h = u1.redSub(u2);
  var r = s1.redSub(s2);

  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);
  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);
  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0) return this;
  if (this.isInfinity()) return this;
  if (!pow) return this.dbl();

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;

    for (var i = 0; i < pow; i++) {
      r = r.dbl();
    }

    return r;
  } // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A


  var a = this.curve.a;
  var tinv = this.curve.tinv;
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr(); // Reuse results

  var jyd = jy.redAdd(jy);

  for (var i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity()) return this;
  if (this.curve.zeroA) return this._zeroDbl();else if (this.curve.threeA) return this._threeDbl();else return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz; // Z = 1

  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A
    // XX = X1^2
    var xx = this.x.redSqr(); // YY = Y1^2

    var yy = this.y.redSqr(); // YYYY = YY^2

    var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)

    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s); // M = 3 * XX + a; a = 0

    var m = xx.redAdd(xx).redIAdd(xx); // T = M ^ 2 - 2*S

    var t = m.redSqr().redISub(s).redISub(s); // 8 * YYYY

    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8); // X3 = T

    nx = t; // Y3 = M * (S - T) - 8 * YYYY

    ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2*Y1

    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A
    // A = X1^2
    var a = this.x.redSqr(); // B = Y1^2

    var b = this.y.redSqr(); // C = B^2

    var c = b.redSqr(); // D = 2 * ((X1 + B)^2 - A - C)

    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d); // E = 3 * A

    var e = a.redAdd(a).redIAdd(a); // F = E^2

    var f = e.redSqr(); // 8 * C

    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8); // X3 = F - 2 * D

    nx = f.redISub(d).redISub(d); // Y3 = E * (D - X3) - 8 * C

    ny = e.redMul(d.redISub(nx)).redISub(c8); // Z3 = 2 * Y1 * Z1

    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz; // Z = 1

  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A
    // XX = X1^2
    var xx = this.x.redSqr(); // YY = Y1^2

    var yy = this.y.redSqr(); // YYYY = YY^2

    var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)

    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s); // M = 3 * XX + a

    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a); // T = M^2 - 2 * S

    var t = m.redSqr().redISub(s).redISub(s); // X3 = T

    nx = t; // Y3 = M * (S - T) - 8 * YYYY

    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2 * Y1

    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S
    // delta = Z1^2
    var delta = this.z.redSqr(); // gamma = Y1^2

    var gamma = this.y.redSqr(); // beta = X1 * gamma

    var beta = this.x.redMul(gamma); // alpha = 3 * (X1 - delta) * (X1 + delta)

    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha); // X3 = alpha^2 - 8 * beta

    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8); // Z3 = (Y1 + Z1)^2 - gamma - delta

    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta); // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2

    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a; // 4M + 6S + 10A

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();
  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();
  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);
  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);
  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA) return this.dbl().add(this); // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...
  // XX = X1^2

  var xx = this.x.redSqr(); // YY = Y1^2

  var yy = this.y.redSqr(); // ZZ = Z1^2

  var zz = this.z.redSqr(); // YYYY = YY^2

  var yyyy = yy.redSqr(); // M = 3 * XX + a * ZZ2; a = 0

  var m = xx.redAdd(xx).redIAdd(xx); // MM = M^2

  var mm = m.redSqr(); // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM

  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm); // EE = E^2

  var ee = e.redSqr(); // T = 16*YYYY

  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t); // U = (M + E)^2 - MM - EE - T

  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t); // X3 = 4 * (X1 * EE - 4 * YY * U)

  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx); // Y3 = 8 * Y1 * (U * (T - U) - E * EE)

  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny); // Z3 = (Z1 + E)^2 - ZZ - EE

  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new BN(k, kbase);
  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine') return this.eq(p.toJ());
  if (this === p) return true; // x1 * z2^2 == x2 * z1^2

  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false; // y1 * z2^3 == y2 * z1^3

  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0) return true;
  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);

  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0) return false;
    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0) return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/curves.js":
/*!******************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/curves.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var curves = exports;

var hash = __webpack_require__(/*! hash.js */ "./node_modules/hash.js/lib/hash.js");

var elliptic = __webpack_require__(/*! ../elliptic */ "./node_modules/elliptic/lib/elliptic.js");

var assert = elliptic.utils.assert;

function PresetCurve(options) {
  if (options.type === 'short') this.curve = new elliptic.curve.short(options);else if (options.type === 'edwards') this.curve = new elliptic.curve.edwards(options);else this.curve = new elliptic.curve.mont(options);
  this.g = this.curve.g;
  this.n = this.curve.n;
  this.hash = options.hash;
  assert(this.g.validate(), 'Invalid curve');
  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}

curves.PresetCurve = PresetCurve;

function defineCurve(name, options) {
  Object.defineProperty(curves, name, {
    configurable: true,
    enumerable: true,
    get: function get() {
      var curve = new PresetCurve(options);
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        value: curve
      });
      return curve;
    }
  });
}

defineCurve('p192', {
  type: 'short',
  prime: 'p192',
  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
  hash: hash.sha256,
  gRed: false,
  g: ['188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012', '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811']
});
defineCurve('p224', {
  type: 'short',
  prime: 'p224',
  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
  hash: hash.sha256,
  gRed: false,
  g: ['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21', 'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34']
});
defineCurve('p256', {
  type: 'short',
  prime: null,
  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
  hash: hash.sha256,
  gRed: false,
  g: ['6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296', '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5']
});
defineCurve('p384', {
  type: 'short',
  prime: null,
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 ffffffff',
  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 fffffffc',
  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' + '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' + 'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
  hash: hash.sha384,
  gRed: false,
  g: ['aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' + '5502f25d bf55296c 3a545e38 72760ab7', '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' + '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f']
});
defineCurve('p521', {
  type: 'short',
  prime: null,
  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff',
  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff fffffffc',
  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' + '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' + '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' + 'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
  hash: hash.sha512,
  gRed: false,
  g: ['000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' + '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' + 'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66', '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' + '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' + '3fad0761 353c7086 a272c240 88be9476 9fd16650']
});
defineCurve('curve25519', {
  type: 'mont',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '76d06',
  b: '1',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: ['9']
});
defineCurve('ed25519', {
  type: 'edwards',
  prime: 'p25519',
  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
  a: '-1',
  c: '1',
  // -121665 * (121666^(-1)) (mod P)
  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
  hash: hash.sha256,
  gRed: false,
  g: ['216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a', // 4/5
  '6666666666666666666666666666666666666666666666666666666666666658']
});
var pre;

try {
  pre = __webpack_require__(/*! ./precomputed/secp256k1 */ "./node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js");
} catch (e) {
  pre = undefined;
}

defineCurve('secp256k1', {
  type: 'short',
  prime: 'k256',
  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
  a: '0',
  b: '7',
  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
  h: '1',
  hash: hash.sha256,
  // Precomputed endomorphism
  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
  basis: [{
    a: '3086d221a7d46bcde86c90e49284eb15',
    b: '-e4437ed6010e88286f547fa90abfe4c3'
  }, {
    a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
    b: '3086d221a7d46bcde86c90e49284eb15'
  }],
  gRed: false,
  g: ['79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798', '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8', pre]
});

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/ec/index.js":
/*!********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/ec/index.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

var HmacDRBG = __webpack_require__(/*! hmac-drbg */ "./node_modules/hmac-drbg/lib/hmac-drbg.js");

var elliptic = __webpack_require__(/*! ../../elliptic */ "./node_modules/elliptic/lib/elliptic.js");

var utils = elliptic.utils;
var assert = utils.assert;

var KeyPair = __webpack_require__(/*! ./key */ "./node_modules/elliptic/lib/elliptic/ec/key.js");

var Signature = __webpack_require__(/*! ./signature */ "./node_modules/elliptic/lib/elliptic/ec/signature.js");

function EC(options) {
  if (!(this instanceof EC)) return new EC(options); // Shortcut `elliptic.ec(curve-name)`

  if (typeof options === 'string') {
    assert(elliptic.curves.hasOwnProperty(options), 'Unknown curve ' + options);
    options = elliptic.curves[options];
  } // Shortcut for `elliptic.ec(elliptic.curves.curveName)`


  if (options instanceof elliptic.curves.PresetCurve) options = {
    curve: options
  };
  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g; // Point on curve

  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1); // Hash for function for DRBG

  this.hash = options.hash || options.curve.hash;
}

module.exports = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new KeyPair(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return KeyPair.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return KeyPair.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options) options = {}; // Instantiate Hmac_DRBG

  var drbg = new HmacDRBG({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || elliptic.rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });
  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new BN(2));

  do {
    var priv = new BN(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0) continue;
    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  } while (true);
};

EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0) msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);else return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (_typeof(enc) === 'object') {
    options = enc;
    enc = null;
  }

  if (!options) options = {};
  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new BN(msg, 16)); // Zero-extend key to provide enough entropy

  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes); // Zero-extend nonce to have the same byte size as N

  var nonce = msg.toArray('be', bytes); // Instantiate Hmac_DRBG

  var drbg = new HmacDRBG({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  }); // Number of bytes to generate

  var ns1 = this.n.sub(new BN(1));

  for (var iter = 0; true; iter++) {
    var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
    var kp = this.g.mul(k);
    if (kp.isInfinity()) continue;
    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0) continue;
    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0) continue;
    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0); // Use complement of `s`, if it is > `n / 2`

    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new Signature({
      r: r,
      s: s,
      recoveryParam: recoveryParam
    });
  }
};

EC.prototype.verify = function verify(msg, signature, key, enc) {
  msg = this._truncateToN(new BN(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature = new Signature(signature, 'hex'); // Perform primitive values validation

  var r = signature.r;
  var s = signature.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false; // Validate signature

  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);

  if (!this.curve._maxwellTrick) {
    var p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;
    return p.getX().umod(this.n).cmp(r) === 0;
  } // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K


  var p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity()) return false; // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`

  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function (msg, signature, j, enc) {
  assert((3 & j) === j, 'The recovery param is more than two bits');
  signature = new Signature(signature, enc);
  var n = this.n;
  var e = new BN(msg);
  var r = signature.r;
  var s = signature.s; // A set LSB signifies that the y-coordinate is odd

  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate'); // 1.1. Let x = r + jn.

  if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);else r = this.curve.pointFromX(r, isYOdd);
  var rInv = signature.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n); // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)

  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function (e, signature, Q, enc) {
  signature = new Signature(signature, enc);
  if (signature.recoveryParam !== null) return signature.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;

    try {
      Qprime = this.recoverPubKey(e, signature, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q)) return i;
  }

  throw new Error('Unable to find valid recovery factor');
};

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/ec/key.js":
/*!******************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/ec/key.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

var elliptic = __webpack_require__(/*! ../../elliptic */ "./node_modules/elliptic/lib/elliptic.js");

var utils = elliptic.utils;
var assert = utils.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null; // KeyPair(ec, { priv: ..., pub: ... })

  if (options.priv) this._importPrivate(options.priv, options.privEnc);
  if (options.pub) this._importPublic(options.pub, options.pubEnc);
}

module.exports = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair) return pub;
  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair) return priv;
  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();
  if (pub.isInfinity()) return {
    result: false,
    reason: 'Invalid public key'
  };
  if (!pub.validate()) return {
    result: false,
    reason: 'Public key is not a point'
  };
  if (!pub.mul(this.ec.curve.n).isInfinity()) return {
    result: false,
    reason: 'Public key * N != O'
  };
  return {
    result: true,
    reason: null
  };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub) this.pub = this.ec.g.mul(this.priv);
  if (!enc) return this.pub;
  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex') return this.priv.toString(16, 2);else return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new BN(key, enc || 16); // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method

  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') {
      assert(key.x && key.y, 'Need both x and y coordinate');
    }

    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }

  this.pub = this.ec.curve.decodePoint(key, enc);
}; // ECDH


KeyPair.prototype.derive = function derive(pub) {
  return pub.mul(this.priv).getX();
}; // ECDSA


KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/ec/signature.js":
/*!************************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/ec/signature.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

var elliptic = __webpack_require__(/*! ../../elliptic */ "./node_modules/elliptic/lib/elliptic.js");

var utils = elliptic.utils;
var assert = utils.assert;

function Signature(options, enc) {
  if (options instanceof Signature) return options;
  if (this._importDER(options, enc)) return;
  assert(options.r && options.s, 'Signature without r or s');
  this.r = new BN(options.r, 16);
  this.s = new BN(options.s, 16);
  if (options.recoveryParam === undefined) this.recoveryParam = null;else this.recoveryParam = options.recoveryParam;
}

module.exports = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];

  if (!(initial & 0x80)) {
    return initial;
  }

  var octetLen = initial & 0xf;
  var val = 0;

  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
  }

  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;

  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }

  if (i === 0) {
    return buf;
  }

  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils.toArray(data, enc);
  var p = new Position();

  if (data[p.place++] !== 0x30) {
    return false;
  }

  var len = getLength(data, p);

  if (len + p.place !== data.length) {
    return false;
  }

  if (data[p.place++] !== 0x02) {
    return false;
  }

  var rlen = getLength(data, p);
  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;

  if (data[p.place++] !== 0x02) {
    return false;
  }

  var slen = getLength(data, p);

  if (data.length !== slen + p.place) {
    return false;
  }

  var s = data.slice(p.place, slen + p.place);

  if (r[0] === 0 && r[1] & 0x80) {
    r = r.slice(1);
  }

  if (s[0] === 0 && s[1] & 0x80) {
    s = s.slice(1);
  }

  this.r = new BN(r);
  this.s = new BN(s);
  this.recoveryParam = null;
  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }

  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);

  while (--octets) {
    arr.push(len >>> (octets << 3) & 0xff);
  }

  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray(); // Pad values

  if (r[0] & 0x80) r = [0].concat(r); // Pad values

  if (s[0] & 0x80) s = [0].concat(s);
  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }

  var arr = [0x02];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [0x30];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils.encode(res, enc);
};

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/eddsa/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/eddsa/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(/*! hash.js */ "./node_modules/hash.js/lib/hash.js");

var elliptic = __webpack_require__(/*! ../../elliptic */ "./node_modules/elliptic/lib/elliptic.js");

var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;

var KeyPair = __webpack_require__(/*! ./key */ "./node_modules/elliptic/lib/elliptic/eddsa/key.js");

var Signature = __webpack_require__(/*! ./signature */ "./node_modules/elliptic/lib/elliptic/eddsa/signature.js");

function EDDSA(curve) {
  assert(curve === 'ed25519', 'only tested with ed25519 so far');
  if (!(this instanceof EDDSA)) return new EDDSA(curve);
  var curve = elliptic.curves[curve].curve;
  this.curve = curve;
  this.g = curve.g;
  this.g.precompute(curve.n.bitLength() + 1);
  this.pointClass = curve.point().constructor;
  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
  this.hash = hash.sha512;
}

module.exports = EDDSA;
/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/

EDDSA.prototype.sign = function sign(message, secret) {
  message = parseBytes(message);
  var key = this.keyFromSecret(secret);
  var r = this.hashInt(key.messagePrefix(), message);
  var R = this.g.mul(r);
  var Rencoded = this.encodePoint(R);
  var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
  var S = r.add(s_).umod(this.curve.n);
  return this.makeSignature({
    R: R,
    S: S,
    Rencoded: Rencoded
  });
};
/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/


EDDSA.prototype.verify = function verify(message, sig, pub) {
  message = parseBytes(message);
  sig = this.makeSignature(sig);
  var key = this.keyFromPublic(pub);
  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
  var SG = this.g.mul(sig.S());
  var RplusAh = sig.R().add(key.pub().mul(h));
  return RplusAh.eq(SG);
};

EDDSA.prototype.hashInt = function hashInt() {
  var hash = this.hash();

  for (var i = 0; i < arguments.length; i++) {
    hash.update(arguments[i]);
  }

  return utils.intFromLE(hash.digest()).umod(this.curve.n);
};

EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
  return KeyPair.fromPublic(this, pub);
};

EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
  return KeyPair.fromSecret(this, secret);
};

EDDSA.prototype.makeSignature = function makeSignature(sig) {
  if (sig instanceof Signature) return sig;
  return new Signature(this, sig);
};
/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/


EDDSA.prototype.encodePoint = function encodePoint(point) {
  var enc = point.getY().toArray('le', this.encodingLength);
  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;
  return enc;
};

EDDSA.prototype.decodePoint = function decodePoint(bytes) {
  bytes = utils.parseBytes(bytes);
  var lastIx = bytes.length - 1;
  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);
  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;
  var y = utils.intFromLE(normed);
  return this.curve.pointFromY(y, xIsOdd);
};

EDDSA.prototype.encodeInt = function encodeInt(num) {
  return num.toArray('le', this.encodingLength);
};

EDDSA.prototype.decodeInt = function decodeInt(bytes) {
  return utils.intFromLE(bytes);
};

EDDSA.prototype.isPoint = function isPoint(val) {
  return val instanceof this.pointClass;
};

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/eddsa/key.js":
/*!*********************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/eddsa/key.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var elliptic = __webpack_require__(/*! ../../elliptic */ "./node_modules/elliptic/lib/elliptic.js");

var utils = elliptic.utils;
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;
/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/

function KeyPair(eddsa, params) {
  this.eddsa = eddsa;
  this._secret = parseBytes(params.secret);
  if (eddsa.isPoint(params.pub)) this._pub = params.pub;else this._pubBytes = parseBytes(params.pub);
}

KeyPair.fromPublic = function fromPublic(eddsa, pub) {
  if (pub instanceof KeyPair) return pub;
  return new KeyPair(eddsa, {
    pub: pub
  });
};

KeyPair.fromSecret = function fromSecret(eddsa, secret) {
  if (secret instanceof KeyPair) return secret;
  return new KeyPair(eddsa, {
    secret: secret
  });
};

KeyPair.prototype.secret = function secret() {
  return this._secret;
};

cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
  return this.eddsa.encodePoint(this.pub());
});
cachedProperty(KeyPair, 'pub', function pub() {
  if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
  return this.eddsa.g.mul(this.priv());
});
cachedProperty(KeyPair, 'privBytes', function privBytes() {
  var eddsa = this.eddsa;
  var hash = this.hash();
  var lastIx = eddsa.encodingLength - 1;
  var a = hash.slice(0, eddsa.encodingLength);
  a[0] &= 248;
  a[lastIx] &= 127;
  a[lastIx] |= 64;
  return a;
});
cachedProperty(KeyPair, 'priv', function priv() {
  return this.eddsa.decodeInt(this.privBytes());
});
cachedProperty(KeyPair, 'hash', function hash() {
  return this.eddsa.hash().update(this.secret()).digest();
});
cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
  return this.hash().slice(this.eddsa.encodingLength);
});

KeyPair.prototype.sign = function sign(message) {
  assert(this._secret, 'KeyPair can only verify');
  return this.eddsa.sign(message, this);
};

KeyPair.prototype.verify = function verify(message, sig) {
  return this.eddsa.verify(message, sig, this);
};

KeyPair.prototype.getSecret = function getSecret(enc) {
  assert(this._secret, 'KeyPair is public only');
  return utils.encode(this.secret(), enc);
};

KeyPair.prototype.getPublic = function getPublic(enc) {
  return utils.encode(this.pubBytes(), enc);
};

module.exports = KeyPair;

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/eddsa/signature.js":
/*!***************************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/eddsa/signature.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

var elliptic = __webpack_require__(/*! ../../elliptic */ "./node_modules/elliptic/lib/elliptic.js");

var utils = elliptic.utils;
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;
/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/

function Signature(eddsa, sig) {
  this.eddsa = eddsa;
  if (_typeof(sig) !== 'object') sig = parseBytes(sig);

  if (Array.isArray(sig)) {
    sig = {
      R: sig.slice(0, eddsa.encodingLength),
      S: sig.slice(eddsa.encodingLength)
    };
  }

  assert(sig.R && sig.S, 'Signature without R or S');
  if (eddsa.isPoint(sig.R)) this._R = sig.R;
  if (sig.S instanceof BN) this._S = sig.S;
  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}

cachedProperty(Signature, 'S', function S() {
  return this.eddsa.decodeInt(this.Sencoded());
});
cachedProperty(Signature, 'R', function R() {
  return this.eddsa.decodePoint(this.Rencoded());
});
cachedProperty(Signature, 'Rencoded', function Rencoded() {
  return this.eddsa.encodePoint(this.R());
});
cachedProperty(Signature, 'Sencoded', function Sencoded() {
  return this.eddsa.encodeInt(this.S());
});

Signature.prototype.toBytes = function toBytes() {
  return this.Rencoded().concat(this.Sencoded());
};

Signature.prototype.toHex = function toHex() {
  return utils.encode(this.toBytes(), 'hex').toUpperCase();
};

module.exports = Signature;

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js":
/*!*********************************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
  doubles: {
    step: 4,
    points: [['e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a', 'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821'], ['8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508', '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf'], ['175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739', 'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695'], ['363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640', '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9'], ['8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c', '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36'], ['723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda', '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f'], ['eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa', '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999'], ['100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0', 'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09'], ['e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d', '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d'], ['feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d', 'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088'], ['da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1', '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d'], ['53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0', '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8'], ['8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047', '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a'], ['385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862', '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453'], ['6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7', '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160'], ['3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd', '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0'], ['85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83', '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6'], ['948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a', '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589'], ['6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8', 'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17'], ['e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d', '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda'], ['e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725', '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd'], ['213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754', '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2'], ['4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c', '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6'], ['fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6', '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f'], ['76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39', 'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01'], ['c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891', '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3'], ['d895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b', 'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f'], ['b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03', '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7'], ['e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d', 'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78'], ['a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070', '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1'], ['90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4', 'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150'], ['8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da', '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82'], ['e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11', '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc'], ['8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e', 'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b'], ['e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41', '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51'], ['b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef', '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45'], ['d68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8', 'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120'], ['324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d', '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84'], ['4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96', '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d'], ['9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd', 'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d'], ['6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5', '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8'], ['a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266', '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8'], ['7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71', '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac'], ['928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac', 'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f'], ['85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751', '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962'], ['ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e', '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907'], ['827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241', 'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec'], ['eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3', 'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d'], ['e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f', '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414'], ['1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19', 'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd'], ['146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be', 'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0'], ['fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9', '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811'], ['da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2', '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1'], ['a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13', '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c'], ['174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c', 'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73'], ['959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba', '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd'], ['d2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151', 'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405'], ['64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073', 'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589'], ['8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458', '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e'], ['13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b', '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27'], ['bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366', 'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1'], ['8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa', '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482'], ['8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0', '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945'], ['dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787', '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573'], ['f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e', 'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82']]
  },
  naf: {
    wnd: 7,
    points: [['f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9', '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672'], ['2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4', 'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6'], ['5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc', '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da'], ['acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe', 'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37'], ['774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb', 'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b'], ['f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8', 'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81'], ['d7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e', '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58'], ['defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34', '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77'], ['2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c', '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a'], ['352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5', '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c'], ['2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f', '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67'], ['9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714', '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402'], ['daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729', 'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55'], ['c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db', '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482'], ['6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4', 'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82'], ['1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5', 'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396'], ['605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479', '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49'], ['62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d', '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf'], ['80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f', '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a'], ['7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb', 'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7'], ['d528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9', 'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933'], ['49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963', '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a'], ['77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74', '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6'], ['f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530', 'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37'], ['463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b', '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e'], ['f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247', 'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6'], ['caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1', 'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476'], ['2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120', '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40'], ['7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435', '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61'], ['754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18', '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683'], ['e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8', '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5'], ['186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb', '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b'], ['df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f', '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417'], ['5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143', 'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868'], ['290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba', 'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a'], ['af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45', 'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6'], ['766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a', '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996'], ['59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e', 'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e'], ['f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8', 'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d'], ['7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c', '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2'], ['948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519', 'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e'], ['7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab', '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437'], ['3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca', 'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311'], ['d3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf', '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4'], ['1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610', '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575'], ['733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4', 'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d'], ['15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c', 'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d'], ['a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940', 'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629'], ['e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980', 'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06'], ['311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3', '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374'], ['34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf', '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee'], ['f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63', '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1'], ['d7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448', 'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b'], ['32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf', '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661'], ['7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5', '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6'], ['ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6', '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e'], ['16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5', '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d'], ['eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99', 'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc'], ['78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51', 'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4'], ['494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5', '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c'], ['a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5', '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b'], ['c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997', '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913'], ['841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881', '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154'], ['5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5', '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865'], ['36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66', 'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc'], ['336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726', 'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224'], ['8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede', '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e'], ['1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94', '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6'], ['85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31', '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511'], ['29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51', 'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b'], ['a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252', 'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2'], ['4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5', 'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c'], ['d24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b', '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3'], ['ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4', '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d'], ['af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f', '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700'], ['e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889', '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4'], ['591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246', 'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196'], ['11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984', '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4'], ['3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a', 'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257'], ['cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030', 'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13'], ['c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197', '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096'], ['c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593', 'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38'], ['a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef', '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f'], ['347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38', '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448'], ['da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a', '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a'], ['c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111', '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4'], ['4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502', '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437'], ['3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea', 'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7'], ['cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26', '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d'], ['b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986', '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a'], ['d4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e', '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54'], ['48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4', '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77'], ['dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda', 'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517'], ['6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859', 'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10'], ['e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f', 'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125'], ['eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c', '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e'], ['13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942', 'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1'], ['ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a', '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2'], ['b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80', '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423'], ['ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d', '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8'], ['8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1', 'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758'], ['52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63', 'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375'], ['e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352', '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d'], ['7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193', 'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec'], ['5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00', '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0'], ['32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58', 'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c'], ['e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7', 'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4'], ['8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8', 'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f'], ['4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e', '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649'], ['3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d', 'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826'], ['674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b', '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5'], ['d32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f', 'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87'], ['30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6', '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b'], ['be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297', '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc'], ['93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a', '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c'], ['b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c', 'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f'], ['d5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52', '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a'], ['d3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb', 'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46'], ['463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065', 'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f'], ['7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917', '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03'], ['74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9', 'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08'], ['30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3', '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8'], ['9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57', '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373'], ['176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66', 'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3'], ['75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8', '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8'], ['809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721', '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1'], ['1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180', '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9']]
  }
};

/***/ }),

/***/ "./node_modules/elliptic/lib/elliptic/utils.js":
/*!*****************************************************!*\
  !*** ./node_modules/elliptic/lib/elliptic/utils.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;

var BN = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

var minAssert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

var minUtils = __webpack_require__(/*! minimalistic-crypto-utils */ "./node_modules/minimalistic-crypto-utils/lib/utils.js");

utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode; // Represent num in a w-NAF form

function getNAF(num, w) {
  var naf = [];
  var ws = 1 << w + 1;
  var k = num.clone();

  while (k.cmpn(1) >= 0) {
    var z;

    if (k.isOdd()) {
      var mod = k.andln(ws - 1);
      if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;else z = mod;
      k.isubn(z);
    } else {
      z = 0;
    }

    naf.push(z); // Optimization, shift by word if possible

    var shift = k.cmpn(0) !== 0 && k.andln(ws - 1) === 0 ? w + 1 : 1;

    for (var i = 1; i < shift; i++) {
      naf.push(0);
    }

    k.iushrn(shift);
  }

  return naf;
}

utils.getNAF = getNAF; // Represent k1, k2 in a Joint Sparse Form

function getJSF(k1, k2) {
  var jsf = [[], []];
  k1 = k1.clone();
  k2 = k2.clone();
  var d1 = 0;
  var d2 = 0;

  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
    // First phase
    var m14 = k1.andln(3) + d1 & 3;
    var m24 = k2.andln(3) + d2 & 3;
    if (m14 === 3) m14 = -1;
    if (m24 === 3) m24 = -1;
    var u1;

    if ((m14 & 1) === 0) {
      u1 = 0;
    } else {
      var m8 = k1.andln(7) + d1 & 7;
      if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;
    }

    jsf[0].push(u1);
    var u2;

    if ((m24 & 1) === 0) {
      u2 = 0;
    } else {
      var m8 = k2.andln(7) + d2 & 7;
      if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;else u2 = m24;
    }

    jsf[1].push(u2); // Second phase

    if (2 * d1 === u1 + 1) d1 = 1 - d1;
    if (2 * d2 === u2 + 1) d2 = 1 - d2;
    k1.iushrn(1);
    k2.iushrn(1);
  }

  return jsf;
}

utils.getJSF = getJSF;

function cachedProperty(obj, name, computer) {
  var key = '_' + name;

  obj.prototype[name] = function cachedProperty() {
    return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
  };
}

utils.cachedProperty = cachedProperty;

function parseBytes(bytes) {
  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;
}

utils.parseBytes = parseBytes;

function intFromLE(bytes) {
  return new BN(bytes, 'hex', 'le');
}

utils.intFromLE = intFromLE;

/***/ }),

/***/ "./node_modules/elliptic/package.json":
/*!********************************************!*\
  !*** ./node_modules/elliptic/package.json ***!
  \********************************************/
/*! exports provided: _args, _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _spec, _where, author, bugs, dependencies, description, devDependencies, files, homepage, keywords, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

module.exports = {"_args":[["elliptic@6.4.1","/Users/junu/work/wallet-extension"]],"_from":"elliptic@6.4.1","_id":"elliptic@6.4.1","_inBundle":false,"_integrity":"sha512-BsXLz5sqX8OHcsh7CqBMztyXARmGQ3LWPtGjJi6DiJHq5C/qvi9P3OqgswKSDftbu8+IoI/QDTAm2fFnQ9SZSQ==","_location":"/elliptic","_phantomChildren":{},"_requested":{"type":"version","registry":true,"raw":"elliptic@6.4.1","name":"elliptic","escapedName":"elliptic","rawSpec":"6.4.1","saveSpec":null,"fetchSpec":"6.4.1"},"_requiredBy":["/@herajs/crypto","/browserify-sign","/create-ecdh"],"_resolved":"https://registry.npmjs.org/elliptic/-/elliptic-6.4.1.tgz","_spec":"6.4.1","_where":"/Users/junu/work/wallet-extension","author":{"name":"Fedor Indutny","email":"fedor@indutny.com"},"bugs":{"url":"https://github.com/indutny/elliptic/issues"},"dependencies":{"bn.js":"^4.4.0","brorand":"^1.0.1","hash.js":"^1.0.0","hmac-drbg":"^1.0.0","inherits":"^2.0.1","minimalistic-assert":"^1.0.0","minimalistic-crypto-utils":"^1.0.0"},"description":"EC cryptography","devDependencies":{"brfs":"^1.4.3","coveralls":"^2.11.3","grunt":"^0.4.5","grunt-browserify":"^5.0.0","grunt-cli":"^1.2.0","grunt-contrib-connect":"^1.0.0","grunt-contrib-copy":"^1.0.0","grunt-contrib-uglify":"^1.0.1","grunt-mocha-istanbul":"^3.0.1","grunt-saucelabs":"^8.6.2","istanbul":"^0.4.2","jscs":"^2.9.0","jshint":"^2.6.0","mocha":"^2.1.0"},"files":["lib"],"homepage":"https://github.com/indutny/elliptic","keywords":["EC","Elliptic","curve","Cryptography"],"license":"MIT","main":"lib/elliptic.js","name":"elliptic","repository":{"type":"git","url":"git+ssh://git@github.com/indutny/elliptic.git"},"scripts":{"jscs":"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js","jshint":"jscs benchmarks/*.js lib/*.js lib/**/*.js lib/**/**/*.js test/index.js","lint":"npm run jscs && npm run jshint","test":"npm run lint && npm run unit","unit":"istanbul test _mocha --reporter=spec test/index.js","version":"grunt dist && git add dist/"},"version":"6.4.1"};

/***/ }),

/***/ "./node_modules/end-of-stream/index.js":
/*!*********************************************!*\
  !*** ./node_modules/end-of-stream/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var once = __webpack_require__(/*! once */ "./node_modules/once/once.js");

var noop = function noop() {};

var isRequest = function isRequest(stream) {
  return stream.setHeader && typeof stream.abort === 'function';
};

var isChildProcess = function isChildProcess(stream) {
  return stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3;
};

var eos = function eos(stream, opts, callback) {
  if (typeof opts === 'function') return eos(stream, null, opts);
  if (!opts) opts = {};
  callback = once(callback || noop);
  var ws = stream._writableState;
  var rs = stream._readableState;
  var readable = opts.readable || opts.readable !== false && stream.readable;
  var writable = opts.writable || opts.writable !== false && stream.writable;

  var onlegacyfinish = function onlegacyfinish() {
    if (!stream.writable) onfinish();
  };

  var onfinish = function onfinish() {
    writable = false;
    if (!readable) callback.call(stream);
  };

  var onend = function onend() {
    readable = false;
    if (!writable) callback.call(stream);
  };

  var onexit = function onexit(exitCode) {
    callback.call(stream, exitCode ? new Error('exited with error code: ' + exitCode) : null);
  };

  var onerror = function onerror(err) {
    callback.call(stream, err);
  };

  var onclose = function onclose() {
    if (readable && !(rs && rs.ended)) return callback.call(stream, new Error('premature close'));
    if (writable && !(ws && ws.ended)) return callback.call(stream, new Error('premature close'));
  };

  var onrequest = function onrequest() {
    stream.req.on('finish', onfinish);
  };

  if (isRequest(stream)) {
    stream.on('complete', onfinish);
    stream.on('abort', onclose);
    if (stream.req) onrequest();else stream.on('request', onrequest);
  } else if (writable && !ws) {
    // legacy streams
    stream.on('end', onlegacyfinish);
    stream.on('close', onlegacyfinish);
  }

  if (isChildProcess(stream)) stream.on('exit', onexit);
  stream.on('end', onend);
  stream.on('finish', onfinish);
  if (opts.error !== false) stream.on('error', onerror);
  stream.on('close', onclose);
  return function () {
    stream.removeListener('complete', onfinish);
    stream.removeListener('abort', onclose);
    stream.removeListener('request', onrequest);
    if (stream.req) stream.req.removeListener('finish', onfinish);
    stream.removeListener('end', onlegacyfinish);
    stream.removeListener('close', onlegacyfinish);
    stream.removeListener('finish', onfinish);
    stream.removeListener('exit', onexit);
    stream.removeListener('end', onend);
    stream.removeListener('error', onerror);
    stream.removeListener('close', onclose);
  };
};

module.exports = eos;

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}

module.exports = EventEmitter; // Backwards-compat with node 0.10.x

EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.

EventEmitter.defaultMaxListeners = 10; // Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.

EventEmitter.prototype.setMaxListeners = function (n) {
  if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function (type) {
  var er, handler, len, args, i, listeners;
  if (!this._events) this._events = {}; // If there is no 'error' event listener then throw.

  if (type === 'error') {
    if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
      er = arguments[1];

      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];
  if (isUndefined(handler)) return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;

      case 2:
        handler.call(this, arguments[1]);
        break;

      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower

      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;

    for (i = 0; i < len; i++) {
      listeners[i].apply(this, args);
    }
  }

  return true;
};

EventEmitter.prototype.addListener = function (type, listener) {
  var m;
  if (!isFunction(listener)) throw TypeError('listener must be a function');
  if (!this._events) this._events = {}; // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".

  if (this._events.newListener) this.emit('newListener', type, isFunction(listener.listener) ? listener.listener : listener);
  if (!this._events[type]) // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;else if (isObject(this._events[type])) // If we've already got an array, just append.
    this._events[type].push(listener);else // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener]; // Check for listener leak

  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);

      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function (type, listener) {
  if (!isFunction(listener)) throw TypeError('listener must be a function');
  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);
  return this;
}; // emits a 'removeListener' event iff the listener was removed


EventEmitter.prototype.removeListener = function (type, listener) {
  var list, position, length, i;
  if (!isFunction(listener)) throw TypeError('listener must be a function');
  if (!this._events || !this._events[type]) return this;
  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener || isFunction(list.listener) && list.listener === listener) {
    delete this._events[type];
    if (this._events.removeListener) this.emit('removeListener', type, listener);
  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener || list[i].listener && list[i].listener === listener) {
        position = i;
        break;
      }
    }

    if (position < 0) return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener) this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function (type) {
  var key, listeners;
  if (!this._events) return this; // not listening for removeListener, no need to emit

  if (!this._events.removeListener) {
    if (arguments.length === 0) this._events = {};else if (this._events[type]) delete this._events[type];
    return this;
  } // emit removeListener for all listeners on all events


  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }

    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length) {
      this.removeListener(type, listeners[listeners.length - 1]);
    }
  }

  delete this._events[type];
  return this;
};

EventEmitter.prototype.listeners = function (type) {
  var ret;
  if (!this._events || !this._events[type]) ret = [];else if (isFunction(this._events[type])) ret = [this._events[type]];else ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function (type) {
  if (this._events) {
    var evlistener = this._events[type];
    if (isFunction(evlistener)) return 1;else if (evlistener) return evlistener.length;
  }

  return 0;
};

EventEmitter.listenerCount = function (emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return _typeof(arg) === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

/***/ }),

/***/ "./node_modules/evp_bytestokey/index.js":
/*!**********************************************!*\
  !*** ./node_modules/evp_bytestokey/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var MD5 = __webpack_require__(/*! md5.js */ "./node_modules/md5.js/index.js");
/* eslint-disable camelcase */


function EVP_BytesToKey(password, salt, keyBits, ivLen) {
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary');

  if (salt) {
    if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary');
    if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length');
  }

  var keyLen = keyBits / 8;
  var key = Buffer.alloc(keyLen);
  var iv = Buffer.alloc(ivLen || 0);
  var tmp = Buffer.alloc(0);

  while (keyLen > 0 || ivLen > 0) {
    var hash = new MD5();
    hash.update(tmp);
    hash.update(password);
    if (salt) hash.update(salt);
    tmp = hash.digest();
    var used = 0;

    if (keyLen > 0) {
      var keyStart = key.length - keyLen;
      used = Math.min(keyLen, tmp.length);
      tmp.copy(key, keyStart, 0, used);
      keyLen -= used;
    }

    if (used < tmp.length && ivLen > 0) {
      var ivStart = iv.length - ivLen;
      var length = Math.min(ivLen, tmp.length - used);
      tmp.copy(iv, ivStart, used, used + length);
      ivLen -= length;
    }
  }

  tmp.fill(0);
  return {
    key: key,
    iv: iv
  };
}

module.exports = EVP_BytesToKey;

/***/ }),

/***/ "./node_modules/extension-port-stream/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/extension-port-stream/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var Duplex = __webpack_require__(/*! readable-stream */ "./node_modules/readable-stream/readable-browser.js").Duplex;

var inherits = __webpack_require__(/*! util */ "./node_modules/util/util.js").inherits;

var noop = function noop() {};

module.exports = PortDuplexStream;
inherits(PortDuplexStream, Duplex);
/**
 * Creates a stream that's both readable and writable.
 * The stream supports arbitrary objects.
 *
 * @class
 * @param {Object} port Remote Port object
 */

function PortDuplexStream(port) {
  Duplex.call(this, {
    objectMode: true
  });
  this._port = port;
  port.onMessage.addListener(this._onMessage.bind(this));
  port.onDisconnect.addListener(this._onDisconnect.bind(this));
}
/**
 * Callback triggered when a message is received from
 * the remote Port associated with this Stream.
 *
 * @private
 * @param {Object} msg - Payload from the onMessage listener of Port
 */


PortDuplexStream.prototype._onMessage = function (msg) {
  if (Buffer.isBuffer(msg)) {
    delete msg._isBuffer;
    var data = new Buffer(msg);
    this.push(data);
  } else {
    this.push(msg);
  }
};
/**
 * Callback triggered when the remote Port
 * associated with this Stream disconnects.
 *
 * @private
 */


PortDuplexStream.prototype._onDisconnect = function () {
  this.destroy();
};
/**
 * Explicitly sets read operations to a no-op
 */


PortDuplexStream.prototype._read = noop;
/**
 * Called internally when data should be written to
 * this writable stream.
 *
 * @private
 * @param {*} msg Arbitrary object to write
 * @param {string} encoding Encoding to use when writing payload
 * @param {Function} cb Called when writing is complete or an error occurs
 */

PortDuplexStream.prototype._write = function (msg, encoding, cb) {
  try {
    if (Buffer.isBuffer(msg)) {
      var data = msg.toJSON();
      data._isBuffer = true;

      this._port.postMessage(data);
    } else {
      this._port.postMessage(msg);
    }
  } catch (err) {
    return cb(new Error('PortDuplexStream - disconnected'));
  }

  cb();
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/extensionizer/extension-instance.js":
/*!**********************************************************!*\
  !*** ./node_modules/extensionizer/extension-instance.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var apis = ['alarms', 'bookmarks', 'browserAction', 'commands', 'contextMenus', 'cookies', 'downloads', 'events', 'extension', 'extensionTypes', 'history', 'i18n', 'idle', 'notifications', 'pageAction', 'runtime', 'storage', 'tabs', 'webNavigation', 'webRequest', 'windows'];
var hasChrome = typeof chrome !== 'undefined';
var hasWindow = typeof window !== 'undefined';
var hasBrowser = typeof browser !== 'undefined';

function Extension() {
  var _this = this;

  apis.forEach(function (api) {
    _this[api] = null;

    if (hasChrome) {
      try {
        if (chrome[api]) {
          _this[api] = chrome[api];
        }
      } catch (e) {}
    }

    if (hasWindow) {
      try {
        if (window[api]) {
          _this[api] = window[api];
        }
      } catch (e) {}
    }

    if (hasBrowser) {
      try {
        if (browser[api]) {
          _this[api] = browser[api];
        }
      } catch (e) {}

      try {
        _this.api = browser.extension[api];
      } catch (e) {}
    }
  });

  if (hasBrowser) {
    try {
      if (browser && browser.runtime) {
        this.runtime = browser.runtime;
      }
    } catch (e) {}

    try {
      if (browser && browser.browserAction) {
        this.browserAction = browser.browserAction;
      }
    } catch (e) {}
  }
}

module.exports = Extension;

/***/ }),

/***/ "./node_modules/extensionizer/index.js":
/*!*********************************************!*\
  !*** ./node_modules/extensionizer/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Extension.js
 *
 * A module for unifying browser differences in the WebExtension API.
 *
 * Initially implemented because Chrome hides all of their WebExtension API
 * behind a global `chrome` variable, but we'd like to start grooming
 * the code-base for cross-browser extension support.
 *
 * You can read more about the WebExtension API here:
 * https://developer.mozilla.org/en-US/Add-ons/WebExtensions
 */
var Extension = __webpack_require__(/*! ./extension-instance */ "./node_modules/extensionizer/extension-instance.js");

module.exports = new Extension();

/***/ }),

/***/ "./node_modules/hash-base/index.js":
/*!*****************************************!*\
  !*** ./node_modules/hash-base/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var Transform = __webpack_require__(/*! stream */ "./node_modules/stream-browserify/index.js").Transform;

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

function throwIfNotStringOrBuffer(val, prefix) {
  if (!Buffer.isBuffer(val) && typeof val !== 'string') {
    throw new TypeError(prefix + ' must be a string or a buffer');
  }
}

function HashBase(blockSize) {
  Transform.call(this);
  this._block = Buffer.allocUnsafe(blockSize);
  this._blockSize = blockSize;
  this._blockOffset = 0;
  this._length = [0, 0, 0, 0];
  this._finalized = false;
}

inherits(HashBase, Transform);

HashBase.prototype._transform = function (chunk, encoding, callback) {
  var error = null;

  try {
    this.update(chunk, encoding);
  } catch (err) {
    error = err;
  }

  callback(error);
};

HashBase.prototype._flush = function (callback) {
  var error = null;

  try {
    this.push(this.digest());
  } catch (err) {
    error = err;
  }

  callback(error);
};

HashBase.prototype.update = function (data, encoding) {
  throwIfNotStringOrBuffer(data, 'Data');
  if (this._finalized) throw new Error('Digest already called');
  if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding); // consume data

  var block = this._block;
  var offset = 0;

  while (this._blockOffset + data.length - offset >= this._blockSize) {
    for (var i = this._blockOffset; i < this._blockSize;) {
      block[i++] = data[offset++];
    }

    this._update();

    this._blockOffset = 0;
  }

  while (offset < data.length) {
    block[this._blockOffset++] = data[offset++];
  } // update length


  for (var j = 0, carry = data.length * 8; carry > 0; ++j) {
    this._length[j] += carry;
    carry = this._length[j] / 0x0100000000 | 0;
    if (carry > 0) this._length[j] -= 0x0100000000 * carry;
  }

  return this;
};

HashBase.prototype._update = function () {
  throw new Error('_update is not implemented');
};

HashBase.prototype.digest = function (encoding) {
  if (this._finalized) throw new Error('Digest already called');
  this._finalized = true;

  var digest = this._digest();

  if (encoding !== undefined) digest = digest.toString(encoding); // reset state

  this._block.fill(0);

  this._blockOffset = 0;

  for (var i = 0; i < 4; ++i) {
    this._length[i] = 0;
  }

  return digest;
};

HashBase.prototype._digest = function () {
  throw new Error('_digest is not implemented');
};

module.exports = HashBase;

/***/ }),

/***/ "./node_modules/hash.js/lib/hash.js":
/*!******************************************!*\
  !*** ./node_modules/hash.js/lib/hash.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var hash = exports;
hash.utils = __webpack_require__(/*! ./hash/utils */ "./node_modules/hash.js/lib/hash/utils.js");
hash.common = __webpack_require__(/*! ./hash/common */ "./node_modules/hash.js/lib/hash/common.js");
hash.sha = __webpack_require__(/*! ./hash/sha */ "./node_modules/hash.js/lib/hash/sha.js");
hash.ripemd = __webpack_require__(/*! ./hash/ripemd */ "./node_modules/hash.js/lib/hash/ripemd.js");
hash.hmac = __webpack_require__(/*! ./hash/hmac */ "./node_modules/hash.js/lib/hash/hmac.js"); // Proxy hash functions to the main object

hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/common.js":
/*!*************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/common.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/hash.js/lib/hash/utils.js");

var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';
  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}

exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length; // Enough data, try updating

  if (this.pending.length >= this._delta8) {
    msg = this.pending; // Process pending data in blocks

    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0) this.pending = null;
    msg = utils.join32(msg, 0, msg.length - r, this.endian);

    for (var i = 0; i < msg.length; i += this._delta32) {
      this._update(msg, i, i + this._delta32);
    }
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);
  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - (len + this.padLength) % bytes;
  var res = new Array(k + this.padLength);
  res[0] = 0x80;

  for (var i = 1; i < k; i++) {
    res[i] = 0;
  } // Append length


  len <<= 3;

  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++) {
      res[i++] = 0;
    }

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = len >>> 24 & 0xff;
    res[i++] = len >>> 16 & 0xff;
    res[i++] = len >>> 8 & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = len >>> 8 & 0xff;
    res[i++] = len >>> 16 & 0xff;
    res[i++] = len >>> 24 & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++) {
      res[i++] = 0;
    }
  }

  return res;
};

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/hmac.js":
/*!***********************************************!*\
  !*** ./node_modules/hash.js/lib/hash/hmac.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/hash.js/lib/hash/utils.js");

var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}

module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize); // Add padding to key

  for (var i = key.length; i < this.blockSize; i++) {
    key.push(0);
  }

  for (i = 0; i < key.length; i++) {
    key[i] ^= 0x36;
  }

  this.inner = new this.Hash().update(key); // 0x36 ^ 0x5c = 0x6a

  for (i = 0; i < key.length; i++) {
    key[i] ^= 0x6a;
  }

  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/ripemd.js":
/*!*************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/ripemd.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/hash.js/lib/hash/utils.js");

var common = __webpack_require__(/*! ./common */ "./node_modules/hash.js/lib/hash/common.js");

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160)) return new RIPEMD160();
  BlockHash.call(this);
  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
  this.endian = 'little';
}

utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;
RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;

  for (var j = 0; j < 80; j++) {
    var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }

  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'little');else return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);
}

function K(j) {
  if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;
}

var r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
var rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
var s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
var sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha.js":
/*!**********************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.sha1 = __webpack_require__(/*! ./sha/1 */ "./node_modules/hash.js/lib/hash/sha/1.js");
exports.sha224 = __webpack_require__(/*! ./sha/224 */ "./node_modules/hash.js/lib/hash/sha/224.js");
exports.sha256 = __webpack_require__(/*! ./sha/256 */ "./node_modules/hash.js/lib/hash/sha/256.js");
exports.sha384 = __webpack_require__(/*! ./sha/384 */ "./node_modules/hash.js/lib/hash/sha/384.js");
exports.sha512 = __webpack_require__(/*! ./sha/512 */ "./node_modules/hash.js/lib/hash/sha/512.js");

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/1.js":
/*!************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/1.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/hash.js/lib/hash/utils.js");

var common = __webpack_require__(/*! ../common */ "./node_modules/hash.js/lib/hash/common.js");

var shaCommon = __webpack_require__(/*! ./common */ "./node_modules/hash.js/lib/hash/sha/common.js");

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;
var sha1_K = [0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6];

function SHA1() {
  if (!(this instanceof SHA1)) return new SHA1();
  BlockHash.call(this);
  this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;
SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++) {
    W[i] = msg[start + i];
  }

  for (; i < W.length; i++) {
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
  }

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
};

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/224.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/224.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/hash.js/lib/hash/utils.js");

var SHA256 = __webpack_require__(/*! ./256 */ "./node_modules/hash.js/lib/hash/sha/256.js");

function SHA224() {
  if (!(this instanceof SHA224)) return new SHA224();
  SHA256.call(this);
  this.h = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];
}

utils.inherits(SHA224, SHA256);
module.exports = SHA224;
SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex') return utils.toHex32(this.h.slice(0, 7), 'big');else return utils.split32(this.h.slice(0, 7), 'big');
};

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/256.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/256.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/hash.js/lib/hash/utils.js");

var common = __webpack_require__(/*! ../common */ "./node_modules/hash.js/lib/hash/common.js");

var shaCommon = __webpack_require__(/*! ./common */ "./node_modules/hash.js/lib/hash/sha/common.js");

var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;
var BlockHash = common.BlockHash;
var sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];

function SHA256() {
  if (!(this instanceof SHA256)) return new SHA256();
  BlockHash.call(this);
  this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];
  this.k = sha256_K;
  this.W = new Array(64);
}

utils.inherits(SHA256, BlockHash);
module.exports = SHA256;
SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++) {
    W[i] = msg[start + i];
  }

  for (; i < W.length; i++) {
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
  }

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];
  assert(this.k.length === W.length);

  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
};

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/384.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/384.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/hash.js/lib/hash/utils.js");

var SHA512 = __webpack_require__(/*! ./512 */ "./node_modules/hash.js/lib/hash/sha/512.js");

function SHA384() {
  if (!(this instanceof SHA384)) return new SHA384();
  SHA512.call(this);
  this.h = [0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939, 0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4];
}

utils.inherits(SHA384, SHA512);
module.exports = SHA384;
SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h.slice(0, 12), 'big');else return utils.split32(this.h.slice(0, 12), 'big');
};

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/512.js":
/*!**************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/512.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/hash.js/lib/hash/utils.js");

var common = __webpack_require__(/*! ../common */ "./node_modules/hash.js/lib/hash/common.js");

var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = common.BlockHash;
var sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];

function SHA512() {
  if (!(this instanceof SHA512)) return new SHA512();
  BlockHash.call(this);
  this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];
  this.k = sha512_K;
  this.W = new Array(160);
}

utils.inherits(SHA512, BlockHash);
module.exports = SHA512;
SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W; // 32 x 32bit words

  for (var i = 0; i < 32; i++) {
    W[i] = msg[start + i];
  }

  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2

    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14]; // i - 7

    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15

    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32]; // i - 16

    var c3_lo = W[i - 31];
    W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;
  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];
  assert(this.k.length === W.length);

  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];
    var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
    hh = gh;
    hl = gl;
    gh = fh;
    gl = fl;
    fh = eh;
    fl = el;
    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);
    dh = ch;
    dl = cl;
    ch = bh;
    cl = bl;
    bh = ah;
    bl = al;
    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = xh & yh ^ ~xh & zh;
  if (r < 0) r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = xl & yl ^ ~xl & zl;
  if (r < 0) r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = xh & yh ^ xh & zh ^ yh & zh;
  if (r < 0) r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = xl & yl ^ xl & zl ^ yl & zl;
  if (r < 0) r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2); // 34

  var c2_hi = rotr64_hi(xl, xh, 7); // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2); // 34

  var c2_lo = rotr64_lo(xl, xh, 7); // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9); // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9); // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);
  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);
  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29); // 61

  var c2_hi = shr64_hi(xh, xl, 6);
  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0) r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29); // 61

  var c2_lo = shr64_lo(xh, xl, 6);
  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0) r += 0x100000000;
  return r;
}

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/sha/common.js":
/*!*****************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/sha/common.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/hash.js/lib/hash/utils.js");

var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0) return ch32(x, y, z);
  if (s === 1 || s === 3) return p32(x, y, z);
  if (s === 2) return maj32(x, y, z);
}

exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return x & y ^ ~x & z;
}

exports.ch32 = ch32;

function maj32(x, y, z) {
  return x & y ^ x & z ^ y & z;
}

exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}

exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}

exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}

exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
}

exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
}

exports.g1_256 = g1_256;

/***/ }),

/***/ "./node_modules/hash.js/lib/hash/utils.js":
/*!************************************************!*\
  !*** ./node_modules/hash.js/lib/hash/utils.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

exports.inherits = inherits;

function toArray(msg, enc) {
  if (Array.isArray(msg)) return msg.slice();
  if (!msg) return [];
  var res = [];

  if (typeof msg === 'string') {
    if (!enc) {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi) res.push(hi, lo);else res.push(lo);
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0) msg = '0' + msg;

      for (i = 0; i < msg.length; i += 2) {
        res.push(parseInt(msg[i] + msg[i + 1], 16));
      }
    }
  } else {
    for (i = 0; i < msg.length; i++) {
      res[i] = msg[i] | 0;
    }
  }

  return res;
}

exports.toArray = toArray;

function toHex(msg) {
  var res = '';

  for (var i = 0; i < msg.length; i++) {
    res += zero2(msg[i].toString(16));
  }

  return res;
}

exports.toHex = toHex;

function htonl(w) {
  var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;
  return res >>> 0;
}

exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';

  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little') w = htonl(w);
    res += zero8(w.toString(16));
  }

  return res;
}

exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1) return '0' + word;else return word;
}

exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;
}

exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);

  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
    res[i] = w >>> 0;
  }

  return res;
}

exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);

  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];

    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = m >>> 16 & 0xff;
      res[k + 2] = m >>> 8 & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = m >>> 16 & 0xff;
      res[k + 1] = m >>> 8 & 0xff;
      res[k] = m & 0xff;
    }
  }

  return res;
}

exports.split32 = split32;

function rotr32(w, b) {
  return w >>> b | w << 32 - b;
}

exports.rotr32 = rotr32;

function rotl32(w, b) {
  return w << b | w >>> 32 - b;
}

exports.rotl32 = rotl32;

function sum32(a, b) {
  return a + b >>> 0;
}

exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return a + b + c >>> 0;
}

exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return a + b + c + d >>> 0;
}

exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return a + b + c + d + e >>> 0;
}

exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];
  var lo = al + bl >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}

exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = al + bl >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}

exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}

exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = lo + bl >>> 0;
  carry += lo < al ? 1 : 0;
  lo = lo + cl >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = lo + dl >>> 0;
  carry += lo < dl ? 1 : 0;
  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}

exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}

exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = lo + bl >>> 0;
  carry += lo < al ? 1 : 0;
  lo = lo + cl >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = lo + dl >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = lo + el >>> 0;
  carry += lo < el ? 1 : 0;
  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}

exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;
  return lo >>> 0;
}

exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = al << 32 - num | ah >>> num;
  return r >>> 0;
}

exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = ah << 32 - num | al >>> num;
  return r >>> 0;
}

exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}

exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = ah << 32 - num | al >>> num;
  return r >>> 0;
}

exports.shr64_lo = shr64_lo;

/***/ }),

/***/ "./node_modules/hmac-drbg/lib/hmac-drbg.js":
/*!*************************************************!*\
  !*** ./node_modules/hmac-drbg/lib/hmac-drbg.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hash = __webpack_require__(/*! hash.js */ "./node_modules/hash.js/lib/hash.js");

var utils = __webpack_require__(/*! minimalistic-crypto-utils */ "./node_modules/minimalistic-crypto-utils/lib/utils.js");

var assert = __webpack_require__(/*! minimalistic-assert */ "./node_modules/minimalistic-assert/index.js");

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;
  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;
  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;
  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils.toArray(options.pers, options.persEnc || 'hex');
  assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._init(entropy, nonce, pers);
}

module.exports = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);
  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);

  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);

  this._reseed = 1;
  this.reseedInterval = 0x1000000000000; // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new hash.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac().update(this.V).update([0x00]);

  if (seed) kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed) return;
  this.K = this._hmac().update(this.V).update([0x01]).update(seed).digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils.toArray(entropy, entropyEnc);
  add = utils.toArray(add, addEnc);
  assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));

  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval) throw new Error('Reseed is required'); // Optional encoding

  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  } // Optional additional data


  if (add) {
    add = utils.toArray(add, addEnc || 'hex');

    this._update(add);
  }

  var temp = [];

  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);

  this._update(add);

  this._reseed++;
  return utils.encode(res, enc);
};

/***/ }),

/***/ "./node_modules/idb/build/esm/chunk.js":
/*!*********************************************!*\
  !*** ./node_modules/idb/build/esm/chunk.js ***!
  \*********************************************/
/*! exports provided: a, b, c, d, e */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return wrap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return addTraps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return instanceOfAny; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return reverseTransformCache; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return unwrap; });
var instanceOfAny = function instanceOfAny(object, constructors) {
  return constructors.some(function (c) {
    return object instanceof c;
  });
};

var idbProxyableTypes;
var cursorAdvanceMethods; // This is a function to prevent it throwing up in node environments.

function getIdbProxyableTypes() {
  return idbProxyableTypes || (idbProxyableTypes = [IDBDatabase, IDBObjectStore, IDBIndex, IDBCursor, IDBTransaction]);
} // This is a function to prevent it throwing up in node environments.


function getCursorAdvanceMethods() {
  return cursorAdvanceMethods || (cursorAdvanceMethods = [IDBCursor.prototype.advance, IDBCursor.prototype.continue, IDBCursor.prototype.continuePrimaryKey]);
}

var cursorRequestMap = new WeakMap();
var transactionDoneMap = new WeakMap();
var transactionStoreNamesMap = new WeakMap();
var transformCache = new WeakMap();
var reverseTransformCache = new WeakMap();

function promisifyRequest(request) {
  var promise = new Promise(function (resolve, reject) {
    var unlisten = function unlisten() {
      request.removeEventListener('success', success);
      request.removeEventListener('error', error);
    };

    var success = function success() {
      resolve(wrap(request.result));
      unlisten();
    };

    var error = function error() {
      reject(request.error);
      unlisten();
    };

    request.addEventListener('success', success);
    request.addEventListener('error', error);
  });
  promise.then(function (value) {
    // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval
    // (see wrapFunction).
    if (value instanceof IDBCursor) {
      cursorRequestMap.set(value, request);
    }
  }); // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This
  // is because we create many promises from a single IDBRequest.

  reverseTransformCache.set(promise, request);
  return promise;
}

function cacheDonePromiseForTransaction(tx) {
  // Early bail if we've already created a done promise for this transaction.
  if (transactionDoneMap.has(tx)) return;
  var done = new Promise(function (resolve, reject) {
    var unlisten = function unlisten() {
      tx.removeEventListener('complete', complete);
      tx.removeEventListener('error', error);
      tx.removeEventListener('abort', error);
    };

    var complete = function complete() {
      resolve();
      unlisten();
    };

    var error = function error() {
      reject(tx.error);
      unlisten();
    };

    tx.addEventListener('complete', complete);
    tx.addEventListener('error', error);
    tx.addEventListener('abort', error);
  }); // Cache it for later retrieval.

  transactionDoneMap.set(tx, done);
}

var idbProxyTraps = {
  get: function get(target, prop, receiver) {
    if (target instanceof IDBTransaction) {
      // Special handling for transaction.done.
      if (prop === 'done') return transactionDoneMap.get(target); // Polyfill for objectStoreNames because of Edge.

      if (prop === 'objectStoreNames') {
        return target.objectStoreNames || transactionStoreNamesMap.get(target);
      } // Make tx.store return the only store in the transaction, or undefined if there are many.


      if (prop === 'store') {
        return receiver.objectStoreNames[1] ? undefined : receiver.objectStore(receiver.objectStoreNames[0]);
      }
    } // Else transform whatever we get back.


    return wrap(target[prop]);
  },
  has: function has(target, prop) {
    if (target instanceof IDBTransaction && (prop === 'done' || prop === 'store')) return true;
    return prop in target;
  }
};

function addTraps(callback) {
  idbProxyTraps = callback(idbProxyTraps);
}

function wrapFunction(func) {
  // Due to expected object equality (which is enforced by the caching in `wrap`), we
  // only create one new func per func.
  // Edge doesn't support objectStoreNames (booo), so we polyfill it here.
  if (func === IDBDatabase.prototype.transaction && 'objectStoreNames' in IDBTransaction.prototype) {
    return function (storeNames) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var tx = func.call.apply(func, [unwrap(this), storeNames].concat(args));
      transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);
      return wrap(tx);
    };
  } // Cursor methods are special, as the behaviour is a little more different to standard IDB. In
  // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the
  // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense
  // with real promises, so each advance methods returns a new promise for the cursor object, or
  // undefined if the end of the cursor has been reached.


  if (getCursorAdvanceMethods().includes(func)) {
    return function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
      // the original object.
      func.apply(unwrap(this), args);
      return wrap(cursorRequestMap.get(this));
    };
  }

  return function () {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
    // the original object.
    return wrap(func.apply(unwrap(this), args));
  };
}

function transformCachableValue(value) {
  if (typeof value === 'function') return wrapFunction(value); // This doesn't return, it just creates a 'done' promise for the transaction,
  // which is later returned for transaction.done (see idbObjectHandler).

  if (value instanceof IDBTransaction) cacheDonePromiseForTransaction(value);
  if (instanceOfAny(value, getIdbProxyableTypes())) return new Proxy(value, idbProxyTraps); // Return the same value back if we're not going to transform it.

  return value;
}

function wrap(value) {
  // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because
  // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.
  if (value instanceof IDBRequest) return promisifyRequest(value); // If we've already transformed this value before, reuse the transformed value.
  // This is faster, but it also provides object equality.

  if (transformCache.has(value)) return transformCache.get(value);
  var newValue = transformCachableValue(value); // Not all types are transformed.
  // These may be primitive types, so they can't be WeakMap keys.

  if (newValue !== value) {
    transformCache.set(value, newValue);
    reverseTransformCache.set(newValue, value);
  }

  return newValue;
}

var unwrap = function unwrap(value) {
  return reverseTransformCache.get(value);
};



/***/ }),

/***/ "./node_modules/idb/build/esm/index.js":
/*!*********************************************!*\
  !*** ./node_modules/idb/build/esm/index.js ***!
  \*********************************************/
/*! exports provided: unwrap, wrap, openDB, deleteDB */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "openDB", function() { return openDB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deleteDB", function() { return deleteDB; });
/* harmony import */ var _chunk_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk.js */ "./node_modules/idb/build/esm/chunk.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "unwrap", function() { return _chunk_js__WEBPACK_IMPORTED_MODULE_0__["e"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "wrap", function() { return _chunk_js__WEBPACK_IMPORTED_MODULE_0__["a"]; });



/**
 * Open a database.
 *
 * @param name Name of the database.
 * @param version Schema version.
 * @param callbacks Additional callbacks.
 */

function openDB(name, version) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      blocked = _ref.blocked,
      upgrade = _ref.upgrade,
      blocking = _ref.blocking;

  var request = indexedDB.open(name, version);
  var openPromise = Object(_chunk_js__WEBPACK_IMPORTED_MODULE_0__["a"])(request);

  if (upgrade) {
    request.addEventListener('upgradeneeded', function (event) {
      upgrade(Object(_chunk_js__WEBPACK_IMPORTED_MODULE_0__["a"])(request.result), event.oldVersion, event.newVersion, Object(_chunk_js__WEBPACK_IMPORTED_MODULE_0__["a"])(request.transaction));
    });
  }

  if (blocked) request.addEventListener('blocked', function () {
    return blocked();
  });
  if (blocking) openPromise.then(function (db) {
    return db.addEventListener('versionchange', blocking);
  });
  return openPromise;
}
/**
 * Delete a database.
 *
 * @param name Name of the database.
 */


function deleteDB(name) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      blocked = _ref2.blocked;

  var request = indexedDB.deleteDatabase(name);
  if (blocked) request.addEventListener('blocked', function () {
    return blocked();
  });
  return Object(_chunk_js__WEBPACK_IMPORTED_MODULE_0__["a"])(request).then(function () {
    return undefined;
  });
}

var readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];
var writeMethods = ['put', 'add', 'delete', 'clear'];
var cachedMethods = new Map();

function getMethod(target, prop) {
  if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === 'string')) return;
  if (cachedMethods.get(prop)) return cachedMethods.get(prop);
  var targetFuncName = prop.replace(/FromIndex$/, '');
  var useIndex = prop !== targetFuncName; // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.

  if (!(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype)) {
    return;
  }

  var method;

  if (readMethods.includes(targetFuncName)) {
    method = function method(storeName) {
      var _target;

      var target = this.transaction(storeName).store;

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (useIndex) target = target.index(args.shift());
      return (_target = target)[targetFuncName].apply(_target, args);
    };
  }

  if (writeMethods.includes(targetFuncName)) {
    method = function method(storeName) {
      var _tx$store;

      var tx = this.transaction(storeName, 'readwrite');

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      (_tx$store = tx.store)[targetFuncName].apply(_tx$store, args);

      return tx.done;
    };
  }

  if (method) cachedMethods.set(prop, method);
  return method;
}

Object(_chunk_js__WEBPACK_IMPORTED_MODULE_0__["b"])(function (oldTraps) {
  return {
    get: function get(target, prop, receiver) {
      return getMethod(target, prop) || oldTraps.get(target, prop, receiver);
    },
    has: function has(target, prop) {
      return !!getMethod(target, prop) || oldTraps.has(target, prop);
    }
  };
});


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var nBits = -7;
  var i = isLE ? nBytes - 1 : 0;
  var d = isLE ? -1 : 1;
  var s = buffer[offset + i];
  i += d;
  e = s & (1 << -nBits) - 1;
  s >>= -nBits;
  nBits += eLen;

  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;

  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : (s ? -1 : 1) * Infinity;
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }

  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c;
  var eLen = nBytes * 8 - mLen - 1;
  var eMax = (1 << eLen) - 1;
  var eBias = eMax >> 1;
  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
  var i = isLE ? 0 : nBytes - 1;
  var d = isLE ? 1 : -1;
  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);

    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }

    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }

    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = e << mLen | m;
  eLen += mLen;

  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128;
};

/***/ }),

/***/ "./node_modules/indexof/index.js":
/*!***************************************!*\
  !*** ./node_modules/indexof/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var indexOf = [].indexOf;

module.exports = function (arr, obj) {
  if (indexOf) return arr.indexOf(obj);

  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }

  return -1;
};

/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;

    var TempCtor = function TempCtor() {};

    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

/***/ }),

/***/ "./node_modules/jdenticon/dist/jdenticon.min.js":
/*!******************************************************!*\
  !*** ./node_modules/jdenticon/dist/jdenticon.min.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Jdenticon 2.1.0 | jdenticon.com | MIT licensed | (c) 2014-2018 Daniel Mester Pirttijärvi
(function (q, y, z) {
  var t = z(q, q.jQuery);
  "undefined" !== typeof module && "exports" in module ? module.exports = t :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
    return t;
  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
})(this, "jdenticon", function (q, y) {
  function z(a, b, c) {
    for (var d = document.createElementNS("http://www.w3.org/2000/svg", b), f = 2; f + 1 < arguments.length; f += 2) {
      d.setAttribute(arguments[f], arguments[f + 1]);
    }

    a.appendChild(d);
  }

  function t(a) {
    this.b = Math.min(Number(a.getAttribute("width")) || 100, Number(a.getAttribute("height")) || 100);

    for (this.a = a; a.firstChild;) {
      a.removeChild(a.firstChild);
    }

    a.setAttribute("viewBox", "0 0 " + this.b + " " + this.b);
    a.setAttribute("preserveAspectRatio", "xMidYMid meet");
  }

  function K(a) {
    this.b = a;
    this.a = '\x3csvg xmlns\x3d"http://www.w3.org/2000/svg" width\x3d"' + a + '" height\x3d"' + a + '" viewBox\x3d"0 0 ' + a + " " + a + '" preserveAspectRatio\x3d"xMidYMid meet"\x3e';
  }

  function N(a) {
    return function (a) {
      for (var b = [], d = 0; d < a.length; d++) {
        for (var f = a[d], e = 28; 0 <= e; e -= 4) {
          b.push((f >>> e & 15).toString(16));
        }
      }

      return b.join("");
    }(function (a) {
      for (var b = 1732584193, d = 4023233417, f = 2562383102, e = 271733878, h = 3285377520, k = [b, d, f, e, h], g = 0; g < a.length; g++) {
        for (var u = a[g], l = 16; 80 > l; l++) {
          var A = u[l - 3] ^ u[l - 8] ^ u[l - 14] ^ u[l - 16];
          u[l] = A << 1 | A >>> 31;
        }

        for (l = 0; 80 > l; l++) {
          A = (b << 5 | b >>> 27) + (20 > l ? (d & f ^ ~d & e) + 1518500249 : 40 > l ? (d ^ f ^ e) + 1859775393 : 60 > l ? (d & f ^ d & e ^ f & e) + 2400959708 : (d ^ f ^ e) + 3395469782) + h + u[l], h = e, e = f, f = d << 30 | d >>> 2, d = b, b = A | 0;
        }

        k[0] = b = k[0] + b | 0;
        k[1] = d = k[1] + d | 0;
        k[2] = f = k[2] + f | 0;
        k[3] = e = k[3] + e | 0;
        k[4] = h = k[4] + h | 0;
      }

      return k;
    }(function (a) {
      function b(a, b) {
        for (var c = [], d = -1, e = 0; e < b; e++) {
          d = e / 4 | 0, c[d] = (c[d] || 0) + (f[a + e] << 8 * (3 - (e & 3)));
        }

        for (; 16 > ++d;) {
          c[d] = 0;
        }

        return c;
      }

      var d = encodeURI(a),
          f = [];
      a = 0;
      var e,
          h = [];

      for (e = 0; e < d.length; e++) {
        if ("%" == d[e]) {
          var k = r(d, e + 1, 2);
          e += 2;
        } else k = d.charCodeAt(e);

        f[a++] = k;
      }

      f[a++] = 128;

      for (e = 0; e + 64 <= a; e += 64) {
        h.push(b(e, 64));
      }

      d = a - e;
      e = b(e, d);
      64 < d + 8 && (h.push(e), e = b(0, 0));
      e[15] = 8 * a - 8;
      h.push(e);
      return h;
    }(a)));
  }

  function E(a, b) {
    var c = a.canvas.width,
        d = a.canvas.height;
    a.save();
    this.b = a;
    b ? this.a = b : (this.a = Math.min(c, d), a.translate((c - this.a) / 2 | 0, (d - this.a) / 2 | 0));
    a.clearRect(0, 0, this.a, this.a);
  }

  function v(a) {
    a |= 0;
    return 0 > a ? "00" : 16 > a ? "0" + a.toString(16) : 256 > a ? a.toString(16) : "ff";
  }

  function F(a, b, c) {
    c = 0 > c ? c + 6 : 6 < c ? c - 6 : c;
    return v(255 * (1 > c ? a + (b - a) * c : 3 > c ? b : 4 > c ? a + (b - a) * (4 - c) : a));
  }

  function O(a) {
    "undefined" != typeof MutationObserver && new MutationObserver(function (b) {
      for (var c = 0; c < b.length; c++) {
        for (var d = b[c], f = d.addedNodes, e = 0; f && e < f.length; e++) {
          var h = f[e];
          if (1 == h.nodeType) if (g.w(h)) a(h);else {
            h = h.querySelectorAll(g.A);

            for (var k = 0; k < h.length; k++) {
              a(h[k]);
            }
          }
        }

        "attributes" == d.type && g.w(d.target) && a(d.target);
      }
    }).observe(document.body, {
      childList: !0,
      attributes: !0,
      attributeFilter: [g.o, g.s, "width", "height"],
      subtree: !0
    });
  }

  function r(a, b, c) {
    return parseInt(a.substr(b, c), 16);
  }

  function p(a) {
    return (10 * a + .5 | 0) / 10;
  }

  function L() {
    this.j = "";
  }

  function G(a) {
    this.b = {};
    this.h = a;
    this.a = a.b;
  }

  function M(a) {
    this.h = a;
    this.c = w.a;
  }

  function P(a, b) {
    a = b.O(a);
    return [_m.i(a, b.H, b.G(0)), _m.i(a, b.v, b.u(.5)), _m.i(a, b.H, b.G(1)), _m.i(a, b.v, b.u(1)), _m.i(a, b.v, b.u(0))];
  }

  function B(a, b) {
    this.x = a;
    this.y = b;
  }

  function w(a, b, c, d) {
    this.b = a;
    this.c = b;
    this.h = c;
    this.a = d;
  }

  function H(a, b, c, d, f, e, h) {
    function k(e, f, k, h, g) {
      h = h ? r(b, h, 1) : 0;
      f = f[r(b, k, 1) % f.length];
      a.D(p[n[e]]);

      for (e = 0; e < g.length; e++) {
        m.c = new w(c + g[e][0] * l, d + g[e][1] * l, l, h++ % 4), f(m, l, e);
      }

      a.F();
    }

    function g(a) {
      if (0 <= a.indexOf(q)) for (var b = 0; b < a.length; b++) {
        if (0 <= n.indexOf(a[b])) return !0;
      }
    }

    h.C && a.m(h.C);
    e = .5 + f * (void 0 === e ? .08 : e) | 0;
    f -= 2 * e;
    var m = new M(a),
        l = 0 | f / 4;
    c += 0 | e + f / 2 - 2 * l;
    d += 0 | e + f / 2 - 2 * l;
    var p = P(r(b, -7) / 268435455, h),
        n = [];

    for (f = 0; 3 > f; f++) {
      var q = r(b, 8 + f, 1) % p.length;
      if (g([0, 4]) || g([2, 3])) q = 1;
      n.push(q);
    }

    k(0, I.I, 2, 3, [[1, 0], [2, 0], [2, 3], [1, 3], [0, 1], [3, 1], [3, 2], [0, 2]]);
    k(1, I.I, 4, 5, [[0, 0], [3, 0], [3, 3], [0, 3]]);
    k(2, I.M, 1, null, [[1, 1], [2, 1], [2, 2], [1, 2]]);
    a.finish();
  }

  function J() {
    function a(a, b) {
      var d = c[a];
      d && 1 < d.length || (d = b);
      return function (a) {
        a = d[0] + a * (d[1] - d[0]);
        return 0 > a ? 0 : 1 < a ? 1 : a;
      };
    }

    var b = n.config || q.jdenticon_config || {},
        c = b.lightness || {},
        d = b.saturation || {},
        f = "color" in d ? d.color : d;
    d = d.grayscale;
    return {
      O: function O(a) {
        var c = b.hues,
            d;
        c && 0 < c.length && (d = c[0 | .999 * a * c.length]);
        return "number" == typeof d ? (d / 360 % 1 + 1) % 1 : a;
      },
      v: "number" == typeof f ? f : .5,
      H: "number" == typeof d ? d : 0,
      u: a("color", [.4, .8]),
      G: a("grayscale", [.3, .9]),
      C: _m.parse(b.backColor)
    };
  }

  function C(a) {
    return /^[0-9a-f]{11,}$/i.test(a) && a;
  }

  function D(a) {
    return N(null == a ? "" : "" + a);
  }

  function x(a, b, c) {
    if ("string" === typeof a) {
      if (g.J) {
        a = document.querySelectorAll(a);

        for (var d = 0; d < a.length; d++) {
          x(a[d], b, c);
        }
      }
    } else if (d = g.w(a)) if (b = C(b) || null != b && D(b) || C(a.getAttribute(g.s)) || a.hasAttribute(g.o) && D(a.getAttribute(g.o))) a = d == g.B ? new G(new t(a)) : new E(a.getContext("2d")), H(a, b, 0, 0, a.a, c, J());
  }

  function n() {
    g.J && x(g.A);
  }

  function Q() {
    var a = (n.config || q.jdenticon_config || {}).replaceMode;
    "never" != a && (n(), "observe" == a && O(x));
  }

  t.prototype = {
    m: function m(a, b) {
      b && z(this.a, "rect", "width", "100%", "height", "100%", "fill", a, "opacity", b);
    },
    c: function c(a, b) {
      z(this.a, "path", "fill", a, "d", b);
    }
  };
  K.prototype = {
    m: function m(a, b) {
      b && (this.a += '\x3crect width\x3d"100%" height\x3d"100%" fill\x3d"' + a + '" opacity\x3d"' + b.toFixed(2) + '"/\x3e');
    },
    c: function c(a, b) {
      this.a += '\x3cpath fill\x3d"' + a + '" d\x3d"' + b + '"/\x3e';
    },
    toString: function toString() {
      return this.a + "\x3c/svg\x3e";
    }
  };
  var g = {
    B: 1,
    L: 2,
    s: "data-jdenticon-hash",
    o: "data-jdenticon-value",
    J: "undefined" !== typeof document && "querySelectorAll" in document,
    w: function w(a) {
      if (a) {
        var b = a.tagName;
        if (/svg/i.test(b)) return g.B;
        if (/canvas/i.test(b) && "getContext" in a) return g.L;
      }
    }
  };
  g.A = "[" + g.s + "],[" + g.o + "]";
  E.prototype = {
    m: function m(a) {
      var b = this.b,
          c = this.a;
      b.fillStyle = _m.K(a);
      b.fillRect(0, 0, c, c);
    },
    D: function D(a) {
      this.b.fillStyle = _m.K(a);
      this.b.beginPath();
    },
    F: function F() {
      this.b.fill();
    },
    f: function f(a) {
      var b = this.b,
          c;
      b.moveTo(a[0].x, a[0].y);

      for (c = 1; c < a.length; c++) {
        b.lineTo(a[c].x, a[c].y);
      }

      b.closePath();
    },
    g: function g(a, b, c) {
      var d = this.b;
      b /= 2;
      d.moveTo(a.x + b, a.y + b);
      d.arc(a.x + b, a.y + b, b, 0, 2 * Math.PI, c);
      d.closePath();
    },
    finish: function finish() {
      this.b.restore();
    }
  };
  var _m = {
    P: function P(a, b, c) {
      return "#" + v(a) + v(b) + v(c);
    },
    parse: function parse(a) {
      if (/^#[0-9a-f]{3,8}$/i.test(a)) {
        if (6 > a.length) {
          var b = a[1],
              c = a[2],
              d = a[3];
          a = a[4] || "";
          return "#" + b + b + c + c + d + d + a + a;
        }

        if (7 == a.length || 8 < a.length) return a;
      }
    },
    K: function K(a) {
      var b = r(a, 7, 2);
      return isNaN(b) ? a : "rgba(" + r(a, 1, 2) + "," + r(a, 3, 2) + "," + r(a, 5, 2) + "," + (b / 255).toFixed(2) + ")";
    },
    N: function N(a, b, c) {
      if (0 == b) return a = v(255 * c), "#" + a + a + a;
      b = .5 >= c ? c * (b + 1) : c + b - c * b;
      c = 2 * c - b;
      return "#" + F(c, b, 6 * a + 2) + F(c, b, 6 * a) + F(c, b, 6 * a - 2);
    },
    i: function i(a, b, c) {
      var d = [.55, .5, .5, .46, .6, .55, .55][6 * a + .5 | 0];
      return _m.N(a, b, .5 > c ? c * d * 2 : d + (c - .5) * (1 - d) * 2);
    }
  },
      I = {
    M: [function (a, b) {
      var c = .42 * b;
      a.f([0, 0, b, 0, b, b - 2 * c, b - c, b, 0, b]);
    }, function (a, b) {
      var c = 0 | .5 * b;
      a.b(b - c, 0, c, 0 | .8 * b, 2);
    }, function (a, b) {
      var c = 0 | b / 3;
      a.a(c, c, b - c, b - c);
    }, function (a, b) {
      var c = .1 * b,
          d = 6 > b ? 1 : 8 > b ? 2 : 0 | .25 * b;
      c = 1 < c ? 0 | c : .5 < c ? 1 : c;
      a.a(d, d, b - c - d, b - c - d);
    }, function (a, b) {
      var c = 0 | .15 * b,
          d = 0 | .5 * b;
      a.g(b - d - c, b - d - c, d);
    }, function (a, b) {
      var c = .1 * b,
          d = 4 * c;
      3 < d && (d |= 0);
      a.a(0, 0, b, b);
      a.f([d, d, b - c, d, d + (b - d - c) / 2, b - c], !0);
    }, function (a, b) {
      a.f([0, 0, b, 0, b, .7 * b, .4 * b, .4 * b, .7 * b, b, 0, b]);
    }, function (a, b) {
      a.b(b / 2, b / 2, b / 2, b / 2, 3);
    }, function (a, b) {
      a.a(0, 0, b, b / 2);
      a.a(0, b / 2, b / 2, b / 2);
      a.b(b / 2, b / 2, b / 2, b / 2, 1);
    }, function (a, b) {
      var c = .14 * b,
          d = 4 > b ? 1 : 6 > b ? 2 : 0 | .35 * b;
      c = 8 > b ? c : 0 | c;
      a.a(0, 0, b, b);
      a.a(d, d, b - d - c, b - d - c, !0);
    }, function (a, b) {
      var c = .12 * b,
          d = 3 * c;
      a.a(0, 0, b, b);
      a.g(d, d, b - c - d, !0);
    }, function (a, b) {
      a.b(b / 2, b / 2, b / 2, b / 2, 3);
    }, function (a, b) {
      var c = .25 * b;
      a.a(0, 0, b, b);
      a.l(c, c, b - c, b - c, !0);
    }, function (a, b, c) {
      var d = .4 * b;
      c || a.g(d, d, 1.2 * b);
    }],
    I: [function (a, b) {
      a.b(0, 0, b, b, 0);
    }, function (a, b) {
      a.b(0, b / 2, b, b / 2, 0);
    }, function (a, b) {
      a.l(0, 0, b, b);
    }, function (a, b) {
      var c = b / 6;
      a.g(c, c, b - 2 * c);
    }]
  };
  L.prototype = {
    f: function f(a) {
      for (var b = "M" + p(a[0].x) + " " + p(a[0].y), c = 1; c < a.length; c++) {
        b += "L" + p(a[c].x) + " " + p(a[c].y);
      }

      this.j += b + "Z";
    },
    g: function g(a, b, c) {
      c = c ? 0 : 1;
      var d = p(b / 2),
          f = p(b);
      this.j += "M" + p(a.x) + " " + p(a.y + b / 2) + "a" + d + "," + d + " 0 1," + c + " " + f + ",0a" + d + "," + d + " 0 1," + c + " " + -f + ",0";
    }
  };
  G.prototype = {
    m: function m(a) {
      a = /^(#......)(..)?/.exec(a);
      this.h.m(a[1], a[2] ? r(a[2], 0) / 255 : 1);
    },
    D: function D(a) {
      this.c = this.b[a] || (this.b[a] = new L());
    },
    F: function F() {},
    f: function f(a) {
      this.c.f(a);
    },
    g: function g(a, b, c) {
      this.c.g(a, b, c);
    },
    finish: function finish() {
      for (var a in this.b) {
        this.h.c(a, this.b[a].j);
      }
    }
  };
  M.prototype = {
    f: function f(a, b) {
      var c = b ? -2 : 2,
          d = this.c,
          f = [];

      for (b = b ? a.length - 2 : 0; b < a.length && 0 <= b; b += c) {
        f.push(d.l(a[b], a[b + 1]));
      }

      this.h.f(f);
    },
    g: function g(a, b, c, d) {
      this.h.g(this.c.l(a, b, c, c), c, d);
    },
    a: function a(_a, b, c, d, f) {
      this.f([_a, b, _a + c, b, _a + c, b + d, _a, b + d], f);
    },
    b: function b(a, _b, c, d, f, e) {
      a = [a + c, _b, a + c, _b + d, a, _b + d, a, _b];
      a.splice((f || 0) % 4 * 2, 2);
      this.f(a, e);
    },
    l: function l(a, b, c, d, f) {
      this.f([a + c / 2, b, a + c, b + d / 2, a + c / 2, b + d, a, b + d / 2], f);
    }
  };
  w.prototype = {
    l: function l(a, b, c, d) {
      var f = this.b + this.h,
          e = this.c + this.h;
      return 1 === this.a ? new B(f - b - (d || 0), this.c + a) : 2 === this.a ? new B(f - a - (c || 0), e - b - (d || 0)) : 3 === this.a ? new B(this.b + b, e - a - (c || 0)) : new B(this.b + a, this.c + b);
    }
  };
  w.a = new w(0, 0, 0, 0);

  n.drawIcon = function (a, b, c, d) {
    if (!a) throw Error("No canvas specified.");
    a = new E(a, c);
    H(a, C(b) || D(b), 0, 0, c, d || 0, J());
  };

  n.toSvg = function (a, b, c) {
    var d = new K(b);
    H(new G(d), C(a) || D(a), 0, 0, b, c, J());
    return d.toString();
  };

  n.update = x;
  n.version = "2.1.0";
  y && (y.fn.jdenticon = function (a, b) {
    this.each(function (c, d) {
      x(d, a, b);
    });
    return this;
  });
  "function" === typeof setTimeout && setTimeout(Q, 0);
  return n;
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/jsbi/dist/jsbi-umd.js":
/*!********************************************!*\
  !*** ./node_modules/jsbi/dist/jsbi-umd.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (a, b) {
  "object" == ( false ? undefined : _typeof(exports)) && "undefined" != typeof module ? module.exports = b() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (b),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
})(this, function () {
  "use strict";

  var a = Math.imul,
      b = Math.abs,
      c = Math.max,
      d = Math.clz32;

  var e =
  /*#__PURE__*/
  function (_Array) {
    _inherits(e, _Array);

    function e(a, b) {
      var _this;

      _classCallCheck(this, e);

      if (a > e.__kMaxLength) throw new RangeError("Maximum BigInt size exceeded");
      _this = _possibleConstructorReturn(this, _getPrototypeOf(e).call(this, a)), _this.sign = b;
      return _this;
    }

    _createClass(e, [{
      key: "toDebugString",
      value: function toDebugString() {
        var a = ["BigInt["];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _b = _step.value;
            a.push((_b ? (_b >>> 0).toString(16) : _b) + ", ");
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return a.push("]"), a.join("");
      }
    }, {
      key: "toString",
      value: function toString() {
        var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
        if (2 > a || 36 < a) throw new RangeError("toString() radix argument must be between 2 and 36");
        return 0 === this.length ? "0" : 0 == (a & a - 1) ? e.__toStringBasePowerOfTwo(this, a) : e.__toStringGeneric(this, a, !1);
      }
    }, {
      key: "__copy",
      value: function __copy() {
        var a = new e(this.length, this.sign);

        for (var _b2 = 0; _b2 < this.length; _b2++) {
          a[_b2] = this[_b2];
        }

        return a;
      }
    }, {
      key: "__trim",
      value: function __trim() {
        var a = this.length,
            b = this[a - 1];

        for (; 0 === b;) {
          a--, b = this[a - 1], this.pop();
        }

        return 0 === a && (this.sign = !1), this;
      }
    }, {
      key: "__initializeDigits",
      value: function __initializeDigits() {
        for (var _a = 0; _a < this.length; _a++) {
          this[_a] = 0;
        }
      }
    }, {
      key: "__clzmsd",
      value: function __clzmsd() {
        return d(this[this.length - 1]);
      }
    }, {
      key: "__inplaceMultiplyAdd",
      value: function __inplaceMultiplyAdd(b, c, d) {
        d > this.length && (d = this.length);
        var e = 65535 & b,
            f = b >>> 16;
        var g = 0,
            h = 65535 & c,
            j = c >>> 16;

        for (var k = 0; k < d; k++) {
          var _b3 = this.__digit(k),
              _c = 65535 & _b3,
              _d = _b3 >>> 16,
              i = a(_c, e),
              l = a(_c, f),
              m = a(_d, e),
              n = a(_d, f),
              o = h + (65535 & i),
              p = j + g + (o >>> 16) + (i >>> 16) + (65535 & l) + (65535 & m);

          h = (l >>> 16) + (m >>> 16) + (65535 & n) + (p >>> 16), g = h >>> 16, h &= 65535, j = n >>> 16;

          this.__setDigit(k, 65535 & o | p << 16);
        }

        if (0 != g || 0 !== h || 0 !== j) throw new Error("implementation bug");
      }
    }, {
      key: "__inplaceAdd",
      value: function __inplaceAdd(a, b, c) {
        var d = 0;

        for (var _e = 0; _e < c; _e++) {
          var _c2 = this.__halfDigit(b + _e) + a.__halfDigit(_e) + d;

          d = _c2 >>> 16, this.__setHalfDigit(b + _e, _c2);
        }

        return d;
      }
    }, {
      key: "__inplaceSub",
      value: function __inplaceSub(a, b, c) {
        var d = 0;

        if (1 & b) {
          b >>= 1;

          var _e2 = this.__digit(b),
              f = 65535 & _e2,
              g = 0;

          for (; g < c - 1 >>> 1; g++) {
            var _c3 = a.__digit(g),
                _h = (_e2 >>> 16) - (65535 & _c3) - d;

            d = 1 & _h >>> 16, this.__setDigit(b + g, _h << 16 | 65535 & f), _e2 = this.__digit(b + g + 1), f = (65535 & _e2) - (_c3 >>> 16) - d, d = 1 & f >>> 16;
          }

          var h = a.__digit(g),
              i = (_e2 >>> 16) - (65535 & h) - d;

          d = 1 & i >>> 16, this.__setDigit(b + g, i << 16 | 65535 & f);
          if (b + g + 1 >= this.length) throw new RangeError("out of bounds");
          0 == (1 & c) && (_e2 = this.__digit(b + g + 1), f = (65535 & _e2) - (h >>> 16) - d, d = 1 & f >>> 16, this.__setDigit(b + a.length, 4294901760 & _e2 | 65535 & f));
        } else {
          b >>= 1;
          var _e3 = 0;

          for (; _e3 < a.length - 1; _e3++) {
            var _c4 = this.__digit(b + _e3),
                _f2 = a.__digit(_e3),
                _g2 = (65535 & _c4) - (65535 & _f2) - d;

            d = 1 & _g2 >>> 16;

            var _h3 = (_c4 >>> 16) - (_f2 >>> 16) - d;

            d = 1 & _h3 >>> 16, this.__setDigit(b + _e3, _h3 << 16 | 65535 & _g2);
          }

          var _f = this.__digit(b + _e3),
              _g = a.__digit(_e3),
              _h2 = (65535 & _f) - (65535 & _g) - d;

          d = 1 & _h2 >>> 16;
          var _i = 0;
          0 == (1 & c) && (_i = (_f >>> 16) - (_g >>> 16) - d, d = 1 & _i >>> 16), this.__setDigit(b + _e3, _i << 16 | 65535 & _h2);
        }

        return d;
      }
    }, {
      key: "__inplaceRightShift",
      value: function __inplaceRightShift(a) {
        if (0 === a) return;
        var b = this.__digit(0) >>> a;
        var c = this.length - 1;

        for (var _e4 = 0; _e4 < c; _e4++) {
          var _c5 = this.__digit(_e4 + 1);

          this.__setDigit(_e4, _c5 << 32 - a | b), b = _c5 >>> a;
        }

        this.__setDigit(c, b);
      }
    }, {
      key: "__digit",
      value: function __digit(a) {
        return this[a];
      }
    }, {
      key: "__unsignedDigit",
      value: function __unsignedDigit(a) {
        return this[a] >>> 0;
      }
    }, {
      key: "__setDigit",
      value: function __setDigit(a, b) {
        this[a] = 0 | b;
      }
    }, {
      key: "__setDigitGrow",
      value: function __setDigitGrow(a, b) {
        this[a] = 0 | b;
      }
    }, {
      key: "__halfDigitLength",
      value: function __halfDigitLength() {
        var a = this.length;
        return 65535 >= this.__unsignedDigit(a - 1) ? 2 * a - 1 : 2 * a;
      }
    }, {
      key: "__halfDigit",
      value: function __halfDigit(a) {
        return 65535 & this[a >>> 1] >>> ((1 & a) << 4);
      }
    }, {
      key: "__setHalfDigit",
      value: function __setHalfDigit(a, b) {
        var c = a >>> 1,
            d = this.__digit(c),
            e = 1 & a ? 65535 & d | b << 16 : 4294901760 & d | 65535 & b;

        this.__setDigit(c, e);
      }
    }], [{
      key: "BigInt",
      value: function BigInt(a) {
        var b = Math.floor,
            c = Number.isFinite;

        if ("number" == typeof a) {
          if (0 === a) return e.__zero();
          if ((0 | a) === a) return 0 > a ? e.__oneDigit(-a, !0) : e.__oneDigit(a, !1);
          if (!c(a) || b(a) !== a) throw new RangeError("The number " + a + " cannot be converted to BigInt because it is not an integer");
          return e.__fromDouble(a);
        }

        if ("string" == typeof a) {
          var _b4 = e.__fromString(a);

          if (null === _b4) throw new SyntaxError("Cannot convert " + a + " to a BigInt");
          return _b4;
        }

        if ("boolean" == typeof a) return !0 === a ? e.__oneDigit(1, !1) : e.__zero();

        if ("object" == _typeof(a)) {
          if (a.constructor === e) return a;

          var _b5 = e.__toPrimitive(a);

          return e.BigInt(_b5);
        }

        throw new TypeError("Cannot convert " + a + " to a BigInt");
      }
    }, {
      key: "toNumber",
      value: function toNumber(a) {
        var b = a.length;
        if (0 === b) return 0;

        if (1 === b) {
          var _b6 = a.__unsignedDigit(0);

          return a.sign ? -_b6 : _b6;
        }

        var c = a.__digit(b - 1),
            f = d(c),
            g = 32 * b - f;

        if (1024 < g) return a.sign ? -Infinity : 1 / 0;
        var h = g - 1,
            i = c,
            j = b - 1;
        var k = f + 1;
        var l = 32 === k ? 0 : i << k;
        l >>>= 12;
        var m = k - 12;
        var n = 12 <= k ? 0 : i << 20 + k,
            o = 20 + k;
        0 < m && 0 < j && (j--, i = a.__digit(j), l |= i >>> 32 - m, n = i << m, o = m), 0 < o && 0 < j && (j--, i = a.__digit(j), n |= i >>> 32 - o, o -= 32);

        var p = e.__decideRounding(a, o, j, i);

        if ((1 === p || 0 === p && 1 == (1 & n)) && (n = n + 1 >>> 0, 0 == n && (l++, 0 != l >>> 20 && (l = 0, h++, 1023 < h)))) return a.sign ? -Infinity : 1 / 0;
        var q = a.sign ? -2147483648 : 0;
        return h = h + 1023 << 20, e.__kBitConversionInts[1] = q | h | l, e.__kBitConversionInts[0] = n, e.__kBitConversionDouble[0];
      }
    }, {
      key: "unaryMinus",
      value: function unaryMinus(a) {
        if (0 === a.length) return a;

        var b = a.__copy();

        return b.sign = !a.sign, b;
      }
    }, {
      key: "bitwiseNot",
      value: function bitwiseNot(a) {
        return a.sign ? e.__absoluteSubOne(a).__trim() : e.__absoluteAddOne(a, !0);
      }
    }, {
      key: "exponentiate",
      value: function exponentiate(a, b) {
        if (b.sign) throw new RangeError("Exponent must be positive");
        if (0 === b.length) return e.__oneDigit(1, !1);
        if (0 === a.length) return a;
        if (1 === a.length && 1 === a.__digit(0)) return a.sign && 0 == (1 & b.__digit(0)) ? e.unaryMinus(a) : a;
        if (1 < b.length) throw new RangeError("BigInt too big");

        var c = b.__unsignedDigit(0);

        if (1 === c) return a;
        if (c >= e.__kMaxLengthBits) throw new RangeError("BigInt too big");

        if (1 === a.length && 2 === a.__digit(0)) {
          var _b7 = 1 + (c >>> 5),
              _d2 = a.sign && 0 != (1 & c),
              _f3 = new e(_b7, _d2);

          _f3.__initializeDigits();

          var g = 1 << (31 & c);
          return _f3.__setDigit(_b7 - 1, g), _f3;
        }

        var d = null,
            f = a;

        for (0 != (1 & c) && (d = a), c >>= 1; 0 !== c; c >>= 1) {
          f = e.multiply(f, f), 0 != (1 & c) && (null === d ? d = f : d = e.multiply(d, f));
        }

        return d;
      }
    }, {
      key: "multiply",
      value: function multiply(a, b) {
        if (0 === a.length) return a;
        if (0 === b.length) return b;
        var c = a.length + b.length;
        32 <= a.__clzmsd() + b.__clzmsd() && c--;
        var d = new e(c, a.sign !== b.sign);

        d.__initializeDigits();

        for (var _c6 = 0; _c6 < a.length; _c6++) {
          e.__multiplyAccumulate(b, a.__digit(_c6), d, _c6);
        }

        return d.__trim();
      }
    }, {
      key: "divide",
      value: function divide(a, b) {
        if (0 === b.length) throw new RangeError("Division by zero");
        if (0 > e.__absoluteCompare(a, b)) return e.__zero();

        var c = a.sign !== b.sign,
            d = b.__unsignedDigit(0);

        var f;

        if (1 === b.length && 65535 >= d) {
          if (1 === d) return c === a.sign ? a : e.unaryMinus(a);
          f = e.__absoluteDivSmall(a, d, null);
        } else f = e.__absoluteDivLarge(a, b, !0, !1);

        return f.sign = c, f.__trim();
      }
    }, {
      key: "remainder",
      value: function remainder(a, b) {
        if (0 === b.length) throw new RangeError("Division by zero");
        if (0 > e.__absoluteCompare(a, b)) return a;

        var c = b.__unsignedDigit(0);

        if (1 === b.length && 65535 >= c) {
          if (1 === c) return e.__zero();

          var _b8 = e.__absoluteModSmall(a, c);

          return 0 === _b8 ? e.__zero() : e.__oneDigit(_b8, a.sign);
        }

        var d = e.__absoluteDivLarge(a, b, !1, !0);

        return d.sign = a.sign, d.__trim();
      }
    }, {
      key: "add",
      value: function add(a, b) {
        var c = a.sign;
        return c === b.sign ? e.__absoluteAdd(a, b, c) : 0 <= e.__absoluteCompare(a, b) ? e.__absoluteSub(a, b, c) : e.__absoluteSub(b, a, !c);
      }
    }, {
      key: "subtract",
      value: function subtract(a, b) {
        var c = a.sign;
        return c === b.sign ? 0 <= e.__absoluteCompare(a, b) ? e.__absoluteSub(a, b, c) : e.__absoluteSub(b, a, !c) : e.__absoluteAdd(a, b, c);
      }
    }, {
      key: "leftShift",
      value: function leftShift(a, b) {
        return 0 === b.length || 0 === a.length ? a : b.sign ? e.__rightShiftByAbsolute(a, b) : e.__leftShiftByAbsolute(a, b);
      }
    }, {
      key: "signedRightShift",
      value: function signedRightShift(a, b) {
        return 0 === b.length || 0 === a.length ? a : b.sign ? e.__leftShiftByAbsolute(a, b) : e.__rightShiftByAbsolute(a, b);
      }
    }, {
      key: "unsignedRightShift",
      value: function unsignedRightShift() {
        throw new TypeError("BigInts have no unsigned right shift; use >> instead");
      }
    }, {
      key: "lessThan",
      value: function lessThan(a, b) {
        return 0 > e.__compareToBigInt(a, b);
      }
    }, {
      key: "lessThanOrEqual",
      value: function lessThanOrEqual(a, b) {
        return 0 >= e.__compareToBigInt(a, b);
      }
    }, {
      key: "greaterThan",
      value: function greaterThan(a, b) {
        return 0 < e.__compareToBigInt(a, b);
      }
    }, {
      key: "greaterThanOrEqual",
      value: function greaterThanOrEqual(a, b) {
        return 0 <= e.__compareToBigInt(a, b);
      }
    }, {
      key: "equal",
      value: function equal(a, b) {
        if (a.sign !== b.sign) return !1;
        if (a.length !== b.length) return !1;

        for (var _c7 = 0; _c7 < a.length; _c7++) {
          if (a.__digit(_c7) !== b.__digit(_c7)) return !1;
        }

        return !0;
      }
    }, {
      key: "bitwiseAnd",
      value: function bitwiseAnd(a, b) {
        var _ref;

        if (!a.sign && !b.sign) return e.__absoluteAnd(a, b).__trim();

        if (a.sign && b.sign) {
          var _d3 = c(a.length, b.length) + 1;

          var f = e.__absoluteSubOne(a, _d3);

          var g = e.__absoluteSubOne(b);

          return f = e.__absoluteOr(f, g, f), e.__absoluteAddOne(f, !0, f).__trim();
        }

        return a.sign && (_ref = [b, a], a = _ref[0], b = _ref[1], _ref), e.__absoluteAndNot(a, e.__absoluteSubOne(b)).__trim();
      }
    }, {
      key: "bitwiseXor",
      value: function bitwiseXor(a, b) {
        var _ref2;

        if (!a.sign && !b.sign) return e.__absoluteXor(a, b).__trim();

        if (a.sign && b.sign) {
          var _d4 = c(a.length, b.length),
              _f4 = e.__absoluteSubOne(a, _d4),
              g = e.__absoluteSubOne(b);

          return e.__absoluteXor(_f4, g, _f4).__trim();
        }

        var d = c(a.length, b.length) + 1;
        a.sign && (_ref2 = [b, a], a = _ref2[0], b = _ref2[1], _ref2);

        var f = e.__absoluteSubOne(b, d);

        return f = e.__absoluteXor(f, a, f), e.__absoluteAddOne(f, !0, f).__trim();
      }
    }, {
      key: "bitwiseOr",
      value: function bitwiseOr(a, b) {
        var _ref3;

        var d = c(a.length, b.length);
        if (!a.sign && !b.sign) return e.__absoluteOr(a, b).__trim();

        if (a.sign && b.sign) {
          var _c8 = e.__absoluteSubOne(a, d);

          var _f5 = e.__absoluteSubOne(b);

          return _c8 = e.__absoluteAnd(_c8, _f5, _c8), e.__absoluteAddOne(_c8, !0, _c8).__trim();
        }

        a.sign && (_ref3 = [b, a], a = _ref3[0], b = _ref3[1], _ref3);

        var f = e.__absoluteSubOne(b, d);

        return f = e.__absoluteAndNot(f, a, f), e.__absoluteAddOne(f, !0, f).__trim();
      }
    }, {
      key: "ADD",
      value: function ADD(a, b) {
        if (a = e.__toPrimitive(a), b = e.__toPrimitive(b), "string" == typeof a) return "string" != typeof b && (b = b.toString()), a + b;
        if ("string" == typeof b) return a.toString() + b;
        if (a = e.__toNumeric(a), b = e.__toNumeric(b), e.__isBigInt(a) && e.__isBigInt(b)) return e.add(a, b);
        if ("number" == typeof a && "number" == typeof b) return a + b;
        throw new TypeError("Cannot mix BigInt and other types, use explicit conversions");
      }
    }, {
      key: "LT",
      value: function LT(a, b) {
        return e.__compare(a, b, 0);
      }
    }, {
      key: "LE",
      value: function LE(a, b) {
        return e.__compare(a, b, 1);
      }
    }, {
      key: "GT",
      value: function GT(a, b) {
        return e.__compare(a, b, 2);
      }
    }, {
      key: "GE",
      value: function GE(a, b) {
        return e.__compare(a, b, 3);
      }
    }, {
      key: "EQ",
      value: function EQ(a, b) {
        for (;;) {
          if (e.__isBigInt(a)) return e.__isBigInt(b) ? e.equal(a, b) : e.EQ(b, a);

          if ("number" == typeof a) {
            if (e.__isBigInt(b)) return e.__equalToNumber(b, a);
            if ("object" != _typeof(b)) return a == b;
            b = e.__toPrimitive(b);
          } else if ("string" == typeof a) {
            if (e.__isBigInt(b)) return a = e.__fromString(a), null !== a && e.equal(a, b);
            if ("object" != _typeof(b)) return a == b;
            b = e.__toPrimitive(b);
          } else if ("boolean" == typeof a) {
            if (e.__isBigInt(b)) return e.__equalToNumber(b, +a);
            if ("object" != _typeof(b)) return a == b;
            b = e.__toPrimitive(b);
          } else if ("symbol" == _typeof(a)) {
            if (e.__isBigInt(b)) return !1;
            if ("object" != _typeof(b)) return a == b;
            b = e.__toPrimitive(b);
          } else if ("object" == _typeof(a)) {
            if ("object" == _typeof(b) && b.constructor !== e) return a == b;
            a = e.__toPrimitive(a);
          } else return a == b;
        }
      }
    }, {
      key: "__zero",
      value: function __zero() {
        return new e(0, !1);
      }
    }, {
      key: "__oneDigit",
      value: function __oneDigit(a, b) {
        var c = new e(1, b);
        return c.__setDigit(0, a), c;
      }
    }, {
      key: "__decideRounding",
      value: function __decideRounding(a, b, c, d) {
        if (0 < b) return -1;
        var e;
        if (0 > b) e = -b - 1;else {
          if (0 === c) return -1;
          c--, d = a.__digit(c), e = 31;
        }
        var f = 1 << e;
        if (0 == (d & f)) return -1;
        if (f -= 1, 0 != (d & f)) return 1;

        for (; 0 < c;) {
          if (c--, 0 !== a.__digit(c)) return 1;
        }

        return 0;
      }
    }, {
      key: "__fromDouble",
      value: function __fromDouble(a) {
        e.__kBitConversionDouble[0] = a;
        var b = 2047 & e.__kBitConversionInts[1] >>> 20,
            c = b - 1023,
            d = (c >>> 5) + 1,
            f = new e(d, 0 > a);
        var g = 1048575 & e.__kBitConversionInts[1] | 1048576,
            h = e.__kBitConversionInts[0];
        var i = 20,
            j = 31 & c;
        var k,
            l = 0;

        if (20 > j) {
          var _a2 = i - j;

          l = _a2 + 32, k = g >>> _a2, g = g << 32 - _a2 | h >>> _a2, h <<= 32 - _a2;
        } else if (20 === j) l = 32, k = g, g = h;else {
          var _a3 = j - i;

          l = 32 - _a3, k = g << _a3 | h >>> 32 - _a3, g = h << _a3;
        }

        f.__setDigit(d - 1, k);

        for (var _b9 = d - 2; 0 <= _b9; _b9--) {
          0 < l ? (l -= 32, k = g, g = h) : k = 0, f.__setDigit(_b9, k);
        }

        return f.__trim();
      }
    }, {
      key: "__isWhitespace",
      value: function __isWhitespace(a) {
        return !!(13 >= a && 9 <= a) || (159 >= a ? 32 == a : 131071 >= a ? 160 == a || 5760 == a : 196607 >= a ? (a &= 131071, 10 >= a || 40 == a || 41 == a || 47 == a || 95 == a || 4096 == a) : 65279 == a);
      }
    }, {
      key: "__fromString",
      value: function __fromString(a) {
        var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var c = 0;
        var f = a.length;
        var g = 0;
        if (g === f) return e.__zero();
        var h = a.charCodeAt(g);

        for (; e.__isWhitespace(h);) {
          if (++g === f) return e.__zero();
          h = a.charCodeAt(g);
        }

        if (43 === h) {
          if (++g === f) return null;
          h = a.charCodeAt(g), c = 1;
        } else if (45 === h) {
          if (++g === f) return null;
          h = a.charCodeAt(g), c = -1;
        }

        if (0 === b) {
          if (b = 10, 48 === h) {
            if (++g === f) return e.__zero();

            if (h = a.charCodeAt(g), 88 === h || 120 === h) {
              if (b = 16, ++g === f) return null;
              h = a.charCodeAt(g);
            } else if (79 === h || 111 === h) {
              if (b = 8, ++g === f) return null;
              h = a.charCodeAt(g);
            } else if (66 === h || 98 === h) {
              if (b = 2, ++g === f) return null;
              h = a.charCodeAt(g);
            }
          }
        } else if (16 === b && 48 === h) {
          if (++g === f) return e.__zero();

          if (h = a.charCodeAt(g), 88 === h || 120 === h) {
            if (++g === f) return null;
            h = a.charCodeAt(g);
          }
        }

        for (; 48 === h;) {
          if (++g === f) return e.__zero();
          h = a.charCodeAt(g);
        }

        var i = f - g;
        var j = e.__kMaxBitsPerChar[b],
            k = e.__kBitsPerCharTableMultiplier - 1;
        if (i > 1073741824 / j) return null;
        var l = j * i + k >>> e.__kBitsPerCharTableShift,
            m = new e(l + 31 >>> 5, !1),
            n = 10 > b ? b : 10,
            o = 10 < b ? b - 10 : 0;

        if (0 == (b & b - 1)) {
          j >>= e.__kBitsPerCharTableShift;
          var _b10 = [],
              _c9 = [];

          var _d5 = !1;

          do {
            var _e5 = 0,
                _i2 = 0;

            for (;;) {
              var _b11 = void 0;

              if (h - 48 >>> 0 < n) _b11 = h - 48;else if ((32 | h) - 97 >>> 0 < o) _b11 = (32 | h) - 87;else {
                _d5 = !0;
                break;
              }

              if (_i2 += j, _e5 = _e5 << j | _b11, ++g === f) {
                _d5 = !0;
                break;
              }

              if (h = a.charCodeAt(g), 32 < _i2 + j) break;
            }

            _b10.push(_e5), _c9.push(_i2);
          } while (!_d5);

          e.__fillFromParts(m, _b10, _c9);
        } else {
          m.__initializeDigits();

          var _c10 = !1,
              _i3 = 0;

          do {
            var _l = 0,
                p = 1;

            for (;;) {
              var _e6 = void 0;

              if (h - 48 >>> 0 < n) _e6 = h - 48;else if ((32 | h) - 97 >>> 0 < o) _e6 = (32 | h) - 87;else {
                _c10 = !0;
                break;
              }

              var _d6 = p * b;

              if (4294967295 < _d6) break;

              if (p = _d6, _l = _l * b + _e6, _i3++, ++g === f) {
                _c10 = !0;
                break;
              }

              h = a.charCodeAt(g);
            }

            k = 32 * e.__kBitsPerCharTableMultiplier - 1;
            var q = j * _i3 + k >>> e.__kBitsPerCharTableShift + 5;

            m.__inplaceMultiplyAdd(p, _l, q);
          } while (!_c10);
        }

        for (; g !== f;) {
          if (!e.__isWhitespace(h)) return null;
          h = a.charCodeAt(g++);
        }

        return 0 != c && 10 !== b ? null : (m.sign = -1 == c, m.__trim());
      }
    }, {
      key: "__fillFromParts",
      value: function __fillFromParts(a, b, c) {
        var d = 0,
            e = 0,
            f = 0;

        for (var g = b.length - 1; 0 <= g; g--) {
          var h = b[g],
              i = c[g];
          e |= h << f, f += i, 32 === f ? (a.__setDigit(d++, e), f = 0, e = 0) : 32 < f && (a.__setDigit(d++, e), f -= 32, e = h >>> i - f);
        }

        if (0 !== e) {
          if (d >= a.length) throw new Error("implementation bug");

          a.__setDigit(d++, e);
        }

        for (; d < a.length; d++) {
          a.__setDigit(d, 0);
        }
      }
    }, {
      key: "__toStringBasePowerOfTwo",
      value: function __toStringBasePowerOfTwo(a, b) {
        var c = a.length;
        var f = b - 1;
        f = (85 & f >>> 1) + (85 & f), f = (51 & f >>> 2) + (51 & f), f = (15 & f >>> 4) + (15 & f);

        var g = f,
            h = b - 1,
            i = a.__digit(c - 1),
            j = d(i);

        var k = 0 | (32 * c - j + g - 1) / g;
        if (a.sign && k++, 268435456 < k) throw new Error("string too long");
        var l = Array(k);
        var m = k - 1,
            n = 0,
            o = 0;

        for (var _d7 = 0; _d7 < c - 1; _d7++) {
          var _b12 = a.__digit(_d7),
              _c11 = (n | _b12 << o) & h;

          l[m--] = e.__kConversionChars[_c11];

          var _f6 = g - o;

          for (n = _b12 >>> _f6, o = 32 - _f6; o >= g;) {
            l[m--] = e.__kConversionChars[n & h], n >>>= g, o -= g;
          }
        }

        var p = (n | i << o) & h;

        for (l[m--] = e.__kConversionChars[p], n = i >>> g - o; 0 !== n;) {
          l[m--] = e.__kConversionChars[n & h], n >>>= g;
        }

        if (a.sign && (l[m--] = "-"), -1 != m) throw new Error("implementation bug");
        return l.join("");
      }
    }, {
      key: "__toStringGeneric",
      value: function __toStringGeneric(a, b, c) {
        var f = a.length;
        if (0 === f) return "";

        if (1 === f) {
          var _d8 = a.__unsignedDigit(0).toString(b);

          return !1 === c && a.sign && (_d8 = "-" + _d8), _d8;
        }

        var g = 32 * f - d(a.__digit(f - 1)),
            h = e.__kMaxBitsPerChar[b],
            i = h - 1;
        var j = g * e.__kBitsPerCharTableMultiplier;
        j += i - 1, j = 0 | j / i;
        var k = j + 1 >> 1,
            l = e.exponentiate(e.__oneDigit(b, !1), e.__oneDigit(k, !1));
        var m, n;

        var o = l.__unsignedDigit(0);

        if (1 === l.length && 65535 >= o) {
          m = new e(a.length, !1), m.__initializeDigits();
          var _c12 = 0;

          for (var _b13 = 2 * a.length - 1; 0 <= _b13; _b13--) {
            var _d9 = _c12 << 16 | a.__halfDigit(_b13);

            m.__setHalfDigit(_b13, 0 | _d9 / o), _c12 = 0 | _d9 % o;
          }

          n = _c12.toString(b);
        } else {
          var _c13 = e.__absoluteDivLarge(a, l, !0, !0);

          m = _c13.quotient;

          var _d10 = _c13.remainder.__trim();

          n = e.__toStringGeneric(_d10, b, !0);
        }

        m.__trim();

        var p = e.__toStringGeneric(m, b, !0);

        for (; n.length < k;) {
          n = "0" + n;
        }

        return !1 === c && a.sign && (p = "-" + p), p + n;
      }
    }, {
      key: "__unequalSign",
      value: function __unequalSign(a) {
        return a ? -1 : 1;
      }
    }, {
      key: "__absoluteGreater",
      value: function __absoluteGreater(a) {
        return a ? -1 : 1;
      }
    }, {
      key: "__absoluteLess",
      value: function __absoluteLess(a) {
        return a ? 1 : -1;
      }
    }, {
      key: "__compareToBigInt",
      value: function __compareToBigInt(a, b) {
        var c = a.sign;
        if (c !== b.sign) return e.__unequalSign(c);

        var d = e.__absoluteCompare(a, b);

        return 0 < d ? e.__absoluteGreater(c) : 0 > d ? e.__absoluteLess(c) : 0;
      }
    }, {
      key: "__compareToNumber",
      value: function __compareToNumber(a, c) {
        if (!0 | c) {
          var _d11 = a.sign,
              f = 0 > c;
          if (_d11 !== f) return e.__unequalSign(_d11);

          if (0 === a.length) {
            if (f) throw new Error("implementation bug");
            return 0 === c ? 0 : -1;
          }

          if (1 < a.length) return e.__absoluteGreater(_d11);

          var g = b(c),
              h = a.__unsignedDigit(0);

          return h > g ? e.__absoluteGreater(_d11) : h < g ? e.__absoluteLess(_d11) : 0;
        }

        return e.__compareToDouble(a, c);
      }
    }, {
      key: "__compareToDouble",
      value: function __compareToDouble(a, b) {
        if (b !== b) return b;
        if (b === 1 / 0) return -1;
        if (b === -Infinity) return 1;
        var c = a.sign;
        if (c !== 0 > b) return e.__unequalSign(c);
        if (0 === b) throw new Error("implementation bug: should be handled elsewhere");
        if (0 === a.length) return -1;
        e.__kBitConversionDouble[0] = b;
        var f = 2047 & e.__kBitConversionInts[1] >>> 20;
        if (2047 == f) throw new Error("implementation bug: handled elsewhere");
        var g = f - 1023;
        if (0 > g) return e.__absoluteGreater(c);
        var h = a.length;

        var i = a.__digit(h - 1);

        var j = d(i),
            k = 32 * h - j,
            l = g + 1;
        if (k < l) return e.__absoluteLess(c);
        if (k > l) return e.__absoluteGreater(c);
        var m = 1048576 | 1048575 & e.__kBitConversionInts[1],
            n = e.__kBitConversionInts[0];
        var o = 20,
            p = 31 - j;
        if (p !== (k - 1) % 31) throw new Error("implementation bug");
        var q,
            r = 0;

        if (20 > p) {
          var _a4 = o - p;

          r = _a4 + 32, q = m >>> _a4, m = m << 32 - _a4 | n >>> _a4, n <<= 32 - _a4;
        } else if (20 === p) r = 32, q = m, m = n;else {
          var _a5 = p - o;

          r = 32 - _a5, q = m << _a5 | n >>> 32 - _a5, m = n << _a5;
        }

        if (i >>>= 0, q >>>= 0, i > q) return e.__absoluteGreater(c);
        if (i < q) return e.__absoluteLess(c);

        for (var _d12 = h - 2; 0 <= _d12; _d12--) {
          0 < r ? (r -= 32, q = m >>> 0, m = n, n = 0) : q = 0;

          var _b14 = a.__unsignedDigit(_d12);

          if (_b14 > q) return e.__absoluteGreater(c);
          if (_b14 < q) return e.__absoluteLess(c);
        }

        if (0 !== m || 0 !== n) {
          if (0 === r) throw new Error("implementation bug");
          return e.__absoluteLess(c);
        }

        return 0;
      }
    }, {
      key: "__equalToNumber",
      value: function __equalToNumber(a, c) {
        return c | 0 === c ? 0 === c ? 0 === a.length : 1 === a.length && a.sign === 0 > c && a.__unsignedDigit(0) === b(c) : 0 === e.__compareToDouble(a, c);
      }
    }, {
      key: "__comparisonResultToBool",
      value: function __comparisonResultToBool(a, b) {
        switch (b) {
          case 0:
            return 0 > a;

          case 1:
            return 0 >= a;

          case 2:
            return 0 < a;

          case 3:
            return 0 <= a;
        }

        throw new Error("unreachable");
      }
    }, {
      key: "__compare",
      value: function __compare(a, b, c) {
        if (a = e.__toPrimitive(a), b = e.__toPrimitive(b), "string" == typeof a && "string" == typeof b) switch (c) {
          case 0:
            return a < b;

          case 1:
            return a <= b;

          case 2:
            return a > b;

          case 3:
            return a >= b;
        }
        if (e.__isBigInt(a) && "string" == typeof b) return b = e.__fromString(b), null !== b && e.__comparisonResultToBool(e.__compareToBigInt(a, b), c);
        if ("string" == typeof a && e.__isBigInt(b)) return a = e.__fromString(a), null !== a && e.__comparisonResultToBool(e.__compareToBigInt(a, b), c);

        if (a = e.__toNumeric(a), b = e.__toNumeric(b), e.__isBigInt(a)) {
          if (e.__isBigInt(b)) return e.__comparisonResultToBool(e.__compareToBigInt(a, b), c);
          if ("number" != typeof b) throw new Error("implementation bug");
          return e.__comparisonResultToBool(e.__compareToNumber(a, b), c);
        }

        if ("number" != typeof a) throw new Error("implementation bug");
        if (e.__isBigInt(b)) return e.__comparisonResultToBool(e.__compareToNumber(b, a), 2 ^ c);
        if ("number" != typeof b) throw new Error("implementation bug");
        return 0 === c ? a < b : 1 === c ? a <= b : 2 === c ? a > b : 3 === c ? a >= b : void 0;
      }
    }, {
      key: "__absoluteAdd",
      value: function __absoluteAdd(a, b, c) {
        if (a.length < b.length) return e.__absoluteAdd(b, a, c);
        if (0 === a.length) return a;
        if (0 === b.length) return a.sign === c ? a : e.unaryMinus(a);
        var d = a.length;
        (0 === a.__clzmsd() || b.length === a.length && 0 === b.__clzmsd()) && d++;
        var f = new e(d, c);
        var g = 0,
            h = 0;

        for (; h < b.length; h++) {
          var _c14 = b.__digit(h),
              _d13 = a.__digit(h),
              _e7 = (65535 & _d13) + (65535 & _c14) + g,
              i = (_d13 >>> 16) + (_c14 >>> 16) + (_e7 >>> 16);

          g = i >>> 16, f.__setDigit(h, 65535 & _e7 | i << 16);
        }

        for (; h < a.length; h++) {
          var _b15 = a.__digit(h),
              _c15 = (65535 & _b15) + g,
              _d14 = (_b15 >>> 16) + (_c15 >>> 16);

          g = _d14 >>> 16, f.__setDigit(h, 65535 & _c15 | _d14 << 16);
        }

        return h < f.length && f.__setDigit(h, g), f.__trim();
      }
    }, {
      key: "__absoluteSub",
      value: function __absoluteSub(a, b, c) {
        if (0 === a.length) return a;
        if (0 === b.length) return a.sign === c ? a : e.unaryMinus(a);
        var d = new e(a.length, c);
        var f = 0,
            g = 0;

        for (; g < b.length; g++) {
          var _c16 = a.__digit(g),
              _e8 = b.__digit(g),
              h = (65535 & _c16) - (65535 & _e8) - f;

          f = 1 & h >>> 16;
          var i = (_c16 >>> 16) - (_e8 >>> 16) - f;
          f = 1 & i >>> 16, d.__setDigit(g, 65535 & h | i << 16);
        }

        for (; g < a.length; g++) {
          var _b16 = a.__digit(g),
              _c17 = (65535 & _b16) - f;

          f = 1 & _c17 >>> 16;

          var _e9 = (_b16 >>> 16) - f;

          f = 1 & _e9 >>> 16, d.__setDigit(g, 65535 & _c17 | _e9 << 16);
        }

        return d.__trim();
      }
    }, {
      key: "__absoluteAddOne",
      value: function __absoluteAddOne(a, b) {
        var c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var d = a.length;
        null === c ? c = new e(d, b) : c.sign = b;
        var f = !0;

        for (var _e10, g = 0; g < d; g++) {
          _e10 = a.__digit(g);

          var _b17 = -1 === _e10;

          f && (_e10 = 0 | _e10 + 1), f = _b17, c.__setDigit(g, _e10);
        }

        return f && c.__setDigitGrow(d, 1), c;
      }
    }, {
      key: "__absoluteSubOne",
      value: function __absoluteSubOne(a, b) {
        var c = a.length;
        b = b || c;
        var d = new e(b, !1);
        var f = !0;

        for (var _e11, g = 0; g < c; g++) {
          _e11 = a.__digit(g);

          var _b18 = 0 === _e11;

          f && (_e11 = 0 | _e11 - 1), f = _b18, d.__setDigit(g, _e11);
        }

        for (var _e12 = c; _e12 < b; _e12++) {
          d.__setDigit(_e12, 0);
        }

        return d;
      }
    }, {
      key: "__absoluteAnd",
      value: function __absoluteAnd(a, b) {
        var c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var d = a.length,
            f = b.length,
            g = f;

        if (d < f) {
          g = d;
          var _c18 = a,
              _e13 = d;
          a = b, d = f, b = _c18, f = _e13;
        }

        var h = g;
        null === c ? c = new e(h, !1) : h = c.length;
        var j = 0;

        for (; j < g; j++) {
          c.__setDigit(j, a.__digit(j) & b.__digit(j));
        }

        for (; j < h; j++) {
          c.__setDigit(j, 0);
        }

        return c;
      }
    }, {
      key: "__absoluteAndNot",
      value: function __absoluteAndNot(a, b) {
        var c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var d = a.length,
            f = b.length;
        var g = f;
        d < f && (g = d);
        var h = d;
        null === c ? c = new e(h, !1) : h = c.length;
        var j = 0;

        for (; j < g; j++) {
          c.__setDigit(j, a.__digit(j) & ~b.__digit(j));
        }

        for (; j < d; j++) {
          c.__setDigit(j, a.__digit(j));
        }

        for (; j < h; j++) {
          c.__setDigit(j, 0);
        }

        return c;
      }
    }, {
      key: "__absoluteOr",
      value: function __absoluteOr(a, b) {
        var c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var d = a.length,
            f = b.length,
            g = f;

        if (d < f) {
          g = d;
          var _c19 = a,
              _e14 = d;
          a = b, d = f, b = _c19, f = _e14;
        }

        var h = d;
        null === c ? c = new e(h, !1) : h = c.length;
        var j = 0;

        for (; j < g; j++) {
          c.__setDigit(j, a.__digit(j) | b.__digit(j));
        }

        for (; j < d; j++) {
          c.__setDigit(j, a.__digit(j));
        }

        for (; j < h; j++) {
          c.__setDigit(j, 0);
        }

        return c;
      }
    }, {
      key: "__absoluteXor",
      value: function __absoluteXor(a, b) {
        var c = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var d = a.length,
            f = b.length,
            g = f;

        if (d < f) {
          g = d;
          var _c20 = a,
              _e15 = d;
          a = b, d = f, b = _c20, f = _e15;
        }

        var h = d;
        null === c ? c = new e(h, !1) : h = c.length;
        var j = 0;

        for (; j < g; j++) {
          c.__setDigit(j, a.__digit(j) ^ b.__digit(j));
        }

        for (; j < d; j++) {
          c.__setDigit(j, a.__digit(j));
        }

        for (; j < h; j++) {
          c.__setDigit(j, 0);
        }

        return c;
      }
    }, {
      key: "__absoluteCompare",
      value: function __absoluteCompare(a, b) {
        var c = a.length - b.length;
        if (0 != c) return c;
        var d = a.length - 1;

        for (; 0 <= d && a.__digit(d) === b.__digit(d);) {
          d--;
        }

        return 0 > d ? 0 : a.__unsignedDigit(d) > b.__unsignedDigit(d) ? 1 : -1;
      }
    }, {
      key: "__multiplyAccumulate",
      value: function __multiplyAccumulate(b, c, d, e) {
        if (0 === c) return;
        var f = 65535 & c,
            g = c >>> 16;
        var h = 0,
            j = 0,
            k = 0;

        for (var l = 0; l < b.length; l++, e++) {
          var _c21 = d.__digit(e),
              i = 65535 & _c21,
              m = _c21 >>> 16;

          var n = b.__digit(l),
              o = 65535 & n,
              p = n >>> 16,
              q = a(o, f),
              r = a(o, g),
              s = a(p, f),
              t = a(p, g);

          i += j + (65535 & q), m += k + h + (i >>> 16) + (q >>> 16) + (65535 & r) + (65535 & s), h = m >>> 16, j = (r >>> 16) + (s >>> 16) + (65535 & t) + h, h = j >>> 16, j &= 65535, k = t >>> 16, _c21 = 65535 & i | m << 16, d.__setDigit(e, _c21);
        }

        for (; 0 != h || 0 !== j || 0 !== k; e++) {
          var _a6 = d.__digit(e);

          var _b19 = (65535 & _a6) + j,
              _c22 = (_a6 >>> 16) + (_b19 >>> 16) + k + h;

          j = 0, k = 0, h = _c22 >>> 16, _a6 = 65535 & _b19 | _c22 << 16, d.__setDigit(e, _a6);
        }
      }
    }, {
      key: "__internalMultiplyAdd",
      value: function __internalMultiplyAdd(b, c, d, e, f) {
        var g = d,
            h = 0;

        for (var j = 0; j < e; j++) {
          var _d15 = b.__digit(j),
              _e16 = a(65535 & _d15, c),
              i = (65535 & _e16) + h + g;

          g = i >>> 16;
          var k = a(_d15 >>> 16, c),
              l = (65535 & k) + (_e16 >>> 16) + g;
          g = l >>> 16, h = k >>> 16, f.__setDigit(j, l << 16 | 65535 & i);
        }

        if (f.length > e) for (f.__setDigit(e++, g + h); e < f.length;) {
          f.__setDigit(e++, 0);
        } else if (0 !== g + h) throw new Error("implementation bug");
      }
    }, {
      key: "__absoluteDivSmall",
      value: function __absoluteDivSmall(a, b, c) {
        null === c && (c = new e(a.length, !1));
        var d = 0;

        for (var _e17, f = 2 * a.length - 1; 0 <= f; f -= 2) {
          _e17 = (d << 16 | a.__halfDigit(f)) >>> 0;
          var g = 0 | _e17 / b;
          d = 0 | _e17 % b, _e17 = (d << 16 | a.__halfDigit(f - 1)) >>> 0;
          var h = 0 | _e17 / b;
          d = 0 | _e17 % b, c.__setDigit(f >>> 1, g << 16 | h);
        }

        return c;
      }
    }, {
      key: "__absoluteModSmall",
      value: function __absoluteModSmall(a, b) {
        var c = 0;

        for (var _d16 = 2 * a.length - 1; 0 <= _d16; _d16--) {
          var _e18 = (c << 16 | a.__halfDigit(_d16)) >>> 0;

          c = 0 | _e18 % b;
        }

        return c;
      }
    }, {
      key: "__absoluteDivLarge",
      value: function __absoluteDivLarge(b, d, f, g) {
        var h = d.__halfDigitLength(),
            i = d.length,
            c = b.__halfDigitLength() - h;

        var k = null;
        f && (k = new e(c + 2 >>> 1, !1), k.__initializeDigits());
        var l = new e(h + 2 >>> 1, !1);

        l.__initializeDigits();

        var m = e.__clz16(d.__halfDigit(h - 1));

        0 < m && (d = e.__specialLeftShift(d, m, 0));

        var n = e.__specialLeftShift(b, m, 1),
            o = d.__halfDigit(h - 1);

        var p = 0;

        for (var _m, q = c; 0 <= q; q--) {
          _m = 65535;

          var _b20 = n.__halfDigit(q + h);

          if (_b20 !== o) {
            var _c23 = (_b20 << 16 | n.__halfDigit(q + h - 1)) >>> 0;

            _m = 0 | _c23 / o;

            var _e19 = 0 | _c23 % o;

            var _f7 = d.__halfDigit(h - 2),
                _g4 = n.__halfDigit(q + h - 2);

            for (; a(_m, _f7) >>> 0 > (_e19 << 16 | _g4) >>> 0 && (_m--, _e19 += o, !(65535 < _e19));) {
              ;
            }
          }

          e.__internalMultiplyAdd(d, _m, 0, i, l);

          var _g3 = n.__inplaceSub(l, q, h + 1);

          0 !== _g3 && (_g3 = n.__inplaceAdd(d, q, h), n.__setHalfDigit(q + h, n.__halfDigit(q + h) + _g3), _m--), f && (1 & q ? p = _m << 16 : k.__setDigit(q >>> 1, p | _m));
        }

        return g ? (n.__inplaceRightShift(m), f ? {
          quotient: k,
          remainder: n
        } : n) : f ? k : void 0;
      }
    }, {
      key: "__clz16",
      value: function __clz16(a) {
        return d(a) - 16;
      }
    }, {
      key: "__specialLeftShift",
      value: function __specialLeftShift(a, b, c) {
        var d = a.length,
            f = new e(d + c, !1);

        if (0 === b) {
          for (var _b21 = 0; _b21 < d; _b21++) {
            f.__setDigit(_b21, a.__digit(_b21));
          }

          return 0 < c && f.__setDigit(d, 0), f;
        }

        var g = 0;

        for (var _e20 = 0; _e20 < d; _e20++) {
          var _c24 = a.__digit(_e20);

          f.__setDigit(_e20, _c24 << b | g), g = _c24 >>> 32 - b;
        }

        return 0 < c && f.__setDigit(d, g), f;
      }
    }, {
      key: "__leftShiftByAbsolute",
      value: function __leftShiftByAbsolute(a, b) {
        var c = e.__toShiftAmount(b);

        if (0 > c) throw new RangeError("BigInt too big");
        var f = c >>> 5,
            g = 31 & c,
            h = a.length,
            i = 0 !== g && 0 != a.__digit(h - 1) >>> 32 - g,
            j = h + f + (i ? 1 : 0),
            k = new e(j, a.sign);

        if (0 === g) {
          var _b22 = 0;

          for (; _b22 < f; _b22++) {
            k.__setDigit(_b22, 0);
          }

          for (; _b22 < j; _b22++) {
            k.__setDigit(_b22, a.__digit(_b22 - f));
          }
        } else {
          var _b23 = 0;

          for (var _a7 = 0; _a7 < f; _a7++) {
            k.__setDigit(_a7, 0);
          }

          for (var _c25 = 0; _c25 < h; _c25++) {
            var _e21 = a.__digit(_c25);

            k.__setDigit(_c25 + f, _e21 << g | _b23), _b23 = _e21 >>> 32 - g;
          }

          if (i) k.__setDigit(h + f, _b23);else if (0 != _b23) throw new Error("implementation bug");
        }

        return k.__trim();
      }
    }, {
      key: "__rightShiftByAbsolute",
      value: function __rightShiftByAbsolute(a, b) {
        var c = a.length,
            d = a.sign,
            f = e.__toShiftAmount(b);

        if (0 > f) return e.__rightShiftByMaximum(d);
        var g = f >>> 5,
            h = 31 & f;
        var i = c - g;
        if (0 >= i) return e.__rightShiftByMaximum(d);
        var j = !1;

        if (d) {
          if (0 != (a.__digit(g) & (1 << h) - 1)) j = !0;else for (var _b24 = 0; _b24 < g; _b24++) {
            if (0 !== a.__digit(_b24)) {
              j = !0;
              break;
            }
          }
        }

        if (j && 0 === h) {
          var _b25 = a.__digit(c - 1);

          0 == ~_b25 && i++;
        }

        var k = new e(i, d);
        if (0 === h) for (var _b26 = g; _b26 < c; _b26++) {
          k.__setDigit(_b26 - g, a.__digit(_b26));
        } else {
          var _b27 = a.__digit(g) >>> h;

          var _d17 = c - g - 1;

          for (var _c26 = 0; _c26 < _d17; _c26++) {
            var _e22 = a.__digit(_c26 + g + 1);

            k.__setDigit(_c26, _e22 << 32 - h | _b27), _b27 = _e22 >>> h;
          }

          k.__setDigit(_d17, _b27);
        }
        return j && (k = e.__absoluteAddOne(k, !0, k)), k.__trim();
      }
    }, {
      key: "__rightShiftByMaximum",
      value: function __rightShiftByMaximum(a) {
        return a ? e.__oneDigit(1, !0) : e.__zero();
      }
    }, {
      key: "__toShiftAmount",
      value: function __toShiftAmount(a) {
        if (1 < a.length) return -1;

        var b = a.__unsignedDigit(0);

        return b > e.__kMaxLengthBits ? -1 : b;
      }
    }, {
      key: "__toPrimitive",
      value: function __toPrimitive(a) {
        var b = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "default";
        if ("object" != _typeof(a)) return a;
        if (a.constructor === e) return a;
        var c = a[Symbol.toPrimitive];

        if (c) {
          var _a8 = c(b);

          if ("object" != _typeof(_a8)) return _a8;
          throw new TypeError("Cannot convert object to primitive value");
        }

        var d = a.valueOf;

        if (d) {
          var _b28 = d.call(a);

          if ("object" != _typeof(_b28)) return _b28;
        }

        var f = a.toString;

        if (f) {
          var _b29 = f.call(a);

          if ("object" != _typeof(_b29)) return _b29;
        }

        throw new TypeError("Cannot convert object to primitive value");
      }
    }, {
      key: "__toNumeric",
      value: function __toNumeric(a) {
        return e.__isBigInt(a) ? a : +a;
      }
    }, {
      key: "__isBigInt",
      value: function __isBigInt(a) {
        return "object" == _typeof(a) && a.constructor === e;
      }
    }, {
      key: "__digitPow",
      value: function __digitPow(a, b) {
        var c = 1;

        for (; 0 < b;) {
          1 & b && (c *= a), b >>>= 1, a *= a;
        }

        return c;
      }
    }]);

    return e;
  }(_wrapNativeSuper(Array));

  return e.__kMaxLength = 33554432, e.__kMaxLengthBits = e.__kMaxLength << 5, e.__kMaxBitsPerChar = [0, 0, 32, 51, 64, 75, 83, 90, 96, 102, 107, 111, 115, 119, 122, 126, 128, 131, 134, 136, 139, 141, 143, 145, 147, 149, 151, 153, 154, 156, 158, 159, 160, 162, 163, 165, 166], e.__kBitsPerCharTableShift = 5, e.__kBitsPerCharTableMultiplier = 1 << e.__kBitsPerCharTableShift, e.__kConversionChars = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"], e.__kBitConversionBuffer = new ArrayBuffer(8), e.__kBitConversionDouble = new Float64Array(e.__kBitConversionBuffer), e.__kBitConversionInts = new Int32Array(e.__kBitConversionBuffer), e;
});

/***/ }),

/***/ "./node_modules/jsonify/index.js":
/*!***************************************!*\
  !*** ./node_modules/jsonify/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports.parse = __webpack_require__(/*! ./lib/parse */ "./node_modules/jsonify/lib/parse.js");
exports.stringify = __webpack_require__(/*! ./lib/stringify */ "./node_modules/jsonify/lib/stringify.js");

/***/ }),

/***/ "./node_modules/jsonify/lib/parse.js":
/*!*******************************************!*\
  !*** ./node_modules/jsonify/lib/parse.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var at,
    // The index of the current character
ch,
    // The current character
escapee = {
  '"': '"',
  '\\': '\\',
  '/': '/',
  b: '\b',
  f: '\f',
  n: '\n',
  r: '\r',
  t: '\t'
},
    text,
    error = function error(m) {
  // Call error when something is wrong.
  throw {
    name: 'SyntaxError',
    message: m,
    at: at,
    text: text
  };
},
    next = function next(c) {
  // If a c parameter is provided, verify that it matches the current character.
  if (c && c !== ch) {
    error("Expected '" + c + "' instead of '" + ch + "'");
  } // Get the next character. When there are no more characters,
  // return the empty string.


  ch = text.charAt(at);
  at += 1;
  return ch;
},
    number = function number() {
  // Parse a number value.
  var number,
      string = '';

  if (ch === '-') {
    string = '-';
    next('-');
  }

  while (ch >= '0' && ch <= '9') {
    string += ch;
    next();
  }

  if (ch === '.') {
    string += '.';

    while (next() && ch >= '0' && ch <= '9') {
      string += ch;
    }
  }

  if (ch === 'e' || ch === 'E') {
    string += ch;
    next();

    if (ch === '-' || ch === '+') {
      string += ch;
      next();
    }

    while (ch >= '0' && ch <= '9') {
      string += ch;
      next();
    }
  }

  number = +string;

  if (!isFinite(number)) {
    error("Bad number");
  } else {
    return number;
  }
},
    string = function string() {
  // Parse a string value.
  var hex,
      i,
      string = '',
      uffff; // When parsing for string values, we must look for " and \ characters.

  if (ch === '"') {
    while (next()) {
      if (ch === '"') {
        next();
        return string;
      } else if (ch === '\\') {
        next();

        if (ch === 'u') {
          uffff = 0;

          for (i = 0; i < 4; i += 1) {
            hex = parseInt(next(), 16);

            if (!isFinite(hex)) {
              break;
            }

            uffff = uffff * 16 + hex;
          }

          string += String.fromCharCode(uffff);
        } else if (typeof escapee[ch] === 'string') {
          string += escapee[ch];
        } else {
          break;
        }
      } else {
        string += ch;
      }
    }
  }

  error("Bad string");
},
    white = function white() {
  // Skip whitespace.
  while (ch && ch <= ' ') {
    next();
  }
},
    word = function word() {
  // true, false, or null.
  switch (ch) {
    case 't':
      next('t');
      next('r');
      next('u');
      next('e');
      return true;

    case 'f':
      next('f');
      next('a');
      next('l');
      next('s');
      next('e');
      return false;

    case 'n':
      next('n');
      next('u');
      next('l');
      next('l');
      return null;
  }

  error("Unexpected '" + ch + "'");
},
    value,
    // Place holder for the value function.
array = function array() {
  // Parse an array value.
  var array = [];

  if (ch === '[') {
    next('[');
    white();

    if (ch === ']') {
      next(']');
      return array; // empty array
    }

    while (ch) {
      array.push(value());
      white();

      if (ch === ']') {
        next(']');
        return array;
      }

      next(',');
      white();
    }
  }

  error("Bad array");
},
    object = function object() {
  // Parse an object value.
  var key,
      object = {};

  if (ch === '{') {
    next('{');
    white();

    if (ch === '}') {
      next('}');
      return object; // empty object
    }

    while (ch) {
      key = string();
      white();
      next(':');

      if (Object.hasOwnProperty.call(object, key)) {
        error('Duplicate key "' + key + '"');
      }

      object[key] = value();
      white();

      if (ch === '}') {
        next('}');
        return object;
      }

      next(',');
      white();
    }
  }

  error("Bad object");
};

value = function value() {
  // Parse a JSON value. It could be an object, an array, a string, a number,
  // or a word.
  white();

  switch (ch) {
    case '{':
      return object();

    case '[':
      return array();

    case '"':
      return string();

    case '-':
      return number();

    default:
      return ch >= '0' && ch <= '9' ? number() : word();
  }
}; // Return the json_parse function. It will have access to all of the above
// functions and variables.


module.exports = function (source, reviver) {
  var result;
  text = source;
  at = 0;
  ch = ' ';
  result = value();
  white();

  if (ch) {
    error("Syntax error");
  } // If there is a reviver function, we recursively walk the new structure,
  // passing each name/value pair to the reviver function for possible
  // transformation, starting with a temporary root object that holds the result
  // in an empty key. If there is not a reviver function, we simply return the
  // result.


  return typeof reviver === 'function' ? function walk(holder, key) {
    var k,
        v,
        value = holder[key];

    if (value && _typeof(value) === 'object') {
      for (k in value) {
        if (Object.prototype.hasOwnProperty.call(value, k)) {
          v = walk(value, k);

          if (v !== undefined) {
            value[k] = v;
          } else {
            delete value[k];
          }
        }
      }
    }

    return reviver.call(holder, key, value);
  }({
    '': result
  }, '') : result;
};

/***/ }),

/***/ "./node_modules/jsonify/lib/stringify.js":
/*!***********************************************!*\
  !*** ./node_modules/jsonify/lib/stringify.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
    gap,
    indent,
    meta = {
  // table of character substitutions
  '\b': '\\b',
  '\t': '\\t',
  '\n': '\\n',
  '\f': '\\f',
  '\r': '\\r',
  '"': '\\"',
  '\\': '\\\\'
},
    rep;

function quote(string) {
  // If the string contains no control characters, no quote characters, and no
  // backslash characters, then we can safely slap some quotes around it.
  // Otherwise we must also replace the offending characters with safe escape
  // sequences.
  escapable.lastIndex = 0;
  return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
    var c = meta[a];
    return typeof c === 'string' ? c : "\\u" + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
  }) + '"' : '"' + string + '"';
}

function str(key, holder) {
  // Produce a string from holder[key].
  var i,
      // The loop counter.
  k,
      // The member key.
  v,
      // The member value.
  length,
      mind = gap,
      partial,
      value = holder[key]; // If the value has a toJSON method, call it to obtain a replacement value.

  if (value && _typeof(value) === 'object' && typeof value.toJSON === 'function') {
    value = value.toJSON(key);
  } // If we were called with a replacer function, then call the replacer to
  // obtain a replacement value.


  if (typeof rep === 'function') {
    value = rep.call(holder, key, value);
  } // What happens next depends on the value's type.


  switch (_typeof(value)) {
    case 'string':
      return quote(value);

    case 'number':
      // JSON numbers must be finite. Encode non-finite numbers as null.
      return isFinite(value) ? String(value) : 'null';

    case 'boolean':
    case 'null':
      // If the value is a boolean or null, convert it to a string. Note:
      // typeof null does not produce 'null'. The case is included here in
      // the remote chance that this gets fixed someday.
      return String(value);

    case 'object':
      if (!value) return 'null';
      gap += indent;
      partial = []; // Array.isArray

      if (Object.prototype.toString.apply(value) === '[object Array]') {
        length = value.length;

        for (i = 0; i < length; i += 1) {
          partial[i] = str(i, value) || 'null';
        } // Join all of the elements together, separated with commas, and
        // wrap them in brackets.


        v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']';
        gap = mind;
        return v;
      } // If the replacer is an array, use it to select the members to be
      // stringified.


      if (rep && _typeof(rep) === 'object') {
        length = rep.length;

        for (i = 0; i < length; i += 1) {
          k = rep[i];

          if (typeof k === 'string') {
            v = str(k, value);

            if (v) {
              partial.push(quote(k) + (gap ? ': ' : ':') + v);
            }
          }
        }
      } else {
        // Otherwise, iterate through all of the keys in the object.
        for (k in value) {
          if (Object.prototype.hasOwnProperty.call(value, k)) {
            v = str(k, value);

            if (v) {
              partial.push(quote(k) + (gap ? ': ' : ':') + v);
            }
          }
        }
      } // Join all of the member texts together, separated with commas,
      // and wrap them in braces.


      v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}';
      gap = mind;
      return v;
  }
}

module.exports = function (value, replacer, space) {
  var i;
  gap = '';
  indent = ''; // If the space parameter is a number, make an indent string containing that
  // many spaces.

  if (typeof space === 'number') {
    for (i = 0; i < space; i += 1) {
      indent += ' ';
    }
  } // If the space parameter is a string, it will be used as the indent string.
  else if (typeof space === 'string') {
      indent = space;
    } // If there is a replacer, it must be a function or an array.
  // Otherwise, throw an error.


  rep = replacer;

  if (replacer && typeof replacer !== 'function' && (_typeof(replacer) !== 'object' || typeof replacer.length !== 'number')) {
    throw new Error('JSON.stringify');
  } // Make a fake root object containing our value under the key of ''.
  // Return the result of stringifying the value.


  return str('', {
    '': value
  });
};

/***/ }),

/***/ "./node_modules/md5.js/index.js":
/*!**************************************!*\
  !*** ./node_modules/md5.js/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var HashBase = __webpack_require__(/*! hash-base */ "./node_modules/hash-base/index.js");

var ARRAY16 = new Array(16);

function MD5() {
  HashBase.call(this, 64); // state

  this._a = 0x67452301;
  this._b = 0xefcdab89;
  this._c = 0x98badcfe;
  this._d = 0x10325476;
}

inherits(MD5, HashBase);

MD5.prototype._update = function () {
  var M = ARRAY16;

  for (var i = 0; i < 16; ++i) {
    M[i] = this._block.readInt32LE(i * 4);
  }

  var a = this._a;
  var b = this._b;
  var c = this._c;
  var d = this._d;
  a = fnF(a, b, c, d, M[0], 0xd76aa478, 7);
  d = fnF(d, a, b, c, M[1], 0xe8c7b756, 12);
  c = fnF(c, d, a, b, M[2], 0x242070db, 17);
  b = fnF(b, c, d, a, M[3], 0xc1bdceee, 22);
  a = fnF(a, b, c, d, M[4], 0xf57c0faf, 7);
  d = fnF(d, a, b, c, M[5], 0x4787c62a, 12);
  c = fnF(c, d, a, b, M[6], 0xa8304613, 17);
  b = fnF(b, c, d, a, M[7], 0xfd469501, 22);
  a = fnF(a, b, c, d, M[8], 0x698098d8, 7);
  d = fnF(d, a, b, c, M[9], 0x8b44f7af, 12);
  c = fnF(c, d, a, b, M[10], 0xffff5bb1, 17);
  b = fnF(b, c, d, a, M[11], 0x895cd7be, 22);
  a = fnF(a, b, c, d, M[12], 0x6b901122, 7);
  d = fnF(d, a, b, c, M[13], 0xfd987193, 12);
  c = fnF(c, d, a, b, M[14], 0xa679438e, 17);
  b = fnF(b, c, d, a, M[15], 0x49b40821, 22);
  a = fnG(a, b, c, d, M[1], 0xf61e2562, 5);
  d = fnG(d, a, b, c, M[6], 0xc040b340, 9);
  c = fnG(c, d, a, b, M[11], 0x265e5a51, 14);
  b = fnG(b, c, d, a, M[0], 0xe9b6c7aa, 20);
  a = fnG(a, b, c, d, M[5], 0xd62f105d, 5);
  d = fnG(d, a, b, c, M[10], 0x02441453, 9);
  c = fnG(c, d, a, b, M[15], 0xd8a1e681, 14);
  b = fnG(b, c, d, a, M[4], 0xe7d3fbc8, 20);
  a = fnG(a, b, c, d, M[9], 0x21e1cde6, 5);
  d = fnG(d, a, b, c, M[14], 0xc33707d6, 9);
  c = fnG(c, d, a, b, M[3], 0xf4d50d87, 14);
  b = fnG(b, c, d, a, M[8], 0x455a14ed, 20);
  a = fnG(a, b, c, d, M[13], 0xa9e3e905, 5);
  d = fnG(d, a, b, c, M[2], 0xfcefa3f8, 9);
  c = fnG(c, d, a, b, M[7], 0x676f02d9, 14);
  b = fnG(b, c, d, a, M[12], 0x8d2a4c8a, 20);
  a = fnH(a, b, c, d, M[5], 0xfffa3942, 4);
  d = fnH(d, a, b, c, M[8], 0x8771f681, 11);
  c = fnH(c, d, a, b, M[11], 0x6d9d6122, 16);
  b = fnH(b, c, d, a, M[14], 0xfde5380c, 23);
  a = fnH(a, b, c, d, M[1], 0xa4beea44, 4);
  d = fnH(d, a, b, c, M[4], 0x4bdecfa9, 11);
  c = fnH(c, d, a, b, M[7], 0xf6bb4b60, 16);
  b = fnH(b, c, d, a, M[10], 0xbebfbc70, 23);
  a = fnH(a, b, c, d, M[13], 0x289b7ec6, 4);
  d = fnH(d, a, b, c, M[0], 0xeaa127fa, 11);
  c = fnH(c, d, a, b, M[3], 0xd4ef3085, 16);
  b = fnH(b, c, d, a, M[6], 0x04881d05, 23);
  a = fnH(a, b, c, d, M[9], 0xd9d4d039, 4);
  d = fnH(d, a, b, c, M[12], 0xe6db99e5, 11);
  c = fnH(c, d, a, b, M[15], 0x1fa27cf8, 16);
  b = fnH(b, c, d, a, M[2], 0xc4ac5665, 23);
  a = fnI(a, b, c, d, M[0], 0xf4292244, 6);
  d = fnI(d, a, b, c, M[7], 0x432aff97, 10);
  c = fnI(c, d, a, b, M[14], 0xab9423a7, 15);
  b = fnI(b, c, d, a, M[5], 0xfc93a039, 21);
  a = fnI(a, b, c, d, M[12], 0x655b59c3, 6);
  d = fnI(d, a, b, c, M[3], 0x8f0ccc92, 10);
  c = fnI(c, d, a, b, M[10], 0xffeff47d, 15);
  b = fnI(b, c, d, a, M[1], 0x85845dd1, 21);
  a = fnI(a, b, c, d, M[8], 0x6fa87e4f, 6);
  d = fnI(d, a, b, c, M[15], 0xfe2ce6e0, 10);
  c = fnI(c, d, a, b, M[6], 0xa3014314, 15);
  b = fnI(b, c, d, a, M[13], 0x4e0811a1, 21);
  a = fnI(a, b, c, d, M[4], 0xf7537e82, 6);
  d = fnI(d, a, b, c, M[11], 0xbd3af235, 10);
  c = fnI(c, d, a, b, M[2], 0x2ad7d2bb, 15);
  b = fnI(b, c, d, a, M[9], 0xeb86d391, 21);
  this._a = this._a + a | 0;
  this._b = this._b + b | 0;
  this._c = this._c + c | 0;
  this._d = this._d + d | 0;
};

MD5.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80;

  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64);

    this._update();

    this._blockOffset = 0;
  }

  this._block.fill(0, this._blockOffset, 56);

  this._block.writeUInt32LE(this._length[0], 56);

  this._block.writeUInt32LE(this._length[1], 60);

  this._update(); // produce result


  var buffer = new Buffer(16);
  buffer.writeInt32LE(this._a, 0);
  buffer.writeInt32LE(this._b, 4);
  buffer.writeInt32LE(this._c, 8);
  buffer.writeInt32LE(this._d, 12);
  return buffer;
};

function rotl(x, n) {
  return x << n | x >>> 32 - n;
}

function fnF(a, b, c, d, m, k, s) {
  return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
}

function fnG(a, b, c, d, m, k, s) {
  return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
}

function fnH(a, b, c, d, m, k, s) {
  return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
}

function fnI(a, b, c, d, m, k, s) {
  return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
}

module.exports = MD5;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/miller-rabin/lib/mr.js":
/*!*********************************************!*\
  !*** ./node_modules/miller-rabin/lib/mr.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var bn = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

var brorand = __webpack_require__(/*! brorand */ "./node_modules/brorand/index.js");

function MillerRabin(rand) {
  this.rand = rand || new brorand.Rand();
}

module.exports = MillerRabin;

MillerRabin.create = function create(rand) {
  return new MillerRabin(rand);
};

MillerRabin.prototype._randbelow = function _randbelow(n) {
  var len = n.bitLength();
  var min_bytes = Math.ceil(len / 8); // Generage random bytes until a number less than n is found.
  // This ensures that 0..n-1 have an equal probability of being selected.

  do {
    var a = new bn(this.rand.generate(min_bytes));
  } while (a.cmp(n) >= 0);

  return a;
};

MillerRabin.prototype._randrange = function _randrange(start, stop) {
  // Generate a random number greater than or equal to start and less than stop.
  var size = stop.sub(start);
  return start.add(this._randbelow(size));
};

MillerRabin.prototype.test = function test(n, k, cb) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);
  if (!k) k = Math.max(1, len / 48 | 0); // Find d and s, (n - 1) = (2 ^ s) * d;

  var n1 = n.subn(1);

  for (var s = 0; !n1.testn(s); s++) {}

  var d = n.shrn(s);
  var rn1 = n1.toRed(red);
  var prime = true;

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    if (cb) cb(a);
    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();
      if (x.cmp(rone) === 0) return false;
      if (x.cmp(rn1) === 0) break;
    }

    if (i === s) return false;
  }

  return prime;
};

MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
  var len = n.bitLength();
  var red = bn.mont(n);
  var rone = new bn(1).toRed(red);
  if (!k) k = Math.max(1, len / 48 | 0); // Find d and s, (n - 1) = (2 ^ s) * d;

  var n1 = n.subn(1);

  for (var s = 0; !n1.testn(s); s++) {}

  var d = n.shrn(s);
  var rn1 = n1.toRed(red);

  for (; k > 0; k--) {
    var a = this._randrange(new bn(2), n1);

    var g = n.gcd(a);
    if (g.cmpn(1) !== 0) return g;
    var x = a.toRed(red).redPow(d);
    if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;

    for (var i = 1; i < s; i++) {
      x = x.redSqr();
      if (x.cmp(rone) === 0) return x.fromRed().subn(1).gcd(n);
      if (x.cmp(rn1) === 0) break;
    }

    if (i === s) {
      x = x.redSqr();
      return x.fromRed().subn(1).gcd(n);
    }
  }

  return false;
};

/***/ }),

/***/ "./node_modules/minimalistic-assert/index.js":
/*!***************************************************!*\
  !*** ./node_modules/minimalistic-assert/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = assert;

function assert(val, msg) {
  if (!val) throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
};

/***/ }),

/***/ "./node_modules/minimalistic-crypto-utils/lib/utils.js":
/*!*************************************************************!*\
  !*** ./node_modules/minimalistic-crypto-utils/lib/utils.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = exports;

function toArray(msg, enc) {
  if (Array.isArray(msg)) return msg.slice();
  if (!msg) return [];
  var res = [];

  if (typeof msg !== 'string') {
    for (var i = 0; i < msg.length; i++) {
      res[i] = msg[i] | 0;
    }

    return res;
  }

  if (enc === 'hex') {
    msg = msg.replace(/[^a-z0-9]+/ig, '');
    if (msg.length % 2 !== 0) msg = '0' + msg;

    for (var i = 0; i < msg.length; i += 2) {
      res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (var i = 0; i < msg.length; i++) {
      var c = msg.charCodeAt(i);
      var hi = c >> 8;
      var lo = c & 0xff;
      if (hi) res.push(hi, lo);else res.push(lo);
    }
  }

  return res;
}

utils.toArray = toArray;

function zero2(word) {
  if (word.length === 1) return '0' + word;else return word;
}

utils.zero2 = zero2;

function toHex(msg) {
  var res = '';

  for (var i = 0; i < msg.length; i++) {
    res += zero2(msg[i].toString(16));
  }

  return res;
}

utils.toHex = toHex;

utils.encode = function encode(arr, enc) {
  if (enc === 'hex') return toHex(arr);else return arr;
};

/***/ }),

/***/ "./node_modules/moment/locale/ko.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ko.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

//! moment.js locale configuration
;

(function (global, factory) {
  ( false ? undefined : _typeof(exports)) === 'object' && typeof module !== 'undefined' && "function" === 'function' ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
})(this, function (moment) {
  'use strict';

  var ko = moment.defineLocale('ko', {
    months: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
    monthsShort: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
    weekdays: '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
    weekdaysShort: '일_월_화_수_목_금_토'.split('_'),
    weekdaysMin: '일_월_화_수_목_금_토'.split('_'),
    longDateFormat: {
      LT: 'A h:mm',
      LTS: 'A h:mm:ss',
      L: 'YYYY.MM.DD.',
      LL: 'YYYY년 MMMM D일',
      LLL: 'YYYY년 MMMM D일 A h:mm',
      LLLL: 'YYYY년 MMMM D일 dddd A h:mm',
      l: 'YYYY.MM.DD.',
      ll: 'YYYY년 MMMM D일',
      lll: 'YYYY년 MMMM D일 A h:mm',
      llll: 'YYYY년 MMMM D일 dddd A h:mm'
    },
    calendar: {
      sameDay: '오늘 LT',
      nextDay: '내일 LT',
      nextWeek: 'dddd LT',
      lastDay: '어제 LT',
      lastWeek: '지난주 dddd LT',
      sameElse: 'L'
    },
    relativeTime: {
      future: '%s 후',
      past: '%s 전',
      s: '몇 초',
      ss: '%d초',
      m: '1분',
      mm: '%d분',
      h: '한 시간',
      hh: '%d시간',
      d: '하루',
      dd: '%d일',
      M: '한 달',
      MM: '%d달',
      y: '일 년',
      yy: '%d년'
    },
    dayOfMonthOrdinalParse: /\d{1,2}(일|월|주)/,
    ordinal: function ordinal(number, period) {
      switch (period) {
        case 'd':
        case 'D':
        case 'DDD':
          return number + '일';

        case 'M':
          return number + '월';

        case 'w':
        case 'W':
          return number + '주';

        default:
          return number;
      }
    },
    meridiemParse: /오전|오후/,
    isPM: function isPM(token) {
      return token === '오후';
    },
    meridiem: function meridiem(hour, minute, isUpper) {
      return hour < 12 ? '오전' : '오후';
    }
  });
  return ko;
});

/***/ }),

/***/ "./node_modules/moment/moment.js":
/*!***************************************!*\
  !*** ./node_modules/moment/moment.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

//! moment.js
;

(function (global, factory) {
  ( false ? undefined : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
})(this, function () {
  'use strict';

  var hookCallback;

  function hooks() {
    return hookCallback.apply(null, arguments);
  } // This is done to register the method called with moment()
  // without creating circular dependencies.


  function setHookCallback(callback) {
    hookCallback = callback;
  }

  function isArray(input) {
    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
  }

  function isObject(input) {
    // IE8 will treat undefined and null as object if it wasn't for
    // input != null
    return input != null && Object.prototype.toString.call(input) === '[object Object]';
  }

  function isObjectEmpty(obj) {
    if (Object.getOwnPropertyNames) {
      return Object.getOwnPropertyNames(obj).length === 0;
    } else {
      var k;

      for (k in obj) {
        if (obj.hasOwnProperty(k)) {
          return false;
        }
      }

      return true;
    }
  }

  function isUndefined(input) {
    return input === void 0;
  }

  function isNumber(input) {
    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
  }

  function isDate(input) {
    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
  }

  function map(arr, fn) {
    var res = [],
        i;

    for (i = 0; i < arr.length; ++i) {
      res.push(fn(arr[i], i));
    }

    return res;
  }

  function hasOwnProp(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
  }

  function extend(a, b) {
    for (var i in b) {
      if (hasOwnProp(b, i)) {
        a[i] = b[i];
      }
    }

    if (hasOwnProp(b, 'toString')) {
      a.toString = b.toString;
    }

    if (hasOwnProp(b, 'valueOf')) {
      a.valueOf = b.valueOf;
    }

    return a;
  }

  function createUTC(input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, true).utc();
  }

  function defaultParsingFlags() {
    // We need to deep clone this object.
    return {
      empty: false,
      unusedTokens: [],
      unusedInput: [],
      overflow: -2,
      charsLeftOver: 0,
      nullInput: false,
      invalidMonth: null,
      invalidFormat: false,
      userInvalidated: false,
      iso: false,
      parsedDateParts: [],
      meridiem: null,
      rfc2822: false,
      weekdayMismatch: false
    };
  }

  function getParsingFlags(m) {
    if (m._pf == null) {
      m._pf = defaultParsingFlags();
    }

    return m._pf;
  }

  var some;

  if (Array.prototype.some) {
    some = Array.prototype.some;
  } else {
    some = function some(fun) {
      var t = Object(this);
      var len = t.length >>> 0;

      for (var i = 0; i < len; i++) {
        if (i in t && fun.call(this, t[i], i, t)) {
          return true;
        }
      }

      return false;
    };
  }

  function isValid(m) {
    if (m._isValid == null) {
      var flags = getParsingFlags(m);
      var parsedParts = some.call(flags.parsedDateParts, function (i) {
        return i != null;
      });
      var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);

      if (m._strict) {
        isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
      }

      if (Object.isFrozen == null || !Object.isFrozen(m)) {
        m._isValid = isNowValid;
      } else {
        return isNowValid;
      }
    }

    return m._isValid;
  }

  function createInvalid(flags) {
    var m = createUTC(NaN);

    if (flags != null) {
      extend(getParsingFlags(m), flags);
    } else {
      getParsingFlags(m).userInvalidated = true;
    }

    return m;
  } // Plugins that add properties should also add the key here (null value),
  // so we can properly clone ourselves.


  var momentProperties = hooks.momentProperties = [];

  function copyConfig(to, from) {
    var i, prop, val;

    if (!isUndefined(from._isAMomentObject)) {
      to._isAMomentObject = from._isAMomentObject;
    }

    if (!isUndefined(from._i)) {
      to._i = from._i;
    }

    if (!isUndefined(from._f)) {
      to._f = from._f;
    }

    if (!isUndefined(from._l)) {
      to._l = from._l;
    }

    if (!isUndefined(from._strict)) {
      to._strict = from._strict;
    }

    if (!isUndefined(from._tzm)) {
      to._tzm = from._tzm;
    }

    if (!isUndefined(from._isUTC)) {
      to._isUTC = from._isUTC;
    }

    if (!isUndefined(from._offset)) {
      to._offset = from._offset;
    }

    if (!isUndefined(from._pf)) {
      to._pf = getParsingFlags(from);
    }

    if (!isUndefined(from._locale)) {
      to._locale = from._locale;
    }

    if (momentProperties.length > 0) {
      for (i = 0; i < momentProperties.length; i++) {
        prop = momentProperties[i];
        val = from[prop];

        if (!isUndefined(val)) {
          to[prop] = val;
        }
      }
    }

    return to;
  }

  var updateInProgress = false; // Moment prototype object

  function Moment(config) {
    copyConfig(this, config);
    this._d = new Date(config._d != null ? config._d.getTime() : NaN);

    if (!this.isValid()) {
      this._d = new Date(NaN);
    } // Prevent infinite loop in case updateOffset creates new moment
    // objects.


    if (updateInProgress === false) {
      updateInProgress = true;
      hooks.updateOffset(this);
      updateInProgress = false;
    }
  }

  function isMoment(obj) {
    return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
  }

  function absFloor(number) {
    if (number < 0) {
      // -0 -> 0
      return Math.ceil(number) || 0;
    } else {
      return Math.floor(number);
    }
  }

  function toInt(argumentForCoercion) {
    var coercedNumber = +argumentForCoercion,
        value = 0;

    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
      value = absFloor(coercedNumber);
    }

    return value;
  } // compare two arrays, return the number of differences


  function compareArrays(array1, array2, dontConvert) {
    var len = Math.min(array1.length, array2.length),
        lengthDiff = Math.abs(array1.length - array2.length),
        diffs = 0,
        i;

    for (i = 0; i < len; i++) {
      if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
        diffs++;
      }
    }

    return diffs + lengthDiff;
  }

  function warn(msg) {
    if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
      console.warn('Deprecation warning: ' + msg);
    }
  }

  function deprecate(msg, fn) {
    var firstTime = true;
    return extend(function () {
      if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(null, msg);
      }

      if (firstTime) {
        var args = [];
        var arg;

        for (var i = 0; i < arguments.length; i++) {
          arg = '';

          if (_typeof(arguments[i]) === 'object') {
            arg += '\n[' + i + '] ';

            for (var key in arguments[0]) {
              arg += key + ': ' + arguments[0][key] + ', ';
            }

            arg = arg.slice(0, -2); // Remove trailing comma and space
          } else {
            arg = arguments[i];
          }

          args.push(arg);
        }

        warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
        firstTime = false;
      }

      return fn.apply(this, arguments);
    }, fn);
  }

  var deprecations = {};

  function deprecateSimple(name, msg) {
    if (hooks.deprecationHandler != null) {
      hooks.deprecationHandler(name, msg);
    }

    if (!deprecations[name]) {
      warn(msg);
      deprecations[name] = true;
    }
  }

  hooks.suppressDeprecationWarnings = false;
  hooks.deprecationHandler = null;

  function isFunction(input) {
    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
  }

  function set(config) {
    var prop, i;

    for (i in config) {
      prop = config[i];

      if (isFunction(prop)) {
        this[i] = prop;
      } else {
        this['_' + i] = prop;
      }
    }

    this._config = config; // Lenient ordinal parsing accepts just a number in addition to
    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
    // TODO: Remove "ordinalParse" fallback in next major release.

    this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source);
  }

  function mergeConfigs(parentConfig, childConfig) {
    var res = extend({}, parentConfig),
        prop;

    for (prop in childConfig) {
      if (hasOwnProp(childConfig, prop)) {
        if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
          res[prop] = {};
          extend(res[prop], parentConfig[prop]);
          extend(res[prop], childConfig[prop]);
        } else if (childConfig[prop] != null) {
          res[prop] = childConfig[prop];
        } else {
          delete res[prop];
        }
      }
    }

    for (prop in parentConfig) {
      if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
        // make sure changes to properties don't modify parent config
        res[prop] = extend({}, res[prop]);
      }
    }

    return res;
  }

  function Locale(config) {
    if (config != null) {
      this.set(config);
    }
  }

  var keys;

  if (Object.keys) {
    keys = Object.keys;
  } else {
    keys = function keys(obj) {
      var i,
          res = [];

      for (i in obj) {
        if (hasOwnProp(obj, i)) {
          res.push(i);
        }
      }

      return res;
    };
  }

  var defaultCalendar = {
    sameDay: '[Today at] LT',
    nextDay: '[Tomorrow at] LT',
    nextWeek: 'dddd [at] LT',
    lastDay: '[Yesterday at] LT',
    lastWeek: '[Last] dddd [at] LT',
    sameElse: 'L'
  };

  function calendar(key, mom, now) {
    var output = this._calendar[key] || this._calendar['sameElse'];
    return isFunction(output) ? output.call(mom, now) : output;
  }

  var defaultLongDateFormat = {
    LTS: 'h:mm:ss A',
    LT: 'h:mm A',
    L: 'MM/DD/YYYY',
    LL: 'MMMM D, YYYY',
    LLL: 'MMMM D, YYYY h:mm A',
    LLLL: 'dddd, MMMM D, YYYY h:mm A'
  };

  function longDateFormat(key) {
    var format = this._longDateFormat[key],
        formatUpper = this._longDateFormat[key.toUpperCase()];

    if (format || !formatUpper) {
      return format;
    }

    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
      return val.slice(1);
    });
    return this._longDateFormat[key];
  }

  var defaultInvalidDate = 'Invalid date';

  function invalidDate() {
    return this._invalidDate;
  }

  var defaultOrdinal = '%d';
  var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

  function ordinal(number) {
    return this._ordinal.replace('%d', number);
  }

  var defaultRelativeTime = {
    future: 'in %s',
    past: '%s ago',
    s: 'a few seconds',
    ss: '%d seconds',
    m: 'a minute',
    mm: '%d minutes',
    h: 'an hour',
    hh: '%d hours',
    d: 'a day',
    dd: '%d days',
    M: 'a month',
    MM: '%d months',
    y: 'a year',
    yy: '%d years'
  };

  function relativeTime(number, withoutSuffix, string, isFuture) {
    var output = this._relativeTime[string];
    return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
  }

  function pastFuture(diff, output) {
    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
  }

  var aliases = {};

  function addUnitAlias(unit, shorthand) {
    var lowerCase = unit.toLowerCase();
    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
  }

  function normalizeUnits(units) {
    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
  }

  function normalizeObjectUnits(inputObject) {
    var normalizedInput = {},
        normalizedProp,
        prop;

    for (prop in inputObject) {
      if (hasOwnProp(inputObject, prop)) {
        normalizedProp = normalizeUnits(prop);

        if (normalizedProp) {
          normalizedInput[normalizedProp] = inputObject[prop];
        }
      }
    }

    return normalizedInput;
  }

  var priorities = {};

  function addUnitPriority(unit, priority) {
    priorities[unit] = priority;
  }

  function getPrioritizedUnits(unitsObj) {
    var units = [];

    for (var u in unitsObj) {
      units.push({
        unit: u,
        priority: priorities[u]
      });
    }

    units.sort(function (a, b) {
      return a.priority - b.priority;
    });
    return units;
  }

  function zeroFill(number, targetLength, forceSign) {
    var absNumber = '' + Math.abs(number),
        zerosToFill = targetLength - absNumber.length,
        sign = number >= 0;
    return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
  }

  var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
  var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
  var formatFunctions = {};
  var formatTokenFunctions = {}; // token:    'M'
  // padded:   ['MM', 2]
  // ordinal:  'Mo'
  // callback: function () { this.month() + 1 }

  function addFormatToken(token, padded, ordinal, callback) {
    var func = callback;

    if (typeof callback === 'string') {
      func = function func() {
        return this[callback]();
      };
    }

    if (token) {
      formatTokenFunctions[token] = func;
    }

    if (padded) {
      formatTokenFunctions[padded[0]] = function () {
        return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
      };
    }

    if (ordinal) {
      formatTokenFunctions[ordinal] = function () {
        return this.localeData().ordinal(func.apply(this, arguments), token);
      };
    }
  }

  function removeFormattingTokens(input) {
    if (input.match(/\[[\s\S]/)) {
      return input.replace(/^\[|\]$/g, '');
    }

    return input.replace(/\\/g, '');
  }

  function makeFormatFunction(format) {
    var array = format.match(formattingTokens),
        i,
        length;

    for (i = 0, length = array.length; i < length; i++) {
      if (formatTokenFunctions[array[i]]) {
        array[i] = formatTokenFunctions[array[i]];
      } else {
        array[i] = removeFormattingTokens(array[i]);
      }
    }

    return function (mom) {
      var output = '',
          i;

      for (i = 0; i < length; i++) {
        output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
      }

      return output;
    };
  } // format date using native date object


  function formatMoment(m, format) {
    if (!m.isValid()) {
      return m.localeData().invalidDate();
    }

    format = expandFormat(format, m.localeData());
    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
    return formatFunctions[format](m);
  }

  function expandFormat(format, locale) {
    var i = 5;

    function replaceLongDateFormatTokens(input) {
      return locale.longDateFormat(input) || input;
    }

    localFormattingTokens.lastIndex = 0;

    while (i >= 0 && localFormattingTokens.test(format)) {
      format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
      localFormattingTokens.lastIndex = 0;
      i -= 1;
    }

    return format;
  }

  var match1 = /\d/; //       0 - 9

  var match2 = /\d\d/; //      00 - 99

  var match3 = /\d{3}/; //     000 - 999

  var match4 = /\d{4}/; //    0000 - 9999

  var match6 = /[+-]?\d{6}/; // -999999 - 999999

  var match1to2 = /\d\d?/; //       0 - 99

  var match3to4 = /\d\d\d\d?/; //     999 - 9999

  var match5to6 = /\d\d\d\d\d\d?/; //   99999 - 999999

  var match1to3 = /\d{1,3}/; //       0 - 999

  var match1to4 = /\d{1,4}/; //       0 - 9999

  var match1to6 = /[+-]?\d{1,6}/; // -999999 - 999999

  var matchUnsigned = /\d+/; //       0 - inf

  var matchSigned = /[+-]?\d+/; //    -inf - inf

  var matchOffset = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z

  var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

  var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123
  // any word (or two) characters or numbers including two/three word month in arabic.
  // includes scottish gaelic two word and hyphenated months

  var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;
  var regexes = {};

  function addRegexToken(token, regex, strictRegex) {
    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
      return isStrict && strictRegex ? strictRegex : regex;
    };
  }

  function getParseRegexForToken(token, config) {
    if (!hasOwnProp(regexes, token)) {
      return new RegExp(unescapeFormat(token));
    }

    return regexes[token](config._strict, config._locale);
  } // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript


  function unescapeFormat(s) {
    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
      return p1 || p2 || p3 || p4;
    }));
  }

  function regexEscape(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  }

  var tokens = {};

  function addParseToken(token, callback) {
    var i,
        func = callback;

    if (typeof token === 'string') {
      token = [token];
    }

    if (isNumber(callback)) {
      func = function func(input, array) {
        array[callback] = toInt(input);
      };
    }

    for (i = 0; i < token.length; i++) {
      tokens[token[i]] = func;
    }
  }

  function addWeekParseToken(token, callback) {
    addParseToken(token, function (input, array, config, token) {
      config._w = config._w || {};
      callback(input, config._w, config, token);
    });
  }

  function addTimeToArrayFromToken(token, input, config) {
    if (input != null && hasOwnProp(tokens, token)) {
      tokens[token](input, config._a, config, token);
    }
  }

  var YEAR = 0;
  var MONTH = 1;
  var DATE = 2;
  var HOUR = 3;
  var MINUTE = 4;
  var SECOND = 5;
  var MILLISECOND = 6;
  var WEEK = 7;
  var WEEKDAY = 8; // FORMATTING

  addFormatToken('Y', 0, 0, function () {
    var y = this.year();
    return y <= 9999 ? '' + y : '+' + y;
  });
  addFormatToken(0, ['YY', 2], 0, function () {
    return this.year() % 100;
  });
  addFormatToken(0, ['YYYY', 4], 0, 'year');
  addFormatToken(0, ['YYYYY', 5], 0, 'year');
  addFormatToken(0, ['YYYYYY', 6, true], 0, 'year'); // ALIASES

  addUnitAlias('year', 'y'); // PRIORITIES

  addUnitPriority('year', 1); // PARSING

  addRegexToken('Y', matchSigned);
  addRegexToken('YY', match1to2, match2);
  addRegexToken('YYYY', match1to4, match4);
  addRegexToken('YYYYY', match1to6, match6);
  addRegexToken('YYYYYY', match1to6, match6);
  addParseToken(['YYYYY', 'YYYYYY'], YEAR);
  addParseToken('YYYY', function (input, array) {
    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
  });
  addParseToken('YY', function (input, array) {
    array[YEAR] = hooks.parseTwoDigitYear(input);
  });
  addParseToken('Y', function (input, array) {
    array[YEAR] = parseInt(input, 10);
  }); // HELPERS

  function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
  }

  function isLeapYear(year) {
    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
  } // HOOKS


  hooks.parseTwoDigitYear = function (input) {
    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
  }; // MOMENTS


  var getSetYear = makeGetSet('FullYear', true);

  function getIsLeapYear() {
    return isLeapYear(this.year());
  }

  function makeGetSet(unit, keepTime) {
    return function (value) {
      if (value != null) {
        set$1(this, unit, value);
        hooks.updateOffset(this, keepTime);
        return this;
      } else {
        return get(this, unit);
      }
    };
  }

  function get(mom, unit) {
    return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
  }

  function set$1(mom, unit, value) {
    if (mom.isValid() && !isNaN(value)) {
      if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
      } else {
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
      }
    }
  } // MOMENTS


  function stringGet(units) {
    units = normalizeUnits(units);

    if (isFunction(this[units])) {
      return this[units]();
    }

    return this;
  }

  function stringSet(units, value) {
    if (_typeof(units) === 'object') {
      units = normalizeObjectUnits(units);
      var prioritized = getPrioritizedUnits(units);

      for (var i = 0; i < prioritized.length; i++) {
        this[prioritized[i].unit](units[prioritized[i].unit]);
      }
    } else {
      units = normalizeUnits(units);

      if (isFunction(this[units])) {
        return this[units](value);
      }
    }

    return this;
  }

  function mod(n, x) {
    return (n % x + x) % x;
  }

  var indexOf;

  if (Array.prototype.indexOf) {
    indexOf = Array.prototype.indexOf;
  } else {
    indexOf = function indexOf(o) {
      // I know
      var i;

      for (i = 0; i < this.length; ++i) {
        if (this[i] === o) {
          return i;
        }
      }

      return -1;
    };
  }

  function daysInMonth(year, month) {
    if (isNaN(year) || isNaN(month)) {
      return NaN;
    }

    var modMonth = mod(month, 12);
    year += (month - modMonth) / 12;
    return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
  } // FORMATTING


  addFormatToken('M', ['MM', 2], 'Mo', function () {
    return this.month() + 1;
  });
  addFormatToken('MMM', 0, 0, function (format) {
    return this.localeData().monthsShort(this, format);
  });
  addFormatToken('MMMM', 0, 0, function (format) {
    return this.localeData().months(this, format);
  }); // ALIASES

  addUnitAlias('month', 'M'); // PRIORITY

  addUnitPriority('month', 8); // PARSING

  addRegexToken('M', match1to2);
  addRegexToken('MM', match1to2, match2);
  addRegexToken('MMM', function (isStrict, locale) {
    return locale.monthsShortRegex(isStrict);
  });
  addRegexToken('MMMM', function (isStrict, locale) {
    return locale.monthsRegex(isStrict);
  });
  addParseToken(['M', 'MM'], function (input, array) {
    array[MONTH] = toInt(input) - 1;
  });
  addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
    var month = config._locale.monthsParse(input, token, config._strict); // if we didn't find a month name, mark the date as invalid.


    if (month != null) {
      array[MONTH] = month;
    } else {
      getParsingFlags(config).invalidMonth = input;
    }
  }); // LOCALES

  var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
  var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');

  function localeMonths(m, format) {
    if (!m) {
      return isArray(this._months) ? this._months : this._months['standalone'];
    }

    return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
  }

  var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');

  function localeMonthsShort(m, format) {
    if (!m) {
      return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
    }

    return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
  }

  function handleStrictParse(monthName, format, strict) {
    var i,
        ii,
        mom,
        llc = monthName.toLocaleLowerCase();

    if (!this._monthsParse) {
      // this is not used
      this._monthsParse = [];
      this._longMonthsParse = [];
      this._shortMonthsParse = [];

      for (i = 0; i < 12; ++i) {
        mom = createUTC([2000, i]);
        this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
        this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
      }
    }

    if (strict) {
      if (format === 'MMM') {
        ii = indexOf.call(this._shortMonthsParse, llc);
        return ii !== -1 ? ii : null;
      } else {
        ii = indexOf.call(this._longMonthsParse, llc);
        return ii !== -1 ? ii : null;
      }
    } else {
      if (format === 'MMM') {
        ii = indexOf.call(this._shortMonthsParse, llc);

        if (ii !== -1) {
          return ii;
        }

        ii = indexOf.call(this._longMonthsParse, llc);
        return ii !== -1 ? ii : null;
      } else {
        ii = indexOf.call(this._longMonthsParse, llc);

        if (ii !== -1) {
          return ii;
        }

        ii = indexOf.call(this._shortMonthsParse, llc);
        return ii !== -1 ? ii : null;
      }
    }
  }

  function localeMonthsParse(monthName, format, strict) {
    var i, mom, regex;

    if (this._monthsParseExact) {
      return handleStrictParse.call(this, monthName, format, strict);
    }

    if (!this._monthsParse) {
      this._monthsParse = [];
      this._longMonthsParse = [];
      this._shortMonthsParse = [];
    } // TODO: add sorting
    // Sorting makes sure if one month (or abbr) is a prefix of another
    // see sorting in computeMonthsParse


    for (i = 0; i < 12; i++) {
      // make the regex if we don't have it already
      mom = createUTC([2000, i]);

      if (strict && !this._longMonthsParse[i]) {
        this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
        this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
      }

      if (!strict && !this._monthsParse[i]) {
        regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
        this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
      } // test the regex


      if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
        return i;
      } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
        return i;
      } else if (!strict && this._monthsParse[i].test(monthName)) {
        return i;
      }
    }
  } // MOMENTS


  function setMonth(mom, value) {
    var dayOfMonth;

    if (!mom.isValid()) {
      // No op
      return mom;
    }

    if (typeof value === 'string') {
      if (/^\d+$/.test(value)) {
        value = toInt(value);
      } else {
        value = mom.localeData().monthsParse(value); // TODO: Another silent failure?

        if (!isNumber(value)) {
          return mom;
        }
      }
    }

    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));

    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);

    return mom;
  }

  function getSetMonth(value) {
    if (value != null) {
      setMonth(this, value);
      hooks.updateOffset(this, true);
      return this;
    } else {
      return get(this, 'Month');
    }
  }

  function getDaysInMonth() {
    return daysInMonth(this.year(), this.month());
  }

  var defaultMonthsShortRegex = matchWord;

  function monthsShortRegex(isStrict) {
    if (this._monthsParseExact) {
      if (!hasOwnProp(this, '_monthsRegex')) {
        computeMonthsParse.call(this);
      }

      if (isStrict) {
        return this._monthsShortStrictRegex;
      } else {
        return this._monthsShortRegex;
      }
    } else {
      if (!hasOwnProp(this, '_monthsShortRegex')) {
        this._monthsShortRegex = defaultMonthsShortRegex;
      }

      return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
    }
  }

  var defaultMonthsRegex = matchWord;

  function monthsRegex(isStrict) {
    if (this._monthsParseExact) {
      if (!hasOwnProp(this, '_monthsRegex')) {
        computeMonthsParse.call(this);
      }

      if (isStrict) {
        return this._monthsStrictRegex;
      } else {
        return this._monthsRegex;
      }
    } else {
      if (!hasOwnProp(this, '_monthsRegex')) {
        this._monthsRegex = defaultMonthsRegex;
      }

      return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
    }
  }

  function computeMonthsParse() {
    function cmpLenRev(a, b) {
      return b.length - a.length;
    }

    var shortPieces = [],
        longPieces = [],
        mixedPieces = [],
        i,
        mom;

    for (i = 0; i < 12; i++) {
      // make the regex if we don't have it already
      mom = createUTC([2000, i]);
      shortPieces.push(this.monthsShort(mom, ''));
      longPieces.push(this.months(mom, ''));
      mixedPieces.push(this.months(mom, ''));
      mixedPieces.push(this.monthsShort(mom, ''));
    } // Sorting makes sure if one month (or abbr) is a prefix of another it
    // will match the longer piece.


    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);

    for (i = 0; i < 12; i++) {
      shortPieces[i] = regexEscape(shortPieces[i]);
      longPieces[i] = regexEscape(longPieces[i]);
    }

    for (i = 0; i < 24; i++) {
      mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._monthsShortRegex = this._monthsRegex;
    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
  }

  function createDate(y, m, d, h, M, s, ms) {
    // can't just apply() to create a date:
    // https://stackoverflow.com/q/181348
    var date; // the date constructor remaps years 0-99 to 1900-1999

    if (y < 100 && y >= 0) {
      // preserve leap years using a full 400 year cycle, then reset
      date = new Date(y + 400, m, d, h, M, s, ms);

      if (isFinite(date.getFullYear())) {
        date.setFullYear(y);
      }
    } else {
      date = new Date(y, m, d, h, M, s, ms);
    }

    return date;
  }

  function createUTCDate(y) {
    var date; // the Date.UTC function remaps years 0-99 to 1900-1999

    if (y < 100 && y >= 0) {
      var args = Array.prototype.slice.call(arguments); // preserve leap years using a full 400 year cycle, then reset

      args[0] = y + 400;
      date = new Date(Date.UTC.apply(null, args));

      if (isFinite(date.getUTCFullYear())) {
        date.setUTCFullYear(y);
      }
    } else {
      date = new Date(Date.UTC.apply(null, arguments));
    }

    return date;
  } // start-of-first-week - start-of-year


  function firstWeekOffset(year, dow, doy) {
    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
    fwd = 7 + dow - doy,
        // first-week day local weekday -- which local weekday is fwd
    fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
    return -fwdlw + fwd - 1;
  } // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday


  function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
    var localWeekday = (7 + weekday - dow) % 7,
        weekOffset = firstWeekOffset(year, dow, doy),
        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
        resYear,
        resDayOfYear;

    if (dayOfYear <= 0) {
      resYear = year - 1;
      resDayOfYear = daysInYear(resYear) + dayOfYear;
    } else if (dayOfYear > daysInYear(year)) {
      resYear = year + 1;
      resDayOfYear = dayOfYear - daysInYear(year);
    } else {
      resYear = year;
      resDayOfYear = dayOfYear;
    }

    return {
      year: resYear,
      dayOfYear: resDayOfYear
    };
  }

  function weekOfYear(mom, dow, doy) {
    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
        resWeek,
        resYear;

    if (week < 1) {
      resYear = mom.year() - 1;
      resWeek = week + weeksInYear(resYear, dow, doy);
    } else if (week > weeksInYear(mom.year(), dow, doy)) {
      resWeek = week - weeksInYear(mom.year(), dow, doy);
      resYear = mom.year() + 1;
    } else {
      resYear = mom.year();
      resWeek = week;
    }

    return {
      week: resWeek,
      year: resYear
    };
  }

  function weeksInYear(year, dow, doy) {
    var weekOffset = firstWeekOffset(year, dow, doy),
        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
  } // FORMATTING


  addFormatToken('w', ['ww', 2], 'wo', 'week');
  addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek'); // ALIASES

  addUnitAlias('week', 'w');
  addUnitAlias('isoWeek', 'W'); // PRIORITIES

  addUnitPriority('week', 5);
  addUnitPriority('isoWeek', 5); // PARSING

  addRegexToken('w', match1to2);
  addRegexToken('ww', match1to2, match2);
  addRegexToken('W', match1to2);
  addRegexToken('WW', match1to2, match2);
  addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
    week[token.substr(0, 1)] = toInt(input);
  }); // HELPERS
  // LOCALES

  function localeWeek(mom) {
    return weekOfYear(mom, this._week.dow, this._week.doy).week;
  }

  var defaultLocaleWeek = {
    dow: 0,
    // Sunday is the first day of the week.
    doy: 6 // The week that contains Jan 6th is the first week of the year.

  };

  function localeFirstDayOfWeek() {
    return this._week.dow;
  }

  function localeFirstDayOfYear() {
    return this._week.doy;
  } // MOMENTS


  function getSetWeek(input) {
    var week = this.localeData().week(this);
    return input == null ? week : this.add((input - week) * 7, 'd');
  }

  function getSetISOWeek(input) {
    var week = weekOfYear(this, 1, 4).week;
    return input == null ? week : this.add((input - week) * 7, 'd');
  } // FORMATTING


  addFormatToken('d', 0, 'do', 'day');
  addFormatToken('dd', 0, 0, function (format) {
    return this.localeData().weekdaysMin(this, format);
  });
  addFormatToken('ddd', 0, 0, function (format) {
    return this.localeData().weekdaysShort(this, format);
  });
  addFormatToken('dddd', 0, 0, function (format) {
    return this.localeData().weekdays(this, format);
  });
  addFormatToken('e', 0, 0, 'weekday');
  addFormatToken('E', 0, 0, 'isoWeekday'); // ALIASES

  addUnitAlias('day', 'd');
  addUnitAlias('weekday', 'e');
  addUnitAlias('isoWeekday', 'E'); // PRIORITY

  addUnitPriority('day', 11);
  addUnitPriority('weekday', 11);
  addUnitPriority('isoWeekday', 11); // PARSING

  addRegexToken('d', match1to2);
  addRegexToken('e', match1to2);
  addRegexToken('E', match1to2);
  addRegexToken('dd', function (isStrict, locale) {
    return locale.weekdaysMinRegex(isStrict);
  });
  addRegexToken('ddd', function (isStrict, locale) {
    return locale.weekdaysShortRegex(isStrict);
  });
  addRegexToken('dddd', function (isStrict, locale) {
    return locale.weekdaysRegex(isStrict);
  });
  addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
    var weekday = config._locale.weekdaysParse(input, token, config._strict); // if we didn't get a weekday name, mark the date as invalid


    if (weekday != null) {
      week.d = weekday;
    } else {
      getParsingFlags(config).invalidWeekday = input;
    }
  });
  addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
    week[token] = toInt(input);
  }); // HELPERS

  function parseWeekday(input, locale) {
    if (typeof input !== 'string') {
      return input;
    }

    if (!isNaN(input)) {
      return parseInt(input, 10);
    }

    input = locale.weekdaysParse(input);

    if (typeof input === 'number') {
      return input;
    }

    return null;
  }

  function parseIsoWeekday(input, locale) {
    if (typeof input === 'string') {
      return locale.weekdaysParse(input) % 7 || 7;
    }

    return isNaN(input) ? null : input;
  } // LOCALES


  function shiftWeekdays(ws, n) {
    return ws.slice(n, 7).concat(ws.slice(0, n));
  }

  var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');

  function localeWeekdays(m, format) {
    var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? 'format' : 'standalone'];
    return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
  }

  var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');

  function localeWeekdaysShort(m) {
    return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
  }

  var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');

  function localeWeekdaysMin(m) {
    return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
  }

  function handleStrictParse$1(weekdayName, format, strict) {
    var i,
        ii,
        mom,
        llc = weekdayName.toLocaleLowerCase();

    if (!this._weekdaysParse) {
      this._weekdaysParse = [];
      this._shortWeekdaysParse = [];
      this._minWeekdaysParse = [];

      for (i = 0; i < 7; ++i) {
        mom = createUTC([2000, 1]).day(i);
        this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
        this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
        this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
      }
    }

    if (strict) {
      if (format === 'dddd') {
        ii = indexOf.call(this._weekdaysParse, llc);
        return ii !== -1 ? ii : null;
      } else if (format === 'ddd') {
        ii = indexOf.call(this._shortWeekdaysParse, llc);
        return ii !== -1 ? ii : null;
      } else {
        ii = indexOf.call(this._minWeekdaysParse, llc);
        return ii !== -1 ? ii : null;
      }
    } else {
      if (format === 'dddd') {
        ii = indexOf.call(this._weekdaysParse, llc);

        if (ii !== -1) {
          return ii;
        }

        ii = indexOf.call(this._shortWeekdaysParse, llc);

        if (ii !== -1) {
          return ii;
        }

        ii = indexOf.call(this._minWeekdaysParse, llc);
        return ii !== -1 ? ii : null;
      } else if (format === 'ddd') {
        ii = indexOf.call(this._shortWeekdaysParse, llc);

        if (ii !== -1) {
          return ii;
        }

        ii = indexOf.call(this._weekdaysParse, llc);

        if (ii !== -1) {
          return ii;
        }

        ii = indexOf.call(this._minWeekdaysParse, llc);
        return ii !== -1 ? ii : null;
      } else {
        ii = indexOf.call(this._minWeekdaysParse, llc);

        if (ii !== -1) {
          return ii;
        }

        ii = indexOf.call(this._weekdaysParse, llc);

        if (ii !== -1) {
          return ii;
        }

        ii = indexOf.call(this._shortWeekdaysParse, llc);
        return ii !== -1 ? ii : null;
      }
    }
  }

  function localeWeekdaysParse(weekdayName, format, strict) {
    var i, mom, regex;

    if (this._weekdaysParseExact) {
      return handleStrictParse$1.call(this, weekdayName, format, strict);
    }

    if (!this._weekdaysParse) {
      this._weekdaysParse = [];
      this._minWeekdaysParse = [];
      this._shortWeekdaysParse = [];
      this._fullWeekdaysParse = [];
    }

    for (i = 0; i < 7; i++) {
      // make the regex if we don't have it already
      mom = createUTC([2000, 1]).day(i);

      if (strict && !this._fullWeekdaysParse[i]) {
        this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
        this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
        this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
      }

      if (!this._weekdaysParse[i]) {
        regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
        this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
      } // test the regex


      if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
        return i;
      } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
        return i;
      } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
        return i;
      } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
        return i;
      }
    }
  } // MOMENTS


  function getSetDayOfWeek(input) {
    if (!this.isValid()) {
      return input != null ? this : NaN;
    }

    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();

    if (input != null) {
      input = parseWeekday(input, this.localeData());
      return this.add(input - day, 'd');
    } else {
      return day;
    }
  }

  function getSetLocaleDayOfWeek(input) {
    if (!this.isValid()) {
      return input != null ? this : NaN;
    }

    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
    return input == null ? weekday : this.add(input - weekday, 'd');
  }

  function getSetISODayOfWeek(input) {
    if (!this.isValid()) {
      return input != null ? this : NaN;
    } // behaves the same as moment#day except
    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
    // as a setter, sunday should belong to the previous week.


    if (input != null) {
      var weekday = parseIsoWeekday(input, this.localeData());
      return this.day(this.day() % 7 ? weekday : weekday - 7);
    } else {
      return this.day() || 7;
    }
  }

  var defaultWeekdaysRegex = matchWord;

  function weekdaysRegex(isStrict) {
    if (this._weekdaysParseExact) {
      if (!hasOwnProp(this, '_weekdaysRegex')) {
        computeWeekdaysParse.call(this);
      }

      if (isStrict) {
        return this._weekdaysStrictRegex;
      } else {
        return this._weekdaysRegex;
      }
    } else {
      if (!hasOwnProp(this, '_weekdaysRegex')) {
        this._weekdaysRegex = defaultWeekdaysRegex;
      }

      return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
    }
  }

  var defaultWeekdaysShortRegex = matchWord;

  function weekdaysShortRegex(isStrict) {
    if (this._weekdaysParseExact) {
      if (!hasOwnProp(this, '_weekdaysRegex')) {
        computeWeekdaysParse.call(this);
      }

      if (isStrict) {
        return this._weekdaysShortStrictRegex;
      } else {
        return this._weekdaysShortRegex;
      }
    } else {
      if (!hasOwnProp(this, '_weekdaysShortRegex')) {
        this._weekdaysShortRegex = defaultWeekdaysShortRegex;
      }

      return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
    }
  }

  var defaultWeekdaysMinRegex = matchWord;

  function weekdaysMinRegex(isStrict) {
    if (this._weekdaysParseExact) {
      if (!hasOwnProp(this, '_weekdaysRegex')) {
        computeWeekdaysParse.call(this);
      }

      if (isStrict) {
        return this._weekdaysMinStrictRegex;
      } else {
        return this._weekdaysMinRegex;
      }
    } else {
      if (!hasOwnProp(this, '_weekdaysMinRegex')) {
        this._weekdaysMinRegex = defaultWeekdaysMinRegex;
      }

      return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
    }
  }

  function computeWeekdaysParse() {
    function cmpLenRev(a, b) {
      return b.length - a.length;
    }

    var minPieces = [],
        shortPieces = [],
        longPieces = [],
        mixedPieces = [],
        i,
        mom,
        minp,
        shortp,
        longp;

    for (i = 0; i < 7; i++) {
      // make the regex if we don't have it already
      mom = createUTC([2000, 1]).day(i);
      minp = this.weekdaysMin(mom, '');
      shortp = this.weekdaysShort(mom, '');
      longp = this.weekdays(mom, '');
      minPieces.push(minp);
      shortPieces.push(shortp);
      longPieces.push(longp);
      mixedPieces.push(minp);
      mixedPieces.push(shortp);
      mixedPieces.push(longp);
    } // Sorting makes sure if one weekday (or abbr) is a prefix of another it
    // will match the longer piece.


    minPieces.sort(cmpLenRev);
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);

    for (i = 0; i < 7; i++) {
      shortPieces[i] = regexEscape(shortPieces[i]);
      longPieces[i] = regexEscape(longPieces[i]);
      mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._weekdaysShortRegex = this._weekdaysRegex;
    this._weekdaysMinRegex = this._weekdaysRegex;
    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
  } // FORMATTING


  function hFormat() {
    return this.hours() % 12 || 12;
  }

  function kFormat() {
    return this.hours() || 24;
  }

  addFormatToken('H', ['HH', 2], 0, 'hour');
  addFormatToken('h', ['hh', 2], 0, hFormat);
  addFormatToken('k', ['kk', 2], 0, kFormat);
  addFormatToken('hmm', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
  });
  addFormatToken('hmmss', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
  });
  addFormatToken('Hmm', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2);
  });
  addFormatToken('Hmmss', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
  });

  function meridiem(token, lowercase) {
    addFormatToken(token, 0, 0, function () {
      return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
    });
  }

  meridiem('a', true);
  meridiem('A', false); // ALIASES

  addUnitAlias('hour', 'h'); // PRIORITY

  addUnitPriority('hour', 13); // PARSING

  function matchMeridiem(isStrict, locale) {
    return locale._meridiemParse;
  }

  addRegexToken('a', matchMeridiem);
  addRegexToken('A', matchMeridiem);
  addRegexToken('H', match1to2);
  addRegexToken('h', match1to2);
  addRegexToken('k', match1to2);
  addRegexToken('HH', match1to2, match2);
  addRegexToken('hh', match1to2, match2);
  addRegexToken('kk', match1to2, match2);
  addRegexToken('hmm', match3to4);
  addRegexToken('hmmss', match5to6);
  addRegexToken('Hmm', match3to4);
  addRegexToken('Hmmss', match5to6);
  addParseToken(['H', 'HH'], HOUR);
  addParseToken(['k', 'kk'], function (input, array, config) {
    var kInput = toInt(input);
    array[HOUR] = kInput === 24 ? 0 : kInput;
  });
  addParseToken(['a', 'A'], function (input, array, config) {
    config._isPm = config._locale.isPM(input);
    config._meridiem = input;
  });
  addParseToken(['h', 'hh'], function (input, array, config) {
    array[HOUR] = toInt(input);
    getParsingFlags(config).bigHour = true;
  });
  addParseToken('hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
    getParsingFlags(config).bigHour = true;
  });
  addParseToken('hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
    getParsingFlags(config).bigHour = true;
  });
  addParseToken('Hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
  });
  addParseToken('Hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
  }); // LOCALES

  function localeIsPM(input) {
    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
    // Using charAt should be more compatible.
    return (input + '').toLowerCase().charAt(0) === 'p';
  }

  var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;

  function localeMeridiem(hours, minutes, isLower) {
    if (hours > 11) {
      return isLower ? 'pm' : 'PM';
    } else {
      return isLower ? 'am' : 'AM';
    }
  } // MOMENTS
  // Setting the hour should keep the time, because the user explicitly
  // specified which hour they want. So trying to maintain the same hour (in
  // a new timezone) makes sense. Adding/subtracting hours does not follow
  // this rule.


  var getSetHour = makeGetSet('Hours', true);
  var baseConfig = {
    calendar: defaultCalendar,
    longDateFormat: defaultLongDateFormat,
    invalidDate: defaultInvalidDate,
    ordinal: defaultOrdinal,
    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
    relativeTime: defaultRelativeTime,
    months: defaultLocaleMonths,
    monthsShort: defaultLocaleMonthsShort,
    week: defaultLocaleWeek,
    weekdays: defaultLocaleWeekdays,
    weekdaysMin: defaultLocaleWeekdaysMin,
    weekdaysShort: defaultLocaleWeekdaysShort,
    meridiemParse: defaultLocaleMeridiemParse
  }; // internal storage for locale config files

  var locales = {};
  var localeFamilies = {};
  var globalLocale;

  function normalizeLocale(key) {
    return key ? key.toLowerCase().replace('_', '-') : key;
  } // pick the locale from the array
  // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
  // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root


  function chooseLocale(names) {
    var i = 0,
        j,
        next,
        locale,
        split;

    while (i < names.length) {
      split = normalizeLocale(names[i]).split('-');
      j = split.length;
      next = normalizeLocale(names[i + 1]);
      next = next ? next.split('-') : null;

      while (j > 0) {
        locale = loadLocale(split.slice(0, j).join('-'));

        if (locale) {
          return locale;
        }

        if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
          //the next array item is better than a shallower substring of this one
          break;
        }

        j--;
      }

      i++;
    }

    return globalLocale;
  }

  function loadLocale(name) {
    var oldLocale = null; // TODO: Find a better way to register and load all the locales in Node

    if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
      try {
        oldLocale = globalLocale._abbr;
        var aliasedRequire = require;
        __webpack_require__("./node_modules/moment/locale sync recursive ko")("./" + name);
        getSetGlobalLocale(oldLocale);
      } catch (e) {}
    }

    return locales[name];
  } // This function will load locale and then set the global locale.  If
  // no arguments are passed in, it will simply return the current global
  // locale key.


  function getSetGlobalLocale(key, values) {
    var data;

    if (key) {
      if (isUndefined(values)) {
        data = getLocale(key);
      } else {
        data = defineLocale(key, values);
      }

      if (data) {
        // moment.duration._locale = moment._locale = data;
        globalLocale = data;
      } else {
        if (typeof console !== 'undefined' && console.warn) {
          //warn user if arguments are passed but the locale could not be set
          console.warn('Locale ' + key + ' not found. Did you forget to load it?');
        }
      }
    }

    return globalLocale._abbr;
  }

  function defineLocale(name, config) {
    if (config !== null) {
      var locale,
          parentConfig = baseConfig;
      config.abbr = name;

      if (locales[name] != null) {
        deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
        parentConfig = locales[name]._config;
      } else if (config.parentLocale != null) {
        if (locales[config.parentLocale] != null) {
          parentConfig = locales[config.parentLocale]._config;
        } else {
          locale = loadLocale(config.parentLocale);

          if (locale != null) {
            parentConfig = locale._config;
          } else {
            if (!localeFamilies[config.parentLocale]) {
              localeFamilies[config.parentLocale] = [];
            }

            localeFamilies[config.parentLocale].push({
              name: name,
              config: config
            });
            return null;
          }
        }
      }

      locales[name] = new Locale(mergeConfigs(parentConfig, config));

      if (localeFamilies[name]) {
        localeFamilies[name].forEach(function (x) {
          defineLocale(x.name, x.config);
        });
      } // backwards compat for now: also set the locale
      // make sure we set the locale AFTER all child locales have been
      // created, so we won't end up with the child locale set.


      getSetGlobalLocale(name);
      return locales[name];
    } else {
      // useful for testing
      delete locales[name];
      return null;
    }
  }

  function updateLocale(name, config) {
    if (config != null) {
      var locale,
          tmpLocale,
          parentConfig = baseConfig; // MERGE

      tmpLocale = loadLocale(name);

      if (tmpLocale != null) {
        parentConfig = tmpLocale._config;
      }

      config = mergeConfigs(parentConfig, config);
      locale = new Locale(config);
      locale.parentLocale = locales[name];
      locales[name] = locale; // backwards compat for now: also set the locale

      getSetGlobalLocale(name);
    } else {
      // pass null for config to unupdate, useful for tests
      if (locales[name] != null) {
        if (locales[name].parentLocale != null) {
          locales[name] = locales[name].parentLocale;
        } else if (locales[name] != null) {
          delete locales[name];
        }
      }
    }

    return locales[name];
  } // returns locale data


  function getLocale(key) {
    var locale;

    if (key && key._locale && key._locale._abbr) {
      key = key._locale._abbr;
    }

    if (!key) {
      return globalLocale;
    }

    if (!isArray(key)) {
      //short-circuit everything else
      locale = loadLocale(key);

      if (locale) {
        return locale;
      }

      key = [key];
    }

    return chooseLocale(key);
  }

  function listLocales() {
    return keys(locales);
  }

  function checkOverflow(m) {
    var overflow;
    var a = m._a;

    if (a && getParsingFlags(m).overflow === -2) {
      overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;

      if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
        overflow = DATE;
      }

      if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
        overflow = WEEK;
      }

      if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
        overflow = WEEKDAY;
      }

      getParsingFlags(m).overflow = overflow;
    }

    return m;
  } // Pick the first defined of two or three arguments.


  function defaults(a, b, c) {
    if (a != null) {
      return a;
    }

    if (b != null) {
      return b;
    }

    return c;
  }

  function currentDateArray(config) {
    // hooks is actually the exported moment object
    var nowValue = new Date(hooks.now());

    if (config._useUTC) {
      return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
    }

    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
  } // convert an array to a date.
  // the array should mirror the parameters below
  // note: all values past the year are optional and will default to the lowest possible value.
  // [year, month, day , hour, minute, second, millisecond]


  function configFromArray(config) {
    var i,
        date,
        input = [],
        currentDate,
        expectedWeekday,
        yearToUse;

    if (config._d) {
      return;
    }

    currentDate = currentDateArray(config); //compute day of the year from weeks and weekdays

    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
      dayOfYearFromWeekInfo(config);
    } //if the day of the year is set, figure out what it is


    if (config._dayOfYear != null) {
      yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

      if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
        getParsingFlags(config)._overflowDayOfYear = true;
      }

      date = createUTCDate(yearToUse, 0, config._dayOfYear);
      config._a[MONTH] = date.getUTCMonth();
      config._a[DATE] = date.getUTCDate();
    } // Default to current date.
    // * if no year, month, day of month are given, default to today
    // * if day of month is given, default month and year
    // * if month is given, default only year
    // * if year is given, don't default anything


    for (i = 0; i < 3 && config._a[i] == null; ++i) {
      config._a[i] = input[i] = currentDate[i];
    } // Zero out whatever was not defaulted, including time


    for (; i < 7; i++) {
      config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
    } // Check for 24:00:00.000


    if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
      config._nextDay = true;
      config._a[HOUR] = 0;
    }

    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
    expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay(); // Apply timezone offset from input. The actual utcOffset can be changed
    // with parseZone.

    if (config._tzm != null) {
      config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    }

    if (config._nextDay) {
      config._a[HOUR] = 24;
    } // check for mismatching day of week


    if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
      getParsingFlags(config).weekdayMismatch = true;
    }
  }

  function dayOfYearFromWeekInfo(config) {
    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
    w = config._w;

    if (w.GG != null || w.W != null || w.E != null) {
      dow = 1;
      doy = 4; // TODO: We need to take the current isoWeekYear, but that depends on
      // how we interpret now (local, utc, fixed offset). So create
      // a now version of current config (take local/utc/offset flags, and
      // create now).

      weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
      week = defaults(w.W, 1);
      weekday = defaults(w.E, 1);

      if (weekday < 1 || weekday > 7) {
        weekdayOverflow = true;
      }
    } else {
      dow = config._locale._week.dow;
      doy = config._locale._week.doy;
      var curWeek = weekOfYear(createLocal(), dow, doy);
      weekYear = defaults(w.gg, config._a[YEAR], curWeek.year); // Default to current week.

      week = defaults(w.w, curWeek.week);

      if (w.d != null) {
        // weekday -- low day numbers are considered next week
        weekday = w.d;

        if (weekday < 0 || weekday > 6) {
          weekdayOverflow = true;
        }
      } else if (w.e != null) {
        // local weekday -- counting starts from beginning of week
        weekday = w.e + dow;

        if (w.e < 0 || w.e > 6) {
          weekdayOverflow = true;
        }
      } else {
        // default to beginning of week
        weekday = dow;
      }
    }

    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
      getParsingFlags(config)._overflowWeeks = true;
    } else if (weekdayOverflow != null) {
      getParsingFlags(config)._overflowWeekday = true;
    } else {
      temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
      config._a[YEAR] = temp.year;
      config._dayOfYear = temp.dayOfYear;
    }
  } // iso 8601 regex
  // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)


  var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
  var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
  var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
  var isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/], // YYYYMM is NOT allowed by the standard
  ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/]]; // iso time formats and regexes

  var isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]];
  var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i; // date from iso format

  function configFromISO(config) {
    var i,
        l,
        string = config._i,
        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
        allowTime,
        dateFormat,
        timeFormat,
        tzFormat;

    if (match) {
      getParsingFlags(config).iso = true;

      for (i = 0, l = isoDates.length; i < l; i++) {
        if (isoDates[i][1].exec(match[1])) {
          dateFormat = isoDates[i][0];
          allowTime = isoDates[i][2] !== false;
          break;
        }
      }

      if (dateFormat == null) {
        config._isValid = false;
        return;
      }

      if (match[3]) {
        for (i = 0, l = isoTimes.length; i < l; i++) {
          if (isoTimes[i][1].exec(match[3])) {
            // match[2] should be 'T' or space
            timeFormat = (match[2] || ' ') + isoTimes[i][0];
            break;
          }
        }

        if (timeFormat == null) {
          config._isValid = false;
          return;
        }
      }

      if (!allowTime && timeFormat != null) {
        config._isValid = false;
        return;
      }

      if (match[4]) {
        if (tzRegex.exec(match[4])) {
          tzFormat = 'Z';
        } else {
          config._isValid = false;
          return;
        }
      }

      config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
      configFromStringAndFormat(config);
    } else {
      config._isValid = false;
    }
  } // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3


  var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

  function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
    var result = [untruncateYear(yearStr), defaultLocaleMonthsShort.indexOf(monthStr), parseInt(dayStr, 10), parseInt(hourStr, 10), parseInt(minuteStr, 10)];

    if (secondStr) {
      result.push(parseInt(secondStr, 10));
    }

    return result;
  }

  function untruncateYear(yearStr) {
    var year = parseInt(yearStr, 10);

    if (year <= 49) {
      return 2000 + year;
    } else if (year <= 999) {
      return 1900 + year;
    }

    return year;
  }

  function preprocessRFC2822(s) {
    // Remove comments and folding whitespace and replace multiple-spaces with a single space
    return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
  }

  function checkWeekday(weekdayStr, parsedInput, config) {
    if (weekdayStr) {
      // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
      var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
          weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();

      if (weekdayProvided !== weekdayActual) {
        getParsingFlags(config).weekdayMismatch = true;
        config._isValid = false;
        return false;
      }
    }

    return true;
  }

  var obsOffsets = {
    UT: 0,
    GMT: 0,
    EDT: -4 * 60,
    EST: -5 * 60,
    CDT: -5 * 60,
    CST: -6 * 60,
    MDT: -6 * 60,
    MST: -7 * 60,
    PDT: -7 * 60,
    PST: -8 * 60
  };

  function calculateOffset(obsOffset, militaryOffset, numOffset) {
    if (obsOffset) {
      return obsOffsets[obsOffset];
    } else if (militaryOffset) {
      // the only allowed military tz is Z
      return 0;
    } else {
      var hm = parseInt(numOffset, 10);
      var m = hm % 100,
          h = (hm - m) / 100;
      return h * 60 + m;
    }
  } // date and time from ref 2822 format


  function configFromRFC2822(config) {
    var match = rfc2822.exec(preprocessRFC2822(config._i));

    if (match) {
      var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);

      if (!checkWeekday(match[1], parsedArray, config)) {
        return;
      }

      config._a = parsedArray;
      config._tzm = calculateOffset(match[8], match[9], match[10]);
      config._d = createUTCDate.apply(null, config._a);

      config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

      getParsingFlags(config).rfc2822 = true;
    } else {
      config._isValid = false;
    }
  } // date from iso format or fallback


  function configFromString(config) {
    var matched = aspNetJsonRegex.exec(config._i);

    if (matched !== null) {
      config._d = new Date(+matched[1]);
      return;
    }

    configFromISO(config);

    if (config._isValid === false) {
      delete config._isValid;
    } else {
      return;
    }

    configFromRFC2822(config);

    if (config._isValid === false) {
      delete config._isValid;
    } else {
      return;
    } // Final attempt, use Input Fallback


    hooks.createFromInputFallback(config);
  }

  hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
    config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
  }); // constant that refers to the ISO standard

  hooks.ISO_8601 = function () {}; // constant that refers to the RFC 2822 form


  hooks.RFC_2822 = function () {}; // date from string and format string


  function configFromStringAndFormat(config) {
    // TODO: Move this to another part of the creation flow to prevent circular deps
    if (config._f === hooks.ISO_8601) {
      configFromISO(config);
      return;
    }

    if (config._f === hooks.RFC_2822) {
      configFromRFC2822(config);
      return;
    }

    config._a = [];
    getParsingFlags(config).empty = true; // This array is used to make a Date, either with `new Date` or `Date.UTC`

    var string = '' + config._i,
        i,
        parsedInput,
        tokens,
        token,
        skipped,
        stringLength = string.length,
        totalParsedInputLength = 0;
    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

    for (i = 0; i < tokens.length; i++) {
      token = tokens[i];
      parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0]; // console.log('token', token, 'parsedInput', parsedInput,
      //         'regex', getParseRegexForToken(token, config));

      if (parsedInput) {
        skipped = string.substr(0, string.indexOf(parsedInput));

        if (skipped.length > 0) {
          getParsingFlags(config).unusedInput.push(skipped);
        }

        string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
        totalParsedInputLength += parsedInput.length;
      } // don't parse if it's not a known token


      if (formatTokenFunctions[token]) {
        if (parsedInput) {
          getParsingFlags(config).empty = false;
        } else {
          getParsingFlags(config).unusedTokens.push(token);
        }

        addTimeToArrayFromToken(token, parsedInput, config);
      } else if (config._strict && !parsedInput) {
        getParsingFlags(config).unusedTokens.push(token);
      }
    } // add remaining unparsed input length to the string


    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;

    if (string.length > 0) {
      getParsingFlags(config).unusedInput.push(string);
    } // clear _12h flag if hour is <= 12


    if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
      getParsingFlags(config).bigHour = undefined;
    }

    getParsingFlags(config).parsedDateParts = config._a.slice(0);
    getParsingFlags(config).meridiem = config._meridiem; // handle meridiem

    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
    configFromArray(config);
    checkOverflow(config);
  }

  function meridiemFixWrap(locale, hour, meridiem) {
    var isPm;

    if (meridiem == null) {
      // nothing to do
      return hour;
    }

    if (locale.meridiemHour != null) {
      return locale.meridiemHour(hour, meridiem);
    } else if (locale.isPM != null) {
      // Fallback
      isPm = locale.isPM(meridiem);

      if (isPm && hour < 12) {
        hour += 12;
      }

      if (!isPm && hour === 12) {
        hour = 0;
      }

      return hour;
    } else {
      // this is not supposed to happen
      return hour;
    }
  } // date from string and array of format strings


  function configFromStringAndArray(config) {
    var tempConfig, bestMoment, scoreToBeat, i, currentScore;

    if (config._f.length === 0) {
      getParsingFlags(config).invalidFormat = true;
      config._d = new Date(NaN);
      return;
    }

    for (i = 0; i < config._f.length; i++) {
      currentScore = 0;
      tempConfig = copyConfig({}, config);

      if (config._useUTC != null) {
        tempConfig._useUTC = config._useUTC;
      }

      tempConfig._f = config._f[i];
      configFromStringAndFormat(tempConfig);

      if (!isValid(tempConfig)) {
        continue;
      } // if there is any input that was not parsed add a penalty for that format


      currentScore += getParsingFlags(tempConfig).charsLeftOver; //or tokens

      currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
      getParsingFlags(tempConfig).score = currentScore;

      if (scoreToBeat == null || currentScore < scoreToBeat) {
        scoreToBeat = currentScore;
        bestMoment = tempConfig;
      }
    }

    extend(config, bestMoment || tempConfig);
  }

  function configFromObject(config) {
    if (config._d) {
      return;
    }

    var i = normalizeObjectUnits(config._i);
    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
      return obj && parseInt(obj, 10);
    });
    configFromArray(config);
  }

  function createFromConfig(config) {
    var res = new Moment(checkOverflow(prepareConfig(config)));

    if (res._nextDay) {
      // Adding is smart enough around DST
      res.add(1, 'd');
      res._nextDay = undefined;
    }

    return res;
  }

  function prepareConfig(config) {
    var input = config._i,
        format = config._f;
    config._locale = config._locale || getLocale(config._l);

    if (input === null || format === undefined && input === '') {
      return createInvalid({
        nullInput: true
      });
    }

    if (typeof input === 'string') {
      config._i = input = config._locale.preparse(input);
    }

    if (isMoment(input)) {
      return new Moment(checkOverflow(input));
    } else if (isDate(input)) {
      config._d = input;
    } else if (isArray(format)) {
      configFromStringAndArray(config);
    } else if (format) {
      configFromStringAndFormat(config);
    } else {
      configFromInput(config);
    }

    if (!isValid(config)) {
      config._d = null;
    }

    return config;
  }

  function configFromInput(config) {
    var input = config._i;

    if (isUndefined(input)) {
      config._d = new Date(hooks.now());
    } else if (isDate(input)) {
      config._d = new Date(input.valueOf());
    } else if (typeof input === 'string') {
      configFromString(config);
    } else if (isArray(input)) {
      config._a = map(input.slice(0), function (obj) {
        return parseInt(obj, 10);
      });
      configFromArray(config);
    } else if (isObject(input)) {
      configFromObject(config);
    } else if (isNumber(input)) {
      // from milliseconds
      config._d = new Date(input);
    } else {
      hooks.createFromInputFallback(config);
    }
  }

  function createLocalOrUTC(input, format, locale, strict, isUTC) {
    var c = {};

    if (locale === true || locale === false) {
      strict = locale;
      locale = undefined;
    }

    if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
      input = undefined;
    } // object construction must be done this way.
    // https://github.com/moment/moment/issues/1423


    c._isAMomentObject = true;
    c._useUTC = c._isUTC = isUTC;
    c._l = locale;
    c._i = input;
    c._f = format;
    c._strict = strict;
    return createFromConfig(c);
  }

  function createLocal(input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, false);
  }

  var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
    var other = createLocal.apply(null, arguments);

    if (this.isValid() && other.isValid()) {
      return other < this ? this : other;
    } else {
      return createInvalid();
    }
  });
  var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
    var other = createLocal.apply(null, arguments);

    if (this.isValid() && other.isValid()) {
      return other > this ? this : other;
    } else {
      return createInvalid();
    }
  }); // Pick a moment m from moments so that m[fn](other) is true for all
  // other. This relies on the function fn to be transitive.
  //
  // moments should either be an array of moment objects or an array, whose
  // first element is an array of moment objects.

  function pickBy(fn, moments) {
    var res, i;

    if (moments.length === 1 && isArray(moments[0])) {
      moments = moments[0];
    }

    if (!moments.length) {
      return createLocal();
    }

    res = moments[0];

    for (i = 1; i < moments.length; ++i) {
      if (!moments[i].isValid() || moments[i][fn](res)) {
        res = moments[i];
      }
    }

    return res;
  } // TODO: Use [].sort instead?


  function min() {
    var args = [].slice.call(arguments, 0);
    return pickBy('isBefore', args);
  }

  function max() {
    var args = [].slice.call(arguments, 0);
    return pickBy('isAfter', args);
  }

  var now = function now() {
    return Date.now ? Date.now() : +new Date();
  };

  var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

  function isDurationValid(m) {
    for (var key in m) {
      if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
        return false;
      }
    }

    var unitHasDecimal = false;

    for (var i = 0; i < ordering.length; ++i) {
      if (m[ordering[i]]) {
        if (unitHasDecimal) {
          return false; // only allow non-integers for smallest unit
        }

        if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
          unitHasDecimal = true;
        }
      }
    }

    return true;
  }

  function isValid$1() {
    return this._isValid;
  }

  function createInvalid$1() {
    return createDuration(NaN);
  }

  function Duration(duration) {
    var normalizedInput = normalizeObjectUnits(duration),
        years = normalizedInput.year || 0,
        quarters = normalizedInput.quarter || 0,
        months = normalizedInput.month || 0,
        weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
        days = normalizedInput.day || 0,
        hours = normalizedInput.hour || 0,
        minutes = normalizedInput.minute || 0,
        seconds = normalizedInput.second || 0,
        milliseconds = normalizedInput.millisecond || 0;
    this._isValid = isDurationValid(normalizedInput); // representation for dateAddRemove

    this._milliseconds = +milliseconds + seconds * 1e3 + // 1000
    minutes * 6e4 + // 1000 * 60
    hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
    // Because of dateAddRemove treats 24 hours as different from a
    // day when working around DST, we need to store them separately

    this._days = +days + weeks * 7; // It is impossible to translate months into days without knowing
    // which months you are are talking about, so we have to store
    // it separately.

    this._months = +months + quarters * 3 + years * 12;
    this._data = {};
    this._locale = getLocale();

    this._bubble();
  }

  function isDuration(obj) {
    return obj instanceof Duration;
  }

  function absRound(number) {
    if (number < 0) {
      return Math.round(-1 * number) * -1;
    } else {
      return Math.round(number);
    }
  } // FORMATTING


  function offset(token, separator) {
    addFormatToken(token, 0, 0, function () {
      var offset = this.utcOffset();
      var sign = '+';

      if (offset < 0) {
        offset = -offset;
        sign = '-';
      }

      return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
    });
  }

  offset('Z', ':');
  offset('ZZ', ''); // PARSING

  addRegexToken('Z', matchShortOffset);
  addRegexToken('ZZ', matchShortOffset);
  addParseToken(['Z', 'ZZ'], function (input, array, config) {
    config._useUTC = true;
    config._tzm = offsetFromString(matchShortOffset, input);
  }); // HELPERS
  // timezone chunker
  // '+10:00' > ['10',  '00']
  // '-1530'  > ['-15', '30']

  var chunkOffset = /([\+\-]|\d\d)/gi;

  function offsetFromString(matcher, string) {
    var matches = (string || '').match(matcher);

    if (matches === null) {
      return null;
    }

    var chunk = matches[matches.length - 1] || [];
    var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
    var minutes = +(parts[1] * 60) + toInt(parts[2]);
    return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
  } // Return a moment from input, that is local/utc/zone equivalent to model.


  function cloneWithOffset(input, model) {
    var res, diff;

    if (model._isUTC) {
      res = model.clone();
      diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf(); // Use low-level api, because this fn is low-level api.

      res._d.setTime(res._d.valueOf() + diff);

      hooks.updateOffset(res, false);
      return res;
    } else {
      return createLocal(input).local();
    }
  }

  function getDateOffset(m) {
    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
    // https://github.com/moment/moment/pull/1871
    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
  } // HOOKS
  // This function will be called whenever a moment is mutated.
  // It is intended to keep the offset in sync with the timezone.


  hooks.updateOffset = function () {}; // MOMENTS
  // keepLocalTime = true means only change the timezone, without
  // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
  // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
  // +0200, so we adjust the time as needed, to be valid.
  //
  // Keeping the time actually adds/subtracts (one hour)
  // from the actual represented time. That is why we call updateOffset
  // a second time. In case it wants us to change the offset again
  // _changeInProgress == true case, then we have to adjust, because
  // there is no such time in the given timezone.


  function getSetOffset(input, keepLocalTime, keepMinutes) {
    var offset = this._offset || 0,
        localAdjust;

    if (!this.isValid()) {
      return input != null ? this : NaN;
    }

    if (input != null) {
      if (typeof input === 'string') {
        input = offsetFromString(matchShortOffset, input);

        if (input === null) {
          return this;
        }
      } else if (Math.abs(input) < 16 && !keepMinutes) {
        input = input * 60;
      }

      if (!this._isUTC && keepLocalTime) {
        localAdjust = getDateOffset(this);
      }

      this._offset = input;
      this._isUTC = true;

      if (localAdjust != null) {
        this.add(localAdjust, 'm');
      }

      if (offset !== input) {
        if (!keepLocalTime || this._changeInProgress) {
          addSubtract(this, createDuration(input - offset, 'm'), 1, false);
        } else if (!this._changeInProgress) {
          this._changeInProgress = true;
          hooks.updateOffset(this, true);
          this._changeInProgress = null;
        }
      }

      return this;
    } else {
      return this._isUTC ? offset : getDateOffset(this);
    }
  }

  function getSetZone(input, keepLocalTime) {
    if (input != null) {
      if (typeof input !== 'string') {
        input = -input;
      }

      this.utcOffset(input, keepLocalTime);
      return this;
    } else {
      return -this.utcOffset();
    }
  }

  function setOffsetToUTC(keepLocalTime) {
    return this.utcOffset(0, keepLocalTime);
  }

  function setOffsetToLocal(keepLocalTime) {
    if (this._isUTC) {
      this.utcOffset(0, keepLocalTime);
      this._isUTC = false;

      if (keepLocalTime) {
        this.subtract(getDateOffset(this), 'm');
      }
    }

    return this;
  }

  function setOffsetToParsedOffset() {
    if (this._tzm != null) {
      this.utcOffset(this._tzm, false, true);
    } else if (typeof this._i === 'string') {
      var tZone = offsetFromString(matchOffset, this._i);

      if (tZone != null) {
        this.utcOffset(tZone);
      } else {
        this.utcOffset(0, true);
      }
    }

    return this;
  }

  function hasAlignedHourOffset(input) {
    if (!this.isValid()) {
      return false;
    }

    input = input ? createLocal(input).utcOffset() : 0;
    return (this.utcOffset() - input) % 60 === 0;
  }

  function isDaylightSavingTime() {
    return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
  }

  function isDaylightSavingTimeShifted() {
    if (!isUndefined(this._isDSTShifted)) {
      return this._isDSTShifted;
    }

    var c = {};
    copyConfig(c, this);
    c = prepareConfig(c);

    if (c._a) {
      var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
      this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
    } else {
      this._isDSTShifted = false;
    }

    return this._isDSTShifted;
  }

  function isLocal() {
    return this.isValid() ? !this._isUTC : false;
  }

  function isUtcOffset() {
    return this.isValid() ? this._isUTC : false;
  }

  function isUtc() {
    return this.isValid() ? this._isUTC && this._offset === 0 : false;
  } // ASP.NET json date format regex


  var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/; // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
  // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
  // and further modified to allow for strings containing both week and day

  var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

  function createDuration(input, key) {
    var duration = input,
        // matching against regexp is expensive, do it on demand
    match = null,
        sign,
        ret,
        diffRes;

    if (isDuration(input)) {
      duration = {
        ms: input._milliseconds,
        d: input._days,
        M: input._months
      };
    } else if (isNumber(input)) {
      duration = {};

      if (key) {
        duration[key] = input;
      } else {
        duration.milliseconds = input;
      }
    } else if (!!(match = aspNetRegex.exec(input))) {
      sign = match[1] === '-' ? -1 : 1;
      duration = {
        y: 0,
        d: toInt(match[DATE]) * sign,
        h: toInt(match[HOUR]) * sign,
        m: toInt(match[MINUTE]) * sign,
        s: toInt(match[SECOND]) * sign,
        ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match

      };
    } else if (!!(match = isoRegex.exec(input))) {
      sign = match[1] === '-' ? -1 : 1;
      duration = {
        y: parseIso(match[2], sign),
        M: parseIso(match[3], sign),
        w: parseIso(match[4], sign),
        d: parseIso(match[5], sign),
        h: parseIso(match[6], sign),
        m: parseIso(match[7], sign),
        s: parseIso(match[8], sign)
      };
    } else if (duration == null) {
      // checks for null or undefined
      duration = {};
    } else if (_typeof(duration) === 'object' && ('from' in duration || 'to' in duration)) {
      diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
      duration = {};
      duration.ms = diffRes.milliseconds;
      duration.M = diffRes.months;
    }

    ret = new Duration(duration);

    if (isDuration(input) && hasOwnProp(input, '_locale')) {
      ret._locale = input._locale;
    }

    return ret;
  }

  createDuration.fn = Duration.prototype;
  createDuration.invalid = createInvalid$1;

  function parseIso(inp, sign) {
    // We'd normally use ~~inp for this, but unfortunately it also
    // converts floats to ints.
    // inp may be undefined, so careful calling replace on it.
    var res = inp && parseFloat(inp.replace(',', '.')); // apply sign while we're at it

    return (isNaN(res) ? 0 : res) * sign;
  }

  function positiveMomentsDifference(base, other) {
    var res = {};
    res.months = other.month() - base.month() + (other.year() - base.year()) * 12;

    if (base.clone().add(res.months, 'M').isAfter(other)) {
      --res.months;
    }

    res.milliseconds = +other - +base.clone().add(res.months, 'M');
    return res;
  }

  function momentsDifference(base, other) {
    var res;

    if (!(base.isValid() && other.isValid())) {
      return {
        milliseconds: 0,
        months: 0
      };
    }

    other = cloneWithOffset(other, base);

    if (base.isBefore(other)) {
      res = positiveMomentsDifference(base, other);
    } else {
      res = positiveMomentsDifference(other, base);
      res.milliseconds = -res.milliseconds;
      res.months = -res.months;
    }

    return res;
  } // TODO: remove 'name' arg after deprecation is removed


  function createAdder(direction, name) {
    return function (val, period) {
      var dur, tmp; //invert the arguments, but complain about it

      if (period !== null && !isNaN(+period)) {
        deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
        tmp = val;
        val = period;
        period = tmp;
      }

      val = typeof val === 'string' ? +val : val;
      dur = createDuration(val, period);
      addSubtract(this, dur, direction);
      return this;
    };
  }

  function addSubtract(mom, duration, isAdding, updateOffset) {
    var milliseconds = duration._milliseconds,
        days = absRound(duration._days),
        months = absRound(duration._months);

    if (!mom.isValid()) {
      // No op
      return;
    }

    updateOffset = updateOffset == null ? true : updateOffset;

    if (months) {
      setMonth(mom, get(mom, 'Month') + months * isAdding);
    }

    if (days) {
      set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
    }

    if (milliseconds) {
      mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
    }

    if (updateOffset) {
      hooks.updateOffset(mom, days || months);
    }
  }

  var add = createAdder(1, 'add');
  var subtract = createAdder(-1, 'subtract');

  function getCalendarFormat(myMoment, now) {
    var diff = myMoment.diff(now, 'days', true);
    return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
  }

  function calendar$1(time, formats) {
    // We want to compare the start of today, vs this.
    // Getting start-of-today depends on whether we're local/utc/offset or not.
    var now = time || createLocal(),
        sod = cloneWithOffset(now, this).startOf('day'),
        format = hooks.calendarFormat(this, sod) || 'sameElse';
    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
  }

  function clone() {
    return new Moment(this);
  }

  function isAfter(input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);

    if (!(this.isValid() && localInput.isValid())) {
      return false;
    }

    units = normalizeUnits(units) || 'millisecond';

    if (units === 'millisecond') {
      return this.valueOf() > localInput.valueOf();
    } else {
      return localInput.valueOf() < this.clone().startOf(units).valueOf();
    }
  }

  function isBefore(input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);

    if (!(this.isValid() && localInput.isValid())) {
      return false;
    }

    units = normalizeUnits(units) || 'millisecond';

    if (units === 'millisecond') {
      return this.valueOf() < localInput.valueOf();
    } else {
      return this.clone().endOf(units).valueOf() < localInput.valueOf();
    }
  }

  function isBetween(from, to, units, inclusivity) {
    var localFrom = isMoment(from) ? from : createLocal(from),
        localTo = isMoment(to) ? to : createLocal(to);

    if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
      return false;
    }

    inclusivity = inclusivity || '()';
    return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
  }

  function isSame(input, units) {
    var localInput = isMoment(input) ? input : createLocal(input),
        inputMs;

    if (!(this.isValid() && localInput.isValid())) {
      return false;
    }

    units = normalizeUnits(units) || 'millisecond';

    if (units === 'millisecond') {
      return this.valueOf() === localInput.valueOf();
    } else {
      inputMs = localInput.valueOf();
      return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
    }
  }

  function isSameOrAfter(input, units) {
    return this.isSame(input, units) || this.isAfter(input, units);
  }

  function isSameOrBefore(input, units) {
    return this.isSame(input, units) || this.isBefore(input, units);
  }

  function diff(input, units, asFloat) {
    var that, zoneDelta, output;

    if (!this.isValid()) {
      return NaN;
    }

    that = cloneWithOffset(input, this);

    if (!that.isValid()) {
      return NaN;
    }

    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
    units = normalizeUnits(units);

    switch (units) {
      case 'year':
        output = monthDiff(this, that) / 12;
        break;

      case 'month':
        output = monthDiff(this, that);
        break;

      case 'quarter':
        output = monthDiff(this, that) / 3;
        break;

      case 'second':
        output = (this - that) / 1e3;
        break;
      // 1000

      case 'minute':
        output = (this - that) / 6e4;
        break;
      // 1000 * 60

      case 'hour':
        output = (this - that) / 36e5;
        break;
      // 1000 * 60 * 60

      case 'day':
        output = (this - that - zoneDelta) / 864e5;
        break;
      // 1000 * 60 * 60 * 24, negate dst

      case 'week':
        output = (this - that - zoneDelta) / 6048e5;
        break;
      // 1000 * 60 * 60 * 24 * 7, negate dst

      default:
        output = this - that;
    }

    return asFloat ? output : absFloor(output);
  }

  function monthDiff(a, b) {
    // difference in months
    var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
        // b is in (anchor - 1 month, anchor + 1 month)
    anchor = a.clone().add(wholeMonthDiff, 'months'),
        anchor2,
        adjust;

    if (b - anchor < 0) {
      anchor2 = a.clone().add(wholeMonthDiff - 1, 'months'); // linear across the month

      adjust = (b - anchor) / (anchor - anchor2);
    } else {
      anchor2 = a.clone().add(wholeMonthDiff + 1, 'months'); // linear across the month

      adjust = (b - anchor) / (anchor2 - anchor);
    } //check for negative zero, return zero if negative zero


    return -(wholeMonthDiff + adjust) || 0;
  }

  hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
  hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

  function toString() {
    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
  }

  function toISOString(keepOffset) {
    if (!this.isValid()) {
      return null;
    }

    var utc = keepOffset !== true;
    var m = utc ? this.clone().utc() : this;

    if (m.year() < 0 || m.year() > 9999) {
      return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }

    if (isFunction(Date.prototype.toISOString)) {
      // native implementation is ~50x faster, use it when we can
      if (utc) {
        return this.toDate().toISOString();
      } else {
        return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
      }
    }

    return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
  }
  /**
   * Return a human readable representation of a moment that can
   * also be evaluated to get a new moment which is the same
   *
   * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
   */


  function inspect() {
    if (!this.isValid()) {
      return 'moment.invalid(/* ' + this._i + ' */)';
    }

    var func = 'moment';
    var zone = '';

    if (!this.isLocal()) {
      func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
      zone = 'Z';
    }

    var prefix = '[' + func + '("]';
    var year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
    var suffix = zone + '[")]';
    return this.format(prefix + year + datetime + suffix);
  }

  function format(inputString) {
    if (!inputString) {
      inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
    }

    var output = formatMoment(this, inputString);
    return this.localeData().postformat(output);
  }

  function from(time, withoutSuffix) {
    if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
      return createDuration({
        to: this,
        from: time
      }).locale(this.locale()).humanize(!withoutSuffix);
    } else {
      return this.localeData().invalidDate();
    }
  }

  function fromNow(withoutSuffix) {
    return this.from(createLocal(), withoutSuffix);
  }

  function to(time, withoutSuffix) {
    if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
      return createDuration({
        from: this,
        to: time
      }).locale(this.locale()).humanize(!withoutSuffix);
    } else {
      return this.localeData().invalidDate();
    }
  }

  function toNow(withoutSuffix) {
    return this.to(createLocal(), withoutSuffix);
  } // If passed a locale key, it will set the locale for this
  // instance.  Otherwise, it will return the locale configuration
  // variables for this instance.


  function locale(key) {
    var newLocaleData;

    if (key === undefined) {
      return this._locale._abbr;
    } else {
      newLocaleData = getLocale(key);

      if (newLocaleData != null) {
        this._locale = newLocaleData;
      }

      return this;
    }
  }

  var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
    if (key === undefined) {
      return this.localeData();
    } else {
      return this.locale(key);
    }
  });

  function localeData() {
    return this._locale;
  }

  var MS_PER_SECOND = 1000;
  var MS_PER_MINUTE = 60 * MS_PER_SECOND;
  var MS_PER_HOUR = 60 * MS_PER_MINUTE;
  var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR; // actual modulo - handles negative numbers (for dates before 1970):

  function mod$1(dividend, divisor) {
    return (dividend % divisor + divisor) % divisor;
  }

  function localStartOfDate(y, m, d) {
    // the date constructor remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0) {
      // preserve leap years using a full 400 year cycle, then reset
      return new Date(y + 400, m, d) - MS_PER_400_YEARS;
    } else {
      return new Date(y, m, d).valueOf();
    }
  }

  function utcStartOfDate(y, m, d) {
    // Date.UTC remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0) {
      // preserve leap years using a full 400 year cycle, then reset
      return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
    } else {
      return Date.UTC(y, m, d);
    }
  }

  function startOf(units) {
    var time;
    units = normalizeUnits(units);

    if (units === undefined || units === 'millisecond' || !this.isValid()) {
      return this;
    }

    var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

    switch (units) {
      case 'year':
        time = startOfDate(this.year(), 0, 1);
        break;

      case 'quarter':
        time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
        break;

      case 'month':
        time = startOfDate(this.year(), this.month(), 1);
        break;

      case 'week':
        time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
        break;

      case 'isoWeek':
        time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
        break;

      case 'day':
      case 'date':
        time = startOfDate(this.year(), this.month(), this.date());
        break;

      case 'hour':
        time = this._d.valueOf();
        time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
        break;

      case 'minute':
        time = this._d.valueOf();
        time -= mod$1(time, MS_PER_MINUTE);
        break;

      case 'second':
        time = this._d.valueOf();
        time -= mod$1(time, MS_PER_SECOND);
        break;
    }

    this._d.setTime(time);

    hooks.updateOffset(this, true);
    return this;
  }

  function endOf(units) {
    var time;
    units = normalizeUnits(units);

    if (units === undefined || units === 'millisecond' || !this.isValid()) {
      return this;
    }

    var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

    switch (units) {
      case 'year':
        time = startOfDate(this.year() + 1, 0, 1) - 1;
        break;

      case 'quarter':
        time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
        break;

      case 'month':
        time = startOfDate(this.year(), this.month() + 1, 1) - 1;
        break;

      case 'week':
        time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
        break;

      case 'isoWeek':
        time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
        break;

      case 'day':
      case 'date':
        time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
        break;

      case 'hour':
        time = this._d.valueOf();
        time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
        break;

      case 'minute':
        time = this._d.valueOf();
        time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
        break;

      case 'second':
        time = this._d.valueOf();
        time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
        break;
    }

    this._d.setTime(time);

    hooks.updateOffset(this, true);
    return this;
  }

  function valueOf() {
    return this._d.valueOf() - (this._offset || 0) * 60000;
  }

  function unix() {
    return Math.floor(this.valueOf() / 1000);
  }

  function toDate() {
    return new Date(this.valueOf());
  }

  function toArray() {
    var m = this;
    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
  }

  function toObject() {
    var m = this;
    return {
      years: m.year(),
      months: m.month(),
      date: m.date(),
      hours: m.hours(),
      minutes: m.minutes(),
      seconds: m.seconds(),
      milliseconds: m.milliseconds()
    };
  }

  function toJSON() {
    // new Date(NaN).toJSON() === null
    return this.isValid() ? this.toISOString() : null;
  }

  function isValid$2() {
    return isValid(this);
  }

  function parsingFlags() {
    return extend({}, getParsingFlags(this));
  }

  function invalidAt() {
    return getParsingFlags(this).overflow;
  }

  function creationData() {
    return {
      input: this._i,
      format: this._f,
      locale: this._locale,
      isUTC: this._isUTC,
      strict: this._strict
    };
  } // FORMATTING


  addFormatToken(0, ['gg', 2], 0, function () {
    return this.weekYear() % 100;
  });
  addFormatToken(0, ['GG', 2], 0, function () {
    return this.isoWeekYear() % 100;
  });

  function addWeekYearFormatToken(token, getter) {
    addFormatToken(0, [token, token.length], 0, getter);
  }

  addWeekYearFormatToken('gggg', 'weekYear');
  addWeekYearFormatToken('ggggg', 'weekYear');
  addWeekYearFormatToken('GGGG', 'isoWeekYear');
  addWeekYearFormatToken('GGGGG', 'isoWeekYear'); // ALIASES

  addUnitAlias('weekYear', 'gg');
  addUnitAlias('isoWeekYear', 'GG'); // PRIORITY

  addUnitPriority('weekYear', 1);
  addUnitPriority('isoWeekYear', 1); // PARSING

  addRegexToken('G', matchSigned);
  addRegexToken('g', matchSigned);
  addRegexToken('GG', match1to2, match2);
  addRegexToken('gg', match1to2, match2);
  addRegexToken('GGGG', match1to4, match4);
  addRegexToken('gggg', match1to4, match4);
  addRegexToken('GGGGG', match1to6, match6);
  addRegexToken('ggggg', match1to6, match6);
  addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
    week[token.substr(0, 2)] = toInt(input);
  });
  addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
    week[token] = hooks.parseTwoDigitYear(input);
  }); // MOMENTS

  function getSetWeekYear(input) {
    return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
  }

  function getSetISOWeekYear(input) {
    return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
  }

  function getISOWeeksInYear() {
    return weeksInYear(this.year(), 1, 4);
  }

  function getWeeksInYear() {
    var weekInfo = this.localeData()._week;

    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
  }

  function getSetWeekYearHelper(input, week, weekday, dow, doy) {
    var weeksTarget;

    if (input == null) {
      return weekOfYear(this, dow, doy).year;
    } else {
      weeksTarget = weeksInYear(input, dow, doy);

      if (week > weeksTarget) {
        week = weeksTarget;
      }

      return setWeekAll.call(this, input, week, weekday, dow, doy);
    }
  }

  function setWeekAll(weekYear, week, weekday, dow, doy) {
    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
    this.year(date.getUTCFullYear());
    this.month(date.getUTCMonth());
    this.date(date.getUTCDate());
    return this;
  } // FORMATTING


  addFormatToken('Q', 0, 'Qo', 'quarter'); // ALIASES

  addUnitAlias('quarter', 'Q'); // PRIORITY

  addUnitPriority('quarter', 7); // PARSING

  addRegexToken('Q', match1);
  addParseToken('Q', function (input, array) {
    array[MONTH] = (toInt(input) - 1) * 3;
  }); // MOMENTS

  function getSetQuarter(input) {
    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
  } // FORMATTING


  addFormatToken('D', ['DD', 2], 'Do', 'date'); // ALIASES

  addUnitAlias('date', 'D'); // PRIORITY

  addUnitPriority('date', 9); // PARSING

  addRegexToken('D', match1to2);
  addRegexToken('DD', match1to2, match2);
  addRegexToken('Do', function (isStrict, locale) {
    // TODO: Remove "ordinalParse" fallback in next major release.
    return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;
  });
  addParseToken(['D', 'DD'], DATE);
  addParseToken('Do', function (input, array) {
    array[DATE] = toInt(input.match(match1to2)[0]);
  }); // MOMENTS

  var getSetDayOfMonth = makeGetSet('Date', true); // FORMATTING

  addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear'); // ALIASES

  addUnitAlias('dayOfYear', 'DDD'); // PRIORITY

  addUnitPriority('dayOfYear', 4); // PARSING

  addRegexToken('DDD', match1to3);
  addRegexToken('DDDD', match3);
  addParseToken(['DDD', 'DDDD'], function (input, array, config) {
    config._dayOfYear = toInt(input);
  }); // HELPERS
  // MOMENTS

  function getSetDayOfYear(input) {
    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
    return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
  } // FORMATTING


  addFormatToken('m', ['mm', 2], 0, 'minute'); // ALIASES

  addUnitAlias('minute', 'm'); // PRIORITY

  addUnitPriority('minute', 14); // PARSING

  addRegexToken('m', match1to2);
  addRegexToken('mm', match1to2, match2);
  addParseToken(['m', 'mm'], MINUTE); // MOMENTS

  var getSetMinute = makeGetSet('Minutes', false); // FORMATTING

  addFormatToken('s', ['ss', 2], 0, 'second'); // ALIASES

  addUnitAlias('second', 's'); // PRIORITY

  addUnitPriority('second', 15); // PARSING

  addRegexToken('s', match1to2);
  addRegexToken('ss', match1to2, match2);
  addParseToken(['s', 'ss'], SECOND); // MOMENTS

  var getSetSecond = makeGetSet('Seconds', false); // FORMATTING

  addFormatToken('S', 0, 0, function () {
    return ~~(this.millisecond() / 100);
  });
  addFormatToken(0, ['SS', 2], 0, function () {
    return ~~(this.millisecond() / 10);
  });
  addFormatToken(0, ['SSS', 3], 0, 'millisecond');
  addFormatToken(0, ['SSSS', 4], 0, function () {
    return this.millisecond() * 10;
  });
  addFormatToken(0, ['SSSSS', 5], 0, function () {
    return this.millisecond() * 100;
  });
  addFormatToken(0, ['SSSSSS', 6], 0, function () {
    return this.millisecond() * 1000;
  });
  addFormatToken(0, ['SSSSSSS', 7], 0, function () {
    return this.millisecond() * 10000;
  });
  addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
    return this.millisecond() * 100000;
  });
  addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
    return this.millisecond() * 1000000;
  }); // ALIASES

  addUnitAlias('millisecond', 'ms'); // PRIORITY

  addUnitPriority('millisecond', 16); // PARSING

  addRegexToken('S', match1to3, match1);
  addRegexToken('SS', match1to3, match2);
  addRegexToken('SSS', match1to3, match3);
  var token;

  for (token = 'SSSS'; token.length <= 9; token += 'S') {
    addRegexToken(token, matchUnsigned);
  }

  function parseMs(input, array) {
    array[MILLISECOND] = toInt(('0.' + input) * 1000);
  }

  for (token = 'S'; token.length <= 9; token += 'S') {
    addParseToken(token, parseMs);
  } // MOMENTS


  var getSetMillisecond = makeGetSet('Milliseconds', false); // FORMATTING

  addFormatToken('z', 0, 0, 'zoneAbbr');
  addFormatToken('zz', 0, 0, 'zoneName'); // MOMENTS

  function getZoneAbbr() {
    return this._isUTC ? 'UTC' : '';
  }

  function getZoneName() {
    return this._isUTC ? 'Coordinated Universal Time' : '';
  }

  var proto = Moment.prototype;
  proto.add = add;
  proto.calendar = calendar$1;
  proto.clone = clone;
  proto.diff = diff;
  proto.endOf = endOf;
  proto.format = format;
  proto.from = from;
  proto.fromNow = fromNow;
  proto.to = to;
  proto.toNow = toNow;
  proto.get = stringGet;
  proto.invalidAt = invalidAt;
  proto.isAfter = isAfter;
  proto.isBefore = isBefore;
  proto.isBetween = isBetween;
  proto.isSame = isSame;
  proto.isSameOrAfter = isSameOrAfter;
  proto.isSameOrBefore = isSameOrBefore;
  proto.isValid = isValid$2;
  proto.lang = lang;
  proto.locale = locale;
  proto.localeData = localeData;
  proto.max = prototypeMax;
  proto.min = prototypeMin;
  proto.parsingFlags = parsingFlags;
  proto.set = stringSet;
  proto.startOf = startOf;
  proto.subtract = subtract;
  proto.toArray = toArray;
  proto.toObject = toObject;
  proto.toDate = toDate;
  proto.toISOString = toISOString;
  proto.inspect = inspect;
  proto.toJSON = toJSON;
  proto.toString = toString;
  proto.unix = unix;
  proto.valueOf = valueOf;
  proto.creationData = creationData;
  proto.year = getSetYear;
  proto.isLeapYear = getIsLeapYear;
  proto.weekYear = getSetWeekYear;
  proto.isoWeekYear = getSetISOWeekYear;
  proto.quarter = proto.quarters = getSetQuarter;
  proto.month = getSetMonth;
  proto.daysInMonth = getDaysInMonth;
  proto.week = proto.weeks = getSetWeek;
  proto.isoWeek = proto.isoWeeks = getSetISOWeek;
  proto.weeksInYear = getWeeksInYear;
  proto.isoWeeksInYear = getISOWeeksInYear;
  proto.date = getSetDayOfMonth;
  proto.day = proto.days = getSetDayOfWeek;
  proto.weekday = getSetLocaleDayOfWeek;
  proto.isoWeekday = getSetISODayOfWeek;
  proto.dayOfYear = getSetDayOfYear;
  proto.hour = proto.hours = getSetHour;
  proto.minute = proto.minutes = getSetMinute;
  proto.second = proto.seconds = getSetSecond;
  proto.millisecond = proto.milliseconds = getSetMillisecond;
  proto.utcOffset = getSetOffset;
  proto.utc = setOffsetToUTC;
  proto.local = setOffsetToLocal;
  proto.parseZone = setOffsetToParsedOffset;
  proto.hasAlignedHourOffset = hasAlignedHourOffset;
  proto.isDST = isDaylightSavingTime;
  proto.isLocal = isLocal;
  proto.isUtcOffset = isUtcOffset;
  proto.isUtc = isUtc;
  proto.isUTC = isUtc;
  proto.zoneAbbr = getZoneAbbr;
  proto.zoneName = getZoneName;
  proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
  proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
  proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
  proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
  proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

  function createUnix(input) {
    return createLocal(input * 1000);
  }

  function createInZone() {
    return createLocal.apply(null, arguments).parseZone();
  }

  function preParsePostFormat(string) {
    return string;
  }

  var proto$1 = Locale.prototype;
  proto$1.calendar = calendar;
  proto$1.longDateFormat = longDateFormat;
  proto$1.invalidDate = invalidDate;
  proto$1.ordinal = ordinal;
  proto$1.preparse = preParsePostFormat;
  proto$1.postformat = preParsePostFormat;
  proto$1.relativeTime = relativeTime;
  proto$1.pastFuture = pastFuture;
  proto$1.set = set;
  proto$1.months = localeMonths;
  proto$1.monthsShort = localeMonthsShort;
  proto$1.monthsParse = localeMonthsParse;
  proto$1.monthsRegex = monthsRegex;
  proto$1.monthsShortRegex = monthsShortRegex;
  proto$1.week = localeWeek;
  proto$1.firstDayOfYear = localeFirstDayOfYear;
  proto$1.firstDayOfWeek = localeFirstDayOfWeek;
  proto$1.weekdays = localeWeekdays;
  proto$1.weekdaysMin = localeWeekdaysMin;
  proto$1.weekdaysShort = localeWeekdaysShort;
  proto$1.weekdaysParse = localeWeekdaysParse;
  proto$1.weekdaysRegex = weekdaysRegex;
  proto$1.weekdaysShortRegex = weekdaysShortRegex;
  proto$1.weekdaysMinRegex = weekdaysMinRegex;
  proto$1.isPM = localeIsPM;
  proto$1.meridiem = localeMeridiem;

  function get$1(format, index, field, setter) {
    var locale = getLocale();
    var utc = createUTC().set(setter, index);
    return locale[field](utc, format);
  }

  function listMonthsImpl(format, index, field) {
    if (isNumber(format)) {
      index = format;
      format = undefined;
    }

    format = format || '';

    if (index != null) {
      return get$1(format, index, field, 'month');
    }

    var i;
    var out = [];

    for (i = 0; i < 12; i++) {
      out[i] = get$1(format, i, field, 'month');
    }

    return out;
  } // ()
  // (5)
  // (fmt, 5)
  // (fmt)
  // (true)
  // (true, 5)
  // (true, fmt, 5)
  // (true, fmt)


  function listWeekdaysImpl(localeSorted, format, index, field) {
    if (typeof localeSorted === 'boolean') {
      if (isNumber(format)) {
        index = format;
        format = undefined;
      }

      format = format || '';
    } else {
      format = localeSorted;
      index = format;
      localeSorted = false;

      if (isNumber(format)) {
        index = format;
        format = undefined;
      }

      format = format || '';
    }

    var locale = getLocale(),
        shift = localeSorted ? locale._week.dow : 0;

    if (index != null) {
      return get$1(format, (index + shift) % 7, field, 'day');
    }

    var i;
    var out = [];

    for (i = 0; i < 7; i++) {
      out[i] = get$1(format, (i + shift) % 7, field, 'day');
    }

    return out;
  }

  function listMonths(format, index) {
    return listMonthsImpl(format, index, 'months');
  }

  function listMonthsShort(format, index) {
    return listMonthsImpl(format, index, 'monthsShort');
  }

  function listWeekdays(localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
  }

  function listWeekdaysShort(localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
  }

  function listWeekdaysMin(localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
  }

  getSetGlobalLocale('en', {
    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal: function ordinal(number) {
      var b = number % 10,
          output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
      return number + output;
    }
  }); // Side effect imports

  hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
  hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
  var mathAbs = Math.abs;

  function abs() {
    var data = this._data;
    this._milliseconds = mathAbs(this._milliseconds);
    this._days = mathAbs(this._days);
    this._months = mathAbs(this._months);
    data.milliseconds = mathAbs(data.milliseconds);
    data.seconds = mathAbs(data.seconds);
    data.minutes = mathAbs(data.minutes);
    data.hours = mathAbs(data.hours);
    data.months = mathAbs(data.months);
    data.years = mathAbs(data.years);
    return this;
  }

  function addSubtract$1(duration, input, value, direction) {
    var other = createDuration(input, value);
    duration._milliseconds += direction * other._milliseconds;
    duration._days += direction * other._days;
    duration._months += direction * other._months;
    return duration._bubble();
  } // supports only 2.0-style add(1, 's') or add(duration)


  function add$1(input, value) {
    return addSubtract$1(this, input, value, 1);
  } // supports only 2.0-style subtract(1, 's') or subtract(duration)


  function subtract$1(input, value) {
    return addSubtract$1(this, input, value, -1);
  }

  function absCeil(number) {
    if (number < 0) {
      return Math.floor(number);
    } else {
      return Math.ceil(number);
    }
  }

  function bubble() {
    var milliseconds = this._milliseconds;
    var days = this._days;
    var months = this._months;
    var data = this._data;
    var seconds, minutes, hours, years, monthsFromDays; // if we have a mix of positive and negative values, bubble down first
    // check: https://github.com/moment/moment/issues/2166

    if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
      milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
      days = 0;
      months = 0;
    } // The following code bubbles up values, see the tests for
    // examples of what that means.


    data.milliseconds = milliseconds % 1000;
    seconds = absFloor(milliseconds / 1000);
    data.seconds = seconds % 60;
    minutes = absFloor(seconds / 60);
    data.minutes = minutes % 60;
    hours = absFloor(minutes / 60);
    data.hours = hours % 24;
    days += absFloor(hours / 24); // convert days to months

    monthsFromDays = absFloor(daysToMonths(days));
    months += monthsFromDays;
    days -= absCeil(monthsToDays(monthsFromDays)); // 12 months -> 1 year

    years = absFloor(months / 12);
    months %= 12;
    data.days = days;
    data.months = months;
    data.years = years;
    return this;
  }

  function daysToMonths(days) {
    // 400 years have 146097 days (taking into account leap year rules)
    // 400 years have 12 months === 4800
    return days * 4800 / 146097;
  }

  function monthsToDays(months) {
    // the reverse of daysToMonths
    return months * 146097 / 4800;
  }

  function as(units) {
    if (!this.isValid()) {
      return NaN;
    }

    var days;
    var months;
    var milliseconds = this._milliseconds;
    units = normalizeUnits(units);

    if (units === 'month' || units === 'quarter' || units === 'year') {
      days = this._days + milliseconds / 864e5;
      months = this._months + daysToMonths(days);

      switch (units) {
        case 'month':
          return months;

        case 'quarter':
          return months / 3;

        case 'year':
          return months / 12;
      }
    } else {
      // handle milliseconds separately because of floating point math errors (issue #1867)
      days = this._days + Math.round(monthsToDays(this._months));

      switch (units) {
        case 'week':
          return days / 7 + milliseconds / 6048e5;

        case 'day':
          return days + milliseconds / 864e5;

        case 'hour':
          return days * 24 + milliseconds / 36e5;

        case 'minute':
          return days * 1440 + milliseconds / 6e4;

        case 'second':
          return days * 86400 + milliseconds / 1000;
        // Math.floor prevents floating point math errors here

        case 'millisecond':
          return Math.floor(days * 864e5) + milliseconds;

        default:
          throw new Error('Unknown unit ' + units);
      }
    }
  } // TODO: Use this.as('ms')?


  function valueOf$1() {
    if (!this.isValid()) {
      return NaN;
    }

    return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
  }

  function makeAs(alias) {
    return function () {
      return this.as(alias);
    };
  }

  var asMilliseconds = makeAs('ms');
  var asSeconds = makeAs('s');
  var asMinutes = makeAs('m');
  var asHours = makeAs('h');
  var asDays = makeAs('d');
  var asWeeks = makeAs('w');
  var asMonths = makeAs('M');
  var asQuarters = makeAs('Q');
  var asYears = makeAs('y');

  function clone$1() {
    return createDuration(this);
  }

  function get$2(units) {
    units = normalizeUnits(units);
    return this.isValid() ? this[units + 's']() : NaN;
  }

  function makeGetter(name) {
    return function () {
      return this.isValid() ? this._data[name] : NaN;
    };
  }

  var milliseconds = makeGetter('milliseconds');
  var seconds = makeGetter('seconds');
  var minutes = makeGetter('minutes');
  var hours = makeGetter('hours');
  var days = makeGetter('days');
  var months = makeGetter('months');
  var years = makeGetter('years');

  function weeks() {
    return absFloor(this.days() / 7);
  }

  var round = Math.round;
  var thresholds = {
    ss: 44,
    // a few seconds to seconds
    s: 45,
    // seconds to minute
    m: 45,
    // minutes to hour
    h: 22,
    // hours to day
    d: 26,
    // days to month
    M: 11 // months to year

  }; // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize

  function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
  }

  function relativeTime$1(posNegDuration, withoutSuffix, locale) {
    var duration = createDuration(posNegDuration).abs();
    var seconds = round(duration.as('s'));
    var minutes = round(duration.as('m'));
    var hours = round(duration.as('h'));
    var days = round(duration.as('d'));
    var months = round(duration.as('M'));
    var years = round(duration.as('y'));
    var a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days] || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];
    a[2] = withoutSuffix;
    a[3] = +posNegDuration > 0;
    a[4] = locale;
    return substituteTimeAgo.apply(null, a);
  } // This function allows you to set the rounding function for relative time strings


  function getSetRelativeTimeRounding(roundingFunction) {
    if (roundingFunction === undefined) {
      return round;
    }

    if (typeof roundingFunction === 'function') {
      round = roundingFunction;
      return true;
    }

    return false;
  } // This function allows you to set a threshold for relative time strings


  function getSetRelativeTimeThreshold(threshold, limit) {
    if (thresholds[threshold] === undefined) {
      return false;
    }

    if (limit === undefined) {
      return thresholds[threshold];
    }

    thresholds[threshold] = limit;

    if (threshold === 's') {
      thresholds.ss = limit - 1;
    }

    return true;
  }

  function humanize(withSuffix) {
    if (!this.isValid()) {
      return this.localeData().invalidDate();
    }

    var locale = this.localeData();
    var output = relativeTime$1(this, !withSuffix, locale);

    if (withSuffix) {
      output = locale.pastFuture(+this, output);
    }

    return locale.postformat(output);
  }

  var abs$1 = Math.abs;

  function sign(x) {
    return (x > 0) - (x < 0) || +x;
  }

  function toISOString$1() {
    // for ISO strings we do not use the normal bubbling rules:
    //  * milliseconds bubble up until they become hours
    //  * days do not bubble at all
    //  * months bubble up until they become years
    // This is because there is no context-free conversion between hours and days
    // (think of clock changes)
    // and also not between days and months (28-31 days per month)
    if (!this.isValid()) {
      return this.localeData().invalidDate();
    }

    var seconds = abs$1(this._milliseconds) / 1000;
    var days = abs$1(this._days);
    var months = abs$1(this._months);
    var minutes, hours, years; // 3600 seconds -> 60 minutes -> 1 hour

    minutes = absFloor(seconds / 60);
    hours = absFloor(minutes / 60);
    seconds %= 60;
    minutes %= 60; // 12 months -> 1 year

    years = absFloor(months / 12);
    months %= 12; // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js

    var Y = years;
    var M = months;
    var D = days;
    var h = hours;
    var m = minutes;
    var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
    var total = this.asSeconds();

    if (!total) {
      // this is the same as C#'s (Noda) and python (isodate)...
      // but not other JS (goog.date)
      return 'P0D';
    }

    var totalSign = total < 0 ? '-' : '';
    var ymSign = sign(this._months) !== sign(total) ? '-' : '';
    var daysSign = sign(this._days) !== sign(total) ? '-' : '';
    var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';
    return totalSign + 'P' + (Y ? ymSign + Y + 'Y' : '') + (M ? ymSign + M + 'M' : '') + (D ? daysSign + D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? hmsSign + h + 'H' : '') + (m ? hmsSign + m + 'M' : '') + (s ? hmsSign + s + 'S' : '');
  }

  var proto$2 = Duration.prototype;
  proto$2.isValid = isValid$1;
  proto$2.abs = abs;
  proto$2.add = add$1;
  proto$2.subtract = subtract$1;
  proto$2.as = as;
  proto$2.asMilliseconds = asMilliseconds;
  proto$2.asSeconds = asSeconds;
  proto$2.asMinutes = asMinutes;
  proto$2.asHours = asHours;
  proto$2.asDays = asDays;
  proto$2.asWeeks = asWeeks;
  proto$2.asMonths = asMonths;
  proto$2.asQuarters = asQuarters;
  proto$2.asYears = asYears;
  proto$2.valueOf = valueOf$1;
  proto$2._bubble = bubble;
  proto$2.clone = clone$1;
  proto$2.get = get$2;
  proto$2.milliseconds = milliseconds;
  proto$2.seconds = seconds;
  proto$2.minutes = minutes;
  proto$2.hours = hours;
  proto$2.days = days;
  proto$2.weeks = weeks;
  proto$2.months = months;
  proto$2.years = years;
  proto$2.humanize = humanize;
  proto$2.toISOString = toISOString$1;
  proto$2.toString = toISOString$1;
  proto$2.toJSON = toISOString$1;
  proto$2.locale = locale;
  proto$2.localeData = localeData;
  proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
  proto$2.lang = lang; // Side effect imports
  // FORMATTING

  addFormatToken('X', 0, 0, 'unix');
  addFormatToken('x', 0, 0, 'valueOf'); // PARSING

  addRegexToken('x', matchSigned);
  addRegexToken('X', matchTimestamp);
  addParseToken('X', function (input, array, config) {
    config._d = new Date(parseFloat(input, 10) * 1000);
  });
  addParseToken('x', function (input, array, config) {
    config._d = new Date(toInt(input));
  }); // Side effect imports

  hooks.version = '2.24.0';
  setHookCallback(createLocal);
  hooks.fn = proto;
  hooks.min = min;
  hooks.max = max;
  hooks.now = now;
  hooks.utc = createUTC;
  hooks.unix = createUnix;
  hooks.months = listMonths;
  hooks.isDate = isDate;
  hooks.locale = getSetGlobalLocale;
  hooks.invalid = createInvalid;
  hooks.duration = createDuration;
  hooks.isMoment = isMoment;
  hooks.weekdays = listWeekdays;
  hooks.parseZone = createInZone;
  hooks.localeData = getLocale;
  hooks.isDuration = isDuration;
  hooks.monthsShort = listMonthsShort;
  hooks.weekdaysMin = listWeekdaysMin;
  hooks.defineLocale = defineLocale;
  hooks.updateLocale = updateLocale;
  hooks.locales = listLocales;
  hooks.weekdaysShort = listWeekdaysShort;
  hooks.normalizeUnits = normalizeUnits;
  hooks.relativeTimeRounding = getSetRelativeTimeRounding;
  hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
  hooks.calendarFormat = getCalendarFormat;
  hooks.prototype = proto; // currently HTML5 input type only supports 24-hour formats

  hooks.HTML5_FMT = {
    DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',
    // <input type="datetime-local" />
    DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',
    // <input type="datetime-local" step="1" />
    DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',
    // <input type="datetime-local" step="0.001" />
    DATE: 'YYYY-MM-DD',
    // <input type="date" />
    TIME: 'HH:mm',
    // <input type="time" />
    TIME_SECONDS: 'HH:mm:ss',
    // <input type="time" step="1" />
    TIME_MS: 'HH:mm:ss.SSS',
    // <input type="time" step="0.001" />
    WEEK: 'GGGG-[W]WW',
    // <input type="week" />
    MONTH: 'YYYY-MM' // <input type="month" />

  };
  return hooks;
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/once/once.js":
/*!***********************************!*\
  !*** ./node_modules/once/once.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var wrappy = __webpack_require__(/*! wrappy */ "./node_modules/wrappy/wrappy.js");

module.exports = wrappy(once);
module.exports.strict = wrappy(onceStrict);
once.proto = once(function () {
  Object.defineProperty(Function.prototype, 'once', {
    value: function value() {
      return once(this);
    },
    configurable: true
  });
  Object.defineProperty(Function.prototype, 'onceStrict', {
    value: function value() {
      return onceStrict(this);
    },
    configurable: true
  });
});

function once(fn) {
  var f = function f() {
    if (f.called) return f.value;
    f.called = true;
    return f.value = fn.apply(this, arguments);
  };

  f.called = false;
  return f;
}

function onceStrict(fn) {
  var f = function f() {
    if (f.called) throw new Error(f.onceError);
    f.called = true;
    return f.value = fn.apply(this, arguments);
  };

  var name = fn.name || 'Function wrapped with `once`';
  f.onceError = name + " shouldn't be called more than once";
  f.called = false;
  return f;
}

/***/ }),

/***/ "./node_modules/parse-asn1/aesid.json":
/*!********************************************!*\
  !*** ./node_modules/parse-asn1/aesid.json ***!
  \********************************************/
/*! exports provided: 2.16.840.1.101.3.4.1.1, 2.16.840.1.101.3.4.1.2, 2.16.840.1.101.3.4.1.3, 2.16.840.1.101.3.4.1.4, 2.16.840.1.101.3.4.1.21, 2.16.840.1.101.3.4.1.22, 2.16.840.1.101.3.4.1.23, 2.16.840.1.101.3.4.1.24, 2.16.840.1.101.3.4.1.41, 2.16.840.1.101.3.4.1.42, 2.16.840.1.101.3.4.1.43, 2.16.840.1.101.3.4.1.44, default */
/***/ (function(module) {

module.exports = {"2.16.840.1.101.3.4.1.1":"aes-128-ecb","2.16.840.1.101.3.4.1.2":"aes-128-cbc","2.16.840.1.101.3.4.1.3":"aes-128-ofb","2.16.840.1.101.3.4.1.4":"aes-128-cfb","2.16.840.1.101.3.4.1.21":"aes-192-ecb","2.16.840.1.101.3.4.1.22":"aes-192-cbc","2.16.840.1.101.3.4.1.23":"aes-192-ofb","2.16.840.1.101.3.4.1.24":"aes-192-cfb","2.16.840.1.101.3.4.1.41":"aes-256-ecb","2.16.840.1.101.3.4.1.42":"aes-256-cbc","2.16.840.1.101.3.4.1.43":"aes-256-ofb","2.16.840.1.101.3.4.1.44":"aes-256-cfb"};

/***/ }),

/***/ "./node_modules/parse-asn1/asn1.js":
/*!*****************************************!*\
  !*** ./node_modules/parse-asn1/asn1.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.


var asn1 = __webpack_require__(/*! asn1.js */ "./node_modules/asn1.js/lib/asn1.js");

exports.certificate = __webpack_require__(/*! ./certificate */ "./node_modules/parse-asn1/certificate.js");
var RSAPrivateKey = asn1.define('RSAPrivateKey', function () {
  this.seq().obj(this.key('version').int(), this.key('modulus').int(), this.key('publicExponent').int(), this.key('privateExponent').int(), this.key('prime1').int(), this.key('prime2').int(), this.key('exponent1').int(), this.key('exponent2').int(), this.key('coefficient').int());
});
exports.RSAPrivateKey = RSAPrivateKey;
var RSAPublicKey = asn1.define('RSAPublicKey', function () {
  this.seq().obj(this.key('modulus').int(), this.key('publicExponent').int());
});
exports.RSAPublicKey = RSAPublicKey;
var PublicKey = asn1.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});
exports.PublicKey = PublicKey;
var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function () {
  this.seq().obj(this.key('algorithm').objid(), this.key('none').null_().optional(), this.key('curve').objid().optional(), this.key('params').seq().obj(this.key('p').int(), this.key('q').int(), this.key('g').int()).optional());
});
var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function () {
  this.seq().obj(this.key('version').int(), this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPrivateKey').octstr());
});
exports.PrivateKey = PrivateKeyInfo;
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function () {
  this.seq().obj(this.key('algorithm').seq().obj(this.key('id').objid(), this.key('decrypt').seq().obj(this.key('kde').seq().obj(this.key('id').objid(), this.key('kdeparams').seq().obj(this.key('salt').octstr(), this.key('iters').int())), this.key('cipher').seq().obj(this.key('algo').objid(), this.key('iv').octstr()))), this.key('subjectPrivateKey').octstr());
});
exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;
var DSAPrivateKey = asn1.define('DSAPrivateKey', function () {
  this.seq().obj(this.key('version').int(), this.key('p').int(), this.key('q').int(), this.key('g').int(), this.key('pub_key').int(), this.key('priv_key').int());
});
exports.DSAPrivateKey = DSAPrivateKey;
exports.DSAparam = asn1.define('DSAparam', function () {
  this.int();
});
var ECPrivateKey = asn1.define('ECPrivateKey', function () {
  this.seq().obj(this.key('version').int(), this.key('privateKey').octstr(), this.key('parameters').optional().explicit(0).use(ECParameters), this.key('publicKey').optional().explicit(1).bitstr());
});
exports.ECPrivateKey = ECPrivateKey;
var ECParameters = asn1.define('ECParameters', function () {
  this.choice({
    namedCurve: this.objid()
  });
});
exports.signature = asn1.define('signature', function () {
  this.seq().obj(this.key('r').int(), this.key('s').int());
});

/***/ }),

/***/ "./node_modules/parse-asn1/certificate.js":
/*!************************************************!*\
  !*** ./node_modules/parse-asn1/certificate.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen


var asn = __webpack_require__(/*! asn1.js */ "./node_modules/asn1.js/lib/asn1.js");

var Time = asn.define('Time', function () {
  this.choice({
    utcTime: this.utctime(),
    generalTime: this.gentime()
  });
});
var AttributeTypeValue = asn.define('AttributeTypeValue', function () {
  this.seq().obj(this.key('type').objid(), this.key('value').any());
});
var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function () {
  this.seq().obj(this.key('algorithm').objid(), this.key('parameters').optional());
});
var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function () {
  this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});
var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function () {
  this.setof(AttributeTypeValue);
});
var RDNSequence = asn.define('RDNSequence', function () {
  this.seqof(RelativeDistinguishedName);
});
var Name = asn.define('Name', function () {
  this.choice({
    rdnSequence: this.use(RDNSequence)
  });
});
var Validity = asn.define('Validity', function () {
  this.seq().obj(this.key('notBefore').use(Time), this.key('notAfter').use(Time));
});
var Extension = asn.define('Extension', function () {
  this.seq().obj(this.key('extnID').objid(), this.key('critical').bool().def(false), this.key('extnValue').octstr());
});
var TBSCertificate = asn.define('TBSCertificate', function () {
  this.seq().obj(this.key('version').explicit(0).int(), this.key('serialNumber').int(), this.key('signature').use(AlgorithmIdentifier), this.key('issuer').use(Name), this.key('validity').use(Validity), this.key('subject').use(Name), this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo), this.key('issuerUniqueID').implicit(1).bitstr().optional(), this.key('subjectUniqueID').implicit(2).bitstr().optional(), this.key('extensions').explicit(3).seqof(Extension).optional());
});
var X509Certificate = asn.define('X509Certificate', function () {
  this.seq().obj(this.key('tbsCertificate').use(TBSCertificate), this.key('signatureAlgorithm').use(AlgorithmIdentifier), this.key('signatureValue').bitstr());
});
module.exports = X509Certificate;

/***/ }),

/***/ "./node_modules/parse-asn1/fixProc.js":
/*!********************************************!*\
  !*** ./node_modules/parse-asn1/fixProc.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/\=]+)[\n\r]+/m;
var startRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----/m;
var fullRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/\=]+)-----END \1-----$/m;

var evp = __webpack_require__(/*! evp_bytestokey */ "./node_modules/evp_bytestokey/index.js");

var ciphers = __webpack_require__(/*! browserify-aes */ "./node_modules/browserify-aes/browser.js");

module.exports = function (okey, password) {
  var key = okey.toString();
  var match = key.match(findProc);
  var decrypted;

  if (!match) {
    var match2 = key.match(fullRegex);
    decrypted = new Buffer(match2[2].replace(/[\r\n]/g, ''), 'base64');
  } else {
    var suite = 'aes' + match[1];
    var iv = new Buffer(match[2], 'hex');
    var cipherText = new Buffer(match[3].replace(/[\r\n]/g, ''), 'base64');
    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
    var out = [];
    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    decrypted = Buffer.concat(out);
  }

  var tag = key.match(startRegex)[1];
  return {
    tag: tag,
    data: decrypted
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/parse-asn1/index.js":
/*!******************************************!*\
  !*** ./node_modules/parse-asn1/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var asn1 = __webpack_require__(/*! ./asn1 */ "./node_modules/parse-asn1/asn1.js");

var aesid = __webpack_require__(/*! ./aesid.json */ "./node_modules/parse-asn1/aesid.json");

var fixProc = __webpack_require__(/*! ./fixProc */ "./node_modules/parse-asn1/fixProc.js");

var ciphers = __webpack_require__(/*! browserify-aes */ "./node_modules/browserify-aes/browser.js");

var compat = __webpack_require__(/*! pbkdf2 */ "./node_modules/pbkdf2/browser.js");

module.exports = parseKeys;

function parseKeys(buffer) {
  var password;

  if (_typeof(buffer) === 'object' && !Buffer.isBuffer(buffer)) {
    password = buffer.passphrase;
    buffer = buffer.key;
  }

  if (typeof buffer === 'string') {
    buffer = new Buffer(buffer);
  }

  var stripped = fixProc(buffer, password);
  var type = stripped.tag;
  var data = stripped.data;
  var subtype, ndata;

  switch (type) {
    case 'CERTIFICATE':
      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo;
    // falls through

    case 'PUBLIC KEY':
      if (!ndata) {
        ndata = asn1.PublicKey.decode(data, 'der');
      }

      subtype = ndata.algorithm.algorithm.join('.');

      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');

        case '1.2.840.10045.2.1':
          ndata.subjectPrivateKey = ndata.subjectPublicKey;
          return {
            type: 'ec',
            data: ndata
          };

        case '1.2.840.10040.4.1':
          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
          return {
            type: 'dsa',
            data: ndata.algorithm.params
          };

        default:
          throw new Error('unknown key id ' + subtype);
      }

      throw new Error('unknown key type ' + type);

    case 'ENCRYPTED PRIVATE KEY':
      data = asn1.EncryptedPrivateKey.decode(data, 'der');
      data = decrypt(data, password);
    // falls through

    case 'PRIVATE KEY':
      ndata = asn1.PrivateKey.decode(data, 'der');
      subtype = ndata.algorithm.algorithm.join('.');

      switch (subtype) {
        case '1.2.840.113549.1.1.1':
          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');

        case '1.2.840.10045.2.1':
          return {
            curve: ndata.algorithm.curve,
            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
          };

        case '1.2.840.10040.4.1':
          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');
          return {
            type: 'dsa',
            params: ndata.algorithm.params
          };

        default:
          throw new Error('unknown key id ' + subtype);
      }

      throw new Error('unknown key type ' + type);

    case 'RSA PUBLIC KEY':
      return asn1.RSAPublicKey.decode(data, 'der');

    case 'RSA PRIVATE KEY':
      return asn1.RSAPrivateKey.decode(data, 'der');

    case 'DSA PRIVATE KEY':
      return {
        type: 'dsa',
        params: asn1.DSAPrivateKey.decode(data, 'der')
      };

    case 'EC PRIVATE KEY':
      data = asn1.ECPrivateKey.decode(data, 'der');
      return {
        curve: data.parameters.value,
        privateKey: data.privateKey
      };

    default:
      throw new Error('unknown key type ' + type);
  }
}

parseKeys.signature = asn1.signature;

function decrypt(data, password) {
  var salt = data.algorithm.decrypt.kde.kdeparams.salt;
  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];
  var iv = data.algorithm.decrypt.cipher.iv;
  var cipherText = data.subjectPrivateKey;
  var keylen = parseInt(algo.split('-')[1], 10) / 8;
  var key = compat.pbkdf2Sync(password, salt, iters, keylen);
  var cipher = ciphers.createDecipheriv(algo, key, iv);
  var out = [];
  out.push(cipher.update(cipherText));
  out.push(cipher.final());
  return Buffer.concat(out);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/pbkdf2/browser.js":
/*!****************************************!*\
  !*** ./node_modules/pbkdf2/browser.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports.pbkdf2 = __webpack_require__(/*! ./lib/async */ "./node_modules/pbkdf2/lib/async.js");
exports.pbkdf2Sync = __webpack_require__(/*! ./lib/sync */ "./node_modules/pbkdf2/lib/sync-browser.js");

/***/ }),

/***/ "./node_modules/pbkdf2/lib/async.js":
/*!******************************************!*\
  !*** ./node_modules/pbkdf2/lib/async.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {var checkParameters = __webpack_require__(/*! ./precondition */ "./node_modules/pbkdf2/lib/precondition.js");

var defaultEncoding = __webpack_require__(/*! ./default-encoding */ "./node_modules/pbkdf2/lib/default-encoding.js");

var sync = __webpack_require__(/*! ./sync */ "./node_modules/pbkdf2/lib/sync-browser.js");

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var ZERO_BUF;
var subtle = global.crypto && global.crypto.subtle;
var toBrowser = {
  'sha': 'SHA-1',
  'sha-1': 'SHA-1',
  'sha1': 'SHA-1',
  'sha256': 'SHA-256',
  'sha-256': 'SHA-256',
  'sha384': 'SHA-384',
  'sha-384': 'SHA-384',
  'sha-512': 'SHA-512',
  'sha512': 'SHA-512'
};
var checks = [];

function checkNative(algo) {
  if (global.process && !global.process.browser) {
    return Promise.resolve(false);
  }

  if (!subtle || !subtle.importKey || !subtle.deriveBits) {
    return Promise.resolve(false);
  }

  if (checks[algo] !== undefined) {
    return checks[algo];
  }

  ZERO_BUF = ZERO_BUF || Buffer.alloc(8);
  var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function () {
    return true;
  }).catch(function () {
    return false;
  });
  checks[algo] = prom;
  return prom;
}

function browserPbkdf2(password, salt, iterations, length, algo) {
  return subtle.importKey('raw', password, {
    name: 'PBKDF2'
  }, false, ['deriveBits']).then(function (key) {
    return subtle.deriveBits({
      name: 'PBKDF2',
      salt: salt,
      iterations: iterations,
      hash: {
        name: algo
      }
    }, key, length << 3);
  }).then(function (res) {
    return Buffer.from(res);
  });
}

function resolvePromise(promise, callback) {
  promise.then(function (out) {
    process.nextTick(function () {
      callback(null, out);
    });
  }, function (e) {
    process.nextTick(function () {
      callback(e);
    });
  });
}

module.exports = function (password, salt, iterations, keylen, digest, callback) {
  if (typeof digest === 'function') {
    callback = digest;
    digest = undefined;
  }

  digest = digest || 'sha1';
  var algo = toBrowser[digest.toLowerCase()];

  if (!algo || typeof global.Promise !== 'function') {
    return process.nextTick(function () {
      var out;

      try {
        out = sync(password, salt, iterations, keylen, digest);
      } catch (e) {
        return callback(e);
      }

      callback(null, out);
    });
  }

  checkParameters(password, salt, iterations, keylen);
  if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2');
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding);
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding);
  resolvePromise(checkNative(algo).then(function (resp) {
    if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo);
    return sync(password, salt, iterations, keylen, digest);
  }), callback);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/pbkdf2/lib/default-encoding.js":
/*!*****************************************************!*\
  !*** ./node_modules/pbkdf2/lib/default-encoding.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var defaultEncoding;
/* istanbul ignore next */

if (process.browser) {
  defaultEncoding = 'utf-8';
} else {
  var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10);
  defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary';
}

module.exports = defaultEncoding;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/pbkdf2/lib/precondition.js":
/*!*************************************************!*\
  !*** ./node_modules/pbkdf2/lib/precondition.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var MAX_ALLOC = Math.pow(2, 30) - 1; // default in iojs

function checkBuffer(buf, name) {
  if (typeof buf !== 'string' && !Buffer.isBuffer(buf)) {
    throw new TypeError(name + ' must be a buffer or string');
  }
}

module.exports = function (password, salt, iterations, keylen) {
  checkBuffer(password, 'Password');
  checkBuffer(salt, 'Salt');

  if (typeof iterations !== 'number') {
    throw new TypeError('Iterations not a number');
  }

  if (iterations < 0) {
    throw new TypeError('Bad iterations');
  }

  if (typeof keylen !== 'number') {
    throw new TypeError('Key length not a number');
  }

  if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) {
    /* eslint no-self-compare: 0 */
    throw new TypeError('Bad key length');
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/pbkdf2/lib/sync-browser.js":
/*!*************************************************!*\
  !*** ./node_modules/pbkdf2/lib/sync-browser.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var md5 = __webpack_require__(/*! create-hash/md5 */ "./node_modules/create-hash/md5.js");

var rmd160 = __webpack_require__(/*! ripemd160 */ "./node_modules/ripemd160/index.js");

var sha = __webpack_require__(/*! sha.js */ "./node_modules/sha.js/index.js");

var checkParameters = __webpack_require__(/*! ./precondition */ "./node_modules/pbkdf2/lib/precondition.js");

var defaultEncoding = __webpack_require__(/*! ./default-encoding */ "./node_modules/pbkdf2/lib/default-encoding.js");

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var ZEROS = Buffer.alloc(128);
var sizes = {
  md5: 16,
  sha1: 20,
  sha224: 28,
  sha256: 32,
  sha384: 48,
  sha512: 64,
  rmd160: 20,
  ripemd160: 20
};

function Hmac(alg, key, saltLen) {
  var hash = getDigest(alg);
  var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;

  if (key.length > blocksize) {
    key = hash(key);
  } else if (key.length < blocksize) {
    key = Buffer.concat([key, ZEROS], blocksize);
  }

  var ipad = Buffer.allocUnsafe(blocksize + sizes[alg]);
  var opad = Buffer.allocUnsafe(blocksize + sizes[alg]);

  for (var i = 0; i < blocksize; i++) {
    ipad[i] = key[i] ^ 0x36;
    opad[i] = key[i] ^ 0x5C;
  }

  var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4);
  ipad.copy(ipad1, 0, 0, blocksize);
  this.ipad1 = ipad1;
  this.ipad2 = ipad;
  this.opad = opad;
  this.alg = alg;
  this.blocksize = blocksize;
  this.hash = hash;
  this.size = sizes[alg];
}

Hmac.prototype.run = function (data, ipad) {
  data.copy(ipad, this.blocksize);
  var h = this.hash(ipad);
  h.copy(this.opad, this.blocksize);
  return this.hash(this.opad);
};

function getDigest(alg) {
  function shaFunc(data) {
    return sha(alg).update(data).digest();
  }

  if (alg === 'rmd160' || alg === 'ripemd160') return rmd160;
  if (alg === 'md5') return md5;
  return shaFunc;
}

function pbkdf2(password, salt, iterations, keylen, digest) {
  checkParameters(password, salt, iterations, keylen);
  if (!Buffer.isBuffer(password)) password = Buffer.from(password, defaultEncoding);
  if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, defaultEncoding);
  digest = digest || 'sha1';
  var hmac = new Hmac(digest, password, salt.length);
  var DK = Buffer.allocUnsafe(keylen);
  var block1 = Buffer.allocUnsafe(salt.length + 4);
  salt.copy(block1, 0, 0, salt.length);
  var destPos = 0;
  var hLen = sizes[digest];
  var l = Math.ceil(keylen / hLen);

  for (var i = 1; i <= l; i++) {
    block1.writeUInt32BE(i, salt.length);
    var T = hmac.run(block1, hmac.ipad1);
    var U = T;

    for (var j = 1; j < iterations; j++) {
      U = hmac.run(U, hmac.ipad2);

      for (var k = 0; k < hLen; k++) {
        T[k] ^= U[k];
      }
    }

    T.copy(DK, destPos);
    destPos += hLen;
  }

  return DK;
}

module.exports = pbkdf2;

/***/ }),

/***/ "./node_modules/process-nextick-args/index.js":
/*!****************************************************!*\
  !*** ./node_modules/process-nextick-args/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (!process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = {
    nextTick: nextTick
  };
} else {
  module.exports = process;
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }

  var len = arguments.length;
  var args, i;

  switch (len) {
    case 0:
    case 1:
      return process.nextTick(fn);

    case 2:
      return process.nextTick(function afterTickOne() {
        fn.call(null, arg1);
      });

    case 3:
      return process.nextTick(function afterTickTwo() {
        fn.call(null, arg1, arg2);
      });

    case 4:
      return process.nextTick(function afterTickThree() {
        fn.call(null, arg1, arg2, arg3);
      });

    default:
      args = new Array(len - 1);
      i = 0;

      while (i < args.length) {
        args[i++] = arguments[i];
      }

      return process.nextTick(function afterTick() {
        fn.apply(null, args);
      });
  }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

/***/ }),

/***/ "./node_modules/public-encrypt/browser.js":
/*!************************************************!*\
  !*** ./node_modules/public-encrypt/browser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports.publicEncrypt = __webpack_require__(/*! ./publicEncrypt */ "./node_modules/public-encrypt/publicEncrypt.js");
exports.privateDecrypt = __webpack_require__(/*! ./privateDecrypt */ "./node_modules/public-encrypt/privateDecrypt.js");

exports.privateEncrypt = function privateEncrypt(key, buf) {
  return exports.publicEncrypt(key, buf, true);
};

exports.publicDecrypt = function publicDecrypt(key, buf) {
  return exports.privateDecrypt(key, buf, true);
};

/***/ }),

/***/ "./node_modules/public-encrypt/mgf.js":
/*!********************************************!*\
  !*** ./node_modules/public-encrypt/mgf.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(/*! create-hash */ "./node_modules/create-hash/browser.js");

module.exports = function (seed, len) {
  var t = new Buffer('');
  var i = 0,
      c;

  while (t.length < len) {
    c = i2ops(i++);
    t = Buffer.concat([t, createHash('sha1').update(seed).update(c).digest()]);
  }

  return t.slice(0, len);
};

function i2ops(c) {
  var out = new Buffer(4);
  out.writeUInt32BE(c, 0);
  return out;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/public-encrypt/privateDecrypt.js":
/*!*******************************************************!*\
  !*** ./node_modules/public-encrypt/privateDecrypt.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var parseKeys = __webpack_require__(/*! parse-asn1 */ "./node_modules/parse-asn1/index.js");

var mgf = __webpack_require__(/*! ./mgf */ "./node_modules/public-encrypt/mgf.js");

var xor = __webpack_require__(/*! ./xor */ "./node_modules/public-encrypt/xor.js");

var bn = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

var crt = __webpack_require__(/*! browserify-rsa */ "./node_modules/browserify-rsa/index.js");

var createHash = __webpack_require__(/*! create-hash */ "./node_modules/create-hash/browser.js");

var withPublic = __webpack_require__(/*! ./withPublic */ "./node_modules/public-encrypt/withPublic.js");

module.exports = function privateDecrypt(private_key, enc, reverse) {
  var padding;

  if (private_key.padding) {
    padding = private_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }

  var key = parseKeys(private_key);
  var k = key.modulus.byteLength();

  if (enc.length > k || new bn(enc).cmp(key.modulus) >= 0) {
    throw new Error('decryption error');
  }

  var msg;

  if (reverse) {
    msg = withPublic(new bn(enc), key);
  } else {
    msg = crt(enc, key);
  }

  var zBuffer = new Buffer(k - msg.length);
  zBuffer.fill(0);
  msg = Buffer.concat([zBuffer, msg], k);

  if (padding === 4) {
    return oaep(key, msg);
  } else if (padding === 1) {
    return pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    return msg;
  } else {
    throw new Error('unknown padding');
  }
};

function oaep(key, msg) {
  var n = key.modulus;
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;

  if (msg[0] !== 0) {
    throw new Error('decryption error');
  }

  var maskedSeed = msg.slice(1, hLen + 1);
  var maskedDb = msg.slice(hLen + 1);
  var seed = xor(maskedSeed, mgf(maskedDb, hLen));
  var db = xor(maskedDb, mgf(seed, k - hLen - 1));

  if (compare(iHash, db.slice(0, hLen))) {
    throw new Error('decryption error');
  }

  var i = hLen;

  while (db[i] === 0) {
    i++;
  }

  if (db[i++] !== 1) {
    throw new Error('decryption error');
  }

  return db.slice(i);
}

function pkcs1(key, msg, reverse) {
  var p1 = msg.slice(0, 2);
  var i = 2;
  var status = 0;

  while (msg[i++] !== 0) {
    if (i >= msg.length) {
      status++;
      break;
    }
  }

  var ps = msg.slice(2, i - 1);
  var p2 = msg.slice(i - 1, i);

  if (p1.toString('hex') !== '0002' && !reverse || p1.toString('hex') !== '0001' && reverse) {
    status++;
  }

  if (ps.length < 8) {
    status++;
  }

  if (status) {
    throw new Error('decryption error');
  }

  return msg.slice(i);
}

function compare(a, b) {
  a = new Buffer(a);
  b = new Buffer(b);
  var dif = 0;
  var len = a.length;

  if (a.length !== b.length) {
    dif++;
    len = Math.min(a.length, b.length);
  }

  var i = -1;

  while (++i < len) {
    dif += a[i] ^ b[i];
  }

  return dif;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/public-encrypt/publicEncrypt.js":
/*!******************************************************!*\
  !*** ./node_modules/public-encrypt/publicEncrypt.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var parseKeys = __webpack_require__(/*! parse-asn1 */ "./node_modules/parse-asn1/index.js");

var randomBytes = __webpack_require__(/*! randombytes */ "./node_modules/randombytes/browser.js");

var createHash = __webpack_require__(/*! create-hash */ "./node_modules/create-hash/browser.js");

var mgf = __webpack_require__(/*! ./mgf */ "./node_modules/public-encrypt/mgf.js");

var xor = __webpack_require__(/*! ./xor */ "./node_modules/public-encrypt/xor.js");

var bn = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

var withPublic = __webpack_require__(/*! ./withPublic */ "./node_modules/public-encrypt/withPublic.js");

var crt = __webpack_require__(/*! browserify-rsa */ "./node_modules/browserify-rsa/index.js");

var constants = {
  RSA_PKCS1_OAEP_PADDING: 4,
  RSA_PKCS1_PADDIN: 1,
  RSA_NO_PADDING: 3
};

module.exports = function publicEncrypt(public_key, msg, reverse) {
  var padding;

  if (public_key.padding) {
    padding = public_key.padding;
  } else if (reverse) {
    padding = 1;
  } else {
    padding = 4;
  }

  var key = parseKeys(public_key);
  var paddedMsg;

  if (padding === 4) {
    paddedMsg = oaep(key, msg);
  } else if (padding === 1) {
    paddedMsg = pkcs1(key, msg, reverse);
  } else if (padding === 3) {
    paddedMsg = new bn(msg);

    if (paddedMsg.cmp(key.modulus) >= 0) {
      throw new Error('data too long for modulus');
    }
  } else {
    throw new Error('unknown padding');
  }

  if (reverse) {
    return crt(paddedMsg, key);
  } else {
    return withPublic(paddedMsg, key);
  }
};

function oaep(key, msg) {
  var k = key.modulus.byteLength();
  var mLen = msg.length;
  var iHash = createHash('sha1').update(new Buffer('')).digest();
  var hLen = iHash.length;
  var hLen2 = 2 * hLen;

  if (mLen > k - hLen2 - 2) {
    throw new Error('message too long');
  }

  var ps = new Buffer(k - mLen - hLen2 - 2);
  ps.fill(0);
  var dblen = k - hLen - 1;
  var seed = randomBytes(hLen);
  var maskedDb = xor(Buffer.concat([iHash, ps, new Buffer([1]), msg], dblen), mgf(seed, dblen));
  var maskedSeed = xor(seed, mgf(maskedDb, hLen));
  return new bn(Buffer.concat([new Buffer([0]), maskedSeed, maskedDb], k));
}

function pkcs1(key, msg, reverse) {
  var mLen = msg.length;
  var k = key.modulus.byteLength();

  if (mLen > k - 11) {
    throw new Error('message too long');
  }

  var ps;

  if (reverse) {
    ps = new Buffer(k - mLen - 3);
    ps.fill(0xff);
  } else {
    ps = nonZero(k - mLen - 3);
  }

  return new bn(Buffer.concat([new Buffer([0, reverse ? 1 : 2]), ps, new Buffer([0]), msg], k));
}

function nonZero(len, crypto) {
  var out = new Buffer(len);
  var i = 0;
  var cache = randomBytes(len * 2);
  var cur = 0;
  var num;

  while (i < len) {
    if (cur === cache.length) {
      cache = randomBytes(len * 2);
      cur = 0;
    }

    num = cache[cur++];

    if (num) {
      out[i++] = num;
    }
  }

  return out;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/public-encrypt/withPublic.js":
/*!***************************************************!*\
  !*** ./node_modules/public-encrypt/withPublic.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(Buffer) {var bn = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");

function withPublic(paddedMsg, key) {
  return new Buffer(paddedMsg.toRed(bn.mont(key.modulus)).redPow(new bn(key.publicExponent)).fromRed().toArray());
}

module.exports = withPublic;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/public-encrypt/xor.js":
/*!********************************************!*\
  !*** ./node_modules/public-encrypt/xor.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function xor(a, b) {
  var len = a.length;
  var i = -1;

  while (++i < len) {
    a[i] ^= b[i];
  }

  return a;
};

/***/ }),

/***/ "./node_modules/pump/index.js":
/*!************************************!*\
  !*** ./node_modules/pump/index.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {var once = __webpack_require__(/*! once */ "./node_modules/once/once.js");

var eos = __webpack_require__(/*! end-of-stream */ "./node_modules/end-of-stream/index.js");

var fs = __webpack_require__(/*! fs */ 2); // we only need fs to get the ReadStream and WriteStream prototypes


var noop = function noop() {};

var ancient = /^v?\.0/.test(process.version);

var isFn = function isFn(fn) {
  return typeof fn === 'function';
};

var isFS = function isFS(stream) {
  if (!ancient) return false; // newer node version do not need to care about fs is a special way

  if (!fs) return false; // browser

  return (stream instanceof (fs.ReadStream || noop) || stream instanceof (fs.WriteStream || noop)) && isFn(stream.close);
};

var isRequest = function isRequest(stream) {
  return stream.setHeader && isFn(stream.abort);
};

var destroyer = function destroyer(stream, reading, writing, callback) {
  callback = once(callback);
  var closed = false;
  stream.on('close', function () {
    closed = true;
  });
  eos(stream, {
    readable: reading,
    writable: writing
  }, function (err) {
    if (err) return callback(err);
    closed = true;
    callback();
  });
  var destroyed = false;
  return function (err) {
    if (closed) return;
    if (destroyed) return;
    destroyed = true;
    if (isFS(stream)) return stream.close(noop); // use close for fs streams to avoid fd leaks

    if (isRequest(stream)) return stream.abort(); // request.destroy just do .end - .abort is what we want

    if (isFn(stream.destroy)) return stream.destroy();
    callback(err || new Error('stream was destroyed'));
  };
};

var call = function call(fn) {
  fn();
};

var pipe = function pipe(from, to) {
  return from.pipe(to);
};

var pump = function pump() {
  var streams = Array.prototype.slice.call(arguments);
  var callback = isFn(streams[streams.length - 1] || noop) && streams.pop() || noop;
  if (Array.isArray(streams[0])) streams = streams[0];
  if (streams.length < 2) throw new Error('pump requires two streams per minimum');
  var error;
  var destroys = streams.map(function (stream, i) {
    var reading = i < streams.length - 1;
    var writing = i > 0;
    return destroyer(stream, reading, writing, function (err) {
      if (!error) error = err;
      if (err) destroys.forEach(call);
      if (reading) return;
      destroys.forEach(call);
      callback(error);
    });
  });
  return streams.reduce(pipe);
};

module.exports = pump;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/qrcode/lib/browser.js":
/*!********************************************!*\
  !*** ./node_modules/qrcode/lib/browser.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var canPromise = __webpack_require__(/*! can-promise */ "./node_modules/can-promise/index.js");

var QRCode = __webpack_require__(/*! ./core/qrcode */ "./node_modules/qrcode/lib/core/qrcode.js");

var CanvasRenderer = __webpack_require__(/*! ./renderer/canvas */ "./node_modules/qrcode/lib/renderer/canvas.js");

var SvgRenderer = __webpack_require__(/*! ./renderer/svg-tag.js */ "./node_modules/qrcode/lib/renderer/svg-tag.js");

function renderCanvas(renderFunc, canvas, text, opts, cb) {
  var args = [].slice.call(arguments, 1);
  var argsNum = args.length;
  var isLastArgCb = typeof args[argsNum - 1] === 'function';

  if (!isLastArgCb && !canPromise()) {
    throw new Error('Callback required as last argument');
  }

  if (isLastArgCb) {
    if (argsNum < 2) {
      throw new Error('Too few arguments provided');
    }

    if (argsNum === 2) {
      cb = text;
      text = canvas;
      canvas = opts = undefined;
    } else if (argsNum === 3) {
      if (canvas.getContext && typeof cb === 'undefined') {
        cb = opts;
        opts = undefined;
      } else {
        cb = opts;
        opts = text;
        text = canvas;
        canvas = undefined;
      }
    }
  } else {
    if (argsNum < 1) {
      throw new Error('Too few arguments provided');
    }

    if (argsNum === 1) {
      text = canvas;
      canvas = opts = undefined;
    } else if (argsNum === 2 && !canvas.getContext) {
      opts = text;
      text = canvas;
      canvas = undefined;
    }

    return new Promise(function (resolve, reject) {
      try {
        var data = QRCode.create(text, opts);
        resolve(renderFunc(data, canvas, opts));
      } catch (e) {
        reject(e);
      }
    });
  }

  try {
    var data = QRCode.create(text, opts);
    cb(null, renderFunc(data, canvas, opts));
  } catch (e) {
    cb(e);
  }
}

exports.create = QRCode.create;
exports.toCanvas = renderCanvas.bind(null, CanvasRenderer.render);
exports.toDataURL = renderCanvas.bind(null, CanvasRenderer.renderToDataURL); // only svg for now.

exports.toString = renderCanvas.bind(null, function (data, _, opts) {
  return SvgRenderer.render(data, opts);
});

/***/ }),

/***/ "./node_modules/qrcode/lib/core/alignment-pattern.js":
/*!***********************************************************!*\
  !*** ./node_modules/qrcode/lib/core/alignment-pattern.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Alignment pattern are fixed reference pattern in defined positions
 * in a matrix symbology, which enables the decode software to re-synchronise
 * the coordinate mapping of the image modules in the event of moderate amounts
 * of distortion of the image.
 *
 * Alignment patterns are present only in QR Code symbols of version 2 or larger
 * and their number depends on the symbol version.
 */
var getSymbolSize = __webpack_require__(/*! ./utils */ "./node_modules/qrcode/lib/core/utils.js").getSymbolSize;
/**
 * Calculate the row/column coordinates of the center module of each alignment pattern
 * for the specified QR Code version.
 *
 * The alignment patterns are positioned symmetrically on either side of the diagonal
 * running from the top left corner of the symbol to the bottom right corner.
 *
 * Since positions are simmetrical only half of the coordinates are returned.
 * Each item of the array will represent in turn the x and y coordinate.
 * @see {@link getPositions}
 *
 * @param  {Number} version QR Code version
 * @return {Array}          Array of coordinate
 */


exports.getRowColCoords = function getRowColCoords(version) {
  if (version === 1) return [];
  var posCount = Math.floor(version / 7) + 2;
  var size = getSymbolSize(version);
  var intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2;
  var positions = [size - 7]; // Last coord is always (size - 7)

  for (var i = 1; i < posCount - 1; i++) {
    positions[i] = positions[i - 1] - intervals;
  }

  positions.push(6); // First coord is always 6

  return positions.reverse();
};
/**
 * Returns an array containing the positions of each alignment pattern.
 * Each array's element represent the center point of the pattern as (x, y) coordinates
 *
 * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}
 * and filtering out the items that overlaps with finder pattern
 *
 * @example
 * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.
 * The alignment patterns, therefore, are to be centered on (row, column)
 * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).
 * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns
 * and are not therefore used for alignment patterns.
 *
 * var pos = getPositions(7)
 * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]
 *
 * @param  {Number} version QR Code version
 * @return {Array}          Array of coordinates
 */


exports.getPositions = function getPositions(version) {
  var coords = [];
  var pos = exports.getRowColCoords(version);
  var posLength = pos.length;

  for (var i = 0; i < posLength; i++) {
    for (var j = 0; j < posLength; j++) {
      // Skip if position is occupied by finder patterns
      if (i === 0 && j === 0 || // top-left
      i === 0 && j === posLength - 1 || // bottom-left
      i === posLength - 1 && j === 0) {
        // top-right
        continue;
      }

      coords.push([pos[i], pos[j]]);
    }
  }

  return coords;
};

/***/ }),

/***/ "./node_modules/qrcode/lib/core/alphanumeric-data.js":
/*!***********************************************************!*\
  !*** ./node_modules/qrcode/lib/core/alphanumeric-data.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Mode = __webpack_require__(/*! ./mode */ "./node_modules/qrcode/lib/core/mode.js");
/**
 * Array of characters available in alphanumeric mode
 *
 * As per QR Code specification, to each character
 * is assigned a value from 0 to 44 which in this case coincides
 * with the array index
 *
 * @type {Array}
 */


var ALPHA_NUM_CHARS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '$', '%', '*', '+', '-', '.', '/', ':'];

function AlphanumericData(data) {
  this.mode = Mode.ALPHANUMERIC;
  this.data = data;
}

AlphanumericData.getBitsLength = function getBitsLength(length) {
  return 11 * Math.floor(length / 2) + 6 * (length % 2);
};

AlphanumericData.prototype.getLength = function getLength() {
  return this.data.length;
};

AlphanumericData.prototype.getBitsLength = function getBitsLength() {
  return AlphanumericData.getBitsLength(this.data.length);
};

AlphanumericData.prototype.write = function write(bitBuffer) {
  var i; // Input data characters are divided into groups of two characters
  // and encoded as 11-bit binary codes.

  for (i = 0; i + 2 <= this.data.length; i += 2) {
    // The character value of the first character is multiplied by 45
    var value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45; // The character value of the second digit is added to the product

    value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1]); // The sum is then stored as 11-bit binary number

    bitBuffer.put(value, 11);
  } // If the number of input data characters is not a multiple of two,
  // the character value of the final character is encoded as a 6-bit binary number.


  if (this.data.length % 2) {
    bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6);
  }
};

module.exports = AlphanumericData;

/***/ }),

/***/ "./node_modules/qrcode/lib/core/bit-buffer.js":
/*!****************************************************!*\
  !*** ./node_modules/qrcode/lib/core/bit-buffer.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function BitBuffer() {
  this.buffer = [];
  this.length = 0;
}

BitBuffer.prototype = {
  get: function get(index) {
    var bufIndex = Math.floor(index / 8);
    return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) === 1;
  },
  put: function put(num, length) {
    for (var i = 0; i < length; i++) {
      this.putBit((num >>> length - i - 1 & 1) === 1);
    }
  },
  getLengthInBits: function getLengthInBits() {
    return this.length;
  },
  putBit: function putBit(bit) {
    var bufIndex = Math.floor(this.length / 8);

    if (this.buffer.length <= bufIndex) {
      this.buffer.push(0);
    }

    if (bit) {
      this.buffer[bufIndex] |= 0x80 >>> this.length % 8;
    }

    this.length++;
  }
};
module.exports = BitBuffer;

/***/ }),

/***/ "./node_modules/qrcode/lib/core/bit-matrix.js":
/*!****************************************************!*\
  !*** ./node_modules/qrcode/lib/core/bit-matrix.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(/*! ../utils/buffer */ "./node_modules/qrcode/lib/utils/typedarray-buffer.js");
/**
 * Helper class to handle QR Code symbol modules
 *
 * @param {Number} size Symbol size
 */


function BitMatrix(size) {
  if (!size || size < 1) {
    throw new Error('BitMatrix size must be defined and greater than 0');
  }

  this.size = size;
  this.data = new Buffer(size * size);
  this.data.fill(0);
  this.reservedBit = new Buffer(size * size);
  this.reservedBit.fill(0);
}
/**
 * Set bit value at specified location
 * If reserved flag is set, this bit will be ignored during masking process
 *
 * @param {Number}  row
 * @param {Number}  col
 * @param {Boolean} value
 * @param {Boolean} reserved
 */


BitMatrix.prototype.set = function (row, col, value, reserved) {
  var index = row * this.size + col;
  this.data[index] = value;
  if (reserved) this.reservedBit[index] = true;
};
/**
 * Returns bit value at specified location
 *
 * @param  {Number}  row
 * @param  {Number}  col
 * @return {Boolean}
 */


BitMatrix.prototype.get = function (row, col) {
  return this.data[row * this.size + col];
};
/**
 * Applies xor operator at specified location
 * (used during masking process)
 *
 * @param {Number}  row
 * @param {Number}  col
 * @param {Boolean} value
 */


BitMatrix.prototype.xor = function (row, col, value) {
  this.data[row * this.size + col] ^= value;
};
/**
 * Check if bit at specified location is reserved
 *
 * @param {Number}   row
 * @param {Number}   col
 * @return {Boolean}
 */


BitMatrix.prototype.isReserved = function (row, col) {
  return this.reservedBit[row * this.size + col];
};

module.exports = BitMatrix;

/***/ }),

/***/ "./node_modules/qrcode/lib/core/byte-data.js":
/*!***************************************************!*\
  !*** ./node_modules/qrcode/lib/core/byte-data.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(/*! ../utils/buffer */ "./node_modules/qrcode/lib/utils/typedarray-buffer.js");

var Mode = __webpack_require__(/*! ./mode */ "./node_modules/qrcode/lib/core/mode.js");

function ByteData(data) {
  this.mode = Mode.BYTE;
  this.data = new Buffer(data);
}

ByteData.getBitsLength = function getBitsLength(length) {
  return length * 8;
};

ByteData.prototype.getLength = function getLength() {
  return this.data.length;
};

ByteData.prototype.getBitsLength = function getBitsLength() {
  return ByteData.getBitsLength(this.data.length);
};

ByteData.prototype.write = function (bitBuffer) {
  for (var i = 0, l = this.data.length; i < l; i++) {
    bitBuffer.put(this.data[i], 8);
  }
};

module.exports = ByteData;

/***/ }),

/***/ "./node_modules/qrcode/lib/core/error-correction-code.js":
/*!***************************************************************!*\
  !*** ./node_modules/qrcode/lib/core/error-correction-code.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ECLevel = __webpack_require__(/*! ./error-correction-level */ "./node_modules/qrcode/lib/core/error-correction-level.js");

var EC_BLOCKS_TABLE = [// L  M  Q  H
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 4, 1, 2, 4, 4, 2, 4, 4, 4, 2, 4, 6, 5, 2, 4, 6, 6, 2, 5, 8, 8, 4, 5, 8, 8, 4, 5, 8, 11, 4, 8, 10, 11, 4, 9, 12, 16, 4, 9, 16, 16, 6, 10, 12, 18, 6, 10, 17, 16, 6, 11, 16, 19, 6, 13, 18, 21, 7, 14, 21, 25, 8, 16, 20, 25, 8, 17, 23, 25, 9, 17, 23, 34, 9, 18, 25, 30, 10, 20, 27, 32, 12, 21, 29, 35, 12, 23, 34, 37, 12, 25, 34, 40, 13, 26, 35, 42, 14, 28, 38, 45, 15, 29, 40, 48, 16, 31, 43, 51, 17, 33, 45, 54, 18, 35, 48, 57, 19, 37, 51, 60, 19, 38, 53, 63, 20, 40, 56, 66, 21, 43, 59, 70, 22, 45, 62, 74, 24, 47, 65, 77, 25, 49, 68, 81];
var EC_CODEWORDS_TABLE = [// L  M  Q  H
7, 10, 13, 17, 10, 16, 22, 28, 15, 26, 36, 44, 20, 36, 52, 64, 26, 48, 72, 88, 36, 64, 96, 112, 40, 72, 108, 130, 48, 88, 132, 156, 60, 110, 160, 192, 72, 130, 192, 224, 80, 150, 224, 264, 96, 176, 260, 308, 104, 198, 288, 352, 120, 216, 320, 384, 132, 240, 360, 432, 144, 280, 408, 480, 168, 308, 448, 532, 180, 338, 504, 588, 196, 364, 546, 650, 224, 416, 600, 700, 224, 442, 644, 750, 252, 476, 690, 816, 270, 504, 750, 900, 300, 560, 810, 960, 312, 588, 870, 1050, 336, 644, 952, 1110, 360, 700, 1020, 1200, 390, 728, 1050, 1260, 420, 784, 1140, 1350, 450, 812, 1200, 1440, 480, 868, 1290, 1530, 510, 924, 1350, 1620, 540, 980, 1440, 1710, 570, 1036, 1530, 1800, 570, 1064, 1590, 1890, 600, 1120, 1680, 1980, 630, 1204, 1770, 2100, 660, 1260, 1860, 2220, 720, 1316, 1950, 2310, 750, 1372, 2040, 2430];
/**
 * Returns the number of error correction block that the QR Code should contain
 * for the specified version and error correction level.
 *
 * @param  {Number} version              QR Code version
 * @param  {Number} errorCorrectionLevel Error correction level
 * @return {Number}                      Number of error correction blocks
 */

exports.getBlocksCount = function getBlocksCount(version, errorCorrectionLevel) {
  switch (errorCorrectionLevel) {
    case ECLevel.L:
      return EC_BLOCKS_TABLE[(version - 1) * 4 + 0];

    case ECLevel.M:
      return EC_BLOCKS_TABLE[(version - 1) * 4 + 1];

    case ECLevel.Q:
      return EC_BLOCKS_TABLE[(version - 1) * 4 + 2];

    case ECLevel.H:
      return EC_BLOCKS_TABLE[(version - 1) * 4 + 3];

    default:
      return undefined;
  }
};
/**
 * Returns the number of error correction codewords to use for the specified
 * version and error correction level.
 *
 * @param  {Number} version              QR Code version
 * @param  {Number} errorCorrectionLevel Error correction level
 * @return {Number}                      Number of error correction codewords
 */


exports.getTotalCodewordsCount = function getTotalCodewordsCount(version, errorCorrectionLevel) {
  switch (errorCorrectionLevel) {
    case ECLevel.L:
      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 0];

    case ECLevel.M:
      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 1];

    case ECLevel.Q:
      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 2];

    case ECLevel.H:
      return EC_CODEWORDS_TABLE[(version - 1) * 4 + 3];

    default:
      return undefined;
  }
};

/***/ }),

/***/ "./node_modules/qrcode/lib/core/error-correction-level.js":
/*!****************************************************************!*\
  !*** ./node_modules/qrcode/lib/core/error-correction-level.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

exports.L = {
  bit: 1
};
exports.M = {
  bit: 0
};
exports.Q = {
  bit: 3
};
exports.H = {
  bit: 2
};

function fromString(string) {
  if (typeof string !== 'string') {
    throw new Error('Param is not a string');
  }

  var lcStr = string.toLowerCase();

  switch (lcStr) {
    case 'l':
    case 'low':
      return exports.L;

    case 'm':
    case 'medium':
      return exports.M;

    case 'q':
    case 'quartile':
      return exports.Q;

    case 'h':
    case 'high':
      return exports.H;

    default:
      throw new Error('Unknown EC Level: ' + string);
  }
}

exports.isValid = function isValid(level) {
  return level && typeof level.bit !== 'undefined' && level.bit >= 0 && level.bit < 4;
};

exports.from = function from(value, defaultValue) {
  if (exports.isValid(value)) {
    return value;
  }

  try {
    return fromString(value);
  } catch (e) {
    return defaultValue;
  }
};

/***/ }),

/***/ "./node_modules/qrcode/lib/core/finder-pattern.js":
/*!********************************************************!*\
  !*** ./node_modules/qrcode/lib/core/finder-pattern.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getSymbolSize = __webpack_require__(/*! ./utils */ "./node_modules/qrcode/lib/core/utils.js").getSymbolSize;

var FINDER_PATTERN_SIZE = 7;
/**
 * Returns an array containing the positions of each finder pattern.
 * Each array's element represent the top-left point of the pattern as (x, y) coordinates
 *
 * @param  {Number} version QR Code version
 * @return {Array}          Array of coordinates
 */

exports.getPositions = function getPositions(version) {
  var size = getSymbolSize(version);
  return [// top-left
  [0, 0], // top-right
  [size - FINDER_PATTERN_SIZE, 0], // bottom-left
  [0, size - FINDER_PATTERN_SIZE]];
};

/***/ }),

/***/ "./node_modules/qrcode/lib/core/format-info.js":
/*!*****************************************************!*\
  !*** ./node_modules/qrcode/lib/core/format-info.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Utils = __webpack_require__(/*! ./utils */ "./node_modules/qrcode/lib/core/utils.js");

var G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;
var G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;
var G15_BCH = Utils.getBCHDigit(G15);
/**
 * Returns format information with relative error correction bits
 *
 * The format information is a 15-bit sequence containing 5 data bits,
 * with 10 error correction bits calculated using the (15, 5) BCH code.
 *
 * @param  {Number} errorCorrectionLevel Error correction level
 * @param  {Number} mask                 Mask pattern
 * @return {Number}                      Encoded format information bits
 */

exports.getEncodedBits = function getEncodedBits(errorCorrectionLevel, mask) {
  var data = errorCorrectionLevel.bit << 3 | mask;
  var d = data << 10;

  while (Utils.getBCHDigit(d) - G15_BCH >= 0) {
    d ^= G15 << Utils.getBCHDigit(d) - G15_BCH;
  } // xor final data with mask pattern in order to ensure that
  // no combination of Error Correction Level and data mask pattern
  // will result in an all-zero data string


  return (data << 10 | d) ^ G15_MASK;
};

/***/ }),

/***/ "./node_modules/qrcode/lib/core/galois-field.js":
/*!******************************************************!*\
  !*** ./node_modules/qrcode/lib/core/galois-field.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(/*! ../utils/buffer */ "./node_modules/qrcode/lib/utils/typedarray-buffer.js");

var EXP_TABLE = new Buffer(512);
var LOG_TABLE = new Buffer(256)
/**
 * Precompute the log and anti-log tables for faster computation later
 *
 * For each possible value in the galois field 2^8, we will pre-compute
 * the logarithm and anti-logarithm (exponential) of this value
 *
 * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}
 */
;

(function initTables() {
  var x = 1;

  for (var i = 0; i < 255; i++) {
    EXP_TABLE[i] = x;
    LOG_TABLE[x] = i;
    x <<= 1; // multiply by 2
    // The QR code specification says to use byte-wise modulo 100011101 arithmetic.
    // This means that when a number is 256 or larger, it should be XORed with 0x11D.

    if (x & 0x100) {
      // similar to x >= 256, but a lot faster (because 0x100 == 256)
      x ^= 0x11D;
    }
  } // Optimization: double the size of the anti-log table so that we don't need to mod 255 to
  // stay inside the bounds (because we will mainly use this table for the multiplication of
  // two GF numbers, no more).
  // @see {@link mul}


  for (i = 255; i < 512; i++) {
    EXP_TABLE[i] = EXP_TABLE[i - 255];
  }
})();
/**
 * Returns log value of n inside Galois Field
 *
 * @param  {Number} n
 * @return {Number}
 */


exports.log = function log(n) {
  if (n < 1) throw new Error('log(' + n + ')');
  return LOG_TABLE[n];
};
/**
 * Returns anti-log value of n inside Galois Field
 *
 * @param  {Number} n
 * @return {Number}
 */


exports.exp = function exp(n) {
  return EXP_TABLE[n];
};
/**
 * Multiplies two number inside Galois Field
 *
 * @param  {Number} x
 * @param  {Number} y
 * @return {Number}
 */


exports.mul = function mul(x, y) {
  if (x === 0 || y === 0) return 0; // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized
  // @see {@link initTables}

  return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]];
};

/***/ }),

/***/ "./node_modules/qrcode/lib/core/kanji-data.js":
/*!****************************************************!*\
  !*** ./node_modules/qrcode/lib/core/kanji-data.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Mode = __webpack_require__(/*! ./mode */ "./node_modules/qrcode/lib/core/mode.js");

var Utils = __webpack_require__(/*! ./utils */ "./node_modules/qrcode/lib/core/utils.js");

function KanjiData(data) {
  this.mode = Mode.KANJI;
  this.data = data;
}

KanjiData.getBitsLength = function getBitsLength(length) {
  return length * 13;
};

KanjiData.prototype.getLength = function getLength() {
  return this.data.length;
};

KanjiData.prototype.getBitsLength = function getBitsLength() {
  return KanjiData.getBitsLength(this.data.length);
};

KanjiData.prototype.write = function (bitBuffer) {
  var i; // In the Shift JIS system, Kanji characters are represented by a two byte combination.
  // These byte values are shifted from the JIS X 0208 values.
  // JIS X 0208 gives details of the shift coded representation.

  for (i = 0; i < this.data.length; i++) {
    var value = Utils.toSJIS(this.data[i]); // For characters with Shift JIS values from 0x8140 to 0x9FFC:

    if (value >= 0x8140 && value <= 0x9FFC) {
      // Subtract 0x8140 from Shift JIS value
      value -= 0x8140; // For characters with Shift JIS values from 0xE040 to 0xEBBF
    } else if (value >= 0xE040 && value <= 0xEBBF) {
      // Subtract 0xC140 from Shift JIS value
      value -= 0xC140;
    } else {
      throw new Error('Invalid SJIS character: ' + this.data[i] + '\n' + 'Make sure your charset is UTF-8');
    } // Multiply most significant byte of result by 0xC0
    // and add least significant byte to product


    value = (value >>> 8 & 0xff) * 0xC0 + (value & 0xff); // Convert result to a 13-bit binary string

    bitBuffer.put(value, 13);
  }
};

module.exports = KanjiData;

/***/ }),

/***/ "./node_modules/qrcode/lib/core/mask-pattern.js":
/*!******************************************************!*\
  !*** ./node_modules/qrcode/lib/core/mask-pattern.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Data mask pattern reference
 * @type {Object}
 */
exports.Patterns = {
  PATTERN000: 0,
  PATTERN001: 1,
  PATTERN010: 2,
  PATTERN011: 3,
  PATTERN100: 4,
  PATTERN101: 5,
  PATTERN110: 6,
  PATTERN111: 7
  /**
   * Weighted penalty scores for the undesirable features
   * @type {Object}
   */

};
var PenaltyScores = {
  N1: 3,
  N2: 3,
  N3: 40,
  N4: 10
  /**
   * Check if mask pattern value is valid
   *
   * @param  {Number}  mask    Mask pattern
   * @return {Boolean}         true if valid, false otherwise
   */

};

exports.isValid = function isValid(mask) {
  return mask != null && mask !== '' && !isNaN(mask) && mask >= 0 && mask <= 7;
};
/**
 * Returns mask pattern from a value.
 * If value is not valid, returns undefined
 *
 * @param  {Number|String} value        Mask pattern value
 * @return {Number}                     Valid mask pattern or undefined
 */


exports.from = function from(value) {
  return exports.isValid(value) ? parseInt(value, 10) : undefined;
};
/**
* Find adjacent modules in row/column with the same color
* and assign a penalty value.
*
* Points: N1 + i
* i is the amount by which the number of adjacent modules of the same color exceeds 5
*/


exports.getPenaltyN1 = function getPenaltyN1(data) {
  var size = data.size;
  var points = 0;
  var sameCountCol = 0;
  var sameCountRow = 0;
  var lastCol = null;
  var lastRow = null;

  for (var row = 0; row < size; row++) {
    sameCountCol = sameCountRow = 0;
    lastCol = lastRow = null;

    for (var col = 0; col < size; col++) {
      var module = data.get(row, col);

      if (module === lastCol) {
        sameCountCol++;
      } else {
        if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
        lastCol = module;
        sameCountCol = 1;
      }

      module = data.get(col, row);

      if (module === lastRow) {
        sameCountRow++;
      } else {
        if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
        lastRow = module;
        sameCountRow = 1;
      }
    }

    if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);
    if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);
  }

  return points;
};
/**
 * Find 2x2 blocks with the same color and assign a penalty value
 *
 * Points: N2 * (m - 1) * (n - 1)
 */


exports.getPenaltyN2 = function getPenaltyN2(data) {
  var size = data.size;
  var points = 0;

  for (var row = 0; row < size - 1; row++) {
    for (var col = 0; col < size - 1; col++) {
      var last = data.get(row, col) + data.get(row, col + 1) + data.get(row + 1, col) + data.get(row + 1, col + 1);
      if (last === 4 || last === 0) points++;
    }
  }

  return points * PenaltyScores.N2;
};
/**
 * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,
 * preceded or followed by light area 4 modules wide
 *
 * Points: N3 * number of pattern found
 */


exports.getPenaltyN3 = function getPenaltyN3(data) {
  var size = data.size;
  var points = 0;
  var bitsCol = 0;
  var bitsRow = 0;

  for (var row = 0; row < size; row++) {
    bitsCol = bitsRow = 0;

    for (var col = 0; col < size; col++) {
      bitsCol = bitsCol << 1 & 0x7FF | data.get(row, col);
      if (col >= 10 && (bitsCol === 0x5D0 || bitsCol === 0x05D)) points++;
      bitsRow = bitsRow << 1 & 0x7FF | data.get(col, row);
      if (col >= 10 && (bitsRow === 0x5D0 || bitsRow === 0x05D)) points++;
    }
  }

  return points * PenaltyScores.N3;
};
/**
 * Calculate proportion of dark modules in entire symbol
 *
 * Points: N4 * k
 *
 * k is the rating of the deviation of the proportion of dark modules
 * in the symbol from 50% in steps of 5%
 */


exports.getPenaltyN4 = function getPenaltyN4(data) {
  var darkCount = 0;
  var modulesCount = data.data.length;

  for (var i = 0; i < modulesCount; i++) {
    darkCount += data.data[i];
  }

  var k = Math.abs(Math.ceil(darkCount * 100 / modulesCount / 5) - 10);
  return k * PenaltyScores.N4;
};
/**
 * Return mask value at given position
 *
 * @param  {Number} maskPattern Pattern reference value
 * @param  {Number} i           Row
 * @param  {Number} j           Column
 * @return {Boolean}            Mask value
 */


function getMaskAt(maskPattern, i, j) {
  switch (maskPattern) {
    case exports.Patterns.PATTERN000:
      return (i + j) % 2 === 0;

    case exports.Patterns.PATTERN001:
      return i % 2 === 0;

    case exports.Patterns.PATTERN010:
      return j % 3 === 0;

    case exports.Patterns.PATTERN011:
      return (i + j) % 3 === 0;

    case exports.Patterns.PATTERN100:
      return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0;

    case exports.Patterns.PATTERN101:
      return i * j % 2 + i * j % 3 === 0;

    case exports.Patterns.PATTERN110:
      return (i * j % 2 + i * j % 3) % 2 === 0;

    case exports.Patterns.PATTERN111:
      return (i * j % 3 + (i + j) % 2) % 2 === 0;

    default:
      throw new Error('bad maskPattern:' + maskPattern);
  }
}
/**
 * Apply a mask pattern to a BitMatrix
 *
 * @param  {Number}    pattern Pattern reference number
 * @param  {BitMatrix} data    BitMatrix data
 */


exports.applyMask = function applyMask(pattern, data) {
  var size = data.size;

  for (var col = 0; col < size; col++) {
    for (var row = 0; row < size; row++) {
      if (data.isReserved(row, col)) continue;
      data.xor(row, col, getMaskAt(pattern, row, col));
    }
  }
};
/**
 * Returns the best mask pattern for data
 *
 * @param  {BitMatrix} data
 * @return {Number} Mask pattern reference number
 */


exports.getBestMask = function getBestMask(data, setupFormatFunc) {
  var numPatterns = Object.keys(exports.Patterns).length;
  var bestPattern = 0;
  var lowerPenalty = Infinity;

  for (var p = 0; p < numPatterns; p++) {
    setupFormatFunc(p);
    exports.applyMask(p, data); // Calculate penalty

    var penalty = exports.getPenaltyN1(data) + exports.getPenaltyN2(data) + exports.getPenaltyN3(data) + exports.getPenaltyN4(data); // Undo previously applied mask

    exports.applyMask(p, data);

    if (penalty < lowerPenalty) {
      lowerPenalty = penalty;
      bestPattern = p;
    }
  }

  return bestPattern;
};

/***/ }),

/***/ "./node_modules/qrcode/lib/core/mode.js":
/*!**********************************************!*\
  !*** ./node_modules/qrcode/lib/core/mode.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var VersionCheck = __webpack_require__(/*! ./version-check */ "./node_modules/qrcode/lib/core/version-check.js");

var Regex = __webpack_require__(/*! ./regex */ "./node_modules/qrcode/lib/core/regex.js");
/**
 * Numeric mode encodes data from the decimal digit set (0 - 9)
 * (byte values 30HEX to 39HEX).
 * Normally, 3 data characters are represented by 10 bits.
 *
 * @type {Object}
 */


exports.NUMERIC = {
  id: 'Numeric',
  bit: 1 << 0,
  ccBits: [10, 12, 14]
  /**
   * Alphanumeric mode encodes data from a set of 45 characters,
   * i.e. 10 numeric digits (0 - 9),
   *      26 alphabetic characters (A - Z),
   *   and 9 symbols (SP, $, %, *, +, -, ., /, :).
   * Normally, two input characters are represented by 11 bits.
   *
   * @type {Object}
   */

};
exports.ALPHANUMERIC = {
  id: 'Alphanumeric',
  bit: 1 << 1,
  ccBits: [9, 11, 13]
  /**
   * In byte mode, data is encoded at 8 bits per character.
   *
   * @type {Object}
   */

};
exports.BYTE = {
  id: 'Byte',
  bit: 1 << 2,
  ccBits: [8, 16, 16]
  /**
   * The Kanji mode efficiently encodes Kanji characters in accordance with
   * the Shift JIS system based on JIS X 0208.
   * The Shift JIS values are shifted from the JIS X 0208 values.
   * JIS X 0208 gives details of the shift coded representation.
   * Each two-byte character value is compacted to a 13-bit binary codeword.
   *
   * @type {Object}
   */

};
exports.KANJI = {
  id: 'Kanji',
  bit: 1 << 3,
  ccBits: [8, 10, 12]
  /**
   * Mixed mode will contain a sequences of data in a combination of any of
   * the modes described above
   *
   * @type {Object}
   */

};
exports.MIXED = {
  bit: -1
  /**
   * Returns the number of bits needed to store the data length
   * according to QR Code specifications.
   *
   * @param  {Mode}   mode    Data mode
   * @param  {Number} version QR Code version
   * @return {Number}         Number of bits
   */

};

exports.getCharCountIndicator = function getCharCountIndicator(mode, version) {
  if (!mode.ccBits) throw new Error('Invalid mode: ' + mode);

  if (!VersionCheck.isValid(version)) {
    throw new Error('Invalid version: ' + version);
  }

  if (version >= 1 && version < 10) return mode.ccBits[0];else if (version < 27) return mode.ccBits[1];
  return mode.ccBits[2];
};
/**
 * Returns the most efficient mode to store the specified data
 *
 * @param  {String} dataStr Input data string
 * @return {Mode}           Best mode
 */


exports.getBestModeForData = function getBestModeForData(dataStr) {
  if (Regex.testNumeric(dataStr)) return exports.NUMERIC;else if (Regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC;else if (Regex.testKanji(dataStr)) return exports.KANJI;else return exports.BYTE;
};
/**
 * Return mode name as string
 *
 * @param {Mode} mode Mode object
 * @returns {String}  Mode name
 */


exports.toString = function toString(mode) {
  if (mode && mode.id) return mode.id;
  throw new Error('Invalid mode');
};
/**
 * Check if input param is a valid mode object
 *
 * @param   {Mode}    mode Mode object
 * @returns {Boolean} True if valid mode, false otherwise
 */


exports.isValid = function isValid(mode) {
  return mode && mode.bit && mode.ccBits;
};
/**
 * Get mode object from its name
 *
 * @param   {String} string Mode name
 * @returns {Mode}          Mode object
 */


function fromString(string) {
  if (typeof string !== 'string') {
    throw new Error('Param is not a string');
  }

  var lcStr = string.toLowerCase();

  switch (lcStr) {
    case 'numeric':
      return exports.NUMERIC;

    case 'alphanumeric':
      return exports.ALPHANUMERIC;

    case 'kanji':
      return exports.KANJI;

    case 'byte':
      return exports.BYTE;

    default:
      throw new Error('Unknown mode: ' + string);
  }
}
/**
 * Returns mode from a value.
 * If value is not a valid mode, returns defaultValue
 *
 * @param  {Mode|String} value        Encoding mode
 * @param  {Mode}        defaultValue Fallback value
 * @return {Mode}                     Encoding mode
 */


exports.from = function from(value, defaultValue) {
  if (exports.isValid(value)) {
    return value;
  }

  try {
    return fromString(value);
  } catch (e) {
    return defaultValue;
  }
};

/***/ }),

/***/ "./node_modules/qrcode/lib/core/numeric-data.js":
/*!******************************************************!*\
  !*** ./node_modules/qrcode/lib/core/numeric-data.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Mode = __webpack_require__(/*! ./mode */ "./node_modules/qrcode/lib/core/mode.js");

function NumericData(data) {
  this.mode = Mode.NUMERIC;
  this.data = data.toString();
}

NumericData.getBitsLength = function getBitsLength(length) {
  return 10 * Math.floor(length / 3) + (length % 3 ? length % 3 * 3 + 1 : 0);
};

NumericData.prototype.getLength = function getLength() {
  return this.data.length;
};

NumericData.prototype.getBitsLength = function getBitsLength() {
  return NumericData.getBitsLength(this.data.length);
};

NumericData.prototype.write = function write(bitBuffer) {
  var i, group, value; // The input data string is divided into groups of three digits,
  // and each group is converted to its 10-bit binary equivalent.

  for (i = 0; i + 3 <= this.data.length; i += 3) {
    group = this.data.substr(i, 3);
    value = parseInt(group, 10);
    bitBuffer.put(value, 10);
  } // If the number of input digits is not an exact multiple of three,
  // the final one or two digits are converted to 4 or 7 bits respectively.


  var remainingNum = this.data.length - i;

  if (remainingNum > 0) {
    group = this.data.substr(i);
    value = parseInt(group, 10);
    bitBuffer.put(value, remainingNum * 3 + 1);
  }
};

module.exports = NumericData;

/***/ }),

/***/ "./node_modules/qrcode/lib/core/polynomial.js":
/*!****************************************************!*\
  !*** ./node_modules/qrcode/lib/core/polynomial.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(/*! ../utils/buffer */ "./node_modules/qrcode/lib/utils/typedarray-buffer.js");

var GF = __webpack_require__(/*! ./galois-field */ "./node_modules/qrcode/lib/core/galois-field.js");
/**
 * Multiplies two polynomials inside Galois Field
 *
 * @param  {Buffer} p1 Polynomial
 * @param  {Buffer} p2 Polynomial
 * @return {Buffer}    Product of p1 and p2
 */


exports.mul = function mul(p1, p2) {
  var coeff = new Buffer(p1.length + p2.length - 1);
  coeff.fill(0);

  for (var i = 0; i < p1.length; i++) {
    for (var j = 0; j < p2.length; j++) {
      coeff[i + j] ^= GF.mul(p1[i], p2[j]);
    }
  }

  return coeff;
};
/**
 * Calculate the remainder of polynomials division
 *
 * @param  {Buffer} divident Polynomial
 * @param  {Buffer} divisor  Polynomial
 * @return {Buffer}          Remainder
 */


exports.mod = function mod(divident, divisor) {
  var result = new Buffer(divident);

  while (result.length - divisor.length >= 0) {
    var coeff = result[0];

    for (var i = 0; i < divisor.length; i++) {
      result[i] ^= GF.mul(divisor[i], coeff);
    } // remove all zeros from buffer head


    var offset = 0;

    while (offset < result.length && result[offset] === 0) {
      offset++;
    }

    result = result.slice(offset);
  }

  return result;
};
/**
 * Generate an irreducible generator polynomial of specified degree
 * (used by Reed-Solomon encoder)
 *
 * @param  {Number} degree Degree of the generator polynomial
 * @return {Buffer}        Buffer containing polynomial coefficients
 */


exports.generateECPolynomial = function generateECPolynomial(degree) {
  var poly = new Buffer([1]);

  for (var i = 0; i < degree; i++) {
    poly = exports.mul(poly, [1, GF.exp(i)]);
  }

  return poly;
};

/***/ }),

/***/ "./node_modules/qrcode/lib/core/qrcode.js":
/*!************************************************!*\
  !*** ./node_modules/qrcode/lib/core/qrcode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(/*! ../utils/buffer */ "./node_modules/qrcode/lib/utils/typedarray-buffer.js");

var Utils = __webpack_require__(/*! ./utils */ "./node_modules/qrcode/lib/core/utils.js");

var ECLevel = __webpack_require__(/*! ./error-correction-level */ "./node_modules/qrcode/lib/core/error-correction-level.js");

var BitBuffer = __webpack_require__(/*! ./bit-buffer */ "./node_modules/qrcode/lib/core/bit-buffer.js");

var BitMatrix = __webpack_require__(/*! ./bit-matrix */ "./node_modules/qrcode/lib/core/bit-matrix.js");

var AlignmentPattern = __webpack_require__(/*! ./alignment-pattern */ "./node_modules/qrcode/lib/core/alignment-pattern.js");

var FinderPattern = __webpack_require__(/*! ./finder-pattern */ "./node_modules/qrcode/lib/core/finder-pattern.js");

var MaskPattern = __webpack_require__(/*! ./mask-pattern */ "./node_modules/qrcode/lib/core/mask-pattern.js");

var ECCode = __webpack_require__(/*! ./error-correction-code */ "./node_modules/qrcode/lib/core/error-correction-code.js");

var ReedSolomonEncoder = __webpack_require__(/*! ./reed-solomon-encoder */ "./node_modules/qrcode/lib/core/reed-solomon-encoder.js");

var Version = __webpack_require__(/*! ./version */ "./node_modules/qrcode/lib/core/version.js");

var FormatInfo = __webpack_require__(/*! ./format-info */ "./node_modules/qrcode/lib/core/format-info.js");

var Mode = __webpack_require__(/*! ./mode */ "./node_modules/qrcode/lib/core/mode.js");

var Segments = __webpack_require__(/*! ./segments */ "./node_modules/qrcode/lib/core/segments.js");

var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js");
/**
 * QRCode for JavaScript
 *
 * modified by Ryan Day for nodejs support
 * Copyright (c) 2011 Ryan Day
 *
 * Licensed under the MIT license:
 *   http://www.opensource.org/licenses/mit-license.php
 *
//---------------------------------------------------------------------
// QRCode for JavaScript
//
// Copyright (c) 2009 Kazuhiko Arase
//
// URL: http://www.d-project.com/
//
// Licensed under the MIT license:
//   http://www.opensource.org/licenses/mit-license.php
//
// The word "QR Code" is registered trademark of
// DENSO WAVE INCORPORATED
//   http://www.denso-wave.com/qrcode/faqpatent-e.html
//
//---------------------------------------------------------------------
*/

/**
 * Add finder patterns bits to matrix
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */


function setupFinderPattern(matrix, version) {
  var size = matrix.size;
  var pos = FinderPattern.getPositions(version);

  for (var i = 0; i < pos.length; i++) {
    var row = pos[i][0];
    var col = pos[i][1];

    for (var r = -1; r <= 7; r++) {
      if (row + r <= -1 || size <= row + r) continue;

      for (var c = -1; c <= 7; c++) {
        if (col + c <= -1 || size <= col + c) continue;

        if (r >= 0 && r <= 6 && (c === 0 || c === 6) || c >= 0 && c <= 6 && (r === 0 || r === 6) || r >= 2 && r <= 4 && c >= 2 && c <= 4) {
          matrix.set(row + r, col + c, true, true);
        } else {
          matrix.set(row + r, col + c, false, true);
        }
      }
    }
  }
}
/**
 * Add timing pattern bits to matrix
 *
 * Note: this function must be called before {@link setupAlignmentPattern}
 *
 * @param  {BitMatrix} matrix Modules matrix
 */


function setupTimingPattern(matrix) {
  var size = matrix.size;

  for (var r = 8; r < size - 8; r++) {
    var value = r % 2 === 0;
    matrix.set(r, 6, value, true);
    matrix.set(6, r, value, true);
  }
}
/**
 * Add alignment patterns bits to matrix
 *
 * Note: this function must be called after {@link setupTimingPattern}
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */


function setupAlignmentPattern(matrix, version) {
  var pos = AlignmentPattern.getPositions(version);

  for (var i = 0; i < pos.length; i++) {
    var row = pos[i][0];
    var col = pos[i][1];

    for (var r = -2; r <= 2; r++) {
      for (var c = -2; c <= 2; c++) {
        if (r === -2 || r === 2 || c === -2 || c === 2 || r === 0 && c === 0) {
          matrix.set(row + r, col + c, true, true);
        } else {
          matrix.set(row + r, col + c, false, true);
        }
      }
    }
  }
}
/**
 * Add version info bits to matrix
 *
 * @param  {BitMatrix} matrix  Modules matrix
 * @param  {Number}    version QR Code version
 */


function setupVersionInfo(matrix, version) {
  var size = matrix.size;
  var bits = Version.getEncodedBits(version);
  var row, col, mod;

  for (var i = 0; i < 18; i++) {
    row = Math.floor(i / 3);
    col = i % 3 + size - 8 - 3;
    mod = (bits >> i & 1) === 1;
    matrix.set(row, col, mod, true);
    matrix.set(col, row, mod, true);
  }
}
/**
 * Add format info bits to matrix
 *
 * @param  {BitMatrix} matrix               Modules matrix
 * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level
 * @param  {Number}    maskPattern          Mask pattern reference value
 */


function setupFormatInfo(matrix, errorCorrectionLevel, maskPattern) {
  var size = matrix.size;
  var bits = FormatInfo.getEncodedBits(errorCorrectionLevel, maskPattern);
  var i, mod;

  for (i = 0; i < 15; i++) {
    mod = (bits >> i & 1) === 1; // vertical

    if (i < 6) {
      matrix.set(i, 8, mod, true);
    } else if (i < 8) {
      matrix.set(i + 1, 8, mod, true);
    } else {
      matrix.set(size - 15 + i, 8, mod, true);
    } // horizontal


    if (i < 8) {
      matrix.set(8, size - i - 1, mod, true);
    } else if (i < 9) {
      matrix.set(8, 15 - i - 1 + 1, mod, true);
    } else {
      matrix.set(8, 15 - i - 1, mod, true);
    }
  } // fixed module


  matrix.set(size - 8, 8, 1, true);
}
/**
 * Add encoded data bits to matrix
 *
 * @param  {BitMatrix} matrix Modules matrix
 * @param  {Buffer}    data   Data codewords
 */


function setupData(matrix, data) {
  var size = matrix.size;
  var inc = -1;
  var row = size - 1;
  var bitIndex = 7;
  var byteIndex = 0;

  for (var col = size - 1; col > 0; col -= 2) {
    if (col === 6) col--;

    while (true) {
      for (var c = 0; c < 2; c++) {
        if (!matrix.isReserved(row, col - c)) {
          var dark = false;

          if (byteIndex < data.length) {
            dark = (data[byteIndex] >>> bitIndex & 1) === 1;
          }

          matrix.set(row, col - c, dark);
          bitIndex--;

          if (bitIndex === -1) {
            byteIndex++;
            bitIndex = 7;
          }
        }
      }

      row += inc;

      if (row < 0 || size <= row) {
        row -= inc;
        inc = -inc;
        break;
      }
    }
  }
}
/**
 * Create encoded codewords from data input
 *
 * @param  {Number}   version              QR Code version
 * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level
 * @param  {ByteData} data                 Data input
 * @return {Buffer}                        Buffer containing encoded codewords
 */


function createData(version, errorCorrectionLevel, segments) {
  // Prepare data buffer
  var buffer = new BitBuffer();
  segments.forEach(function (data) {
    // prefix data with mode indicator (4 bits)
    buffer.put(data.mode.bit, 4); // Prefix data with character count indicator.
    // The character count indicator is a string of bits that represents the
    // number of characters that are being encoded.
    // The character count indicator must be placed after the mode indicator
    // and must be a certain number of bits long, depending on the QR version
    // and data mode
    // @see {@link Mode.getCharCountIndicator}.

    buffer.put(data.getLength(), Mode.getCharCountIndicator(data.mode, version)); // add binary data sequence to buffer

    data.write(buffer);
  }); // Calculate required number of bits

  var totalCodewords = Utils.getSymbolTotalCodewords(version);
  var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);
  var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8; // Add a terminator.
  // If the bit string is shorter than the total number of required bits,
  // a terminator of up to four 0s must be added to the right side of the string.
  // If the bit string is more than four bits shorter than the required number of bits,
  // add four 0s to the end.

  if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {
    buffer.put(0, 4);
  } // If the bit string is fewer than four bits shorter, add only the number of 0s that
  // are needed to reach the required number of bits.
  // After adding the terminator, if the number of bits in the string is not a multiple of 8,
  // pad the string on the right with 0s to make the string's length a multiple of 8.


  while (buffer.getLengthInBits() % 8 !== 0) {
    buffer.putBit(0);
  } // Add pad bytes if the string is still shorter than the total number of required bits.
  // Extend the buffer to fill the data capacity of the symbol corresponding to
  // the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)
  // and 00010001 (0x11) alternately.


  var remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8;

  for (var i = 0; i < remainingByte; i++) {
    buffer.put(i % 2 ? 0x11 : 0xEC, 8);
  }

  return createCodewords(buffer, version, errorCorrectionLevel);
}
/**
 * Encode input data with Reed-Solomon and return codewords with
 * relative error correction bits
 *
 * @param  {BitBuffer} bitBuffer            Data to encode
 * @param  {Number}    version              QR Code version
 * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level
 * @return {Buffer}                         Buffer containing encoded codewords
 */


function createCodewords(bitBuffer, version, errorCorrectionLevel) {
  // Total codewords for this QR code version (Data + Error correction)
  var totalCodewords = Utils.getSymbolTotalCodewords(version); // Total number of error correction codewords

  var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel); // Total number of data codewords

  var dataTotalCodewords = totalCodewords - ecTotalCodewords; // Total number of blocks

  var ecTotalBlocks = ECCode.getBlocksCount(version, errorCorrectionLevel); // Calculate how many blocks each group should contain

  var blocksInGroup2 = totalCodewords % ecTotalBlocks;
  var blocksInGroup1 = ecTotalBlocks - blocksInGroup2;
  var totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks);
  var dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks);
  var dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1; // Number of EC codewords is the same for both groups

  var ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1; // Initialize a Reed-Solomon encoder with a generator polynomial of degree ecCount

  var rs = new ReedSolomonEncoder(ecCount);
  var offset = 0;
  var dcData = new Array(ecTotalBlocks);
  var ecData = new Array(ecTotalBlocks);
  var maxDataSize = 0;
  var buffer = new Buffer(bitBuffer.buffer); // Divide the buffer into the required number of blocks

  for (var b = 0; b < ecTotalBlocks; b++) {
    var dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2; // extract a block of data from buffer

    dcData[b] = buffer.slice(offset, offset + dataSize); // Calculate EC codewords for this data block

    ecData[b] = rs.encode(dcData[b]);
    offset += dataSize;
    maxDataSize = Math.max(maxDataSize, dataSize);
  } // Create final data
  // Interleave the data and error correction codewords from each block


  var data = new Buffer(totalCodewords);
  var index = 0;
  var i, r; // Add data codewords

  for (i = 0; i < maxDataSize; i++) {
    for (r = 0; r < ecTotalBlocks; r++) {
      if (i < dcData[r].length) {
        data[index++] = dcData[r][i];
      }
    }
  } // Apped EC codewords


  for (i = 0; i < ecCount; i++) {
    for (r = 0; r < ecTotalBlocks; r++) {
      data[index++] = ecData[r][i];
    }
  }

  return data;
}
/**
 * Build QR Code symbol
 *
 * @param  {String} data                 Input string
 * @param  {Number} version              QR Code version
 * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level
 * @param  {MaskPattern} maskPattern     Mask pattern
 * @return {Object}                      Object containing symbol data
 */


function createSymbol(data, version, errorCorrectionLevel, maskPattern) {
  var segments;

  if (isArray(data)) {
    segments = Segments.fromArray(data);
  } else if (typeof data === 'string') {
    var estimatedVersion = version;

    if (!estimatedVersion) {
      var rawSegments = Segments.rawSplit(data); // Estimate best version that can contain raw splitted segments

      estimatedVersion = Version.getBestVersionForData(rawSegments, errorCorrectionLevel);
    } // Build optimized segments
    // If estimated version is undefined, try with the highest version


    segments = Segments.fromString(data, estimatedVersion || 40);
  } else {
    throw new Error('Invalid data');
  } // Get the min version that can contain data


  var bestVersion = Version.getBestVersionForData(segments, errorCorrectionLevel); // If no version is found, data cannot be stored

  if (!bestVersion) {
    throw new Error('The amount of data is too big to be stored in a QR Code');
  } // If not specified, use min version as default


  if (!version) {
    version = bestVersion; // Check if the specified version can contain the data
  } else if (version < bestVersion) {
    throw new Error('\n' + 'The chosen QR Code version cannot contain this amount of data.\n' + 'Minimum version required to store current data is: ' + bestVersion + '.\n');
  }

  var dataBits = createData(version, errorCorrectionLevel, segments); // Allocate matrix buffer

  var moduleCount = Utils.getSymbolSize(version);
  var modules = new BitMatrix(moduleCount); // Add function modules

  setupFinderPattern(modules, version);
  setupTimingPattern(modules);
  setupAlignmentPattern(modules, version); // Add temporary dummy bits for format info just to set them as reserved.
  // This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}
  // since the masking operation must be performed only on the encoding region.
  // These blocks will be replaced with correct values later in code.

  setupFormatInfo(modules, errorCorrectionLevel, 0);

  if (version >= 7) {
    setupVersionInfo(modules, version);
  } // Add data codewords


  setupData(modules, dataBits);

  if (isNaN(maskPattern)) {
    // Find best mask pattern
    maskPattern = MaskPattern.getBestMask(modules, setupFormatInfo.bind(null, modules, errorCorrectionLevel));
  } // Apply mask pattern


  MaskPattern.applyMask(maskPattern, modules); // Replace format info bits with correct values

  setupFormatInfo(modules, errorCorrectionLevel, maskPattern);
  return {
    modules: modules,
    version: version,
    errorCorrectionLevel: errorCorrectionLevel,
    maskPattern: maskPattern,
    segments: segments
  };
}
/**
 * QR Code
 *
 * @param {String | Array} data                 Input data
 * @param {Object} options                      Optional configurations
 * @param {Number} options.version              QR Code version
 * @param {String} options.errorCorrectionLevel Error correction level
 * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis
 */


exports.create = function create(data, options) {
  if (typeof data === 'undefined' || data === '') {
    throw new Error('No input text');
  }

  var errorCorrectionLevel = ECLevel.M;
  var version;
  var mask;

  if (typeof options !== 'undefined') {
    // Use higher error correction level as default
    errorCorrectionLevel = ECLevel.from(options.errorCorrectionLevel, ECLevel.M);
    version = Version.from(options.version);
    mask = MaskPattern.from(options.maskPattern);

    if (options.toSJISFunc) {
      Utils.setToSJISFunction(options.toSJISFunc);
    }
  }

  return createSymbol(data, version, errorCorrectionLevel, mask);
};

/***/ }),

/***/ "./node_modules/qrcode/lib/core/reed-solomon-encoder.js":
/*!**************************************************************!*\
  !*** ./node_modules/qrcode/lib/core/reed-solomon-encoder.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(/*! ../utils/buffer */ "./node_modules/qrcode/lib/utils/typedarray-buffer.js");

var Polynomial = __webpack_require__(/*! ./polynomial */ "./node_modules/qrcode/lib/core/polynomial.js");

function ReedSolomonEncoder(degree) {
  this.genPoly = undefined;
  this.degree = degree;
  if (this.degree) this.initialize(this.degree);
}
/**
 * Initialize the encoder.
 * The input param should correspond to the number of error correction codewords.
 *
 * @param  {Number} degree
 */


ReedSolomonEncoder.prototype.initialize = function initialize(degree) {
  // create an irreducible generator polynomial
  this.degree = degree;
  this.genPoly = Polynomial.generateECPolynomial(this.degree);
};
/**
 * Encodes a chunk of data
 *
 * @param  {Buffer} data Buffer containing input data
 * @return {Buffer}      Buffer containing encoded data
 */


ReedSolomonEncoder.prototype.encode = function encode(data) {
  if (!this.genPoly) {
    throw new Error('Encoder not initialized');
  } // Calculate EC for this data block
  // extends data size to data+genPoly size


  var pad = new Buffer(this.degree);
  pad.fill(0);
  var paddedData = Buffer.concat([data, pad], data.length + this.degree); // The error correction codewords are the remainder after dividing the data codewords
  // by a generator polynomial

  var remainder = Polynomial.mod(paddedData, this.genPoly); // return EC data blocks (last n byte, where n is the degree of genPoly)
  // If coefficients number in remainder are less than genPoly degree,
  // pad with 0s to the left to reach the needed number of coefficients

  var start = this.degree - remainder.length;

  if (start > 0) {
    var buff = new Buffer(this.degree);
    buff.fill(0);
    remainder.copy(buff, start);
    return buff;
  }

  return remainder;
};

module.exports = ReedSolomonEncoder;

/***/ }),

/***/ "./node_modules/qrcode/lib/core/regex.js":
/*!***********************************************!*\
  !*** ./node_modules/qrcode/lib/core/regex.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var numeric = '[0-9]+';
var alphanumeric = '[A-Z $%*+\\-./:]+';
var kanji = '(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|' + '[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|' + '[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|' + '[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+';
kanji = kanji.replace(/u/g, "\\u");
var byte = '(?:(?![A-Z0-9 $%*+\\-./:]|' + kanji + ').)+';
exports.KANJI = new RegExp(kanji, 'g');
exports.BYTE_KANJI = new RegExp('[^A-Z0-9 $%*+\\-./:]+', 'g');
exports.BYTE = new RegExp(byte, 'g');
exports.NUMERIC = new RegExp(numeric, 'g');
exports.ALPHANUMERIC = new RegExp(alphanumeric, 'g');
var TEST_KANJI = new RegExp('^' + kanji + '$');
var TEST_NUMERIC = new RegExp('^' + numeric + '$');
var TEST_ALPHANUMERIC = new RegExp('^[A-Z0-9 $%*+\\-./:]+$');

exports.testKanji = function testKanji(str) {
  return TEST_KANJI.test(str);
};

exports.testNumeric = function testNumeric(str) {
  return TEST_NUMERIC.test(str);
};

exports.testAlphanumeric = function testAlphanumeric(str) {
  return TEST_ALPHANUMERIC.test(str);
};

/***/ }),

/***/ "./node_modules/qrcode/lib/core/segments.js":
/*!**************************************************!*\
  !*** ./node_modules/qrcode/lib/core/segments.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Mode = __webpack_require__(/*! ./mode */ "./node_modules/qrcode/lib/core/mode.js");

var NumericData = __webpack_require__(/*! ./numeric-data */ "./node_modules/qrcode/lib/core/numeric-data.js");

var AlphanumericData = __webpack_require__(/*! ./alphanumeric-data */ "./node_modules/qrcode/lib/core/alphanumeric-data.js");

var ByteData = __webpack_require__(/*! ./byte-data */ "./node_modules/qrcode/lib/core/byte-data.js");

var KanjiData = __webpack_require__(/*! ./kanji-data */ "./node_modules/qrcode/lib/core/kanji-data.js");

var Regex = __webpack_require__(/*! ./regex */ "./node_modules/qrcode/lib/core/regex.js");

var Utils = __webpack_require__(/*! ./utils */ "./node_modules/qrcode/lib/core/utils.js");

var dijkstra = __webpack_require__(/*! dijkstrajs */ "./node_modules/dijkstrajs/dijkstra.js");
/**
 * Returns UTF8 byte length
 *
 * @param  {String} str Input string
 * @return {Number}     Number of byte
 */


function getStringByteLength(str) {
  return unescape(encodeURIComponent(str)).length;
}
/**
 * Get a list of segments of the specified mode
 * from a string
 *
 * @param  {Mode}   mode Segment mode
 * @param  {String} str  String to process
 * @return {Array}       Array of object with segments data
 */


function getSegments(regex, mode, str) {
  var segments = [];
  var result;

  while ((result = regex.exec(str)) !== null) {
    segments.push({
      data: result[0],
      index: result.index,
      mode: mode,
      length: result[0].length
    });
  }

  return segments;
}
/**
 * Extracts a series of segments with the appropriate
 * modes from a string
 *
 * @param  {String} dataStr Input string
 * @return {Array}          Array of object with segments data
 */


function getSegmentsFromString(dataStr) {
  var numSegs = getSegments(Regex.NUMERIC, Mode.NUMERIC, dataStr);
  var alphaNumSegs = getSegments(Regex.ALPHANUMERIC, Mode.ALPHANUMERIC, dataStr);
  var byteSegs;
  var kanjiSegs;

  if (Utils.isKanjiModeEnabled()) {
    byteSegs = getSegments(Regex.BYTE, Mode.BYTE, dataStr);
    kanjiSegs = getSegments(Regex.KANJI, Mode.KANJI, dataStr);
  } else {
    byteSegs = getSegments(Regex.BYTE_KANJI, Mode.BYTE, dataStr);
    kanjiSegs = [];
  }

  var segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs);
  return segs.sort(function (s1, s2) {
    return s1.index - s2.index;
  }).map(function (obj) {
    return {
      data: obj.data,
      mode: obj.mode,
      length: obj.length
    };
  });
}
/**
 * Returns how many bits are needed to encode a string of
 * specified length with the specified mode
 *
 * @param  {Number} length String length
 * @param  {Mode} mode     Segment mode
 * @return {Number}        Bit length
 */


function getSegmentBitsLength(length, mode) {
  switch (mode) {
    case Mode.NUMERIC:
      return NumericData.getBitsLength(length);

    case Mode.ALPHANUMERIC:
      return AlphanumericData.getBitsLength(length);

    case Mode.KANJI:
      return KanjiData.getBitsLength(length);

    case Mode.BYTE:
      return ByteData.getBitsLength(length);
  }
}
/**
 * Merges adjacent segments which have the same mode
 *
 * @param  {Array} segs Array of object with segments data
 * @return {Array}      Array of object with segments data
 */


function mergeSegments(segs) {
  return segs.reduce(function (acc, curr) {
    var prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null;

    if (prevSeg && prevSeg.mode === curr.mode) {
      acc[acc.length - 1].data += curr.data;
      return acc;
    }

    acc.push(curr);
    return acc;
  }, []);
}
/**
 * Generates a list of all possible nodes combination which
 * will be used to build a segments graph.
 *
 * Nodes are divided by groups. Each group will contain a list of all the modes
 * in which is possible to encode the given text.
 *
 * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.
 * The group for '12345' will contain then 3 objects, one for each
 * possible encoding mode.
 *
 * Each node represents a possible segment.
 *
 * @param  {Array} segs Array of object with segments data
 * @return {Array}      Array of object with segments data
 */


function buildNodes(segs) {
  var nodes = [];

  for (var i = 0; i < segs.length; i++) {
    var seg = segs[i];

    switch (seg.mode) {
      case Mode.NUMERIC:
        nodes.push([seg, {
          data: seg.data,
          mode: Mode.ALPHANUMERIC,
          length: seg.length
        }, {
          data: seg.data,
          mode: Mode.BYTE,
          length: seg.length
        }]);
        break;

      case Mode.ALPHANUMERIC:
        nodes.push([seg, {
          data: seg.data,
          mode: Mode.BYTE,
          length: seg.length
        }]);
        break;

      case Mode.KANJI:
        nodes.push([seg, {
          data: seg.data,
          mode: Mode.BYTE,
          length: getStringByteLength(seg.data)
        }]);
        break;

      case Mode.BYTE:
        nodes.push([{
          data: seg.data,
          mode: Mode.BYTE,
          length: getStringByteLength(seg.data)
        }]);
    }
  }

  return nodes;
}
/**
 * Builds a graph from a list of nodes.
 * All segments in each node group will be connected with all the segments of
 * the next group and so on.
 *
 * At each connection will be assigned a weight depending on the
 * segment's byte length.
 *
 * @param  {Array} nodes    Array of object with segments data
 * @param  {Number} version QR Code version
 * @return {Object}         Graph of all possible segments
 */


function buildGraph(nodes, version) {
  var table = {};
  var graph = {
    'start': {}
  };
  var prevNodeIds = ['start'];

  for (var i = 0; i < nodes.length; i++) {
    var nodeGroup = nodes[i];
    var currentNodeIds = [];

    for (var j = 0; j < nodeGroup.length; j++) {
      var node = nodeGroup[j];
      var key = '' + i + j;
      currentNodeIds.push(key);
      table[key] = {
        node: node,
        lastCount: 0
      };
      graph[key] = {};

      for (var n = 0; n < prevNodeIds.length; n++) {
        var prevNodeId = prevNodeIds[n];

        if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {
          graph[prevNodeId][key] = getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) - getSegmentBitsLength(table[prevNodeId].lastCount, node.mode);
          table[prevNodeId].lastCount += node.length;
        } else {
          if (table[prevNodeId]) table[prevNodeId].lastCount = node.length;
          graph[prevNodeId][key] = getSegmentBitsLength(node.length, node.mode) + 4 + Mode.getCharCountIndicator(node.mode, version); // switch cost
        }
      }
    }

    prevNodeIds = currentNodeIds;
  }

  for (n = 0; n < prevNodeIds.length; n++) {
    graph[prevNodeIds[n]]['end'] = 0;
  }

  return {
    map: graph,
    table: table
  };
}
/**
 * Builds a segment from a specified data and mode.
 * If a mode is not specified, the more suitable will be used.
 *
 * @param  {String} data             Input data
 * @param  {Mode | String} modesHint Data mode
 * @return {Segment}                 Segment
 */


function buildSingleSegment(data, modesHint) {
  var mode;
  var bestMode = Mode.getBestModeForData(data);
  mode = Mode.from(modesHint, bestMode); // Make sure data can be encoded

  if (mode !== Mode.BYTE && mode.bit < bestMode.bit) {
    throw new Error('"' + data + '"' + ' cannot be encoded with mode ' + Mode.toString(mode) + '.\n Suggested mode is: ' + Mode.toString(bestMode));
  } // Use Mode.BYTE if Kanji support is disabled


  if (mode === Mode.KANJI && !Utils.isKanjiModeEnabled()) {
    mode = Mode.BYTE;
  }

  switch (mode) {
    case Mode.NUMERIC:
      return new NumericData(data);

    case Mode.ALPHANUMERIC:
      return new AlphanumericData(data);

    case Mode.KANJI:
      return new KanjiData(data);

    case Mode.BYTE:
      return new ByteData(data);
  }
}
/**
 * Builds a list of segments from an array.
 * Array can contain Strings or Objects with segment's info.
 *
 * For each item which is a string, will be generated a segment with the given
 * string and the more appropriate encoding mode.
 *
 * For each item which is an object, will be generated a segment with the given
 * data and mode.
 * Objects must contain at least the property "data".
 * If property "mode" is not present, the more suitable mode will be used.
 *
 * @param  {Array} array Array of objects with segments data
 * @return {Array}       Array of Segments
 */


exports.fromArray = function fromArray(array) {
  return array.reduce(function (acc, seg) {
    if (typeof seg === 'string') {
      acc.push(buildSingleSegment(seg, null));
    } else if (seg.data) {
      acc.push(buildSingleSegment(seg.data, seg.mode));
    }

    return acc;
  }, []);
};
/**
 * Builds an optimized sequence of segments from a string,
 * which will produce the shortest possible bitstream.
 *
 * @param  {String} data    Input string
 * @param  {Number} version QR Code version
 * @return {Array}          Array of segments
 */


exports.fromString = function fromString(data, version) {
  var segs = getSegmentsFromString(data, Utils.isKanjiModeEnabled());
  var nodes = buildNodes(segs);
  var graph = buildGraph(nodes, version);
  var path = dijkstra.find_path(graph.map, 'start', 'end');
  var optimizedSegs = [];

  for (var i = 1; i < path.length - 1; i++) {
    optimizedSegs.push(graph.table[path[i]].node);
  }

  return exports.fromArray(mergeSegments(optimizedSegs));
};
/**
 * Splits a string in various segments with the modes which
 * best represent their content.
 * The produced segments are far from being optimized.
 * The output of this function is only used to estimate a QR Code version
 * which may contain the data.
 *
 * @param  {string} data Input string
 * @return {Array}       Array of segments
 */


exports.rawSplit = function rawSplit(data) {
  return exports.fromArray(getSegmentsFromString(data, Utils.isKanjiModeEnabled()));
};

/***/ }),

/***/ "./node_modules/qrcode/lib/core/utils.js":
/*!***********************************************!*\
  !*** ./node_modules/qrcode/lib/core/utils.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toSJISFunction;
var CODEWORDS_COUNT = [0, // Not used
26, 44, 70, 100, 134, 172, 196, 242, 292, 346, 404, 466, 532, 581, 655, 733, 815, 901, 991, 1085, 1156, 1258, 1364, 1474, 1588, 1706, 1828, 1921, 2051, 2185, 2323, 2465, 2611, 2761, 2876, 3034, 3196, 3362, 3532, 3706];
/**
 * Returns the QR Code size for the specified version
 *
 * @param  {Number} version QR Code version
 * @return {Number}         size of QR code
 */

exports.getSymbolSize = function getSymbolSize(version) {
  if (!version) throw new Error('"version" cannot be null or undefined');
  if (version < 1 || version > 40) throw new Error('"version" should be in range from 1 to 40');
  return version * 4 + 17;
};
/**
 * Returns the total number of codewords used to store data and EC information.
 *
 * @param  {Number} version QR Code version
 * @return {Number}         Data length in bits
 */


exports.getSymbolTotalCodewords = function getSymbolTotalCodewords(version) {
  return CODEWORDS_COUNT[version];
};
/**
 * Encode data with Bose-Chaudhuri-Hocquenghem
 *
 * @param  {Number} data Value to encode
 * @return {Number}      Encoded value
 */


exports.getBCHDigit = function (data) {
  var digit = 0;

  while (data !== 0) {
    digit++;
    data >>>= 1;
  }

  return digit;
};

exports.setToSJISFunction = function setToSJISFunction(f) {
  if (typeof f !== 'function') {
    throw new Error('"toSJISFunc" is not a valid function.');
  }

  toSJISFunction = f;
};

exports.isKanjiModeEnabled = function () {
  return typeof toSJISFunction !== 'undefined';
};

exports.toSJIS = function toSJIS(kanji) {
  return toSJISFunction(kanji);
};

/***/ }),

/***/ "./node_modules/qrcode/lib/core/version-check.js":
/*!*******************************************************!*\
  !*** ./node_modules/qrcode/lib/core/version-check.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Check if QR Code version is valid
 *
 * @param  {Number}  version QR Code version
 * @return {Boolean}         true if valid version, false otherwise
 */
exports.isValid = function isValid(version) {
  return !isNaN(version) && version >= 1 && version <= 40;
};

/***/ }),

/***/ "./node_modules/qrcode/lib/core/version.js":
/*!*************************************************!*\
  !*** ./node_modules/qrcode/lib/core/version.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Utils = __webpack_require__(/*! ./utils */ "./node_modules/qrcode/lib/core/utils.js");

var ECCode = __webpack_require__(/*! ./error-correction-code */ "./node_modules/qrcode/lib/core/error-correction-code.js");

var ECLevel = __webpack_require__(/*! ./error-correction-level */ "./node_modules/qrcode/lib/core/error-correction-level.js");

var Mode = __webpack_require__(/*! ./mode */ "./node_modules/qrcode/lib/core/mode.js");

var VersionCheck = __webpack_require__(/*! ./version-check */ "./node_modules/qrcode/lib/core/version-check.js");

var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js"); // Generator polynomial used to encode version information


var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;
var G18_BCH = Utils.getBCHDigit(G18);

function getBestVersionForDataLength(mode, length, errorCorrectionLevel) {
  for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {
      return currentVersion;
    }
  }

  return undefined;
}

function getReservedBitsCount(mode, version) {
  // Character count indicator + mode indicator bits
  return Mode.getCharCountIndicator(mode, version) + 4;
}

function getTotalBitsFromDataArray(segments, version) {
  var totalBits = 0;
  segments.forEach(function (data) {
    var reservedBits = getReservedBitsCount(data.mode, version);
    totalBits += reservedBits + data.getBitsLength();
  });
  return totalBits;
}

function getBestVersionForMixedData(segments, errorCorrectionLevel) {
  for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {
    var length = getTotalBitsFromDataArray(segments, currentVersion);

    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {
      return currentVersion;
    }
  }

  return undefined;
}
/**
 * Returns version number from a value.
 * If value is not a valid version, returns defaultValue
 *
 * @param  {Number|String} value        QR Code version
 * @param  {Number}        defaultValue Fallback value
 * @return {Number}                     QR Code version number
 */


exports.from = function from(value, defaultValue) {
  if (VersionCheck.isValid(value)) {
    return parseInt(value, 10);
  }

  return defaultValue;
};
/**
 * Returns how much data can be stored with the specified QR code version
 * and error correction level
 *
 * @param  {Number} version              QR Code version (1-40)
 * @param  {Number} errorCorrectionLevel Error correction level
 * @param  {Mode}   mode                 Data mode
 * @return {Number}                      Quantity of storable data
 */


exports.getCapacity = function getCapacity(version, errorCorrectionLevel, mode) {
  if (!VersionCheck.isValid(version)) {
    throw new Error('Invalid QR Code version');
  } // Use Byte mode as default


  if (typeof mode === 'undefined') mode = Mode.BYTE; // Total codewords for this QR code version (Data + Error correction)

  var totalCodewords = Utils.getSymbolTotalCodewords(version); // Total number of error correction codewords

  var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel); // Total number of data codewords

  var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;
  if (mode === Mode.MIXED) return dataTotalCodewordsBits;
  var usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version); // Return max number of storable codewords

  switch (mode) {
    case Mode.NUMERIC:
      return Math.floor(usableBits / 10 * 3);

    case Mode.ALPHANUMERIC:
      return Math.floor(usableBits / 11 * 2);

    case Mode.KANJI:
      return Math.floor(usableBits / 13);

    case Mode.BYTE:
    default:
      return Math.floor(usableBits / 8);
  }
};
/**
 * Returns the minimum version needed to contain the amount of data
 *
 * @param  {Segment} data                    Segment of data
 * @param  {Number} [errorCorrectionLevel=H] Error correction level
 * @param  {Mode} mode                       Data mode
 * @return {Number}                          QR Code version
 */


exports.getBestVersionForData = function getBestVersionForData(data, errorCorrectionLevel) {
  var seg;
  var ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M);

  if (isArray(data)) {
    if (data.length > 1) {
      return getBestVersionForMixedData(data, ecl);
    }

    if (data.length === 0) {
      return 1;
    }

    seg = data[0];
  } else {
    seg = data;
  }

  return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl);
};
/**
 * Returns version information with relative error correction bits
 *
 * The version information is included in QR Code symbols of version 7 or larger.
 * It consists of an 18-bit sequence containing 6 data bits,
 * with 12 error correction bits calculated using the (18, 6) Golay code.
 *
 * @param  {Number} version QR Code version
 * @return {Number}         Encoded version info bits
 */


exports.getEncodedBits = function getEncodedBits(version) {
  if (!VersionCheck.isValid(version) || version < 7) {
    throw new Error('Invalid QR Code version');
  }

  var d = version << 12;

  while (Utils.getBCHDigit(d) - G18_BCH >= 0) {
    d ^= G18 << Utils.getBCHDigit(d) - G18_BCH;
  }

  return version << 12 | d;
};

/***/ }),

/***/ "./node_modules/qrcode/lib/renderer/canvas.js":
/*!****************************************************!*\
  !*** ./node_modules/qrcode/lib/renderer/canvas.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Utils = __webpack_require__(/*! ./utils */ "./node_modules/qrcode/lib/renderer/utils.js");

function clearCanvas(ctx, canvas, size) {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  if (!canvas.style) canvas.style = {};
  canvas.height = size;
  canvas.width = size;
  canvas.style.height = size + 'px';
  canvas.style.width = size + 'px';
}

function getCanvasElement() {
  try {
    return document.createElement('canvas');
  } catch (e) {
    throw new Error('You need to specify a canvas element');
  }
}

exports.render = function render(qrData, canvas, options) {
  var opts = options;
  var canvasEl = canvas;

  if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
    opts = canvas;
    canvas = undefined;
  }

  if (!canvas) {
    canvasEl = getCanvasElement();
  }

  opts = Utils.getOptions(opts);
  var size = Utils.getImageWidth(qrData.modules.size, opts);
  var ctx = canvasEl.getContext('2d');
  var image = ctx.createImageData(size, size);
  Utils.qrToImageData(image.data, qrData, opts);
  clearCanvas(ctx, canvasEl, size);
  ctx.putImageData(image, 0, 0);
  return canvasEl;
};

exports.renderToDataURL = function renderToDataURL(qrData, canvas, options) {
  var opts = options;

  if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {
    opts = canvas;
    canvas = undefined;
  }

  if (!opts) opts = {};
  var canvasEl = exports.render(qrData, canvas, opts);
  var type = opts.type || 'image/png';
  var rendererOpts = opts.rendererOpts || {};
  return canvasEl.toDataURL(type, rendererOpts.quality);
};

/***/ }),

/***/ "./node_modules/qrcode/lib/renderer/svg-tag.js":
/*!*****************************************************!*\
  !*** ./node_modules/qrcode/lib/renderer/svg-tag.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Utils = __webpack_require__(/*! ./utils */ "./node_modules/qrcode/lib/renderer/utils.js");

function getColorAttrib(color, attrib) {
  var alpha = color.a / 255;
  var str = attrib + '="' + color.hex + '"';
  return alpha < 1 ? str + ' ' + attrib + '-opacity="' + alpha.toFixed(2).slice(1) + '"' : str;
}

function svgCmd(cmd, x, y) {
  var str = cmd + x;
  if (typeof y !== 'undefined') str += ' ' + y;
  return str;
}

function qrToPath(data, size, margin) {
  var path = '';
  var moveBy = 0;
  var newRow = false;
  var lineLength = 0;

  for (var i = 0; i < data.length; i++) {
    var col = Math.floor(i % size);
    var row = Math.floor(i / size);
    if (!col && !newRow) newRow = true;

    if (data[i]) {
      lineLength++;

      if (!(i > 0 && col > 0 && data[i - 1])) {
        path += newRow ? svgCmd('M', col + margin, 0.5 + row + margin) : svgCmd('m', moveBy, 0);
        moveBy = 0;
        newRow = false;
      }

      if (!(col + 1 < size && data[i + 1])) {
        path += svgCmd('h', lineLength);
        lineLength = 0;
      }
    } else {
      moveBy++;
    }
  }

  return path;
}

exports.render = function render(qrData, options, cb) {
  var opts = Utils.getOptions(options);
  var size = qrData.modules.size;
  var data = qrData.modules.data;
  var qrcodesize = size + opts.margin * 2;
  var bg = !opts.color.light.a ? '' : '<path ' + getColorAttrib(opts.color.light, 'fill') + ' d="M0 0h' + qrcodesize + 'v' + qrcodesize + 'H0z"/>';
  var path = '<path ' + getColorAttrib(opts.color.dark, 'stroke') + ' d="' + qrToPath(data, size, opts.margin) + '"/>';
  var viewBox = 'viewBox="' + '0 0 ' + qrcodesize + ' ' + qrcodesize + '"';
  var width = !opts.width ? '' : 'width="' + opts.width + '" height="' + opts.width + '" ';
  var svgTag = '<svg xmlns="http://www.w3.org/2000/svg" ' + width + viewBox + ' shape-rendering="crispEdges">' + bg + path + '</svg>';

  if (typeof cb === 'function') {
    cb(null, svgTag);
  }

  return svgTag;
};

/***/ }),

/***/ "./node_modules/qrcode/lib/renderer/utils.js":
/*!***************************************************!*\
  !*** ./node_modules/qrcode/lib/renderer/utils.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function hex2rgba(hex) {
  if (typeof hex !== 'string') {
    throw new Error('Color should be defined as hex string');
  }

  var hexCode = hex.slice().replace('#', '').split('');

  if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {
    throw new Error('Invalid hex color: ' + hex);
  } // Convert from short to long form (fff -> ffffff)


  if (hexCode.length === 3 || hexCode.length === 4) {
    hexCode = Array.prototype.concat.apply([], hexCode.map(function (c) {
      return [c, c];
    }));
  } // Add default alpha value


  if (hexCode.length === 6) hexCode.push('F', 'F');
  var hexValue = parseInt(hexCode.join(''), 16);
  return {
    r: hexValue >> 24 & 255,
    g: hexValue >> 16 & 255,
    b: hexValue >> 8 & 255,
    a: hexValue & 255,
    hex: '#' + hexCode.slice(0, 6).join('')
  };
}

exports.getOptions = function getOptions(options) {
  if (!options) options = {};
  if (!options.color) options.color = {};
  var margin = typeof options.margin === 'undefined' || options.margin === null || options.margin < 0 ? 4 : options.margin;
  var width = options.width && options.width >= 21 ? options.width : undefined;
  var scale = options.scale || 4;
  return {
    width: width,
    scale: width ? 4 : scale,
    margin: margin,
    color: {
      dark: hex2rgba(options.color.dark || '#000000ff'),
      light: hex2rgba(options.color.light || '#ffffffff')
    },
    type: options.type,
    rendererOpts: options.rendererOpts || {}
  };
};

exports.getScale = function getScale(qrSize, opts) {
  return opts.width && opts.width >= qrSize + opts.margin * 2 ? opts.width / (qrSize + opts.margin * 2) : opts.scale;
};

exports.getImageWidth = function getImageWidth(qrSize, opts) {
  var scale = exports.getScale(qrSize, opts);
  return Math.floor((qrSize + opts.margin * 2) * scale);
};

exports.qrToImageData = function qrToImageData(imgData, qr, opts) {
  var size = qr.modules.size;
  var data = qr.modules.data;
  var scale = exports.getScale(size, opts);
  var symbolSize = Math.floor((size + opts.margin * 2) * scale);
  var scaledMargin = opts.margin * scale;
  var palette = [opts.color.light, opts.color.dark];

  for (var i = 0; i < symbolSize; i++) {
    for (var j = 0; j < symbolSize; j++) {
      var posDst = (i * symbolSize + j) * 4;
      var pxColor = opts.color.light;

      if (i >= scaledMargin && j >= scaledMargin && i < symbolSize - scaledMargin && j < symbolSize - scaledMargin) {
        var iSrc = Math.floor((i - scaledMargin) / scale);
        var jSrc = Math.floor((j - scaledMargin) / scale);
        pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0];
      }

      imgData[posDst++] = pxColor.r;
      imgData[posDst++] = pxColor.g;
      imgData[posDst++] = pxColor.b;
      imgData[posDst] = pxColor.a;
    }
  }
};

/***/ }),

/***/ "./node_modules/qrcode/lib/utils/typedarray-buffer.js":
/*!************************************************************!*\
  !*** ./node_modules/qrcode/lib/utils/typedarray-buffer.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Implementation of a subset of node.js Buffer methods for the browser.
 * Based on https://github.com/feross/buffer
 */

/* eslint-disable no-proto */


var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js");

function typedArraySupport() {
  // Can typed array instances be augmented?
  try {
    var arr = new Uint8Array(1);
    arr.__proto__ = {
      __proto__: Uint8Array.prototype,
      foo: function foo() {
        return 42;
      }
    };
    return arr.foo() === 42;
  } catch (e) {
    return false;
  }
}

Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
var K_MAX_LENGTH = Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;

function Buffer(arg, offset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, offset, length);
  }

  if (typeof arg === 'number') {
    return allocUnsafe(this, arg);
  }

  return from(this, arg, offset, length);
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype;
  Buffer.__proto__ = Uint8Array; // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97

  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true,
      enumerable: false,
      writable: false
    });
  }
}

function checked(length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
  }

  return length | 0;
}

function isnan(val) {
  return val !== val; // eslint-disable-line no-self-compare
}

function createBuffer(that, length) {
  var buf;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    buf = new Uint8Array(length);
    buf.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    buf = that;

    if (buf === null) {
      buf = new Buffer(length);
    }

    buf.length = length;
  }

  return buf;
}

function allocUnsafe(that, size) {
  var buf = createBuffer(that, size < 0 ? 0 : checked(size) | 0);

  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      buf[i] = 0;
    }
  }

  return buf;
}

function fromString(that, string) {
  var length = byteLength(string) | 0;
  var buf = createBuffer(that, length);
  var actual = buf.write(string);

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
  }

  return buf;
}

function fromArrayLike(that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0;
  var buf = createBuffer(that, length);

  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255;
  }

  return buf;
}

function fromArrayBuffer(that, array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds');
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds');
  }

  var buf;

  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array);
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset);
  } else {
    buf = new Uint8Array(array, byteOffset, length);
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    buf.__proto__ = Buffer.prototype;
  } else {
    // Fallback: Return an object instance of the Buffer class
    buf = fromArrayLike(that, buf);
  }

  return buf;
}

function fromObject(that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0;
    var buf = createBuffer(that, len);

    if (buf.length === 0) {
      return buf;
    }

    obj.copy(buf, 0, 0, len);
    return buf;
  }

  if (obj) {
    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0);
      }

      return fromArrayLike(that, obj);
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(that, obj.data);
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
}

function utf8ToBytes(string, units) {
  units = units || Infinity;
  var codePoint;
  var length = string.length;
  var leadSurrogate = null;
  var bytes = [];

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i); // is surrogate component

    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
          continue;
        } // valid lead


        leadSurrogate = codePoint;
        continue;
      } // 2 leads in a row


      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        leadSurrogate = codePoint;
        continue;
      } // valid surrogate pair


      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
    }

    leadSurrogate = null; // encode utf8

    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break;
      bytes.push(codePoint);
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break;
      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break;
      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break;
      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
    } else {
      throw new Error('Invalid code point');
    }
  }

  return bytes;
}

function byteLength(string) {
  if (Buffer.isBuffer(string)) {
    return string.length;
  }

  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength;
  }

  if (typeof string !== 'string') {
    string = '' + string;
  }

  var len = string.length;
  if (len === 0) return 0;
  return utf8ToBytes(string).length;
}

function blitBuffer(src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if (i + offset >= dst.length || i >= src.length) break;
    dst[i + offset] = src[i];
  }

  return i;
}

function utf8Write(buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}

function from(that, value, offset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number');
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, offset, length);
  }

  if (typeof value === 'string') {
    return fromString(that, value, offset);
  }

  return fromObject(that, value);
}

Buffer.prototype.write = function write(string, offset, length) {
  // Buffer#write(string)
  if (offset === undefined) {
    length = this.length;
    offset = 0; // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    length = this.length;
    offset = 0; // Buffer#write(string, offset[, length])
  } else if (isFinite(offset)) {
    offset = offset | 0;

    if (isFinite(length)) {
      length = length | 0;
    } else {
      length = undefined;
    }
  }

  var remaining = this.length - offset;
  if (length === undefined || length > remaining) length = remaining;

  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds');
  }

  return utf8Write(this, string, offset, length);
};

Buffer.prototype.slice = function slice(start, end) {
  var len = this.length;
  start = ~~start;
  end = end === undefined ? len : ~~end;

  if (start < 0) {
    start += len;
    if (start < 0) start = 0;
  } else if (start > len) {
    start = len;
  }

  if (end < 0) {
    end += len;
    if (end < 0) end = 0;
  } else if (end > len) {
    end = len;
  }

  if (end < start) end = start;
  var newBuf;

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end); // Return an augmented `Uint8Array` instance

    newBuf.__proto__ = Buffer.prototype;
  } else {
    var sliceLen = end - start;
    newBuf = new Buffer(sliceLen, undefined);

    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start];
    }
  }

  return newBuf;
};

Buffer.prototype.copy = function copy(target, targetStart, start, end) {
  if (!start) start = 0;
  if (!end && end !== 0) end = this.length;
  if (targetStart >= target.length) targetStart = target.length;
  if (!targetStart) targetStart = 0;
  if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

  if (end === start) return 0;
  if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds');
  }

  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
  if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

  if (end > this.length) end = this.length;

  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start;
  }

  var len = end - start;
  var i;

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start];
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start];
    }
  } else {
    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
  }

  return len;
};

Buffer.prototype.fill = function fill(val, start, end) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      start = 0;
      end = this.length;
    } else if (typeof end === 'string') {
      end = this.length;
    }

    if (val.length === 1) {
      var code = val.charCodeAt(0);

      if (code < 256) {
        val = code;
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255;
  } // Invalid ranges are not set to a default, so can range check early.


  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index');
  }

  if (end <= start) {
    return this;
  }

  start = start >>> 0;
  end = end === undefined ? this.length : end >>> 0;
  if (!val) val = 0;
  var i;

  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val;
    }
  } else {
    var bytes = Buffer.isBuffer(val) ? val : new Buffer(val);
    var len = bytes.length;

    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len];
    }
  }

  return this;
};

Buffer.concat = function concat(list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers');
  }

  if (list.length === 0) {
    return createBuffer(null, 0);
  }

  var i;

  if (length === undefined) {
    length = 0;

    for (i = 0; i < list.length; ++i) {
      length += list[i].length;
    }
  }

  var buffer = allocUnsafe(null, length);
  var pos = 0;

  for (i = 0; i < list.length; ++i) {
    var buf = list[i];

    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers');
    }

    buf.copy(buffer, pos);
    pos += buf.length;
  }

  return buffer;
};

Buffer.byteLength = byteLength;
Buffer.prototype._isBuffer = true;

Buffer.isBuffer = function isBuffer(b) {
  return !!(b != null && b._isBuffer);
};

module.exports = Buffer;

/***/ }),

/***/ "./node_modules/randombytes/browser.js":
/*!*********************************************!*\
  !*** ./node_modules/randombytes/browser.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

function oldBrowser() {
  throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11');
}

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var crypto = global.crypto || global.msCrypto;

if (crypto && crypto.getRandomValues) {
  module.exports = randomBytes;
} else {
  module.exports = oldBrowser;
}

function randomBytes(size, cb) {
  // phantomjs needs to throw
  if (size > 65536) throw new Error('requested too many random bytes'); // in case browserify  isn't using the Uint8Array version

  var rawBytes = new global.Uint8Array(size); // This will not work in older browsers.
  // See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues

  if (size > 0) {
    // getRandomValues fails on IE if size == 0
    crypto.getRandomValues(rawBytes);
  } // XXX: phantomjs doesn't like a buffer being passed here


  var bytes = Buffer.from(rawBytes.buffer);

  if (typeof cb === 'function') {
    return process.nextTick(function () {
      cb(null, bytes);
    });
  }

  return bytes;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/randomfill/browser.js":
/*!********************************************!*\
  !*** ./node_modules/randomfill/browser.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {

function oldBrowser() {
  throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11');
}

var safeBuffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js");

var randombytes = __webpack_require__(/*! randombytes */ "./node_modules/randombytes/browser.js");

var Buffer = safeBuffer.Buffer;
var kBufferMaxLength = safeBuffer.kMaxLength;
var crypto = global.crypto || global.msCrypto;
var kMaxUint32 = Math.pow(2, 32) - 1;

function assertOffset(offset, length) {
  if (typeof offset !== 'number' || offset !== offset) {
    // eslint-disable-line no-self-compare
    throw new TypeError('offset must be a number');
  }

  if (offset > kMaxUint32 || offset < 0) {
    throw new TypeError('offset must be a uint32');
  }

  if (offset > kBufferMaxLength || offset > length) {
    throw new RangeError('offset out of range');
  }
}

function assertSize(size, offset, length) {
  if (typeof size !== 'number' || size !== size) {
    // eslint-disable-line no-self-compare
    throw new TypeError('size must be a number');
  }

  if (size > kMaxUint32 || size < 0) {
    throw new TypeError('size must be a uint32');
  }

  if (size + offset > length || size > kBufferMaxLength) {
    throw new RangeError('buffer too small');
  }
}

if (crypto && crypto.getRandomValues || !process.browser) {
  exports.randomFill = randomFill;
  exports.randomFillSync = randomFillSync;
} else {
  exports.randomFill = oldBrowser;
  exports.randomFillSync = oldBrowser;
}

function randomFill(buf, offset, size, cb) {
  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
  }

  if (typeof offset === 'function') {
    cb = offset;
    offset = 0;
    size = buf.length;
  } else if (typeof size === 'function') {
    cb = size;
    size = buf.length - offset;
  } else if (typeof cb !== 'function') {
    throw new TypeError('"cb" argument must be a function');
  }

  assertOffset(offset, buf.length);
  assertSize(size, offset, buf.length);
  return actualFill(buf, offset, size, cb);
}

function actualFill(buf, offset, size, cb) {
  if (process.browser) {
    var ourBuf = buf.buffer;
    var uint = new Uint8Array(ourBuf, offset, size);
    crypto.getRandomValues(uint);

    if (cb) {
      process.nextTick(function () {
        cb(null, buf);
      });
      return;
    }

    return buf;
  }

  if (cb) {
    randombytes(size, function (err, bytes) {
      if (err) {
        return cb(err);
      }

      bytes.copy(buf, offset);
      cb(null, buf);
    });
    return;
  }

  var bytes = randombytes(size);
  bytes.copy(buf, offset);
  return buf;
}

function randomFillSync(buf, offset, size) {
  if (typeof offset === 'undefined') {
    offset = 0;
  }

  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {
    throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
  }

  assertOffset(offset, buf.length);
  if (size === undefined) size = buf.length - offset;
  assertSize(size, offset, buf.length);
  return actualFill(buf, offset, size);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/readable-stream/duplex-browser.js":
/*!********************************************************!*\
  !*** ./node_modules/readable-stream/duplex-browser.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/_stream_duplex.js */ "./node_modules/readable-stream/lib/_stream_duplex.js");

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_duplex.js":
/*!************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_duplex.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js");
/*</replacement>*/

/*<replacement>*/


var objectKeys = Object.keys || function (obj) {
  var keys = [];

  for (var key in obj) {
    keys.push(key);
  }

  return keys;
};
/*</replacement>*/


module.exports = Duplex;
/*<replacement>*/

var util = __webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js");

util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

var Readable = __webpack_require__(/*! ./_stream_readable */ "./node_modules/readable-stream/lib/_stream_readable.js");

var Writable = __webpack_require__(/*! ./_stream_writable */ "./node_modules/readable-stream/lib/_stream_writable.js");

util.inherits(Duplex, Readable);
{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);

  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);
  Readable.call(this, options);
  Writable.call(this, options);
  if (options && options.readable === false) this.readable = false;
  if (options && options.writable === false) this.writable = false;
  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // the no-half-open enforcer

function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return; // no more data can be written.
  // But allow more writes to happen in this tick.

  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function get() {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }

    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();
  pna.nextTick(cb, err);
};

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_passthrough.js":
/*!*****************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_passthrough.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.


module.exports = PassThrough;

var Transform = __webpack_require__(/*! ./_stream_transform */ "./node_modules/readable-stream/lib/_stream_transform.js");
/*<replacement>*/


var util = __webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js");

util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);
  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_readable.js":
/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_readable.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js");
/*</replacement>*/


module.exports = Readable;
/*<replacement>*/

var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js");
/*</replacement>*/

/*<replacement>*/


var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;
/*<replacement>*/

var EE = __webpack_require__(/*! events */ "./node_modules/events/events.js").EventEmitter;

var EElistenerCount = function EElistenerCount(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/


var Stream = __webpack_require__(/*! ./internal/streams/stream */ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js");
/*</replacement>*/

/*<replacement>*/


var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/

/*<replacement>*/


var util = __webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js");

util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

/*<replacement>*/

var debugUtil = __webpack_require__(/*! util */ 0);

var debug = void 0;

if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function debug() {};
}
/*</replacement>*/


var BufferList = __webpack_require__(/*! ./internal/streams/BufferList */ "./node_modules/readable-stream/lib/internal/streams/BufferList.js");

var destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ "./node_modules/readable-stream/lib/internal/streams/destroy.js");

var StringDecoder;
util.inherits(Readable, Stream);
var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.

  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  var isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"

  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm; // cast to ints.

  this.highWaterMark = Math.floor(this.highWaterMark); // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()

  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.

  this.sync = true; // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.

  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false; // has it been destroyed

  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

  this.readingMore = false;
  this.decoder = null;
  this.encoding = null;

  if (options.encoding) {
    if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ "./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");
  if (!(this instanceof Readable)) return new Readable(options);
  this._readableState = new ReadableState(options, this); // legacy

  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function get() {
    if (this._readableState === undefined) {
      return false;
    }

    return this._readableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._readableState.destroyed = value;
  }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;

Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.


Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;

      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }

      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()


Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;

  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);

    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;

        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
    if (state.needReadable) emitReadable(stream);
  }

  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;

  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }

  return er;
} // if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.


function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
}; // backwards compatibility.


Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = __webpack_require__(/*! string_decoder/ */ "./node_modules/string_decoder/lib/string_decoder.js").StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
}; // Don't raise the hwm > 8MB


var MAX_HWM = 0x800000;

function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }

  return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.


function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;

  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  } // If we're asking for more than the current hwm, then raise the hwm.


  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n; // Don't have enough

  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }

  return state.length;
} // you can override either this method, or the async _read(n) below.


Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;
  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.

  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  } // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.
  // if we need a readable event, then we need to do some reading.


  var doRead = state.needReadable;
  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  } // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.


  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true; // if the length is currently zero, then we *need* a readable event.

    if (state.length === 0) state.needReadable = true; // call internal read method

    this._read(state.highWaterMark);

    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.

    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);
  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;

  if (state.decoder) {
    var chunk = state.decoder.end();

    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }

  state.ended = true; // emit 'readable' now to make sure it gets picked up.

  emitReadable(stream);
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.


function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;

  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.


function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;

  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length) // didn't get any data, stop spinning.
      break;else len = state.length;
  }

  state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.


Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;

    case 1:
      state.pipes = [state.pipes, dest];
      break;

    default:
      state.pipes.push(dest);
      break;
  }

  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);
  dest.on('unpipe', onunpipe);

  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');

    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  } // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.


  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);
  var cleanedUp = false;

  function cleanup() {
    debug('cleanup'); // cleanup event handlers once the pipe is broken

    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);
    cleanedUp = true; // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.

    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  } // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.


  var increasedAwaitDrain = false;
  src.on('data', ondata);

  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);

    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }

      src.pause();
    }
  } // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.


  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  } // Make sure our error handler is attached before userland ones.


  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }

  dest.once('close', onclose);

  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }

  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  } // tell the dest that it's being piped to


  dest.emit('pipe', src); // start the flow if it hasn't been started already.

  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;

    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = {
    hasUnpiped: false
  }; // if we're not piping anywhere, then do nothing.

  if (state.pipesCount === 0) return this; // just one destination.  most common case.

  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;
    if (!dest) dest = state.pipes; // got a match.

    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  } // slow case. multiple pipe destinations.


  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }

    return this;
  } // try to find the right one.


  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;
  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];
  dest.emit('unpipe', this, unpipeInfo);
  return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something


Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;

    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;

      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};

Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.


Readable.prototype.resume = function () {
  var state = this._readableState;

  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }

  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);

  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }

  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);

  while (state.flowing && stream.read() !== null) {}
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.


Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;
  stream.on('end', function () {
    debug('wrapped end');

    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });
  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);

    if (!ret) {
      paused = true;
      stream.pause();
    }
  }); // proxy all the other methods.
  // important when wrapping filters and duplexes.

  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  } // proxy certain important events.


  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  } // when we try to consume some more bytes, simply unpause the
  // underlying stream.


  this._read = function (n) {
    debug('wrapped _read', n);

    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._readableState.highWaterMark;
  }
}); // exposed for testing purposes only.

Readable._fromList = fromList; // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.

function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;
  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }
  return ret;
} // Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.


function fromListPartial(n, list, hasStrings) {
  var ret;

  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }

  return ret;
} // Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.


function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;

  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;

    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }

      break;
    }

    ++c;
  }

  list.length -= c;
  return ret;
} // Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.


function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;

  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;

    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }

      break;
    }

    ++c;
  }

  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState; // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.

  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }

  return -1;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_transform.js":
/*!***************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_transform.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.


module.exports = Transform;

var Duplex = __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");
/*<replacement>*/


var util = __webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js");

util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;
  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;
  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
  cb(er);
  var rs = this._readableState;
  rs.reading = false;

  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);
  Duplex.call(this, options);
  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }; // start out asking for a readable event once data is transformed.

  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.

  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;
    if (typeof options.flush === 'function') this._flush = options.flush;
  } // When the writable side finishes, then flush out anything remaining.


  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.


Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;

  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.


Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;

    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);

    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);
  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data); // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided

  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');
  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');
  return stream.push(null);
}

/***/ }),

/***/ "./node_modules/readable-stream/lib/_stream_writable.js":
/*!**************************************************************!*\
  !*** ./node_modules/readable-stream/lib/_stream_writable.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js");
/*</replacement>*/


module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/

var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var util = __webpack_require__(/*! core-util-is */ "./node_modules/core-util-is/lib/util.js");

util.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");
/*</replacement>*/

/*<replacement>*/

var internalUtil = {
  deprecate: __webpack_require__(/*! util-deprecate */ "./node_modules/util-deprecate/browser.js")
};
/*</replacement>*/

/*<replacement>*/

var Stream = __webpack_require__(/*! ./internal/streams/stream */ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js");
/*</replacement>*/

/*<replacement>*/


var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/


var destroyImpl = __webpack_require__(/*! ./internal/streams/destroy */ "./node_modules/readable-stream/lib/internal/streams/destroy.js");

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js");
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  var isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm; // cast to ints.

  this.highWaterMark = Math.floor(this.highWaterMark); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function value(object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function realHasInstance(object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || __webpack_require__(/*! ./_stream_duplex */ "./node_modules/readable-stream/lib/_stream_duplex.js"); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.

  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end'); // TODO: defer error events consistently everywhere, not just the cb

  stream.emit('error', er);
  pna.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }

  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }

  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;
  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function get() {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      stream.emit('error', err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }

  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function get() {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function set(value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js"), __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/BufferList.js":
/*!*************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/BufferList.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var util = __webpack_require__(/*! util */ 1);

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = {
      data: v,
      next: null
    };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = {
      data: v,
      next: this.head
    };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;

    while (p = p.next) {
      ret += s + p.data;
    }

    return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;

    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }

    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({
      length: this.length
    });
    return this.constructor.name + ' ' + obj;
  };
}

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/destroy.js":
/*!**********************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/destroy.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*<replacement>*/

var pna = __webpack_require__(/*! process-nextick-args */ "./node_modules/process-nextick-args/index.js");
/*</replacement>*/
// undocumented cb() API, needed for core, not for public API


function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }

    return this;
  } // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks


  if (this._readableState) {
    this._readableState.destroyed = true;
  } // if this is a duplex stream mark the writable part as destroyed as well


  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);

      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};

/***/ }),

/***/ "./node_modules/readable-stream/lib/internal/streams/stream-browser.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/readable-stream/lib/internal/streams/stream-browser.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! events */ "./node_modules/events/events.js").EventEmitter;

/***/ }),

/***/ "./node_modules/readable-stream/passthrough.js":
/*!*****************************************************!*\
  !*** ./node_modules/readable-stream/passthrough.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./readable */ "./node_modules/readable-stream/readable-browser.js").PassThrough;

/***/ }),

/***/ "./node_modules/readable-stream/readable-browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/readable-stream/readable-browser.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ./lib/_stream_readable.js */ "./node_modules/readable-stream/lib/_stream_readable.js");
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = __webpack_require__(/*! ./lib/_stream_writable.js */ "./node_modules/readable-stream/lib/_stream_writable.js");
exports.Duplex = __webpack_require__(/*! ./lib/_stream_duplex.js */ "./node_modules/readable-stream/lib/_stream_duplex.js");
exports.Transform = __webpack_require__(/*! ./lib/_stream_transform.js */ "./node_modules/readable-stream/lib/_stream_transform.js");
exports.PassThrough = __webpack_require__(/*! ./lib/_stream_passthrough.js */ "./node_modules/readable-stream/lib/_stream_passthrough.js");

/***/ }),

/***/ "./node_modules/readable-stream/transform.js":
/*!***************************************************!*\
  !*** ./node_modules/readable-stream/transform.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./readable */ "./node_modules/readable-stream/readable-browser.js").Transform;

/***/ }),

/***/ "./node_modules/readable-stream/writable-browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/readable-stream/writable-browser.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./lib/_stream_writable.js */ "./node_modules/readable-stream/lib/_stream_writable.js");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
!function (global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.

  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  var inModule = ( false ? undefined : _typeof(module)) === "object";
  var runtime = global.regeneratorRuntime;

  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    } // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.


    return;
  } // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.


  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.

    generator._invoke = makeInvokeMethod(innerFn, self, context);
    return generator;
  }

  runtime.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.

  var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.


  var IteratorPrototype = {};

  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

  if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction"; // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      prototype[method] = function (arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
    // do is to check its .name property.
    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  runtime.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;

      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }

    genFun.prototype = Object.create(Gp);
    return genFun;
  }; // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.


  runtime.awrap = function (arg) {
    return {
      __await: arg
    };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;

        if (value && _typeof(value) === "object" && hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function (unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function (error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = // If enqueue has been called before, then we want to wait until
      // all previous Promises have been resolved before calling invoke,
      // so that results are always delivered in the correct order. If
      // enqueue has not been called before, then it is important to
      // call invoke immediately, without waiting on a callback to fire,
      // so that the async generator function has the opportunity to do
      // any necessary setup in a predictable way. This predictability
      // is why the Promise constructor synchronously invokes its
      // executor callback, and why async functions synchronously
      // execute code before the first await. Since we implement simple
      // async functions in terms of async generators, it is especially
      // important to get this right, even though it requires care.
      previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
      // invocations of the iterator.
      callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    } // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).


    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };

  runtime.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.

  runtime.async = function (innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
    return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
    : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;
    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        } // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;

        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);

          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;
        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);
        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;
        var record = tryCatch(innerFn, self, context);

        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };
        } else if (record.type === "throw") {
          state = GenStateCompleted; // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.

          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  } // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.


  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (!info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

      context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.

      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }
    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    } // The delegate iterator is finished, so forget it and continue with
    // the outer generator.


    context.delegate = null;
    return ContinueSentinel;
  } // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.


  defineIteratorMethods(Gp);
  Gp[toStringTagSymbol] = "Generator"; // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.

  Gp[iteratorSymbol] = function () {
    return this;
  };

  Gp.toString = function () {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{
      tryLoc: "root"
    }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function (object) {
    var keys = [];

    for (var key in object) {
      keys.push(key);
    }

    keys.reverse(); // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.

    return function next() {
      while (keys.length) {
        var key = keys.pop();

        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      } // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.


      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];

      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;
          return next;
        };

        return next.next = next;
      }
    } // Return an iterator with no values.


    return {
      next: doneResult
    };
  }

  runtime.values = values;

  function doneResult() {
    return {
      value: undefined,
      done: true
    };
  }

  Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      this.prev = 0;
      this.next = 0; // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.

      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;
      this.method = "next";
      this.arg = undefined;
      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },
    stop: function stop() {
      this.done = true;
      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;

      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;

      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      } // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.


      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
}( // In sloppy mode, unbound `this` refers to the global object, fallback to
// Function constructor if we're in global strict mode. That is sadly a form
// of indirect eval which violates Content Security Policy.
function () {
  return this || (typeof self === "undefined" ? "undefined" : _typeof(self)) === "object" && self;
}() || Function("return this")());
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/ripemd160/index.js":
/*!*****************************************!*\
  !*** ./node_modules/ripemd160/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js").Buffer;

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var HashBase = __webpack_require__(/*! hash-base */ "./node_modules/hash-base/index.js");

var ARRAY16 = new Array(16);
var zl = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
var zr = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
var sl = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
var sr = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
var hl = [0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e];
var hr = [0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000];

function RIPEMD160() {
  HashBase.call(this, 64); // state

  this._a = 0x67452301;
  this._b = 0xefcdab89;
  this._c = 0x98badcfe;
  this._d = 0x10325476;
  this._e = 0xc3d2e1f0;
}

inherits(RIPEMD160, HashBase);

RIPEMD160.prototype._update = function () {
  var words = ARRAY16;

  for (var j = 0; j < 16; ++j) {
    words[j] = this._block.readInt32LE(j * 4);
  }

  var al = this._a | 0;
  var bl = this._b | 0;
  var cl = this._c | 0;
  var dl = this._d | 0;
  var el = this._e | 0;
  var ar = this._a | 0;
  var br = this._b | 0;
  var cr = this._c | 0;
  var dr = this._d | 0;
  var er = this._e | 0; // computation

  for (var i = 0; i < 80; i += 1) {
    var tl;
    var tr;

    if (i < 16) {
      tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
      tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
    } else if (i < 32) {
      tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
      tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
    } else if (i < 48) {
      tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
      tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
    } else if (i < 64) {
      tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
      tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
    } else {
      // if (i<80) {
      tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
      tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
    }

    al = el;
    el = dl;
    dl = rotl(cl, 10);
    cl = bl;
    bl = tl;
    ar = er;
    er = dr;
    dr = rotl(cr, 10);
    cr = br;
    br = tr;
  } // update state


  var t = this._b + cl + dr | 0;
  this._b = this._c + dl + er | 0;
  this._c = this._d + el + ar | 0;
  this._d = this._e + al + br | 0;
  this._e = this._a + bl + cr | 0;
  this._a = t;
};

RIPEMD160.prototype._digest = function () {
  // create padding and handle blocks
  this._block[this._blockOffset++] = 0x80;

  if (this._blockOffset > 56) {
    this._block.fill(0, this._blockOffset, 64);

    this._update();

    this._blockOffset = 0;
  }

  this._block.fill(0, this._blockOffset, 56);

  this._block.writeUInt32LE(this._length[0], 56);

  this._block.writeUInt32LE(this._length[1], 60);

  this._update(); // produce result


  var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20);
  buffer.writeInt32LE(this._a, 0);
  buffer.writeInt32LE(this._b, 4);
  buffer.writeInt32LE(this._c, 8);
  buffer.writeInt32LE(this._d, 12);
  buffer.writeInt32LE(this._e, 16);
  return buffer;
};

function rotl(x, n) {
  return x << n | x >>> 32 - n;
}

function fn1(a, b, c, d, e, m, k, s) {
  return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
}

function fn2(a, b, c, d, e, m, k, s) {
  return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
}

function fn3(a, b, c, d, e, m, k, s) {
  return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
}

function fn4(a, b, c, d, e, m, k, s) {
  return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
}

function fn5(a, b, c, d, e, m, k, s) {
  return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
}

module.exports = RIPEMD160;

/***/ }),

/***/ "./node_modules/safe-buffer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/safe-buffer/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js");

var Buffer = buffer.Buffer; // alternative to using Object.keys for old browsers

function copyProps(src, dst) {
  for (var key in src) {
    dst[key] = src[key];
  }
}

if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer;
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports);
  exports.Buffer = SafeBuffer;
}

function SafeBuffer(arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length);
} // Copy static methods from Buffer


copyProps(Buffer, SafeBuffer);

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number');
  }

  return Buffer(arg, encodingOrOffset, length);
};

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  var buf = Buffer(size);

  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }
  } else {
    buf.fill(0);
  }

  return buf;
};

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  return Buffer(size);
};

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number');
  }

  return buffer.SlowBuffer(size);
};

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
  "use strict";

  if (global.setImmediate) {
    return;
  }

  var nextHandle = 1; // Spec says greater than zero

  var tasksByHandle = {};
  var currentlyRunningATask = false;
  var doc = global.document;
  var registerImmediate;

  function setImmediate(callback) {
    // Callback can either be a function or a string
    if (typeof callback !== "function") {
      callback = new Function("" + callback);
    } // Copy function arguments


    var args = new Array(arguments.length - 1);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i + 1];
    } // Store and register the task


    var task = {
      callback: callback,
      args: args
    };
    tasksByHandle[nextHandle] = task;
    registerImmediate(nextHandle);
    return nextHandle++;
  }

  function clearImmediate(handle) {
    delete tasksByHandle[handle];
  }

  function run(task) {
    var callback = task.callback;
    var args = task.args;

    switch (args.length) {
      case 0:
        callback();
        break;

      case 1:
        callback(args[0]);
        break;

      case 2:
        callback(args[0], args[1]);
        break;

      case 3:
        callback(args[0], args[1], args[2]);
        break;

      default:
        callback.apply(undefined, args);
        break;
    }
  }

  function runIfPresent(handle) {
    // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
    // So if we're currently running a task, we'll need to delay this invocation.
    if (currentlyRunningATask) {
      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
      // "too much recursion" error.
      setTimeout(runIfPresent, 0, handle);
    } else {
      var task = tasksByHandle[handle];

      if (task) {
        currentlyRunningATask = true;

        try {
          run(task);
        } finally {
          clearImmediate(handle);
          currentlyRunningATask = false;
        }
      }
    }
  }

  function installNextTickImplementation() {
    registerImmediate = function registerImmediate(handle) {
      process.nextTick(function () {
        runIfPresent(handle);
      });
    };
  }

  function canUsePostMessage() {
    // The test against `importScripts` prevents this implementation from being installed inside a web worker,
    // where `global.postMessage` means something completely different and can't be used for this purpose.
    if (global.postMessage && !global.importScripts) {
      var postMessageIsAsynchronous = true;
      var oldOnMessage = global.onmessage;

      global.onmessage = function () {
        postMessageIsAsynchronous = false;
      };

      global.postMessage("", "*");
      global.onmessage = oldOnMessage;
      return postMessageIsAsynchronous;
    }
  }

  function installPostMessageImplementation() {
    // Installs an event handler on `global` for the `message` event: see
    // * https://developer.mozilla.org/en/DOM/window.postMessage
    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
    var messagePrefix = "setImmediate$" + Math.random() + "$";

    var onGlobalMessage = function onGlobalMessage(event) {
      if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
        runIfPresent(+event.data.slice(messagePrefix.length));
      }
    };

    if (global.addEventListener) {
      global.addEventListener("message", onGlobalMessage, false);
    } else {
      global.attachEvent("onmessage", onGlobalMessage);
    }

    registerImmediate = function registerImmediate(handle) {
      global.postMessage(messagePrefix + handle, "*");
    };
  }

  function installMessageChannelImplementation() {
    var channel = new MessageChannel();

    channel.port1.onmessage = function (event) {
      var handle = event.data;
      runIfPresent(handle);
    };

    registerImmediate = function registerImmediate(handle) {
      channel.port2.postMessage(handle);
    };
  }

  function installReadyStateChangeImplementation() {
    var html = doc.documentElement;

    registerImmediate = function registerImmediate(handle) {
      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
      var script = doc.createElement("script");

      script.onreadystatechange = function () {
        runIfPresent(handle);
        script.onreadystatechange = null;
        html.removeChild(script);
        script = null;
      };

      html.appendChild(script);
    };
  }

  function installSetTimeoutImplementation() {
    registerImmediate = function registerImmediate(handle) {
      setTimeout(runIfPresent, 0, handle);
    };
  } // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.


  var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
  attachTo = attachTo && attachTo.setTimeout ? attachTo : global; // Don't get fooled by e.g. browserify environments.

  if ({}.toString.call(global.process) === "[object process]") {
    // For Node.js before 0.9
    installNextTickImplementation();
  } else if (canUsePostMessage()) {
    // For non-IE10 modern browsers
    installPostMessageImplementation();
  } else if (global.MessageChannel) {
    // For web workers, where supported
    installMessageChannelImplementation();
  } else if (doc && "onreadystatechange" in doc.createElement("script")) {
    // For IE 6–8
    installReadyStateChangeImplementation();
  } else {
    // For older browsers
    installSetTimeoutImplementation();
  }

  attachTo.setImmediate = setImmediate;
  attachTo.clearImmediate = clearImmediate;
})(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/sha.js/hash.js":
/*!*************************************!*\
  !*** ./node_modules/sha.js/hash.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer; // prototype class for hash functions


function Hash(blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize);
  this._finalSize = finalSize;
  this._blockSize = blockSize;
  this._len = 0;
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8';
    data = Buffer.from(data, enc);
  }

  var block = this._block;
  var blockSize = this._blockSize;
  var length = data.length;
  var accum = this._len;

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize;
    var remainder = Math.min(length - offset, blockSize - assigned);

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i];
    }

    accum += remainder;
    offset += remainder;

    if (accum % blockSize === 0) {
      this._update(block);
    }
  }

  this._len += length;
  return this;
};

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize;
  this._block[rem] = 0x80; // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize

  this._block.fill(0, rem + 1);

  if (rem >= this._finalSize) {
    this._update(this._block);

    this._block.fill(0);
  }

  var bits = this._len * 8; // uint32

  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4); // uint64

  } else {
    var lowBits = (bits & 0xffffffff) >>> 0;
    var highBits = (bits - lowBits) / 0x100000000;

    this._block.writeUInt32BE(highBits, this._blockSize - 8);

    this._block.writeUInt32BE(lowBits, this._blockSize - 4);
  }

  this._update(this._block);

  var hash = this._hash();

  return enc ? hash.toString(enc) : hash;
};

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass');
};

module.exports = Hash;

/***/ }),

/***/ "./node_modules/sha.js/index.js":
/*!**************************************!*\
  !*** ./node_modules/sha.js/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var exports = module.exports = function SHA(algorithm) {
  algorithm = algorithm.toLowerCase();
  var Algorithm = exports[algorithm];
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)');
  return new Algorithm();
};

exports.sha = __webpack_require__(/*! ./sha */ "./node_modules/sha.js/sha.js");
exports.sha1 = __webpack_require__(/*! ./sha1 */ "./node_modules/sha.js/sha1.js");
exports.sha224 = __webpack_require__(/*! ./sha224 */ "./node_modules/sha.js/sha224.js");
exports.sha256 = __webpack_require__(/*! ./sha256 */ "./node_modules/sha.js/sha256.js");
exports.sha384 = __webpack_require__(/*! ./sha384 */ "./node_modules/sha.js/sha384.js");
exports.sha512 = __webpack_require__(/*! ./sha512 */ "./node_modules/sha.js/sha512.js");

/***/ }),

/***/ "./node_modules/sha.js/sha.js":
/*!************************************!*\
  !*** ./node_modules/sha.js/sha.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js");

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];
var W = new Array(80);

function Sha() {
  this.init();
  this._w = W;
  Hash.call(this, 64, 56);
}

inherits(Sha, Hash);

Sha.prototype.init = function () {
  this._a = 0x67452301;
  this._b = 0xefcdab89;
  this._c = 0x98badcfe;
  this._d = 0x10325476;
  this._e = 0xc3d2e1f0;
  return this;
};

function rotl5(num) {
  return num << 5 | num >>> 27;
}

function rotl30(num) {
  return num << 30 | num >>> 2;
}

function ft(s, b, c, d) {
  if (s === 0) return b & c | ~b & d;
  if (s === 2) return b & c | b & d | c & d;
  return b ^ c ^ d;
}

Sha.prototype._update = function (M) {
  var W = this._w;
  var a = this._a | 0;
  var b = this._b | 0;
  var c = this._c | 0;
  var d = this._d | 0;
  var e = this._e | 0;

  for (var i = 0; i < 16; ++i) {
    W[i] = M.readInt32BE(i * 4);
  }

  for (; i < 80; ++i) {
    W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
  }

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20);
    var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
    e = d;
    d = c;
    c = rotl30(b);
    b = a;
    a = t;
  }

  this._a = a + this._a | 0;
  this._b = b + this._b | 0;
  this._c = c + this._c | 0;
  this._d = d + this._d | 0;
  this._e = e + this._e | 0;
};

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20);
  H.writeInt32BE(this._a | 0, 0);
  H.writeInt32BE(this._b | 0, 4);
  H.writeInt32BE(this._c | 0, 8);
  H.writeInt32BE(this._d | 0, 12);
  H.writeInt32BE(this._e | 0, 16);
  return H;
};

module.exports = Sha;

/***/ }),

/***/ "./node_modules/sha.js/sha1.js":
/*!*************************************!*\
  !*** ./node_modules/sha.js/sha1.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js");

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0];
var W = new Array(80);

function Sha1() {
  this.init();
  this._w = W;
  Hash.call(this, 64, 56);
}

inherits(Sha1, Hash);

Sha1.prototype.init = function () {
  this._a = 0x67452301;
  this._b = 0xefcdab89;
  this._c = 0x98badcfe;
  this._d = 0x10325476;
  this._e = 0xc3d2e1f0;
  return this;
};

function rotl1(num) {
  return num << 1 | num >>> 31;
}

function rotl5(num) {
  return num << 5 | num >>> 27;
}

function rotl30(num) {
  return num << 30 | num >>> 2;
}

function ft(s, b, c, d) {
  if (s === 0) return b & c | ~b & d;
  if (s === 2) return b & c | b & d | c & d;
  return b ^ c ^ d;
}

Sha1.prototype._update = function (M) {
  var W = this._w;
  var a = this._a | 0;
  var b = this._b | 0;
  var c = this._c | 0;
  var d = this._d | 0;
  var e = this._e | 0;

  for (var i = 0; i < 16; ++i) {
    W[i] = M.readInt32BE(i * 4);
  }

  for (; i < 80; ++i) {
    W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
  }

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20);
    var t = rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s] | 0;
    e = d;
    d = c;
    c = rotl30(b);
    b = a;
    a = t;
  }

  this._a = a + this._a | 0;
  this._b = b + this._b | 0;
  this._c = c + this._c | 0;
  this._d = d + this._d | 0;
  this._e = e + this._e | 0;
};

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20);
  H.writeInt32BE(this._a | 0, 0);
  H.writeInt32BE(this._b | 0, 4);
  H.writeInt32BE(this._c | 0, 8);
  H.writeInt32BE(this._d | 0, 12);
  H.writeInt32BE(this._e | 0, 16);
  return H;
};

module.exports = Sha1;

/***/ }),

/***/ "./node_modules/sha.js/sha224.js":
/*!***************************************!*\
  !*** ./node_modules/sha.js/sha224.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var Sha256 = __webpack_require__(/*! ./sha256 */ "./node_modules/sha.js/sha256.js");

var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js");

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var W = new Array(64);

function Sha224() {
  this.init();
  this._w = W; // new Array(64)

  Hash.call(this, 64, 56);
}

inherits(Sha224, Sha256);

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8;
  this._b = 0x367cd507;
  this._c = 0x3070dd17;
  this._d = 0xf70e5939;
  this._e = 0xffc00b31;
  this._f = 0x68581511;
  this._g = 0x64f98fa7;
  this._h = 0xbefa4fa4;
  return this;
};

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28);
  H.writeInt32BE(this._a, 0);
  H.writeInt32BE(this._b, 4);
  H.writeInt32BE(this._c, 8);
  H.writeInt32BE(this._d, 12);
  H.writeInt32BE(this._e, 16);
  H.writeInt32BE(this._f, 20);
  H.writeInt32BE(this._g, 24);
  return H;
};

module.exports = Sha224;

/***/ }),

/***/ "./node_modules/sha.js/sha256.js":
/*!***************************************!*\
  !*** ./node_modules/sha.js/sha256.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */
var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js");

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var K = [0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2];
var W = new Array(64);

function Sha256() {
  this.init();
  this._w = W; // new Array(64)

  Hash.call(this, 64, 56);
}

inherits(Sha256, Hash);

Sha256.prototype.init = function () {
  this._a = 0x6a09e667;
  this._b = 0xbb67ae85;
  this._c = 0x3c6ef372;
  this._d = 0xa54ff53a;
  this._e = 0x510e527f;
  this._f = 0x9b05688c;
  this._g = 0x1f83d9ab;
  this._h = 0x5be0cd19;
  return this;
};

function ch(x, y, z) {
  return z ^ x & (y ^ z);
}

function maj(x, y, z) {
  return x & y | z & (x | y);
}

function sigma0(x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}

function sigma1(x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}

function gamma0(x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
}

function gamma1(x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
}

Sha256.prototype._update = function (M) {
  var W = this._w;
  var a = this._a | 0;
  var b = this._b | 0;
  var c = this._c | 0;
  var d = this._d | 0;
  var e = this._e | 0;
  var f = this._f | 0;
  var g = this._g | 0;
  var h = this._h | 0;

  for (var i = 0; i < 16; ++i) {
    W[i] = M.readInt32BE(i * 4);
  }

  for (; i < 64; ++i) {
    W[i] = gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16] | 0;
  }

  for (var j = 0; j < 64; ++j) {
    var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W[j] | 0;
    var T2 = sigma0(a) + maj(a, b, c) | 0;
    h = g;
    g = f;
    f = e;
    e = d + T1 | 0;
    d = c;
    c = b;
    b = a;
    a = T1 + T2 | 0;
  }

  this._a = a + this._a | 0;
  this._b = b + this._b | 0;
  this._c = c + this._c | 0;
  this._d = d + this._d | 0;
  this._e = e + this._e | 0;
  this._f = f + this._f | 0;
  this._g = g + this._g | 0;
  this._h = h + this._h | 0;
};

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32);
  H.writeInt32BE(this._a, 0);
  H.writeInt32BE(this._b, 4);
  H.writeInt32BE(this._c, 8);
  H.writeInt32BE(this._d, 12);
  H.writeInt32BE(this._e, 16);
  H.writeInt32BE(this._f, 20);
  H.writeInt32BE(this._g, 24);
  H.writeInt32BE(this._h, 28);
  return H;
};

module.exports = Sha256;

/***/ }),

/***/ "./node_modules/sha.js/sha384.js":
/*!***************************************!*\
  !*** ./node_modules/sha.js/sha384.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var SHA512 = __webpack_require__(/*! ./sha512 */ "./node_modules/sha.js/sha512.js");

var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js");

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var W = new Array(160);

function Sha384() {
  this.init();
  this._w = W;
  Hash.call(this, 128, 112);
}

inherits(Sha384, SHA512);

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d;
  this._bh = 0x629a292a;
  this._ch = 0x9159015a;
  this._dh = 0x152fecd8;
  this._eh = 0x67332667;
  this._fh = 0x8eb44a87;
  this._gh = 0xdb0c2e0d;
  this._hh = 0x47b5481d;
  this._al = 0xc1059ed8;
  this._bl = 0x367cd507;
  this._cl = 0x3070dd17;
  this._dl = 0xf70e5939;
  this._el = 0xffc00b31;
  this._fl = 0x68581511;
  this._gl = 0x64f98fa7;
  this._hl = 0xbefa4fa4;
  return this;
};

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48);

  function writeInt64BE(h, l, offset) {
    H.writeInt32BE(h, offset);
    H.writeInt32BE(l, offset + 4);
  }

  writeInt64BE(this._ah, this._al, 0);
  writeInt64BE(this._bh, this._bl, 8);
  writeInt64BE(this._ch, this._cl, 16);
  writeInt64BE(this._dh, this._dl, 24);
  writeInt64BE(this._eh, this._el, 32);
  writeInt64BE(this._fh, this._fl, 40);
  return H;
};

module.exports = Sha384;

/***/ }),

/***/ "./node_modules/sha.js/sha512.js":
/*!***************************************!*\
  !*** ./node_modules/sha.js/sha512.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js");

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;

var K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];
var W = new Array(160);

function Sha512() {
  this.init();
  this._w = W;
  Hash.call(this, 128, 112);
}

inherits(Sha512, Hash);

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667;
  this._bh = 0xbb67ae85;
  this._ch = 0x3c6ef372;
  this._dh = 0xa54ff53a;
  this._eh = 0x510e527f;
  this._fh = 0x9b05688c;
  this._gh = 0x1f83d9ab;
  this._hh = 0x5be0cd19;
  this._al = 0xf3bcc908;
  this._bl = 0x84caa73b;
  this._cl = 0xfe94f82b;
  this._dl = 0x5f1d36f1;
  this._el = 0xade682d1;
  this._fl = 0x2b3e6c1f;
  this._gl = 0xfb41bd6b;
  this._hl = 0x137e2179;
  return this;
};

function Ch(x, y, z) {
  return z ^ x & (y ^ z);
}

function maj(x, y, z) {
  return x & y | z & (x | y);
}

function sigma0(x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
}

function sigma1(x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
}

function Gamma0(x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
}

function Gamma0l(x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
}

function Gamma1(x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
}

function Gamma1l(x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
}

function getCarry(a, b) {
  return a >>> 0 < b >>> 0 ? 1 : 0;
}

Sha512.prototype._update = function (M) {
  var W = this._w;
  var ah = this._ah | 0;
  var bh = this._bh | 0;
  var ch = this._ch | 0;
  var dh = this._dh | 0;
  var eh = this._eh | 0;
  var fh = this._fh | 0;
  var gh = this._gh | 0;
  var hh = this._hh | 0;
  var al = this._al | 0;
  var bl = this._bl | 0;
  var cl = this._cl | 0;
  var dl = this._dl | 0;
  var el = this._el | 0;
  var fl = this._fl | 0;
  var gl = this._gl | 0;
  var hl = this._hl | 0;

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4);
    W[i + 1] = M.readInt32BE(i * 4 + 4);
  }

  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2];
    var xl = W[i - 15 * 2 + 1];
    var gamma0 = Gamma0(xh, xl);
    var gamma0l = Gamma0l(xl, xh);
    xh = W[i - 2 * 2];
    xl = W[i - 2 * 2 + 1];
    var gamma1 = Gamma1(xh, xl);
    var gamma1l = Gamma1l(xl, xh); // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]

    var Wi7h = W[i - 7 * 2];
    var Wi7l = W[i - 7 * 2 + 1];
    var Wi16h = W[i - 16 * 2];
    var Wi16l = W[i - 16 * 2 + 1];
    var Wil = gamma0l + Wi7l | 0;
    var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
    Wil = Wil + gamma1l | 0;
    Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
    Wil = Wil + Wi16l | 0;
    Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
    W[i] = Wih;
    W[i + 1] = Wil;
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j];
    Wil = W[j + 1];
    var majh = maj(ah, bh, ch);
    var majl = maj(al, bl, cl);
    var sigma0h = sigma0(ah, al);
    var sigma0l = sigma0(al, ah);
    var sigma1h = sigma1(eh, el);
    var sigma1l = sigma1(el, eh); // t1 = h + sigma1 + ch + K[j] + W[j]

    var Kih = K[j];
    var Kil = K[j + 1];
    var chh = Ch(eh, fh, gh);
    var chl = Ch(el, fl, gl);
    var t1l = hl + sigma1l | 0;
    var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
    t1l = t1l + chl | 0;
    t1h = t1h + chh + getCarry(t1l, chl) | 0;
    t1l = t1l + Kil | 0;
    t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
    t1l = t1l + Wil | 0;
    t1h = t1h + Wih + getCarry(t1l, Wil) | 0; // t2 = sigma0 + maj

    var t2l = sigma0l + majl | 0;
    var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
    hh = gh;
    hl = gl;
    gh = fh;
    gl = fl;
    fh = eh;
    fl = el;
    el = dl + t1l | 0;
    eh = dh + t1h + getCarry(el, dl) | 0;
    dh = ch;
    dl = cl;
    ch = bh;
    cl = bl;
    bh = ah;
    bl = al;
    al = t1l + t2l | 0;
    ah = t1h + t2h + getCarry(al, t1l) | 0;
  }

  this._al = this._al + al | 0;
  this._bl = this._bl + bl | 0;
  this._cl = this._cl + cl | 0;
  this._dl = this._dl + dl | 0;
  this._el = this._el + el | 0;
  this._fl = this._fl + fl | 0;
  this._gl = this._gl + gl | 0;
  this._hl = this._hl + hl | 0;
  this._ah = this._ah + ah + getCarry(this._al, al) | 0;
  this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
  this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
  this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
  this._eh = this._eh + eh + getCarry(this._el, el) | 0;
  this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
  this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
  this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
};

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64);

  function writeInt64BE(h, l, offset) {
    H.writeInt32BE(h, offset);
    H.writeInt32BE(l, offset + 4);
  }

  writeInt64BE(this._ah, this._al, 0);
  writeInt64BE(this._bh, this._bl, 8);
  writeInt64BE(this._ch, this._cl, 16);
  writeInt64BE(this._dh, this._dl, 24);
  writeInt64BE(this._eh, this._el, 32);
  writeInt64BE(this._fh, this._fl, 40);
  writeInt64BE(this._gh, this._gl, 48);
  writeInt64BE(this._hh, this._hl, 56);
  return H;
};

module.exports = Sha512;

/***/ }),

/***/ "./node_modules/stream-browserify/index.js":
/*!*************************************************!*\
  !*** ./node_modules/stream-browserify/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
module.exports = Stream;

var EE = __webpack_require__(/*! events */ "./node_modules/events/events.js").EventEmitter;

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

inherits(Stream, EE);
Stream.Readable = __webpack_require__(/*! readable-stream/readable.js */ "./node_modules/readable-stream/readable-browser.js");
Stream.Writable = __webpack_require__(/*! readable-stream/writable.js */ "./node_modules/readable-stream/writable-browser.js");
Stream.Duplex = __webpack_require__(/*! readable-stream/duplex.js */ "./node_modules/readable-stream/duplex-browser.js");
Stream.Transform = __webpack_require__(/*! readable-stream/transform.js */ "./node_modules/readable-stream/transform.js");
Stream.PassThrough = __webpack_require__(/*! readable-stream/passthrough.js */ "./node_modules/readable-stream/passthrough.js"); // Backwards-compat with node 0.4.x

Stream.Stream = Stream; // old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function (dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain); // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.

  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;

  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;
    dest.end();
  }

  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;
    if (typeof dest.destroy === 'function') dest.destroy();
  } // don't leave dangling pipes when there are errors.


  function onerror(er) {
    cleanup();

    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror); // remove all the event listeners that were added.

  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);
    source.removeListener('end', onend);
    source.removeListener('close', onclose);
    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);
    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);
    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);
  dest.on('close', cleanup);
  dest.emit('pipe', source); // Allow for unix-like usage: A.pipe(B).pipe(C)

  return dest;
};

/***/ }),

/***/ "./node_modules/string_decoder/lib/string_decoder.js":
/*!***********************************************************!*\
  !*** ./node_modules/string_decoder/lib/string_decoder.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

/*<replacement>*/

var Buffer = __webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer;
/*</replacement>*/


var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;

  switch (encoding && encoding.toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
    case 'raw':
      return true;

    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;

  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';

      case 'latin1':
      case 'binary':
        return 'latin1';

      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;

      default:
        if (retried) return; // undefined

        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
}

; // Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings

function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);

  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
} // StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.


exports.StringDecoder = StringDecoder;

function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;

  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;

    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;

    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;

    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }

  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;

  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }

  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End; // Returns only complete characters in a Buffer

StringDecoder.prototype.text = utf8Text; // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer

StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }

  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
}; // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.


function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
} // Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.


function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);

  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }

  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);

  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }

  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);

  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }

    return nb;
  }

  return 0;
} // Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.


function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return "\uFFFD";
  }

  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return "\uFFFD";
    }

    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return "\uFFFD";
      }
    }
  }
} // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.


function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;

  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }

  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
} // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.


function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
} // For UTF-8, a replacement character is added when ending on a partial
// character.


function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + "\uFFFD";
  return r;
} // UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.


function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);

    if (r) {
      var c = r.charCodeAt(r.length - 1);

      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }

    return r;
  }

  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
} // For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.


function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';

  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }

  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;

  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }

  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
} // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)


function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}

/***/ }),

/***/ "./node_modules/timed-async/index.js":
/*!*******************************************!*\
  !*** ./node_modules/timed-async/index.js ***!
  \*******************************************/
/*! exports provided: loadAndWait, waitOrLoad, timedAsync */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadAndWait", function() { return loadAndWait; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "waitOrLoad", function() { return waitOrLoad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "timedAsync", function() { return timedAsync; });
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var FAST_LOAD_TIME = 500; // miliseconds

var SLOW_LOAD_TIME = 1500; // miliseconds

var clamp = function clamp(num, min, max) {
  return Math.min(Math.max(num, min), max);
};
/**
 * Wait a minimum amount of time, even when an operation (such as an API response) finished very quickly.
 * Also good for testing, as production load times are usually slower than
 * in a development environment.
 * 
 * Example:
 *     const waitMinimum = loadAndWait();
 *     (... do something that the user expects to take some time, e.g. loading data ...)
 *     await waitMinimum();
 * 
 * @param {number} minimumLoadTime duration in ms, default 500
 * @return {loadAndWait~waitMinimum}
 */


function loadAndWait() {
  var minimumLoadTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : FAST_LOAD_TIME;
  var startedLoading = +new Date();
  /**
   * @param {function} callbackIfFast function to call if operation finished in less than minimumLoadTime.
   * @return {Promise} promise that resolves when minimumLoadTime minus wait time has passed (possibly immediately).
   */

  return function waitMinimum(callbackIfFast) {
    return new Promise(function (resolve) {
      var loadDuration = new Date() - startedLoading;
      var waitTime = clamp(minimumLoadTime - loadDuration, 0, minimumLoadTime);

      if (waitTime > 0 && typeof callbackIfFast === 'function') {
        callbackIfFast();
      }

      setTimeout(resolve, waitTime);
    });
  };
}
/**
 * Register a function to be called when an operation is considered slow.
 * 
 * Example:
 *     const loadingFinished = waitOrLoad(() => {
 *         console.log('loading is slow'); 
 *     });
 *     (... do something that the user expects to take some time, e.g. loading data ...)
 *     loadingFinished();
 * 
 * @param {function} callbackIfSlow function to call when operation is taking longer than maximumLoadTime.
 * @param {number} maximumLoadTime duration in ms, default 1500
 * @return {waitOrLoad~loadingFinished} 
 */


function waitOrLoad(callbackIfSlow) {
  var maximumLoadTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SLOW_LOAD_TIME;
  var timeout = setTimeout(callbackIfSlow, maximumLoadTime);
  /**
   * Call this function after the operation has finished.
   * This cancels the timeout so that the previously registered, not yet executed callback is not called. 
   */

  return function loadingFinished() {
    clearTimeout(timeout);
  };
}
/**
 * Decorator to add "slow" and "fast" timing hooks to any async operation.
 * This returns the return value of the main function and also lets exceptions go through.
 * 
 * @param {function} main execution function to be timed
 * @param {object} options
 * @param {function} options.slow function to be called when operation is slow
 * @param {number?} options.slowTime time after which the operation is considered slow. Default: 1500
 * @param {function} options.fast function to be called when operation is fast
 * @param {number?} options.fastTime time until which the operation is considered fast. Default: 500
 * @return {any} return value of main function
 */


function timedAsync(_x) {
  return _timedAsync.apply(this, arguments);
}

function _timedAsync() {
  _timedAsync = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee(main) {
    var options,
        waitMinimum,
        loadingFinished,
        _args = arguments;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};
            waitMinimum = loadAndWait(options.fastTime || FAST_LOAD_TIME);

            if (typeof options.slow === 'function') {
              loadingFinished = waitOrLoad(options.slow, options.slowTime || SLOW_LOAD_TIME);
            }

            _context.prev = 3;
            _context.next = 6;
            return main();

          case 6:
            return _context.abrupt("return", _context.sent);

          case 7:
            _context.prev = 7;

            if (typeof loadingFinished !== 'undefined') {
              loadingFinished();
            }

            _context.next = 11;
            return waitMinimum(options.fast);

          case 11:
            return _context.finish(7);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[3,, 7, 12]]);
  }));
  return _timedAsync.apply(this, arguments);
}



/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = typeof global !== "undefined" && global || typeof self !== "undefined" && self || window;
var apply = Function.prototype.apply; // DOM APIs, for completeness

exports.setTimeout = function () {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};

exports.setInterval = function () {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};

exports.clearTimeout = exports.clearInterval = function (timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}

Timeout.prototype.unref = Timeout.prototype.ref = function () {};

Timeout.prototype.close = function () {
  this._clearFn.call(scope, this._id);
}; // Does not start the time, just sets up the members needed.


exports.enroll = function (item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function (item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function (item) {
  clearTimeout(item._idleTimeoutId);
  var msecs = item._idleTimeout;

  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout) item._onTimeout();
    }, msecs);
  }
}; // setimmediate attaches itself to the global object


__webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js"); // On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.


exports.setImmediate = typeof self !== "undefined" && self.setImmediate || typeof global !== "undefined" && global.setImmediate || this && this.setImmediate;
exports.clearImmediate = typeof self !== "undefined" && self.clearImmediate || typeof global !== "undefined" && global.clearImmediate || this && this.clearImmediate;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/traverse/index.js":
/*!****************************************!*\
  !*** ./node_modules/traverse/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var traverse = module.exports = function (obj) {
  return new Traverse(obj);
};

function Traverse(obj) {
  this.value = obj;
}

Traverse.prototype.get = function (ps) {
  var node = this.value;

  for (var i = 0; i < ps.length; i++) {
    var key = ps[i];

    if (!node || !hasOwnProperty.call(node, key)) {
      node = undefined;
      break;
    }

    node = node[key];
  }

  return node;
};

Traverse.prototype.has = function (ps) {
  var node = this.value;

  for (var i = 0; i < ps.length; i++) {
    var key = ps[i];

    if (!node || !hasOwnProperty.call(node, key)) {
      return false;
    }

    node = node[key];
  }

  return true;
};

Traverse.prototype.set = function (ps, value) {
  var node = this.value;

  for (var i = 0; i < ps.length - 1; i++) {
    var key = ps[i];
    if (!hasOwnProperty.call(node, key)) node[key] = {};
    node = node[key];
  }

  node[ps[i]] = value;
  return value;
};

Traverse.prototype.map = function (cb) {
  return walk(this.value, cb, true);
};

Traverse.prototype.forEach = function (cb) {
  this.value = walk(this.value, cb, false);
  return this.value;
};

Traverse.prototype.reduce = function (cb, init) {
  var skip = arguments.length === 1;
  var acc = skip ? this.value : init;
  this.forEach(function (x) {
    if (!this.isRoot || !skip) {
      acc = cb.call(this, acc, x);
    }
  });
  return acc;
};

Traverse.prototype.paths = function () {
  var acc = [];
  this.forEach(function (x) {
    acc.push(this.path);
  });
  return acc;
};

Traverse.prototype.nodes = function () {
  var acc = [];
  this.forEach(function (x) {
    acc.push(this.node);
  });
  return acc;
};

Traverse.prototype.clone = function () {
  var parents = [],
      nodes = [];
  return function clone(src) {
    for (var i = 0; i < parents.length; i++) {
      if (parents[i] === src) {
        return nodes[i];
      }
    }

    if (_typeof(src) === 'object' && src !== null) {
      var dst = copy(src);
      parents.push(src);
      nodes.push(dst);
      forEach(objectKeys(src), function (key) {
        dst[key] = clone(src[key]);
      });
      parents.pop();
      nodes.pop();
      return dst;
    } else {
      return src;
    }
  }(this.value);
};

function walk(root, cb, immutable) {
  var path = [];
  var parents = [];
  var alive = true;
  return function walker(node_) {
    var node = immutable ? copy(node_) : node_;
    var modifiers = {};
    var keepGoing = true;
    var state = {
      node: node,
      node_: node_,
      path: [].concat(path),
      parent: parents[parents.length - 1],
      parents: parents,
      key: path.slice(-1)[0],
      isRoot: path.length === 0,
      level: path.length,
      circular: null,
      update: function update(x, stopHere) {
        if (!state.isRoot) {
          state.parent.node[state.key] = x;
        }

        state.node = x;
        if (stopHere) keepGoing = false;
      },
      'delete': function _delete(stopHere) {
        delete state.parent.node[state.key];
        if (stopHere) keepGoing = false;
      },
      remove: function remove(stopHere) {
        if (isArray(state.parent.node)) {
          state.parent.node.splice(state.key, 1);
        } else {
          delete state.parent.node[state.key];
        }

        if (stopHere) keepGoing = false;
      },
      keys: null,
      before: function before(f) {
        modifiers.before = f;
      },
      after: function after(f) {
        modifiers.after = f;
      },
      pre: function pre(f) {
        modifiers.pre = f;
      },
      post: function post(f) {
        modifiers.post = f;
      },
      stop: function stop() {
        alive = false;
      },
      block: function block() {
        keepGoing = false;
      }
    };
    if (!alive) return state;

    function updateState() {
      if (_typeof(state.node) === 'object' && state.node !== null) {
        if (!state.keys || state.node_ !== state.node) {
          state.keys = objectKeys(state.node);
        }

        state.isLeaf = state.keys.length == 0;

        for (var i = 0; i < parents.length; i++) {
          if (parents[i].node_ === node_) {
            state.circular = parents[i];
            break;
          }
        }
      } else {
        state.isLeaf = true;
        state.keys = null;
      }

      state.notLeaf = !state.isLeaf;
      state.notRoot = !state.isRoot;
    }

    updateState(); // use return values to update if defined

    var ret = cb.call(state, state.node);
    if (ret !== undefined && state.update) state.update(ret);
    if (modifiers.before) modifiers.before.call(state, state.node);
    if (!keepGoing) return state;

    if (_typeof(state.node) == 'object' && state.node !== null && !state.circular) {
      parents.push(state);
      updateState();
      forEach(state.keys, function (key, i) {
        path.push(key);
        if (modifiers.pre) modifiers.pre.call(state, state.node[key], key);
        var child = walker(state.node[key]);

        if (immutable && hasOwnProperty.call(state.node, key)) {
          state.node[key] = child.node;
        }

        child.isLast = i == state.keys.length - 1;
        child.isFirst = i == 0;
        if (modifiers.post) modifiers.post.call(state, child);
        path.pop();
      });
      parents.pop();
    }

    if (modifiers.after) modifiers.after.call(state, state.node);
    return state;
  }(root).node;
}

function copy(src) {
  if (_typeof(src) === 'object' && src !== null) {
    var dst;

    if (isArray(src)) {
      dst = [];
    } else if (isDate(src)) {
      dst = new Date(src.getTime ? src.getTime() : src);
    } else if (isRegExp(src)) {
      dst = new RegExp(src);
    } else if (isError(src)) {
      dst = {
        message: src.message
      };
    } else if (isBoolean(src)) {
      dst = new Boolean(src);
    } else if (isNumber(src)) {
      dst = new Number(src);
    } else if (isString(src)) {
      dst = new String(src);
    } else if (Object.create && Object.getPrototypeOf) {
      dst = Object.create(Object.getPrototypeOf(src));
    } else if (src.constructor === Object) {
      dst = {};
    } else {
      var proto = src.constructor && src.constructor.prototype || src.__proto__ || {};

      var T = function T() {};

      T.prototype = proto;
      dst = new T();
    }

    forEach(objectKeys(src), function (key) {
      dst[key] = src[key];
    });
    return dst;
  } else return src;
}

var objectKeys = Object.keys || function keys(obj) {
  var res = [];

  for (var key in obj) {
    res.push(key);
  }

  return res;
};

function toS(obj) {
  return Object.prototype.toString.call(obj);
}

function isDate(obj) {
  return toS(obj) === '[object Date]';
}

function isRegExp(obj) {
  return toS(obj) === '[object RegExp]';
}

function isError(obj) {
  return toS(obj) === '[object Error]';
}

function isBoolean(obj) {
  return toS(obj) === '[object Boolean]';
}

function isNumber(obj) {
  return toS(obj) === '[object Number]';
}

function isString(obj) {
  return toS(obj) === '[object String]';
}

var isArray = Array.isArray || function isArray(xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

var forEach = function forEach(xs, fn) {
  if (xs.forEach) return xs.forEach(fn);else for (var i = 0; i < xs.length; i++) {
    fn(xs[i], i, xs);
  }
};

forEach(objectKeys(Traverse.prototype), function (key) {
  traverse[key] = function (obj) {
    var args = [].slice.call(arguments, 1);
    var t = new Traverse(obj);
    return t[key].apply(t, args);
  };
});

var hasOwnProperty = Object.hasOwnProperty || function (obj, key) {
  return key in obj;
};

/***/ }),

/***/ "./node_modules/util-deprecate/browser.js":
/*!************************************************!*\
  !*** ./node_modules/util-deprecate/browser.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/**
 * Module exports.
 */
module.exports = deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate(fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;

  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }

      warned = true;
    }

    return fn.apply(this, arguments);
  }

  return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */


function config(name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }

  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/util/support/isBufferBrowser.js":
/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = function isBuffer(arg) {
  return arg && _typeof(arg) === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
};

/***/ }),

/***/ "./node_modules/util/util.js":
/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var formatRegExp = /%[sdj%]/g;

exports.format = function (f) {
  if (!isString(f)) {
    var objects = [];

    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }

    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function (x) {
    if (x === '%%') return '%';
    if (i >= len) return x;

    switch (x) {
      case '%s':
        return String(args[i++]);

      case '%d':
        return Number(args[i++]);

      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }

      default:
        return x;
    }
  });

  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }

  return str;
}; // Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.


exports.deprecate = function (fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function () {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;

  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }

      warned = true;
    }

    return fn.apply(this, arguments);
  }

  return deprecated;
};

var debugs = {};
var debugEnviron;

exports.debuglog = function (set) {
  if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();

  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;

      debugs[set] = function () {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function () {};
    }
  }

  return debugs[set];
};
/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */

/* legacy: obj, showHidden, depth, colors*/


function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  }; // legacy...

  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];

  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  } // set default options


  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}

exports.inspect = inspect; // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics

inspect.colors = {
  'bold': [1, 22],
  'italic': [3, 23],
  'underline': [4, 24],
  'inverse': [7, 27],
  'white': [37, 39],
  'grey': [90, 39],
  'black': [30, 39],
  'blue': [34, 39],
  'cyan': [36, 39],
  'green': [32, 39],
  'magenta': [35, 39],
  'red': [31, 39],
  'yellow': [33, 39]
}; // Don't use 'blue' not visible on cmd.exe

inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};

function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return "\x1B[" + inspect.colors[style][0] + 'm' + str + "\x1B[" + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}

function stylizeNoColor(str, styleType) {
  return str;
}

function arrayToHash(array) {
  var hash = {};
  array.forEach(function (val, idx) {
    hash[val] = true;
  });
  return hash;
}

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
  value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
  !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);

    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }

    return ret;
  } // Primitive types cannot have properties


  var primitive = formatPrimitive(ctx, value);

  if (primitive) {
    return primitive;
  } // Look up the keys of the object.


  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  } // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


  if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  } // Some type of object without properties can be shortcutted.


  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }

    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }

    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }

    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '',
      array = false,
      braces = ['{', '}']; // Make Array say that they are Array

  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  } // Make functions say that they are functions


  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  } // Make RegExps say that they are RegExps


  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  } // Make dates with properties first say the date


  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  } // Make error with message first say the error


  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);
  var output;

  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function (key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();
  return reduceToSingleString(output, base, braces);
}

function formatPrimitive(ctx, value) {
  if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }

  if (isNumber(value)) return ctx.stylize('' + value, 'number');
  if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is "object", so special case here.

  if (isNull(value)) return ctx.stylize('null', 'null');
}

function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}

function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];

  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    } else {
      output.push('');
    }
  }

  keys.forEach(function (key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    }
  });
  return output;
}

function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || {
    value: value[key]
  };

  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }

  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }

  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }

      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function (line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function (line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }

  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }

    name = JSON.stringify('' + key);

    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}

function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function (prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
} // NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.


function isArray(ar) {
  return Array.isArray(ar);
}

exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}

exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}

exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}

exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}

exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}

exports.isString = isString;

function isSymbol(arg) {
  return _typeof(arg) === 'symbol';
}

exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}

exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}

exports.isRegExp = isRegExp;

function isObject(arg) {
  return _typeof(arg) === 'object' && arg !== null;
}

exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}

exports.isDate = isDate;

function isError(e) {
  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
}

exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}

exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || _typeof(arg) === 'symbol' || // ES6 symbol
  typeof arg === 'undefined';
}

exports.isPrimitive = isPrimitive;
exports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ "./node_modules/util/support/isBufferBrowser.js");

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}

var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34

function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
} // log is just a thin wrapper to console.log that prepends a timestamp


exports.log = function () {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};
/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */


exports.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

exports._extend = function (origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;
  var keys = Object.keys(add);
  var i = keys.length;

  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }

  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/vm-browserify/index.js":
/*!*********************************************!*\
  !*** ./node_modules/vm-browserify/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var indexOf = __webpack_require__(/*! indexof */ "./node_modules/indexof/index.js");

var Object_keys = function Object_keys(obj) {
  if (Object.keys) return Object.keys(obj);else {
    var res = [];

    for (var key in obj) {
      res.push(key);
    }

    return res;
  }
};

var forEach = function forEach(xs, fn) {
  if (xs.forEach) return xs.forEach(fn);else for (var i = 0; i < xs.length; i++) {
    fn(xs[i], i, xs);
  }
};

var defineProp = function () {
  try {
    Object.defineProperty({}, '_', {});
    return function (obj, name, value) {
      Object.defineProperty(obj, name, {
        writable: true,
        enumerable: false,
        configurable: true,
        value: value
      });
    };
  } catch (e) {
    return function (obj, name, value) {
      obj[name] = value;
    };
  }
}();

var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function', 'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError', 'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError', 'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape', 'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

function Context() {}

Context.prototype = {};

var Script = exports.Script = function NodeScript(code) {
  if (!(this instanceof Script)) return new Script(code);
  this.code = code;
};

Script.prototype.runInContext = function (context) {
  if (!(context instanceof Context)) {
    throw new TypeError("needs a 'context' argument.");
  }

  var iframe = document.createElement('iframe');
  if (!iframe.style) iframe.style = {};
  iframe.style.display = 'none';
  document.body.appendChild(iframe);
  var win = iframe.contentWindow;
  var wEval = win.eval,
      wExecScript = win.execScript;

  if (!wEval && wExecScript) {
    // win.eval() magically appears when this is called in IE:
    wExecScript.call(win, 'null');
    wEval = win.eval;
  }

  forEach(Object_keys(context), function (key) {
    win[key] = context[key];
  });
  forEach(globals, function (key) {
    if (context[key]) {
      win[key] = context[key];
    }
  });
  var winKeys = Object_keys(win);
  var res = wEval.call(win, this.code);
  forEach(Object_keys(win), function (key) {
    // Avoid copying circular objects like `top` and `window` by only
    // updating existing context properties or new properties in the `win`
    // that was only introduced after the eval.
    if (key in context || indexOf(winKeys, key) === -1) {
      context[key] = win[key];
    }
  });
  forEach(globals, function (key) {
    if (!(key in context)) {
      defineProp(context, key, win[key]);
    }
  });
  document.body.removeChild(iframe);
  return res;
};

Script.prototype.runInThisContext = function () {
  return eval(this.code); // maybe...
};

Script.prototype.runInNewContext = function (context) {
  var ctx = Script.createContext(context);
  var res = this.runInContext(ctx);
  forEach(Object_keys(ctx), function (key) {
    context[key] = ctx[key];
  });
  return res;
};

forEach(Object_keys(Script.prototype), function (name) {
  exports[name] = Script[name] = function (code) {
    var s = Script(code);
    return s[name].apply(s, [].slice.call(arguments, 1));
  };
});

exports.createScript = function (code) {
  return exports.Script(code);
};

exports.createContext = Script.createContext = function (context) {
  var copy = new Context();

  if (_typeof(context) === 'object') {
    forEach(Object_keys(context), function (key) {
      copy[key] = context[key];
    });
  }

  return copy;
};

/***/ }),

/***/ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ "./node_modules/vue-router/dist/vue-router.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/vue-router/dist/vue-router.esm.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
  * vue-router v3.0.1
  * (c) 2017 Evan You
  * @license MIT
  */

/*  */
function assert(condition, message) {
  if (!condition) {
    throw new Error("[vue-router] " + message);
  }
}

function warn(condition, message) {
  if ("development" !== 'production' && !condition) {
    typeof console !== 'undefined' && console.warn("[vue-router] " + message);
  }
}

function isError(err) {
  return Object.prototype.toString.call(err).indexOf('Error') > -1;
}

var View = {
  name: 'router-view',
  functional: true,
  props: {
    name: {
      type: String,
      default: 'default'
    }
  },
  render: function render(_, ref) {
    var props = ref.props;
    var children = ref.children;
    var parent = ref.parent;
    var data = ref.data;
    data.routerView = true; // directly use parent context's createElement() function
    // so that components rendered by router-view can resolve named slots

    var h = parent.$createElement;
    var name = props.name;
    var route = parent.$route;
    var cache = parent._routerViewCache || (parent._routerViewCache = {}); // determine current view depth, also check to see if the tree
    // has been toggled inactive but kept-alive.

    var depth = 0;
    var inactive = false;

    while (parent && parent._routerRoot !== parent) {
      if (parent.$vnode && parent.$vnode.data.routerView) {
        depth++;
      }

      if (parent._inactive) {
        inactive = true;
      }

      parent = parent.$parent;
    }

    data.routerViewDepth = depth; // render previous view if the tree is inactive and kept-alive

    if (inactive) {
      return h(cache[name], data, children);
    }

    var matched = route.matched[depth]; // render empty node if no matched route

    if (!matched) {
      cache[name] = null;
      return h();
    }

    var component = cache[name] = matched.components[name]; // attach instance registration hook
    // this will be called in the instance's injected lifecycle hooks

    data.registerRouteInstance = function (vm, val) {
      // val could be undefined for unregistration
      var current = matched.instances[name];

      if (val && current !== vm || !val && current === vm) {
        matched.instances[name] = val;
      }
    } // also register instance in prepatch hook
    // in case the same component instance is reused across different routes
    ;

    (data.hook || (data.hook = {})).prepatch = function (_, vnode) {
      matched.instances[name] = vnode.componentInstance;
    }; // resolve props


    var propsToPass = data.props = resolveProps(route, matched.props && matched.props[name]);

    if (propsToPass) {
      // clone to prevent mutation
      propsToPass = data.props = extend({}, propsToPass); // pass non-declared props as attrs

      var attrs = data.attrs = data.attrs || {};

      for (var key in propsToPass) {
        if (!component.props || !(key in component.props)) {
          attrs[key] = propsToPass[key];
          delete propsToPass[key];
        }
      }
    }

    return h(component, data, children);
  }
};

function resolveProps(route, config) {
  switch (_typeof(config)) {
    case 'undefined':
      return;

    case 'object':
      return config;

    case 'function':
      return config(route);

    case 'boolean':
      return config ? route.params : undefined;

    default:
      if (true) {
        warn(false, "props in \"" + route.path + "\" is a " + _typeof(config) + ", " + "expecting an object, function or boolean.");
      }

  }
}

function extend(to, from) {
  for (var key in from) {
    to[key] = from[key];
  }

  return to;
}
/*  */


var encodeReserveRE = /[!'()*]/g;

var encodeReserveReplacer = function encodeReserveReplacer(c) {
  return '%' + c.charCodeAt(0).toString(16);
};

var commaRE = /%2C/g; // fixed encodeURIComponent which is more conformant to RFC3986:
// - escapes [!'()*]
// - preserve commas

var encode = function encode(str) {
  return encodeURIComponent(str).replace(encodeReserveRE, encodeReserveReplacer).replace(commaRE, ',');
};

var decode = decodeURIComponent;

function resolveQuery(query, extraQuery, _parseQuery) {
  if (extraQuery === void 0) extraQuery = {};
  var parse = _parseQuery || parseQuery;
  var parsedQuery;

  try {
    parsedQuery = parse(query || '');
  } catch (e) {
    "development" !== 'production' && warn(false, e.message);
    parsedQuery = {};
  }

  for (var key in extraQuery) {
    parsedQuery[key] = extraQuery[key];
  }

  return parsedQuery;
}

function parseQuery(query) {
  var res = {};
  query = query.trim().replace(/^(\?|#|&)/, '');

  if (!query) {
    return res;
  }

  query.split('&').forEach(function (param) {
    var parts = param.replace(/\+/g, ' ').split('=');
    var key = decode(parts.shift());
    var val = parts.length > 0 ? decode(parts.join('=')) : null;

    if (res[key] === undefined) {
      res[key] = val;
    } else if (Array.isArray(res[key])) {
      res[key].push(val);
    } else {
      res[key] = [res[key], val];
    }
  });
  return res;
}

function stringifyQuery(obj) {
  var res = obj ? Object.keys(obj).map(function (key) {
    var val = obj[key];

    if (val === undefined) {
      return '';
    }

    if (val === null) {
      return encode(key);
    }

    if (Array.isArray(val)) {
      var result = [];
      val.forEach(function (val2) {
        if (val2 === undefined) {
          return;
        }

        if (val2 === null) {
          result.push(encode(key));
        } else {
          result.push(encode(key) + '=' + encode(val2));
        }
      });
      return result.join('&');
    }

    return encode(key) + '=' + encode(val);
  }).filter(function (x) {
    return x.length > 0;
  }).join('&') : null;
  return res ? "?" + res : '';
}
/*  */


var trailingSlashRE = /\/?$/;

function createRoute(record, location, redirectedFrom, router) {
  var stringifyQuery$$1 = router && router.options.stringifyQuery;
  var query = location.query || {};

  try {
    query = clone(query);
  } catch (e) {}

  var route = {
    name: location.name || record && record.name,
    meta: record && record.meta || {},
    path: location.path || '/',
    hash: location.hash || '',
    query: query,
    params: location.params || {},
    fullPath: getFullPath(location, stringifyQuery$$1),
    matched: record ? formatMatch(record) : []
  };

  if (redirectedFrom) {
    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery$$1);
  }

  return Object.freeze(route);
}

function clone(value) {
  if (Array.isArray(value)) {
    return value.map(clone);
  } else if (value && _typeof(value) === 'object') {
    var res = {};

    for (var key in value) {
      res[key] = clone(value[key]);
    }

    return res;
  } else {
    return value;
  }
} // the starting route that represents the initial state


var START = createRoute(null, {
  path: '/'
});

function formatMatch(record) {
  var res = [];

  while (record) {
    res.unshift(record);
    record = record.parent;
  }

  return res;
}

function getFullPath(ref, _stringifyQuery) {
  var path = ref.path;
  var query = ref.query;
  if (query === void 0) query = {};
  var hash = ref.hash;
  if (hash === void 0) hash = '';
  var stringify = _stringifyQuery || stringifyQuery;
  return (path || '/') + stringify(query) + hash;
}

function isSameRoute(a, b) {
  if (b === START) {
    return a === b;
  } else if (!b) {
    return false;
  } else if (a.path && b.path) {
    return a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') && a.hash === b.hash && isObjectEqual(a.query, b.query);
  } else if (a.name && b.name) {
    return a.name === b.name && a.hash === b.hash && isObjectEqual(a.query, b.query) && isObjectEqual(a.params, b.params);
  } else {
    return false;
  }
}

function isObjectEqual(a, b) {
  if (a === void 0) a = {};
  if (b === void 0) b = {}; // handle null value #1566

  if (!a || !b) {
    return a === b;
  }

  var aKeys = Object.keys(a);
  var bKeys = Object.keys(b);

  if (aKeys.length !== bKeys.length) {
    return false;
  }

  return aKeys.every(function (key) {
    var aVal = a[key];
    var bVal = b[key]; // check nested equality

    if (_typeof(aVal) === 'object' && _typeof(bVal) === 'object') {
      return isObjectEqual(aVal, bVal);
    }

    return String(aVal) === String(bVal);
  });
}

function isIncludedRoute(current, target) {
  return current.path.replace(trailingSlashRE, '/').indexOf(target.path.replace(trailingSlashRE, '/')) === 0 && (!target.hash || current.hash === target.hash) && queryIncludes(current.query, target.query);
}

function queryIncludes(current, target) {
  for (var key in target) {
    if (!(key in current)) {
      return false;
    }
  }

  return true;
}
/*  */
// work around weird flow bug


var toTypes = [String, Object];
var eventTypes = [String, Array];
var Link = {
  name: 'router-link',
  props: {
    to: {
      type: toTypes,
      required: true
    },
    tag: {
      type: String,
      default: 'a'
    },
    exact: Boolean,
    append: Boolean,
    replace: Boolean,
    activeClass: String,
    exactActiveClass: String,
    event: {
      type: eventTypes,
      default: 'click'
    }
  },
  render: function render(h) {
    var this$1 = this;
    var router = this.$router;
    var current = this.$route;
    var ref = router.resolve(this.to, current, this.append);
    var location = ref.location;
    var route = ref.route;
    var href = ref.href;
    var classes = {};
    var globalActiveClass = router.options.linkActiveClass;
    var globalExactActiveClass = router.options.linkExactActiveClass; // Support global empty active class

    var activeClassFallback = globalActiveClass == null ? 'router-link-active' : globalActiveClass;
    var exactActiveClassFallback = globalExactActiveClass == null ? 'router-link-exact-active' : globalExactActiveClass;
    var activeClass = this.activeClass == null ? activeClassFallback : this.activeClass;
    var exactActiveClass = this.exactActiveClass == null ? exactActiveClassFallback : this.exactActiveClass;
    var compareTarget = location.path ? createRoute(null, location, null, router) : route;
    classes[exactActiveClass] = isSameRoute(current, compareTarget);
    classes[activeClass] = this.exact ? classes[exactActiveClass] : isIncludedRoute(current, compareTarget);

    var handler = function handler(e) {
      if (guardEvent(e)) {
        if (this$1.replace) {
          router.replace(location);
        } else {
          router.push(location);
        }
      }
    };

    var on = {
      click: guardEvent
    };

    if (Array.isArray(this.event)) {
      this.event.forEach(function (e) {
        on[e] = handler;
      });
    } else {
      on[this.event] = handler;
    }

    var data = {
      class: classes
    };

    if (this.tag === 'a') {
      data.on = on;
      data.attrs = {
        href: href
      };
    } else {
      // find the first <a> child and apply listener and href
      var a = findAnchor(this.$slots.default);

      if (a) {
        // in case the <a> is a static node
        a.isStatic = false;
        var extend = _Vue.util.extend;
        var aData = a.data = extend({}, a.data);
        aData.on = on;
        var aAttrs = a.data.attrs = extend({}, a.data.attrs);
        aAttrs.href = href;
      } else {
        // doesn't have <a> child, apply listener to self
        data.on = on;
      }
    }

    return h(this.tag, data, this.$slots.default);
  }
};

function guardEvent(e) {
  // don't redirect with control keys
  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) {
    return;
  } // don't redirect when preventDefault called


  if (e.defaultPrevented) {
    return;
  } // don't redirect on right click


  if (e.button !== undefined && e.button !== 0) {
    return;
  } // don't redirect if `target="_blank"`


  if (e.currentTarget && e.currentTarget.getAttribute) {
    var target = e.currentTarget.getAttribute('target');

    if (/\b_blank\b/i.test(target)) {
      return;
    }
  } // this may be a Weex event which doesn't have this method


  if (e.preventDefault) {
    e.preventDefault();
  }

  return true;
}

function findAnchor(children) {
  if (children) {
    var child;

    for (var i = 0; i < children.length; i++) {
      child = children[i];

      if (child.tag === 'a') {
        return child;
      }

      if (child.children && (child = findAnchor(child.children))) {
        return child;
      }
    }
  }
}

var _Vue;

function install(Vue) {
  if (install.installed && _Vue === Vue) {
    return;
  }

  install.installed = true;
  _Vue = Vue;

  var isDef = function isDef(v) {
    return v !== undefined;
  };

  var registerInstance = function registerInstance(vm, callVal) {
    var i = vm.$options._parentVnode;

    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {
      i(vm, callVal);
    }
  };

  Vue.mixin({
    beforeCreate: function beforeCreate() {
      if (isDef(this.$options.router)) {
        this._routerRoot = this;
        this._router = this.$options.router;

        this._router.init(this);

        Vue.util.defineReactive(this, '_route', this._router.history.current);
      } else {
        this._routerRoot = this.$parent && this.$parent._routerRoot || this;
      }

      registerInstance(this, this);
    },
    destroyed: function destroyed() {
      registerInstance(this);
    }
  });
  Object.defineProperty(Vue.prototype, '$router', {
    get: function get() {
      return this._routerRoot._router;
    }
  });
  Object.defineProperty(Vue.prototype, '$route', {
    get: function get() {
      return this._routerRoot._route;
    }
  });
  Vue.component('router-view', View);
  Vue.component('router-link', Link);
  var strats = Vue.config.optionMergeStrategies; // use the same hook merging strategy for route hooks

  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;
}
/*  */


var inBrowser = typeof window !== 'undefined';
/*  */

function resolvePath(relative, base, append) {
  var firstChar = relative.charAt(0);

  if (firstChar === '/') {
    return relative;
  }

  if (firstChar === '?' || firstChar === '#') {
    return base + relative;
  }

  var stack = base.split('/'); // remove trailing segment if:
  // - not appending
  // - appending to trailing slash (last segment is empty)

  if (!append || !stack[stack.length - 1]) {
    stack.pop();
  } // resolve relative path


  var segments = relative.replace(/^\//, '').split('/');

  for (var i = 0; i < segments.length; i++) {
    var segment = segments[i];

    if (segment === '..') {
      stack.pop();
    } else if (segment !== '.') {
      stack.push(segment);
    }
  } // ensure leading slash


  if (stack[0] !== '') {
    stack.unshift('');
  }

  return stack.join('/');
}

function parsePath(path) {
  var hash = '';
  var query = '';
  var hashIndex = path.indexOf('#');

  if (hashIndex >= 0) {
    hash = path.slice(hashIndex);
    path = path.slice(0, hashIndex);
  }

  var queryIndex = path.indexOf('?');

  if (queryIndex >= 0) {
    query = path.slice(queryIndex + 1);
    path = path.slice(0, queryIndex);
  }

  return {
    path: path,
    query: query,
    hash: hash
  };
}

function cleanPath(path) {
  return path.replace(/\/\//g, '/');
}

var isarray = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};
/**
 * Expose `pathToRegexp`.
 */


var pathToRegexp_1 = pathToRegexp;
var parse_1 = parse;
var compile_1 = compile;
var tokensToFunction_1 = tokensToFunction;
var tokensToRegExp_1 = tokensToRegExp;
/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */

var PATH_REGEXP = new RegExp([// Match escaped characters that would otherwise appear in future matches.
// This allows the user to escape special characters that won't transform.
'(\\\\.)', // Match Express-style parameters and un-named parameters with a prefix
// and optional suffixes. Matches appear as:
//
// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
'([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'), 'g');
/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */

function parse(str, options) {
  var tokens = [];
  var key = 0;
  var index = 0;
  var path = '';
  var defaultDelimiter = options && options.delimiter || '/';
  var res;

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0];
    var escaped = res[1];
    var offset = res.index;
    path += str.slice(index, offset);
    index = offset + m.length; // Ignore already escaped sequences.

    if (escaped) {
      path += escaped[1];
      continue;
    }

    var next = str[index];
    var prefix = res[2];
    var name = res[3];
    var capture = res[4];
    var group = res[5];
    var modifier = res[6];
    var asterisk = res[7]; // Push the current path onto the tokens.

    if (path) {
      tokens.push(path);
      path = '';
    }

    var partial = prefix != null && next != null && next !== prefix;
    var repeat = modifier === '+' || modifier === '*';
    var optional = modifier === '?' || modifier === '*';
    var delimiter = res[2] || defaultDelimiter;
    var pattern = capture || group;
    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
    });
  } // Match any characters still remaining.


  if (index < str.length) {
    path += str.substr(index);
  } // If the path exists, push it onto the end.


  if (path) {
    tokens.push(path);
  }

  return tokens;
}
/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */


function compile(str, options) {
  return tokensToFunction(parse(str, options));
}
/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */


function encodeURIComponentPretty(str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */


function encodeAsterisk(str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
/**
 * Expose a method for transforming tokens into the path function.
 */


function tokensToFunction(tokens) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length); // Compile all the patterns before compilation.

  for (var i = 0; i < tokens.length; i++) {
    if (_typeof(tokens[i]) === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
    }
  }

  return function (obj, opts) {
    var path = '';
    var data = obj || {};
    var options = opts || {};
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        path += token;
        continue;
      }

      var value = data[token.name];
      var segment;

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix;
          }

          continue;
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined');
        }
      }

      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
        }

        if (value.length === 0) {
          if (token.optional) {
            continue;
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty');
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j]);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }

        continue;
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
      }

      path += token.prefix + segment;
    }

    return path;
  };
}
/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */


function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
}
/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */


function escapeGroup(group) {
  return group.replace(/([=!:$\/()])/g, '\\$1');
}
/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */


function attachKeys(re, keys) {
  re.keys = keys;
  return re;
}
/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */


function flags(options) {
  return options.sensitive ? '' : 'i';
}
/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */


function regexpToRegexp(path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g);

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      });
    }
  }

  return attachKeys(path, keys);
}
/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */


function arrayToRegexp(path, keys, options) {
  var parts = [];

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source);
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));
  return attachKeys(regexp, keys);
}
/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */


function stringToRegexp(path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options);
}
/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */


function tokensToRegExp(tokens, keys, options) {
  if (!isarray(keys)) {
    options =
    /** @type {!Object} */
    keys || options;
    keys = [];
  }

  options = options || {};
  var strict = options.strict;
  var end = options.end !== false;
  var route = ''; // Iterate over the tokens and create our regexp string.

  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (typeof token === 'string') {
      route += escapeString(token);
    } else {
      var prefix = escapeString(token.prefix);
      var capture = '(?:' + token.pattern + ')';
      keys.push(token);

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*';
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?';
        } else {
          capture = prefix + '(' + capture + ')?';
        }
      } else {
        capture = prefix + '(' + capture + ')';
      }

      route += capture;
    }
  }

  var delimiter = escapeString(options.delimiter || '/');
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter; // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".

  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
  }

  if (end) {
    route += '$';
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys);
}
/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */


function pathToRegexp(path, keys, options) {
  if (!isarray(keys)) {
    options =
    /** @type {!Object} */
    keys || options;
    keys = [];
  }

  options = options || {};

  if (path instanceof RegExp) {
    return regexpToRegexp(path,
    /** @type {!Array} */
    keys);
  }

  if (isarray(path)) {
    return arrayToRegexp(
    /** @type {!Array} */
    path,
    /** @type {!Array} */
    keys, options);
  }

  return stringToRegexp(
  /** @type {string} */
  path,
  /** @type {!Array} */
  keys, options);
}

pathToRegexp_1.parse = parse_1;
pathToRegexp_1.compile = compile_1;
pathToRegexp_1.tokensToFunction = tokensToFunction_1;
pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;
/*  */
// $flow-disable-line

var regexpCompileCache = Object.create(null);

function fillParams(path, params, routeMsg) {
  try {
    var filler = regexpCompileCache[path] || (regexpCompileCache[path] = pathToRegexp_1.compile(path));
    return filler(params || {}, {
      pretty: true
    });
  } catch (e) {
    if (true) {
      warn(false, "missing param for " + routeMsg + ": " + e.message);
    }

    return '';
  }
}
/*  */


function createRouteMap(routes, oldPathList, oldPathMap, oldNameMap) {
  // the path list is used to control path matching priority
  var pathList = oldPathList || []; // $flow-disable-line

  var pathMap = oldPathMap || Object.create(null); // $flow-disable-line

  var nameMap = oldNameMap || Object.create(null);
  routes.forEach(function (route) {
    addRouteRecord(pathList, pathMap, nameMap, route);
  }); // ensure wildcard routes are always at the end

  for (var i = 0, l = pathList.length; i < l; i++) {
    if (pathList[i] === '*') {
      pathList.push(pathList.splice(i, 1)[0]);
      l--;
      i--;
    }
  }

  return {
    pathList: pathList,
    pathMap: pathMap,
    nameMap: nameMap
  };
}

function addRouteRecord(pathList, pathMap, nameMap, route, parent, matchAs) {
  var path = route.path;
  var name = route.name;

  if (true) {
    assert(path != null, "\"path\" is required in a route configuration.");
    assert(typeof route.component !== 'string', "route config \"component\" for path: " + String(path || name) + " cannot be a " + "string id. Use an actual component instead.");
  }

  var pathToRegexpOptions = route.pathToRegexpOptions || {};
  var normalizedPath = normalizePath(path, parent, pathToRegexpOptions.strict);

  if (typeof route.caseSensitive === 'boolean') {
    pathToRegexpOptions.sensitive = route.caseSensitive;
  }

  var record = {
    path: normalizedPath,
    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),
    components: route.components || {
      default: route.component
    },
    instances: {},
    name: name,
    parent: parent,
    matchAs: matchAs,
    redirect: route.redirect,
    beforeEnter: route.beforeEnter,
    meta: route.meta || {},
    props: route.props == null ? {} : route.components ? route.props : {
      default: route.props
    }
  };

  if (route.children) {
    // Warn if route is named, does not redirect and has a default child route.
    // If users navigate to this route by name, the default child will
    // not be rendered (GH Issue #629)
    if (true) {
      if (route.name && !route.redirect && route.children.some(function (child) {
        return /^\/?$/.test(child.path);
      })) {
        warn(false, "Named Route '" + route.name + "' has a default child route. " + "When navigating to this named route (:to=\"{name: '" + route.name + "'\"), " + "the default child route will not be rendered. Remove the name from " + "this route and use the name of the default child route for named " + "links instead.");
      }
    }

    route.children.forEach(function (child) {
      var childMatchAs = matchAs ? cleanPath(matchAs + "/" + child.path) : undefined;
      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);
    });
  }

  if (route.alias !== undefined) {
    var aliases = Array.isArray(route.alias) ? route.alias : [route.alias];
    aliases.forEach(function (alias) {
      var aliasRoute = {
        path: alias,
        children: route.children
      };
      addRouteRecord(pathList, pathMap, nameMap, aliasRoute, parent, record.path || '/' // matchAs
      );
    });
  }

  if (!pathMap[record.path]) {
    pathList.push(record.path);
    pathMap[record.path] = record;
  }

  if (name) {
    if (!nameMap[name]) {
      nameMap[name] = record;
    } else if ("development" !== 'production' && !matchAs) {
      warn(false, "Duplicate named routes definition: " + "{ name: \"" + name + "\", path: \"" + record.path + "\" }");
    }
  }
}

function compileRouteRegex(path, pathToRegexpOptions) {
  var regex = pathToRegexp_1(path, [], pathToRegexpOptions);

  if (true) {
    var keys = Object.create(null);
    regex.keys.forEach(function (key) {
      warn(!keys[key.name], "Duplicate param keys in route with path: \"" + path + "\"");
      keys[key.name] = true;
    });
  }

  return regex;
}

function normalizePath(path, parent, strict) {
  if (!strict) {
    path = path.replace(/\/$/, '');
  }

  if (path[0] === '/') {
    return path;
  }

  if (parent == null) {
    return path;
  }

  return cleanPath(parent.path + "/" + path);
}
/*  */


function normalizeLocation(raw, current, append, router) {
  var next = typeof raw === 'string' ? {
    path: raw
  } : raw; // named target

  if (next.name || next._normalized) {
    return next;
  } // relative params


  if (!next.path && next.params && current) {
    next = assign({}, next);
    next._normalized = true;
    var params = assign(assign({}, current.params), next.params);

    if (current.name) {
      next.name = current.name;
      next.params = params;
    } else if (current.matched.length) {
      var rawPath = current.matched[current.matched.length - 1].path;
      next.path = fillParams(rawPath, params, "path " + current.path);
    } else if (true) {
      warn(false, "relative params navigation requires a current route.");
    }

    return next;
  }

  var parsedPath = parsePath(next.path || '');
  var basePath = current && current.path || '/';
  var path = parsedPath.path ? resolvePath(parsedPath.path, basePath, append || next.append) : basePath;
  var query = resolveQuery(parsedPath.query, next.query, router && router.options.parseQuery);
  var hash = next.hash || parsedPath.hash;

  if (hash && hash.charAt(0) !== '#') {
    hash = "#" + hash;
  }

  return {
    _normalized: true,
    path: path,
    query: query,
    hash: hash
  };
}

function assign(a, b) {
  for (var key in b) {
    a[key] = b[key];
  }

  return a;
}
/*  */


function createMatcher(routes, router) {
  var ref = createRouteMap(routes);
  var pathList = ref.pathList;
  var pathMap = ref.pathMap;
  var nameMap = ref.nameMap;

  function addRoutes(routes) {
    createRouteMap(routes, pathList, pathMap, nameMap);
  }

  function match(raw, currentRoute, redirectedFrom) {
    var location = normalizeLocation(raw, currentRoute, false, router);
    var name = location.name;

    if (name) {
      var record = nameMap[name];

      if (true) {
        warn(record, "Route with name '" + name + "' does not exist");
      }

      if (!record) {
        return _createRoute(null, location);
      }

      var paramNames = record.regex.keys.filter(function (key) {
        return !key.optional;
      }).map(function (key) {
        return key.name;
      });

      if (_typeof(location.params) !== 'object') {
        location.params = {};
      }

      if (currentRoute && _typeof(currentRoute.params) === 'object') {
        for (var key in currentRoute.params) {
          if (!(key in location.params) && paramNames.indexOf(key) > -1) {
            location.params[key] = currentRoute.params[key];
          }
        }
      }

      if (record) {
        location.path = fillParams(record.path, location.params, "named route \"" + name + "\"");
        return _createRoute(record, location, redirectedFrom);
      }
    } else if (location.path) {
      location.params = {};

      for (var i = 0; i < pathList.length; i++) {
        var path = pathList[i];
        var record$1 = pathMap[path];

        if (matchRoute(record$1.regex, location.path, location.params)) {
          return _createRoute(record$1, location, redirectedFrom);
        }
      }
    } // no match


    return _createRoute(null, location);
  }

  function redirect(record, location) {
    var originalRedirect = record.redirect;
    var redirect = typeof originalRedirect === 'function' ? originalRedirect(createRoute(record, location, null, router)) : originalRedirect;

    if (typeof redirect === 'string') {
      redirect = {
        path: redirect
      };
    }

    if (!redirect || _typeof(redirect) !== 'object') {
      if (true) {
        warn(false, "invalid redirect option: " + JSON.stringify(redirect));
      }

      return _createRoute(null, location);
    }

    var re = redirect;
    var name = re.name;
    var path = re.path;
    var query = location.query;
    var hash = location.hash;
    var params = location.params;
    query = re.hasOwnProperty('query') ? re.query : query;
    hash = re.hasOwnProperty('hash') ? re.hash : hash;
    params = re.hasOwnProperty('params') ? re.params : params;

    if (name) {
      // resolved named direct
      var targetRecord = nameMap[name];

      if (true) {
        assert(targetRecord, "redirect failed: named route \"" + name + "\" not found.");
      }

      return match({
        _normalized: true,
        name: name,
        query: query,
        hash: hash,
        params: params
      }, undefined, location);
    } else if (path) {
      // 1. resolve relative redirect
      var rawPath = resolveRecordPath(path, record); // 2. resolve params

      var resolvedPath = fillParams(rawPath, params, "redirect route with path \"" + rawPath + "\""); // 3. rematch with existing query and hash

      return match({
        _normalized: true,
        path: resolvedPath,
        query: query,
        hash: hash
      }, undefined, location);
    } else {
      if (true) {
        warn(false, "invalid redirect option: " + JSON.stringify(redirect));
      }

      return _createRoute(null, location);
    }
  }

  function alias(record, location, matchAs) {
    var aliasedPath = fillParams(matchAs, location.params, "aliased route with path \"" + matchAs + "\"");
    var aliasedMatch = match({
      _normalized: true,
      path: aliasedPath
    });

    if (aliasedMatch) {
      var matched = aliasedMatch.matched;
      var aliasedRecord = matched[matched.length - 1];
      location.params = aliasedMatch.params;
      return _createRoute(aliasedRecord, location);
    }

    return _createRoute(null, location);
  }

  function _createRoute(record, location, redirectedFrom) {
    if (record && record.redirect) {
      return redirect(record, redirectedFrom || location);
    }

    if (record && record.matchAs) {
      return alias(record, location, record.matchAs);
    }

    return createRoute(record, location, redirectedFrom, router);
  }

  return {
    match: match,
    addRoutes: addRoutes
  };
}

function matchRoute(regex, path, params) {
  var m = path.match(regex);

  if (!m) {
    return false;
  } else if (!params) {
    return true;
  }

  for (var i = 1, len = m.length; i < len; ++i) {
    var key = regex.keys[i - 1];
    var val = typeof m[i] === 'string' ? decodeURIComponent(m[i]) : m[i];

    if (key) {
      params[key.name] = val;
    }
  }

  return true;
}

function resolveRecordPath(path, record) {
  return resolvePath(path, record.parent ? record.parent.path : '/', true);
}
/*  */


var positionStore = Object.create(null);

function setupScroll() {
  // Fix for #1585 for Firefox
  window.history.replaceState({
    key: getStateKey()
  }, '');
  window.addEventListener('popstate', function (e) {
    saveScrollPosition();

    if (e.state && e.state.key) {
      setStateKey(e.state.key);
    }
  });
}

function handleScroll(router, to, from, isPop) {
  if (!router.app) {
    return;
  }

  var behavior = router.options.scrollBehavior;

  if (!behavior) {
    return;
  }

  if (true) {
    assert(typeof behavior === 'function', "scrollBehavior must be a function");
  } // wait until re-render finishes before scrolling


  router.app.$nextTick(function () {
    var position = getScrollPosition();
    var shouldScroll = behavior(to, from, isPop ? position : null);

    if (!shouldScroll) {
      return;
    }

    if (typeof shouldScroll.then === 'function') {
      shouldScroll.then(function (shouldScroll) {
        scrollToPosition(shouldScroll, position);
      }).catch(function (err) {
        if (true) {
          assert(false, err.toString());
        }
      });
    } else {
      scrollToPosition(shouldScroll, position);
    }
  });
}

function saveScrollPosition() {
  var key = getStateKey();

  if (key) {
    positionStore[key] = {
      x: window.pageXOffset,
      y: window.pageYOffset
    };
  }
}

function getScrollPosition() {
  var key = getStateKey();

  if (key) {
    return positionStore[key];
  }
}

function getElementPosition(el, offset) {
  var docEl = document.documentElement;
  var docRect = docEl.getBoundingClientRect();
  var elRect = el.getBoundingClientRect();
  return {
    x: elRect.left - docRect.left - offset.x,
    y: elRect.top - docRect.top - offset.y
  };
}

function isValidPosition(obj) {
  return isNumber(obj.x) || isNumber(obj.y);
}

function normalizePosition(obj) {
  return {
    x: isNumber(obj.x) ? obj.x : window.pageXOffset,
    y: isNumber(obj.y) ? obj.y : window.pageYOffset
  };
}

function normalizeOffset(obj) {
  return {
    x: isNumber(obj.x) ? obj.x : 0,
    y: isNumber(obj.y) ? obj.y : 0
  };
}

function isNumber(v) {
  return typeof v === 'number';
}

function scrollToPosition(shouldScroll, position) {
  var isObject = _typeof(shouldScroll) === 'object';

  if (isObject && typeof shouldScroll.selector === 'string') {
    var el = document.querySelector(shouldScroll.selector);

    if (el) {
      var offset = shouldScroll.offset && _typeof(shouldScroll.offset) === 'object' ? shouldScroll.offset : {};
      offset = normalizeOffset(offset);
      position = getElementPosition(el, offset);
    } else if (isValidPosition(shouldScroll)) {
      position = normalizePosition(shouldScroll);
    }
  } else if (isObject && isValidPosition(shouldScroll)) {
    position = normalizePosition(shouldScroll);
  }

  if (position) {
    window.scrollTo(position.x, position.y);
  }
}
/*  */


var supportsPushState = inBrowser && function () {
  var ua = window.navigator.userAgent;

  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
    return false;
  }

  return window.history && 'pushState' in window.history;
}(); // use User Timing api (if present) for more accurate key precision


var Time = inBrowser && window.performance && window.performance.now ? window.performance : Date;

var _key = genKey();

function genKey() {
  return Time.now().toFixed(3);
}

function getStateKey() {
  return _key;
}

function setStateKey(key) {
  _key = key;
}

function pushState(url, replace) {
  saveScrollPosition(); // try...catch the pushState call to get around Safari
  // DOM Exception 18 where it limits to 100 pushState calls

  var history = window.history;

  try {
    if (replace) {
      history.replaceState({
        key: _key
      }, '', url);
    } else {
      _key = genKey();
      history.pushState({
        key: _key
      }, '', url);
    }
  } catch (e) {
    window.location[replace ? 'replace' : 'assign'](url);
  }
}

function replaceState(url) {
  pushState(url, true);
}
/*  */


function runQueue(queue, fn, cb) {
  var step = function step(index) {
    if (index >= queue.length) {
      cb();
    } else {
      if (queue[index]) {
        fn(queue[index], function () {
          step(index + 1);
        });
      } else {
        step(index + 1);
      }
    }
  };

  step(0);
}
/*  */


function resolveAsyncComponents(matched) {
  return function (to, from, next) {
    var hasAsync = false;
    var pending = 0;
    var error = null;
    flatMapComponents(matched, function (def, _, match, key) {
      // if it's a function and doesn't have cid attached,
      // assume it's an async component resolve function.
      // we are not using Vue's default async resolving mechanism because
      // we want to halt the navigation until the incoming component has been
      // resolved.
      if (typeof def === 'function' && def.cid === undefined) {
        hasAsync = true;
        pending++;
        var resolve = once(function (resolvedDef) {
          if (isESModule(resolvedDef)) {
            resolvedDef = resolvedDef.default;
          } // save resolved on async factory in case it's used elsewhere


          def.resolved = typeof resolvedDef === 'function' ? resolvedDef : _Vue.extend(resolvedDef);
          match.components[key] = resolvedDef;
          pending--;

          if (pending <= 0) {
            next();
          }
        });
        var reject = once(function (reason) {
          var msg = "Failed to resolve async component " + key + ": " + reason;
          "development" !== 'production' && warn(false, msg);

          if (!error) {
            error = isError(reason) ? reason : new Error(msg);
            next(error);
          }
        });
        var res;

        try {
          res = def(resolve, reject);
        } catch (e) {
          reject(e);
        }

        if (res) {
          if (typeof res.then === 'function') {
            res.then(resolve, reject);
          } else {
            // new syntax in Vue 2.3
            var comp = res.component;

            if (comp && typeof comp.then === 'function') {
              comp.then(resolve, reject);
            }
          }
        }
      }
    });

    if (!hasAsync) {
      next();
    }
  };
}

function flatMapComponents(matched, fn) {
  return flatten(matched.map(function (m) {
    return Object.keys(m.components).map(function (key) {
      return fn(m.components[key], m.instances[key], m, key);
    });
  }));
}

function flatten(arr) {
  return Array.prototype.concat.apply([], arr);
}

var hasSymbol = typeof Symbol === 'function' && _typeof(Symbol.toStringTag) === 'symbol';

function isESModule(obj) {
  return obj.__esModule || hasSymbol && obj[Symbol.toStringTag] === 'Module';
} // in Webpack 2, require.ensure now also returns a Promise
// so the resolve/reject functions may get called an extra time
// if the user uses an arrow function shorthand that happens to
// return that Promise.


function once(fn) {
  var called = false;
  return function () {
    var args = [],
        len = arguments.length;

    while (len--) {
      args[len] = arguments[len];
    }

    if (called) {
      return;
    }

    called = true;
    return fn.apply(this, args);
  };
}
/*  */


var History = function History(router, base) {
  this.router = router;
  this.base = normalizeBase(base); // start with a route object that stands for "nowhere"

  this.current = START;
  this.pending = null;
  this.ready = false;
  this.readyCbs = [];
  this.readyErrorCbs = [];
  this.errorCbs = [];
};

History.prototype.listen = function listen(cb) {
  this.cb = cb;
};

History.prototype.onReady = function onReady(cb, errorCb) {
  if (this.ready) {
    cb();
  } else {
    this.readyCbs.push(cb);

    if (errorCb) {
      this.readyErrorCbs.push(errorCb);
    }
  }
};

History.prototype.onError = function onError(errorCb) {
  this.errorCbs.push(errorCb);
};

History.prototype.transitionTo = function transitionTo(location, onComplete, onAbort) {
  var this$1 = this;
  var route = this.router.match(location, this.current);
  this.confirmTransition(route, function () {
    this$1.updateRoute(route);
    onComplete && onComplete(route);
    this$1.ensureURL(); // fire ready cbs once

    if (!this$1.ready) {
      this$1.ready = true;
      this$1.readyCbs.forEach(function (cb) {
        cb(route);
      });
    }
  }, function (err) {
    if (onAbort) {
      onAbort(err);
    }

    if (err && !this$1.ready) {
      this$1.ready = true;
      this$1.readyErrorCbs.forEach(function (cb) {
        cb(err);
      });
    }
  });
};

History.prototype.confirmTransition = function confirmTransition(route, onComplete, onAbort) {
  var this$1 = this;
  var current = this.current;

  var abort = function abort(err) {
    if (isError(err)) {
      if (this$1.errorCbs.length) {
        this$1.errorCbs.forEach(function (cb) {
          cb(err);
        });
      } else {
        warn(false, 'uncaught error during route navigation:');
        console.error(err);
      }
    }

    onAbort && onAbort(err);
  };

  if (isSameRoute(route, current) && // in the case the route map has been dynamically appended to
  route.matched.length === current.matched.length) {
    this.ensureURL();
    return abort();
  }

  var ref = resolveQueue(this.current.matched, route.matched);
  var updated = ref.updated;
  var deactivated = ref.deactivated;
  var activated = ref.activated;
  var queue = [].concat( // in-component leave guards
  extractLeaveGuards(deactivated), // global before hooks
  this.router.beforeHooks, // in-component update hooks
  extractUpdateHooks(updated), // in-config enter guards
  activated.map(function (m) {
    return m.beforeEnter;
  }), // async components
  resolveAsyncComponents(activated));
  this.pending = route;

  var iterator = function iterator(hook, next) {
    if (this$1.pending !== route) {
      return abort();
    }

    try {
      hook(route, current, function (to) {
        if (to === false || isError(to)) {
          // next(false) -> abort navigation, ensure current URL
          this$1.ensureURL(true);
          abort(to);
        } else if (typeof to === 'string' || _typeof(to) === 'object' && (typeof to.path === 'string' || typeof to.name === 'string')) {
          // next('/') or next({ path: '/' }) -> redirect
          abort();

          if (_typeof(to) === 'object' && to.replace) {
            this$1.replace(to);
          } else {
            this$1.push(to);
          }
        } else {
          // confirm transition and pass on the value
          next(to);
        }
      });
    } catch (e) {
      abort(e);
    }
  };

  runQueue(queue, iterator, function () {
    var postEnterCbs = [];

    var isValid = function isValid() {
      return this$1.current === route;
    }; // wait until async components are resolved before
    // extracting in-component enter guards


    var enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);
    var queue = enterGuards.concat(this$1.router.resolveHooks);
    runQueue(queue, iterator, function () {
      if (this$1.pending !== route) {
        return abort();
      }

      this$1.pending = null;
      onComplete(route);

      if (this$1.router.app) {
        this$1.router.app.$nextTick(function () {
          postEnterCbs.forEach(function (cb) {
            cb();
          });
        });
      }
    });
  });
};

History.prototype.updateRoute = function updateRoute(route) {
  var prev = this.current;
  this.current = route;
  this.cb && this.cb(route);
  this.router.afterHooks.forEach(function (hook) {
    hook && hook(route, prev);
  });
};

function normalizeBase(base) {
  if (!base) {
    if (inBrowser) {
      // respect <base> tag
      var baseEl = document.querySelector('base');
      base = baseEl && baseEl.getAttribute('href') || '/'; // strip full URL origin

      base = base.replace(/^https?:\/\/[^\/]+/, '');
    } else {
      base = '/';
    }
  } // make sure there's the starting slash


  if (base.charAt(0) !== '/') {
    base = '/' + base;
  } // remove trailing slash


  return base.replace(/\/$/, '');
}

function resolveQueue(current, next) {
  var i;
  var max = Math.max(current.length, next.length);

  for (i = 0; i < max; i++) {
    if (current[i] !== next[i]) {
      break;
    }
  }

  return {
    updated: next.slice(0, i),
    activated: next.slice(i),
    deactivated: current.slice(i)
  };
}

function extractGuards(records, name, bind, reverse) {
  var guards = flatMapComponents(records, function (def, instance, match, key) {
    var guard = extractGuard(def, name);

    if (guard) {
      return Array.isArray(guard) ? guard.map(function (guard) {
        return bind(guard, instance, match, key);
      }) : bind(guard, instance, match, key);
    }
  });
  return flatten(reverse ? guards.reverse() : guards);
}

function extractGuard(def, key) {
  if (typeof def !== 'function') {
    // extend now so that global mixins are applied.
    def = _Vue.extend(def);
  }

  return def.options[key];
}

function extractLeaveGuards(deactivated) {
  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true);
}

function extractUpdateHooks(updated) {
  return extractGuards(updated, 'beforeRouteUpdate', bindGuard);
}

function bindGuard(guard, instance) {
  if (instance) {
    return function boundRouteGuard() {
      return guard.apply(instance, arguments);
    };
  }
}

function extractEnterGuards(activated, cbs, isValid) {
  return extractGuards(activated, 'beforeRouteEnter', function (guard, _, match, key) {
    return bindEnterGuard(guard, match, key, cbs, isValid);
  });
}

function bindEnterGuard(guard, match, key, cbs, isValid) {
  return function routeEnterGuard(to, from, next) {
    return guard(to, from, function (cb) {
      next(cb);

      if (typeof cb === 'function') {
        cbs.push(function () {
          // #750
          // if a router-view is wrapped with an out-in transition,
          // the instance may not have been registered at this time.
          // we will need to poll for registration until current route
          // is no longer valid.
          poll(cb, match.instances, key, isValid);
        });
      }
    });
  };
}

function poll(cb, // somehow flow cannot infer this is a function
instances, key, isValid) {
  if (instances[key]) {
    cb(instances[key]);
  } else if (isValid()) {
    setTimeout(function () {
      poll(cb, instances, key, isValid);
    }, 16);
  }
}
/*  */


var HTML5History = function (History$$1) {
  function HTML5History(router, base) {
    var this$1 = this;
    History$$1.call(this, router, base);
    var expectScroll = router.options.scrollBehavior;

    if (expectScroll) {
      setupScroll();
    }

    var initLocation = getLocation(this.base);
    window.addEventListener('popstate', function (e) {
      var current = this$1.current; // Avoiding first `popstate` event dispatched in some browsers but first
      // history route not updated since async guard at the same time.

      var location = getLocation(this$1.base);

      if (this$1.current === START && location === initLocation) {
        return;
      }

      this$1.transitionTo(location, function (route) {
        if (expectScroll) {
          handleScroll(router, route, current, true);
        }
      });
    });
  }

  if (History$$1) HTML5History.__proto__ = History$$1;
  HTML5History.prototype = Object.create(History$$1 && History$$1.prototype);
  HTML5History.prototype.constructor = HTML5History;

  HTML5History.prototype.go = function go(n) {
    window.history.go(n);
  };

  HTML5History.prototype.push = function push(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      pushState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.replace = function replace(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      replaceState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.ensureURL = function ensureURL(push) {
    if (getLocation(this.base) !== this.current.fullPath) {
      var current = cleanPath(this.base + this.current.fullPath);
      push ? pushState(current) : replaceState(current);
    }
  };

  HTML5History.prototype.getCurrentLocation = function getCurrentLocation() {
    return getLocation(this.base);
  };

  return HTML5History;
}(History);

function getLocation(base) {
  var path = window.location.pathname;

  if (base && path.indexOf(base) === 0) {
    path = path.slice(base.length);
  }

  return (path || '/') + window.location.search + window.location.hash;
}
/*  */


var HashHistory = function (History$$1) {
  function HashHistory(router, base, fallback) {
    History$$1.call(this, router, base); // check history fallback deeplinking

    if (fallback && checkFallback(this.base)) {
      return;
    }

    ensureSlash();
  }

  if (History$$1) HashHistory.__proto__ = History$$1;
  HashHistory.prototype = Object.create(History$$1 && History$$1.prototype);
  HashHistory.prototype.constructor = HashHistory; // this is delayed until the app mounts
  // to avoid the hashchange listener being fired too early

  HashHistory.prototype.setupListeners = function setupListeners() {
    var this$1 = this;
    var router = this.router;
    var expectScroll = router.options.scrollBehavior;
    var supportsScroll = supportsPushState && expectScroll;

    if (supportsScroll) {
      setupScroll();
    }

    window.addEventListener(supportsPushState ? 'popstate' : 'hashchange', function () {
      var current = this$1.current;

      if (!ensureSlash()) {
        return;
      }

      this$1.transitionTo(getHash(), function (route) {
        if (supportsScroll) {
          handleScroll(this$1.router, route, current, true);
        }

        if (!supportsPushState) {
          replaceHash(route.fullPath);
        }
      });
    });
  };

  HashHistory.prototype.push = function push(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      pushHash(route.fullPath);
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HashHistory.prototype.replace = function replace(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      replaceHash(route.fullPath);
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HashHistory.prototype.go = function go(n) {
    window.history.go(n);
  };

  HashHistory.prototype.ensureURL = function ensureURL(push) {
    var current = this.current.fullPath;

    if (getHash() !== current) {
      push ? pushHash(current) : replaceHash(current);
    }
  };

  HashHistory.prototype.getCurrentLocation = function getCurrentLocation() {
    return getHash();
  };

  return HashHistory;
}(History);

function checkFallback(base) {
  var location = getLocation(base);

  if (!/^\/#/.test(location)) {
    window.location.replace(cleanPath(base + '/#' + location));
    return true;
  }
}

function ensureSlash() {
  var path = getHash();

  if (path.charAt(0) === '/') {
    return true;
  }

  replaceHash('/' + path);
  return false;
}

function getHash() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var index = href.indexOf('#');
  return index === -1 ? '' : href.slice(index + 1);
}

function getUrl(path) {
  var href = window.location.href;
  var i = href.indexOf('#');
  var base = i >= 0 ? href.slice(0, i) : href;
  return base + "#" + path;
}

function pushHash(path) {
  if (supportsPushState) {
    pushState(getUrl(path));
  } else {
    window.location.hash = path;
  }
}

function replaceHash(path) {
  if (supportsPushState) {
    replaceState(getUrl(path));
  } else {
    window.location.replace(getUrl(path));
  }
}
/*  */


var AbstractHistory = function (History$$1) {
  function AbstractHistory(router, base) {
    History$$1.call(this, router, base);
    this.stack = [];
    this.index = -1;
  }

  if (History$$1) AbstractHistory.__proto__ = History$$1;
  AbstractHistory.prototype = Object.create(History$$1 && History$$1.prototype);
  AbstractHistory.prototype.constructor = AbstractHistory;

  AbstractHistory.prototype.push = function push(location, onComplete, onAbort) {
    var this$1 = this;
    this.transitionTo(location, function (route) {
      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);
      this$1.index++;
      onComplete && onComplete(route);
    }, onAbort);
  };

  AbstractHistory.prototype.replace = function replace(location, onComplete, onAbort) {
    var this$1 = this;
    this.transitionTo(location, function (route) {
      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);
      onComplete && onComplete(route);
    }, onAbort);
  };

  AbstractHistory.prototype.go = function go(n) {
    var this$1 = this;
    var targetIndex = this.index + n;

    if (targetIndex < 0 || targetIndex >= this.stack.length) {
      return;
    }

    var route = this.stack[targetIndex];
    this.confirmTransition(route, function () {
      this$1.index = targetIndex;
      this$1.updateRoute(route);
    });
  };

  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation() {
    var current = this.stack[this.stack.length - 1];
    return current ? current.fullPath : '/';
  };

  AbstractHistory.prototype.ensureURL = function ensureURL() {// noop
  };

  return AbstractHistory;
}(History);
/*  */


var VueRouter = function VueRouter(options) {
  if (options === void 0) options = {};
  this.app = null;
  this.apps = [];
  this.options = options;
  this.beforeHooks = [];
  this.resolveHooks = [];
  this.afterHooks = [];
  this.matcher = createMatcher(options.routes || [], this);
  var mode = options.mode || 'hash';
  this.fallback = mode === 'history' && !supportsPushState && options.fallback !== false;

  if (this.fallback) {
    mode = 'hash';
  }

  if (!inBrowser) {
    mode = 'abstract';
  }

  this.mode = mode;

  switch (mode) {
    case 'history':
      this.history = new HTML5History(this, options.base);
      break;

    case 'hash':
      this.history = new HashHistory(this, options.base, this.fallback);
      break;

    case 'abstract':
      this.history = new AbstractHistory(this, options.base);
      break;

    default:
      if (true) {
        assert(false, "invalid mode: " + mode);
      }

  }
};

var prototypeAccessors = {
  currentRoute: {
    configurable: true
  }
};

VueRouter.prototype.match = function match(raw, current, redirectedFrom) {
  return this.matcher.match(raw, current, redirectedFrom);
};

prototypeAccessors.currentRoute.get = function () {
  return this.history && this.history.current;
};

VueRouter.prototype.init = function init(app
/* Vue component instance */
) {
  var this$1 = this;
  "development" !== 'production' && assert(install.installed, "not installed. Make sure to call `Vue.use(VueRouter)` " + "before creating root instance.");
  this.apps.push(app); // main app already initialized.

  if (this.app) {
    return;
  }

  this.app = app;
  var history = this.history;

  if (history instanceof HTML5History) {
    history.transitionTo(history.getCurrentLocation());
  } else if (history instanceof HashHistory) {
    var setupHashListener = function setupHashListener() {
      history.setupListeners();
    };

    history.transitionTo(history.getCurrentLocation(), setupHashListener, setupHashListener);
  }

  history.listen(function (route) {
    this$1.apps.forEach(function (app) {
      app._route = route;
    });
  });
};

VueRouter.prototype.beforeEach = function beforeEach(fn) {
  return registerHook(this.beforeHooks, fn);
};

VueRouter.prototype.beforeResolve = function beforeResolve(fn) {
  return registerHook(this.resolveHooks, fn);
};

VueRouter.prototype.afterEach = function afterEach(fn) {
  return registerHook(this.afterHooks, fn);
};

VueRouter.prototype.onReady = function onReady(cb, errorCb) {
  this.history.onReady(cb, errorCb);
};

VueRouter.prototype.onError = function onError(errorCb) {
  this.history.onError(errorCb);
};

VueRouter.prototype.push = function push(location, onComplete, onAbort) {
  this.history.push(location, onComplete, onAbort);
};

VueRouter.prototype.replace = function replace(location, onComplete, onAbort) {
  this.history.replace(location, onComplete, onAbort);
};

VueRouter.prototype.go = function go(n) {
  this.history.go(n);
};

VueRouter.prototype.back = function back() {
  this.go(-1);
};

VueRouter.prototype.forward = function forward() {
  this.go(1);
};

VueRouter.prototype.getMatchedComponents = function getMatchedComponents(to) {
  var route = to ? to.matched ? to : this.resolve(to).route : this.currentRoute;

  if (!route) {
    return [];
  }

  return [].concat.apply([], route.matched.map(function (m) {
    return Object.keys(m.components).map(function (key) {
      return m.components[key];
    });
  }));
};

VueRouter.prototype.resolve = function resolve(to, current, append) {
  var location = normalizeLocation(to, current || this.history.current, append, this);
  var route = this.match(location, current);
  var fullPath = route.redirectedFrom || route.fullPath;
  var base = this.history.base;
  var href = createHref(base, fullPath, this.mode);
  return {
    location: location,
    route: route,
    href: href,
    // for backwards compat
    normalizedTo: location,
    resolved: route
  };
};

VueRouter.prototype.addRoutes = function addRoutes(routes) {
  this.matcher.addRoutes(routes);

  if (this.history.current !== START) {
    this.history.transitionTo(this.history.getCurrentLocation());
  }
};

Object.defineProperties(VueRouter.prototype, prototypeAccessors);

function registerHook(list, fn) {
  list.push(fn);
  return function () {
    var i = list.indexOf(fn);

    if (i > -1) {
      list.splice(i, 1);
    }
  };
}

function createHref(base, fullPath, mode) {
  var path = mode === 'hash' ? '#' + fullPath : fullPath;
  return base ? cleanPath(base + '/' + path) : path;
}

VueRouter.install = install;
VueRouter.version = '3.0.1';

if (inBrowser && window.Vue) {
  window.Vue.use(VueRouter);
}

/* harmony default export */ __webpack_exports__["default"] = (VueRouter);

/***/ }),

/***/ "./node_modules/vue-style-loader/lib/addStylesClient.js":
/*!**************************************************************!*\
  !*** ./node_modules/vue-style-loader/lib/addStylesClient.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return addStylesClient; });
/* harmony import */ var _listToStyles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./listToStyles */ "./node_modules/vue-style-loader/lib/listToStyles.js");
/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
  Modified by Evan You @yyx990803
*/



var hasDocument = typeof document !== 'undefined'

if (typeof DEBUG !== 'undefined' && DEBUG) {
  if (!hasDocument) {
    throw new Error(
    'vue-style-loader cannot be used in a non-browser environment. ' +
    "Use { target: 'node' } in your Webpack config to indicate a server-rendering environment."
  ) }
}

/*
type StyleObject = {
  id: number;
  parts: Array<StyleObjectPart>
}

type StyleObjectPart = {
  css: string;
  media: string;
  sourceMap: ?string
}
*/

var stylesInDom = {/*
  [id: number]: {
    id: number,
    refs: number,
    parts: Array<(obj?: StyleObjectPart) => void>
  }
*/}

var head = hasDocument && (document.head || document.getElementsByTagName('head')[0])
var singletonElement = null
var singletonCounter = 0
var isProduction = false
var noop = function () {}
var options = null
var ssrIdKey = 'data-vue-ssr-id'

// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
// tags it will allow on a page
var isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\b/.test(navigator.userAgent.toLowerCase())

function addStylesClient (parentId, list, _isProduction, _options) {
  isProduction = _isProduction

  options = _options || {}

  var styles = Object(_listToStyles__WEBPACK_IMPORTED_MODULE_0__["default"])(parentId, list)
  addStylesToDom(styles)

  return function update (newList) {
    var mayRemove = []
    for (var i = 0; i < styles.length; i++) {
      var item = styles[i]
      var domStyle = stylesInDom[item.id]
      domStyle.refs--
      mayRemove.push(domStyle)
    }
    if (newList) {
      styles = Object(_listToStyles__WEBPACK_IMPORTED_MODULE_0__["default"])(parentId, newList)
      addStylesToDom(styles)
    } else {
      styles = []
    }
    for (var i = 0; i < mayRemove.length; i++) {
      var domStyle = mayRemove[i]
      if (domStyle.refs === 0) {
        for (var j = 0; j < domStyle.parts.length; j++) {
          domStyle.parts[j]()
        }
        delete stylesInDom[domStyle.id]
      }
    }
  }
}

function addStylesToDom (styles /* Array<StyleObject> */) {
  for (var i = 0; i < styles.length; i++) {
    var item = styles[i]
    var domStyle = stylesInDom[item.id]
    if (domStyle) {
      domStyle.refs++
      for (var j = 0; j < domStyle.parts.length; j++) {
        domStyle.parts[j](item.parts[j])
      }
      for (; j < item.parts.length; j++) {
        domStyle.parts.push(addStyle(item.parts[j]))
      }
      if (domStyle.parts.length > item.parts.length) {
        domStyle.parts.length = item.parts.length
      }
    } else {
      var parts = []
      for (var j = 0; j < item.parts.length; j++) {
        parts.push(addStyle(item.parts[j]))
      }
      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }
    }
  }
}

function createStyleElement () {
  var styleElement = document.createElement('style')
  styleElement.type = 'text/css'
  head.appendChild(styleElement)
  return styleElement
}

function addStyle (obj /* StyleObjectPart */) {
  var update, remove
  var styleElement = document.querySelector('style[' + ssrIdKey + '~="' + obj.id + '"]')

  if (styleElement) {
    if (isProduction) {
      // has SSR styles and in production mode.
      // simply do nothing.
      return noop
    } else {
      // has SSR styles but in dev mode.
      // for some reason Chrome can't handle source map in server-rendered
      // style tags - source maps in <style> only works if the style tag is
      // created and inserted dynamically. So we remove the server rendered
      // styles and inject new ones.
      styleElement.parentNode.removeChild(styleElement)
    }
  }

  if (isOldIE) {
    // use singleton mode for IE9.
    var styleIndex = singletonCounter++
    styleElement = singletonElement || (singletonElement = createStyleElement())
    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)
    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)
  } else {
    // use multi-style-tag mode in all other cases
    styleElement = createStyleElement()
    update = applyToTag.bind(null, styleElement)
    remove = function () {
      styleElement.parentNode.removeChild(styleElement)
    }
  }

  update(obj)

  return function updateStyle (newObj /* StyleObjectPart */) {
    if (newObj) {
      if (newObj.css === obj.css &&
          newObj.media === obj.media &&
          newObj.sourceMap === obj.sourceMap) {
        return
      }
      update(obj = newObj)
    } else {
      remove()
    }
  }
}

var replaceText = (function () {
  var textStore = []

  return function (index, replacement) {
    textStore[index] = replacement
    return textStore.filter(Boolean).join('\n')
  }
})()

function applyToSingletonTag (styleElement, index, remove, obj) {
  var css = remove ? '' : obj.css

  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = replaceText(index, css)
  } else {
    var cssNode = document.createTextNode(css)
    var childNodes = styleElement.childNodes
    if (childNodes[index]) styleElement.removeChild(childNodes[index])
    if (childNodes.length) {
      styleElement.insertBefore(cssNode, childNodes[index])
    } else {
      styleElement.appendChild(cssNode)
    }
  }
}

function applyToTag (styleElement, obj) {
  var css = obj.css
  var media = obj.media
  var sourceMap = obj.sourceMap

  if (media) {
    styleElement.setAttribute('media', media)
  }
  if (options.ssrId) {
    styleElement.setAttribute(ssrIdKey, obj.id)
  }

  if (sourceMap) {
    // https://developer.chrome.com/devtools/docs/javascript-debugging
    // this makes source maps inside style tags work properly in Chrome
    css += '\n/*# sourceURL=' + sourceMap.sources[0] + ' */'
    // http://stackoverflow.com/a/26603875
    css += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'
  }

  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild)
    }
    styleElement.appendChild(document.createTextNode(css))
  }
}


/***/ }),

/***/ "./node_modules/vue-style-loader/lib/listToStyles.js":
/*!***********************************************************!*\
  !*** ./node_modules/vue-style-loader/lib/listToStyles.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return listToStyles; });
/**
 * Translates the list format produced by css-loader into something
 * easier to manipulate.
 */
function listToStyles(parentId, list) {
  var styles = [];
  var newStyles = {};

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = item[0];
    var css = item[1];
    var media = item[2];
    var sourceMap = item[3];
    var part = {
      id: parentId + ':' + i,
      css: css,
      media: media,
      sourceMap: sourceMap
    };

    if (!newStyles[id]) {
      styles.push(newStyles[id] = {
        id: id,
        parts: [part]
      });
    } else {
      newStyles[id].parts.push(part);
    }
  }

  return styles;
}

/***/ }),

/***/ "./node_modules/vue/dist/vue.runtime.esm.js":
/*!**************************************************!*\
  !*** ./node_modules/vue/dist/vue.runtime.esm.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global, setImmediate) {function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * Vue.js v2.5.17
 * (c) 2014-2018 Evan You
 * Released under the MIT License.
 */

/*  */
var emptyObject = Object.freeze({}); // these helpers produces better vm code in JS engines due to their
// explicitness and function inlining

function isUndef(v) {
  return v === undefined || v === null;
}

function isDef(v) {
  return v !== undefined && v !== null;
}

function isTrue(v) {
  return v === true;
}

function isFalse(v) {
  return v === false;
}
/**
 * Check if value is primitive
 */


function isPrimitive(value) {
  return typeof value === 'string' || typeof value === 'number' || // $flow-disable-line
  _typeof(value) === 'symbol' || typeof value === 'boolean';
}
/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */


function isObject(obj) {
  return obj !== null && _typeof(obj) === 'object';
}
/**
 * Get the raw type string of a value e.g. [object Object]
 */


var _toString = Object.prototype.toString;

function toRawType(value) {
  return _toString.call(value).slice(8, -1);
}
/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */


function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function isRegExp(v) {
  return _toString.call(v) === '[object RegExp]';
}
/**
 * Check if val is a valid array index.
 */


function isValidArrayIndex(val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}
/**
 * Convert a value to a string that is actually rendered.
 */


function toString(val) {
  return val == null ? '' : _typeof(val) === 'object' ? JSON.stringify(val, null, 2) : String(val);
}
/**
 * Convert a input value to a number for persistence.
 * If the conversion fails, return original string.
 */


function toNumber(val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n;
}
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */


function makeMap(str, expectsLowerCase) {
  var map = Object.create(null);
  var list = str.split(',');

  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }

  return expectsLowerCase ? function (val) {
    return map[val.toLowerCase()];
  } : function (val) {
    return map[val];
  };
}
/**
 * Check if a tag is a built-in tag.
 */


var isBuiltInTag = makeMap('slot,component', true);
/**
 * Check if a attribute is a reserved attribute.
 */

var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');
/**
 * Remove an item from an array
 */

function remove(arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);

    if (index > -1) {
      return arr.splice(index, 1);
    }
  }
}
/**
 * Check whether the object has the property.
 */


var hasOwnProperty = Object.prototype.hasOwnProperty;

function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}
/**
 * Create a cached version of a pure function.
 */


function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}
/**
 * Camelize a hyphen-delimited string.
 */


var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {
    return c ? c.toUpperCase() : '';
  });
});
/**
 * Capitalize a string.
 */

var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
/**
 * Hyphenate a camelCase string.
 */

var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase();
});
/**
 * Simple bind polyfill for environments that do not support it... e.g.
 * PhantomJS 1.x. Technically we don't need this anymore since native bind is
 * now more performant in most browsers, but removing it would be breaking for
 * code that was able to run in PhantomJS 1.x, so this must be kept for
 * backwards compatibility.
 */

/* istanbul ignore next */

function polyfillBind(fn, ctx) {
  function boundFn(a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
  }

  boundFn._length = fn.length;
  return boundFn;
}

function nativeBind(fn, ctx) {
  return fn.bind(ctx);
}

var bind = Function.prototype.bind ? nativeBind : polyfillBind;
/**
 * Convert an Array-like object to a real Array.
 */

function toArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);

  while (i--) {
    ret[i] = list[i + start];
  }

  return ret;
}
/**
 * Mix properties into target object.
 */


function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }

  return to;
}
/**
 * Merge an Array of Objects into a single Object.
 */


function toObject(arr) {
  var res = {};

  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }

  return res;
}
/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)
 */


function noop(a, b, c) {}
/**
 * Always return false.
 */


var no = function no(a, b, c) {
  return false;
};
/**
 * Return same value
 */


var identity = function identity(_) {
  return _;
};
/**
 * Generate a static keys string from compiler modules.
 */

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */


function looseEqual(a, b) {
  if (a === b) {
    return true;
  }

  var isObjectA = isObject(a);
  var isObjectB = isObject(b);

  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);

      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        /* istanbul ignore next */
        return false;
      }
    } catch (e) {
      /* istanbul ignore next */
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}

function looseIndexOf(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) {
      return i;
    }
  }

  return -1;
}
/**
 * Ensure a function is called only once.
 */


function once(fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}

var SSR_ATTR = 'data-server-rendered';
var ASSET_TYPES = ['component', 'directive', 'filter'];
var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated', 'errorCaptured'];
/*  */

var config = {
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
};
/*  */

/**
 * Check if a string starts with $ or _
 */

function isReserved(str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F;
}
/**
 * Define a property.
 */


function def(obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}
/**
 * Parse simple path.
 */


var bailRE = /[^\w.$]/;

function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }

  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) {
        return;
      }

      obj = obj[segments[i]];
    }

    return obj;
  };
}
/*  */
// can we use __proto__?


var hasProto = '__proto__' in {}; // Browser environment sniffing

var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0 || weexPlatform === 'android';
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === 'ios';
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge; // Firefox has a "watch" function on Object.prototype...

var nativeWatch = {}.watch;
var supportsPassive = false;

if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', {
      get: function get() {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    }); // https://github.com/facebook/flow/issues/285

    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
} // this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV


var _isServer;

var isServerRendering = function isServerRendering() {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }

  return _isServer;
}; // detect devtools


var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
/* istanbul ignore next */

function isNative(Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
}

var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */
// $flow-disable-line


if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = function () {
    function Set() {
      this.set = Object.create(null);
    }

    Set.prototype.has = function has(key) {
      return this.set[key] === true;
    };

    Set.prototype.add = function add(key) {
      this.set[key] = true;
    };

    Set.prototype.clear = function clear() {
      this.set = Object.create(null);
    };

    return Set;
  }();
}
/*  */


var warn = noop;
var tip = noop;
var generateComponentTrace = noop; // work around flow check

var formatComponentName = noop;

if (true) {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;

  var classify = function classify(str) {
    return str.replace(classifyRE, function (c) {
      return c.toUpperCase();
    }).replace(/[-_]/g, '');
  };

  warn = function warn(msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && !config.silent) {
      console.error("[Vue warn]: " + msg + trace);
    }
  };

  tip = function tip(msg, vm) {
    if (hasConsole && !config.silent) {
      console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
    }
  };

  formatComponentName = function formatComponentName(vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>';
    }

    var options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm || {};
    var name = options.name || options._componentTag;
    var file = options.__file;

    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
  };

  var repeat = function repeat(str, n) {
    var res = '';

    while (n) {
      if (n % 2 === 1) {
        res += str;
      }

      if (n > 1) {
        str += str;
      }

      n >>= 1;
    }

    return res;
  };

  generateComponentTrace = function generateComponentTrace(vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;

      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];

          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue;
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }

        tree.push(vm);
        vm = vm.$parent;
      }

      return '\n\nfound in\n\n' + tree.map(function (vm, i) {
        return "" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
      }).join('\n');
    } else {
      return "\n\n(found in " + formatComponentName(vm) + ")";
    }
  };
}
/*  */


var uid = 0;
/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */

var Dep = function Dep() {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub(sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub(sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend() {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify() {
  // stabilize the subscriber list first
  var subs = this.subs.slice();

  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
}; // the current target watcher being evaluated.
// this is globally unique because there could be only one
// watcher being evaluated at any time.


Dep.target = null;
var targetStack = [];

function pushTarget(_target) {
  if (Dep.target) {
    targetStack.push(Dep.target);
  }

  Dep.target = _target;
}

function popTarget() {
  Dep.target = targetStack.pop();
}
/*  */


var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = {
  child: {
    configurable: true
  }
}; // DEPRECATED: alias for componentInstance for backwards compat.

/* istanbul ignore next */

prototypeAccessors.child.get = function () {
  return this.componentInstance;
};

Object.defineProperties(VNode.prototype, prototypeAccessors);

var createEmptyVNode = function createEmptyVNode(text) {
  if (text === void 0) text = '';
  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node;
};

function createTextVNode(val) {
  return new VNode(undefined, undefined, undefined, String(val));
} // optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.


function cloneVNode(vnode) {
  var cloned = new VNode(vnode.tag, vnode.data, vnode.children, vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.isCloned = true;
  return cloned;
}
/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */


var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);
var methodsToPatch = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];
/**
 * Intercept mutating methods and emit events
 */

methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator() {
    var args = [],
        len = arguments.length;

    while (len--) {
      args[len] = arguments[len];
    }

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;

    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break;

      case 'splice':
        inserted = args.slice(2);
        break;
    }

    if (inserted) {
      ob.observeArray(inserted);
    } // notify change


    ob.dep.notify();
    return result;
  });
});
/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */

var shouldObserve = true;

function toggleObserving(value) {
  shouldObserve = value;
}
/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */


var Observer = function Observer(value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);

  if (Array.isArray(value)) {
    var augment = hasProto ? protoAugment : copyAugment;
    augment(value, arrayMethods, arrayKeys);
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};
/**
 * Walk through each property and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */


Observer.prototype.walk = function walk(obj) {
  var keys = Object.keys(obj);

  for (var i = 0; i < keys.length; i++) {
    defineReactive(obj, keys[i]);
  }
};
/**
 * Observe a list of Array items.
 */


Observer.prototype.observeArray = function observeArray(items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
}; // helpers

/**
 * Augment an target Object or Array by intercepting
 * the prototype chain using __proto__
 */


function protoAugment(target, src, keys) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}
/**
 * Augment an target Object or Array by defining
 * hidden properties.
 */

/* istanbul ignore next */


function copyAugment(target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}
/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */


function observe(value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return;
  }

  var ob;

  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
    ob = new Observer(value);
  }

  if (asRootData && ob) {
    ob.vmCount++;
  }

  return ob;
}
/**
 * Define a reactive property on an Object.
 */


function defineReactive(obj, key, val, customSetter, shallow) {
  var dep = new Dep();
  var property = Object.getOwnPropertyDescriptor(obj, key);

  if (property && property.configurable === false) {
    return;
  } // cater for pre-defined getter/setters


  var getter = property && property.get;

  if (!getter && arguments.length === 2) {
    val = obj[key];
  }

  var setter = property && property.set;
  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value = getter ? getter.call(obj) : val;

      if (Dep.target) {
        dep.depend();

        if (childOb) {
          childOb.dep.depend();

          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }

      return value;
    },
    set: function reactiveSetter(newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */

      if (newVal === value || newVal !== newVal && value !== value) {
        return;
      }
      /* eslint-enable no-self-compare */


      if ("development" !== 'production' && customSetter) {
        customSetter();
      }

      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }

      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}
/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */


function set(target, key, val) {
  if ("development" !== 'production' && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot set reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }

  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
    "development" !== 'production' && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
    return val;
  }

  if (!ob) {
    target[key] = val;
    return val;
  }

  defineReactive(ob.value, key, val);
  ob.dep.notify();
  return val;
}
/**
 * Delete a property and trigger change if necessary.
 */


function del(target, key) {
  if ("development" !== 'production' && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot delete reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
    "development" !== 'production' && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
    return;
  }

  if (!hasOwn(target, key)) {
    return;
  }

  delete target[key];

  if (!ob) {
    return;
  }

  ob.dep.notify();
}
/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */


function dependArray(value) {
  for (var e = void 0, i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();

    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}
/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */


var strats = config.optionMergeStrategies;
/**
 * Options with restrictions
 */

if (true) {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
    }

    return defaultStrat(parent, child);
  };
}
/**
 * Helper that recursively merges two data objects together.
 */


function mergeData(to, from) {
  if (!from) {
    return to;
  }

  var key, toVal, fromVal;
  var keys = Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    toVal = to[key];
    fromVal = from[key];

    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }

  return to;
}
/**
 * Data
 */


function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal;
    }

    if (!parentVal) {
      return childVal;
    } // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.


    return function mergedDataFn() {
      return mergeData(typeof childVal === 'function' ? childVal.call(this, this) : childVal, typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal);
    };
  } else {
    return function mergedInstanceDataFn() {
      // instance merge
      var instanceData = typeof childVal === 'function' ? childVal.call(vm, vm) : childVal;
      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm, vm) : parentVal;

      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}

strats.data = function (parentVal, childVal, vm) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      "development" !== 'production' && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
      return parentVal;
    }

    return mergeDataOrFn(parentVal, childVal);
  }

  return mergeDataOrFn(parentVal, childVal, vm);
};
/**
 * Hooks and props are merged as arrays.
 */


function mergeHook(parentVal, childVal) {
  return childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});
/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */

function mergeAssets(parentVal, childVal, vm, key) {
  var res = Object.create(parentVal || null);

  if (childVal) {
    "development" !== 'production' && assertObjectType(key, childVal, vm);
    return extend(res, childVal);
  } else {
    return res;
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});
/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */

strats.watch = function (parentVal, childVal, vm, key) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) {
    parentVal = undefined;
  }

  if (childVal === nativeWatch) {
    childVal = undefined;
  }
  /* istanbul ignore if */


  if (!childVal) {
    return Object.create(parentVal || null);
  }

  if (true) {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = {};
  extend(ret, parentVal);

  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];

    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }

    ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
  }

  return ret;
};
/**
 * Other object hashes.
 */


strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal, vm, key) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = Object.create(null);
  extend(ret, parentVal);

  if (childVal) {
    extend(ret, childVal);
  }

  return ret;
};

strats.provide = mergeDataOrFn;
/**
 * Default strategy.
 */

var defaultStrat = function defaultStrat(parentVal, childVal) {
  return childVal === undefined ? parentVal : childVal;
};
/**
 * Validate component names
 */


function checkComponents(options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName(name) {
  if (!/^[a-zA-Z][\w-]*$/.test(name)) {
    warn('Invalid component name: "' + name + '". Component names ' + 'can only contain alphanumeric characters and the hyphen, ' + 'and must start with a letter.');
  }

  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + name);
  }
}
/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */


function normalizeProps(options, vm) {
  var props = options.props;

  if (!props) {
    return;
  }

  var res = {};
  var i, val, name;

  if (Array.isArray(props)) {
    i = props.length;

    while (i--) {
      val = props[i];

      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = {
          type: null
        };
      } else if (true) {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val) ? val : {
        type: val
      };
    }
  } else if (true) {
    warn("Invalid value for option \"props\": expected an Array or an Object, " + "but got " + toRawType(props) + ".", vm);
  }

  options.props = res;
}
/**
 * Normalize all injections into Object-based format
 */


function normalizeInject(options, vm) {
  var inject = options.inject;

  if (!inject) {
    return;
  }

  var normalized = options.inject = {};

  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = {
        from: inject[i]
      };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val) ? extend({
        from: key
      }, val) : {
        from: val
      };
    }
  } else if (true) {
    warn("Invalid value for option \"inject\": expected an Array or an Object, " + "but got " + toRawType(inject) + ".", vm);
  }
}
/**
 * Normalize raw function directives into object format.
 */


function normalizeDirectives(options) {
  var dirs = options.directives;

  if (dirs) {
    for (var key in dirs) {
      var def = dirs[key];

      if (typeof def === 'function') {
        dirs[key] = {
          bind: def,
          update: def
        };
      }
    }
  }
}

function assertObjectType(name, value, vm) {
  if (!isPlainObject(value)) {
    warn("Invalid value for option \"" + name + "\": expected an Object, " + "but got " + toRawType(value) + ".", vm);
  }
}
/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */


function mergeOptions(parent, child, vm) {
  if (true) {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);
  var extendsFrom = child.extends;

  if (extendsFrom) {
    parent = mergeOptions(parent, extendsFrom, vm);
  }

  if (child.mixins) {
    for (var i = 0, l = child.mixins.length; i < l; i++) {
      parent = mergeOptions(parent, child.mixins[i], vm);
    }
  }

  var options = {};
  var key;

  for (key in parent) {
    mergeField(key);
  }

  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }

  function mergeField(key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }

  return options;
}
/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */


function resolveAsset(options, type, id, warnMissing) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return;
  }

  var assets = options[type]; // check local registration variations first

  if (hasOwn(assets, id)) {
    return assets[id];
  }

  var camelizedId = camelize(id);

  if (hasOwn(assets, camelizedId)) {
    return assets[camelizedId];
  }

  var PascalCaseId = capitalize(camelizedId);

  if (hasOwn(assets, PascalCaseId)) {
    return assets[PascalCaseId];
  } // fallback to prototype chain


  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];

  if ("development" !== 'production' && warnMissing && !res) {
    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
  }

  return res;
}
/*  */


function validateProp(key, propOptions, propsData, vm) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key]; // boolean casting

  var booleanIndex = getTypeIndex(Boolean, prop.type);

  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);

      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  } // check default value


  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key); // since the default value is a fresh copy,
    // make sure to observe it.

    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }

  if (true) {
    assertProp(prop, key, value, vm, absent);
  }

  return value;
}
/**
 * Get the default value of a prop.
 */


function getPropDefaultValue(vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined;
  }

  var def = prop.default; // warn against non-factory defaults for Object & Array

  if ("development" !== 'production' && isObject(def)) {
    warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
  } // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger


  if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
    return vm._props[key];
  } // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context


  return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
}
/**
 * Assert whether a prop is valid.
 */


function assertProp(prop, name, value, vm, absent) {
  if (prop.required && absent) {
    warn('Missing required prop: "' + name + '"', vm);
    return;
  }

  if (value == null && !prop.required) {
    return;
  }

  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];

  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }

    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn("Invalid prop: type check failed for prop \"" + name + "\"." + " Expected " + expectedTypes.map(capitalize).join(', ') + ", got " + toRawType(value) + ".", vm);
    return;
  }

  var validator = prop.validator;

  if (validator) {
    if (!validator(value)) {
      warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType(value, type) {
  var valid;
  var expectedType = getType(type);

  if (simpleCheckRE.test(expectedType)) {
    var t = _typeof(value);

    valid = t === expectedType.toLowerCase(); // for primitive wrapper objects

    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }

  return {
    valid: valid,
    expectedType: expectedType
  };
}
/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */


function getType(fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : '';
}

function isSameType(a, b) {
  return getType(a) === getType(b);
}

function getTypeIndex(type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }

  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i;
    }
  }

  return -1;
}
/*  */


function handleError(err, vm, info) {
  if (vm) {
    var cur = vm;

    while (cur = cur.$parent) {
      var hooks = cur.$options.errorCaptured;

      if (hooks) {
        for (var i = 0; i < hooks.length; i++) {
          try {
            var capture = hooks[i].call(cur, err, vm, info) === false;

            if (capture) {
              return;
            }
          } catch (e) {
            globalHandleError(e, cur, 'errorCaptured hook');
          }
        }
      }
    }
  }

  globalHandleError(err, vm, info);
}

function globalHandleError(err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info);
    } catch (e) {
      logError(e, null, 'config.errorHandler');
    }
  }

  logError(err, vm, info);
}

function logError(err, vm, info) {
  if (true) {
    warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
  }
  /* istanbul ignore else */


  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err;
  }
}
/*  */

/* globals MessageChannel */


var callbacks = [];
var pending = false;

function flushCallbacks() {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;

  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
} // Here we have async deferring wrappers using both microtasks and (macro) tasks.
// In < 2.4 we used microtasks everywhere, but there are some scenarios where
// microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690) or even between bubbling of the same
// event (#6566). However, using (macro) tasks everywhere also has subtle problems
// when state is changed right before repaint (e.g. #6813, out-in transitions).
// Here we use microtask by default, but expose a way to force (macro) task when
// needed (e.g. in event handlers attached by v-on).


var microTimerFunc;
var macroTimerFunc;
var useMacroTask = false; // Determine (macro) task defer implementation.
// Technically setImmediate should be the ideal choice, but it's only available
// in IE. The only polyfill that consistently queues the callback after all DOM
// events triggered in the same loop is by using MessageChannel.

/* istanbul ignore if */

if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  macroTimerFunc = function macroTimerFunc() {
    setImmediate(flushCallbacks);
  };
} else if (typeof MessageChannel !== 'undefined' && (isNative(MessageChannel) || // PhantomJS
MessageChannel.toString() === '[object MessageChannelConstructor]')) {
  var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = flushCallbacks;

  macroTimerFunc = function macroTimerFunc() {
    port.postMessage(1);
  };
} else {
  /* istanbul ignore next */
  macroTimerFunc = function macroTimerFunc() {
    setTimeout(flushCallbacks, 0);
  };
} // Determine microtask defer implementation.

/* istanbul ignore next, $flow-disable-line */


if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();

  microTimerFunc = function microTimerFunc() {
    p.then(flushCallbacks); // in problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.

    if (isIOS) {
      setTimeout(noop);
    }
  };
} else {
  // fallback to macro
  microTimerFunc = macroTimerFunc;
}
/**
 * Wrap a function so that if any code inside triggers state change,
 * the changes are queued using a (macro) task instead of a microtask.
 */


function withMacroTask(fn) {
  return fn._withTask || (fn._withTask = function () {
    useMacroTask = true;
    var res = fn.apply(null, arguments);
    useMacroTask = false;
    return res;
  });
}

function nextTick(cb, ctx) {
  var _resolve;

  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });

  if (!pending) {
    pending = true;

    if (useMacroTask) {
      macroTimerFunc();
    } else {
      microTimerFunc();
    }
  } // $flow-disable-line


  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    });
  }
}
/*  */

/* not type checking this file because flow doesn't play well with Proxy */


var initProxy;

if (true) {
  var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify
  );

  var warnNonPresent = function warnNonPresent(target, key) {
    warn("Property or method \"" + key + "\" is not defined on the instance but " + 'referenced during render. Make sure that this property is reactive, ' + 'either in the data option, or for class-based components, by ' + 'initializing the property. ' + 'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target);
  };

  var hasProxy = typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set(target, key, value) {
        if (isBuiltInModifier(key)) {
          warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
          return false;
        } else {
          target[key] = value;
          return true;
        }
      }
    });
  }

  var hasHandler = {
    has: function has(target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';

      if (!has && !isAllowed) {
        warnNonPresent(target, key);
      }

      return has || !isAllowed;
    }
  };
  var getHandler = {
    get: function get(target, key) {
      if (typeof key === 'string' && !(key in target)) {
        warnNonPresent(target, key);
      }

      return target[key];
    }
  };

  initProxy = function initProxy(vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}
/*  */


var seenObjects = new _Set();
/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */

function traverse(val) {
  _traverse(val, seenObjects);

  seenObjects.clear();
}

function _traverse(val, seen) {
  var i, keys;
  var isA = Array.isArray(val);

  if (!isA && !isObject(val) || Object.isFrozen(val) || val instanceof VNode) {
    return;
  }

  if (val.__ob__) {
    var depId = val.__ob__.dep.id;

    if (seen.has(depId)) {
      return;
    }

    seen.add(depId);
  }

  if (isA) {
    i = val.length;

    while (i--) {
      _traverse(val[i], seen);
    }
  } else {
    keys = Object.keys(val);
    i = keys.length;

    while (i--) {
      _traverse(val[keys[i]], seen);
    }
  }
}

var mark;
var measure;

if (true) {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */

  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
    mark = function mark(tag) {
      return perf.mark(tag);
    };

    measure = function measure(name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      perf.clearMeasures(name);
    };
  }
}
/*  */


var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first

  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  };
});

function createFnInvoker(fns) {
  function invoker() {
    var arguments$1 = arguments;
    var fns = invoker.fns;

    if (Array.isArray(fns)) {
      var cloned = fns.slice();

      for (var i = 0; i < cloned.length; i++) {
        cloned[i].apply(null, arguments$1);
      }
    } else {
      // return handler return value for single handlers
      return fns.apply(null, arguments);
    }
  }

  invoker.fns = fns;
  return invoker;
}

function updateListeners(on, oldOn, add, remove$$1, vm) {
  var name, def, cur, old, event;

  for (name in on) {
    def = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    /* istanbul ignore if */

    if (isUndef(cur)) {
      "development" !== 'production' && warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur);
      }

      add(event.name, cur, event.once, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }

  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}
/*  */


function mergeVNodeHook(def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }

  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook() {
    hook.apply(this, arguments); // important: remove merged hook to ensure it's called only once
    // and prevent memory leak

    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}
/*  */


function extractPropsFromVNodeData(data, Ctor, tag) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;

  if (isUndef(propOptions)) {
    return;
  }

  var res = {};
  var attrs = data.attrs;
  var props = data.props;

  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);

      if (true) {
        var keyInLowerCase = key.toLowerCase();

        if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {
          tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
        }
      }

      checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
    }
  }

  return res;
}

function checkProp(res, hash, key, altKey, preserve) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];

      if (!preserve) {
        delete hash[key];
      }

      return true;
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];

      if (!preserve) {
        delete hash[altKey];
      }

      return true;
    }
  }

  return false;
}
/*  */
// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:
// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.


function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }

  return children;
} // 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.


function normalizeChildren(children) {
  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
}

function isTextNode(node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}

function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;

  for (i = 0; i < children.length; i++) {
    c = children[i];

    if (isUndef(c) || typeof c === 'boolean') {
      continue;
    }

    lastIndex = res.length - 1;
    last = res[lastIndex]; //  nested

    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, (nestedIndex || '') + "_" + i); // merge adjacent text nodes

        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + c[0].text);
          c.shift();
        }

        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }

        res.push(c);
      }
    }
  }

  return res;
}
/*  */


function ensureCtor(comp, base) {
  if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === 'Module') {
    comp = comp.default;
  }

  return isObject(comp) ? base.extend(comp) : comp;
}

function createAsyncPlaceholder(factory, data, context, children, tag) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = {
    data: data,
    context: context,
    children: children,
    tag: tag
  };
  return node;
}

function resolveAsyncComponent(factory, baseCtor, context) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp;
  }

  if (isDef(factory.resolved)) {
    return factory.resolved;
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp;
  }

  if (isDef(factory.contexts)) {
    // already pending
    factory.contexts.push(context);
  } else {
    var contexts = factory.contexts = [context];
    var sync = true;

    var forceRender = function forceRender() {
      for (var i = 0, l = contexts.length; i < l; i++) {
        contexts[i].$forceUpdate();
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor); // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)

      if (!sync) {
        forceRender();
      }
    });
    var reject = once(function (reason) {
      "development" !== 'production' && warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));

      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender();
      }
    });
    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (typeof res.then === 'function') {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isDef(res.component) && typeof res.component.then === 'function') {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);

          if (res.delay === 0) {
            factory.loading = true;
          } else {
            setTimeout(function () {
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender();
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          setTimeout(function () {
            if (isUndef(factory.resolved)) {
              reject( true ? "timeout (" + res.timeout + "ms)" : undefined);
            }
          }, res.timeout);
        }
      }
    }

    sync = false; // return in case resolved synchronously

    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}
/*  */


function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}
/*  */


function getFirstComponentChild(children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];

      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c;
      }
    }
  }
}
/*  */

/*  */


function initEvents(vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false; // init parent attached events

  var listeners = vm.$options._parentListeners;

  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add(event, fn, once) {
  if (once) {
    target.$once(event, fn);
  } else {
    target.$on(event, fn);
  }
}

function remove$1(event, fn) {
  target.$off(event, fn);
}

function updateComponentListeners(vm, listeners, oldListeners) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);
  target = undefined;
}

function eventsMixin(Vue) {
  var hookRE = /^hook:/;

  Vue.prototype.$on = function (event, fn) {
    var this$1 = this;
    var vm = this;

    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        this$1.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn); // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup

      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }

    return vm;
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;

    function on() {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }

    on.fn = fn;
    vm.$on(event, on);
    return vm;
  };

  Vue.prototype.$off = function (event, fn) {
    var this$1 = this;
    var vm = this; // all

    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm;
    } // array of events


    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        this$1.$off(event[i], fn);
      }

      return vm;
    } // specific event


    var cbs = vm._events[event];

    if (!cbs) {
      return vm;
    }

    if (!fn) {
      vm._events[event] = null;
      return vm;
    }

    if (fn) {
      // specific handler
      var cb;
      var i$1 = cbs.length;

      while (i$1--) {
        cb = cbs[i$1];

        if (cb === fn || cb.fn === fn) {
          cbs.splice(i$1, 1);
          break;
        }
      }
    }

    return vm;
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;

    if (true) {
      var lowerCaseEvent = event.toLowerCase();

      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
      }
    }

    var cbs = vm._events[event];

    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);

      for (var i = 0, l = cbs.length; i < l; i++) {
        try {
          cbs[i].apply(vm, args);
        } catch (e) {
          handleError(e, vm, "event handler for \"" + event + "\"");
        }
      }
    }

    return vm;
  };
}
/*  */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */


function resolveSlots(children, context) {
  var slots = {};

  if (!children) {
    return slots;
  }

  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data; // remove slot attribute if the node is resolved as a Vue slot node

    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    } // named slots should only be respected if the vnode was rendered in the
    // same context.


    if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
      var name = data.slot;
      var slot = slots[name] || (slots[name] = []);

      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  } // ignore slots that contains only whitespace


  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }

  return slots;
}

function isWhitespace(node) {
  return node.isComment && !node.asyncFactory || node.text === ' ';
}

function resolveScopedSlots(fns, // see flow/vnode
res) {
  res = res || {};

  for (var i = 0; i < fns.length; i++) {
    if (Array.isArray(fns[i])) {
      resolveScopedSlots(fns[i], res);
    } else {
      res[fns[i].key] = fns[i].fn;
    }
  }

  return res;
}
/*  */


var activeInstance = null;
var isUpdatingChildComponent = false;

function initLifecycle(vm) {
  var options = vm.$options; // locate first non-abstract parent

  var parent = options.parent;

  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }

    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;
  vm.$children = [];
  vm.$refs = {};
  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin(Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;

    if (vm._isMounted) {
      callHook(vm, 'beforeUpdate');
    }

    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var prevActiveInstance = activeInstance;
    activeInstance = vm;
    vm._vnode = vnode; // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.

    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false
      /* removeOnly */
      , vm.$options._parentElm, vm.$options._refElm); // no need for the ref nodes after initial patch
      // this prevents keeping a detached DOM tree in memory (#5851)

      vm.$options._parentElm = vm.$options._refElm = null;
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }

    activeInstance = prevActiveInstance; // update __vue__ reference

    if (prevEl) {
      prevEl.__vue__ = null;
    }

    if (vm.$el) {
      vm.$el.__vue__ = vm;
    } // if parent is an HOC, update its $el as well


    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    } // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.

  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;

    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;

    if (vm._isBeingDestroyed) {
      return;
    }

    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true; // remove self from parent

    var parent = vm.$parent;

    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    } // teardown watchers


    if (vm._watcher) {
      vm._watcher.teardown();
    }

    var i = vm._watchers.length;

    while (i--) {
      vm._watchers[i].teardown();
    } // remove reference from data ob
    // frozen object may not have observer.


    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    } // call the last hook...


    vm._isDestroyed = true; // invoke destroy hooks on current rendered tree

    vm.__patch__(vm._vnode, null); // fire destroyed hook


    callHook(vm, 'destroyed'); // turn off all instance listeners.

    vm.$off(); // remove __vue__ reference

    if (vm.$el) {
      vm.$el.__vue__ = null;
    } // release circular reference (#6759)


    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent(vm, el, hydrating) {
  vm.$el = el;

  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;

    if (true) {
      /* istanbul ignore if */
      if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
        warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
      } else {
        warn('Failed to mount component: template or render function not defined.', vm);
      }
    }
  }

  callHook(vm, 'beforeMount');
  var updateComponent;
  /* istanbul ignore if */

  if ("development" !== 'production' && config.performance && mark) {
    updateComponent = function updateComponent() {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;
      mark(startTag);

      var vnode = vm._render();

      mark(endTag);
      measure("vue " + name + " render", startTag, endTag);
      mark(startTag);

      vm._update(vnode, hydrating);

      mark(endTag);
      measure("vue " + name + " patch", startTag, endTag);
    };
  } else {
    updateComponent = function updateComponent() {
      vm._update(vm._render(), hydrating);
    };
  } // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined


  new Watcher(vm, updateComponent, noop, null, true
  /* isRenderWatcher */
  );
  hydrating = false; // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook

  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }

  return vm;
}

function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  if (true) {
    isUpdatingChildComponent = true;
  } // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren


  var hasChildren = !!(renderChildren || // has new static slots
  vm.$options._renderChildren || // has old static slots
  parentVnode.data.scopedSlots || // has new scoped slots
  vm.$scopedSlots !== emptyObject // has old scoped slots
  );
  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) {
    // update child tree's parent
    vm._vnode.parent = parentVnode;
  }

  vm.$options._renderChildren = renderChildren; // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render

  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject; // update props

  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];

    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?

      props[key] = validateProp(key, propOptions, propsData, vm);
    }

    toggleObserving(true); // keep a copy of raw propsData

    vm.$options.propsData = propsData;
  } // update listeners


  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners); // resolve slots + force update if has children

  if (hasChildren) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (true) {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) {
      return true;
    }
  }

  return false;
}

function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;

    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }

  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;

    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'activated');
  }
}

function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;

    if (isInInactiveTree(vm)) {
      return;
    }
  }

  if (!vm._inactive) {
    vm._inactive = true;

    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'deactivated');
  }
}

function callHook(vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];

  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      try {
        handlers[i].call(vm);
      } catch (e) {
        handleError(e, vm, hook + " hook");
      }
    }
  }

  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }

  popTarget();
}
/*  */


var MAX_UPDATE_COUNT = 100;
var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;
/**
 * Reset the scheduler's state.
 */

function resetSchedulerState() {
  index = queue.length = activatedChildren.length = 0;
  has = {};

  if (true) {
    circular = {};
  }

  waiting = flushing = false;
}
/**
 * Flush both queues and run the watchers.
 */


function flushSchedulerQueue() {
  flushing = true;
  var watcher, id; // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.

  queue.sort(function (a, b) {
    return a.id - b.id;
  }); // do not cache length because more watchers might be pushed
  // as we run existing watchers

  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    id = watcher.id;
    has[id] = null;
    watcher.run(); // in dev build, check and stop circular updates.

    if ("development" !== 'production' && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;

      if (circular[id] > MAX_UPDATE_COUNT) {
        warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
        break;
      }
    }
  } // keep copies of post queues before resetting state


  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();
  resetSchedulerState(); // call component updated and activated hooks

  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue); // devtool hook

  /* istanbul ignore if */

  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks(queue) {
  var i = queue.length;

  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;

    if (vm._watcher === watcher && vm._isMounted) {
      callHook(vm, 'updated');
    }
  }
}
/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */


function queueActivatedComponent(vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks(queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true
    /* true */
    );
  }
}
/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */


function queueWatcher(watcher) {
  var id = watcher.id;

  if (has[id] == null) {
    has[id] = true;

    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;

      while (i > index && queue[i].id > watcher.id) {
        i--;
      }

      queue.splice(i + 1, 0, watcher);
    } // queue the flush


    if (!waiting) {
      waiting = true;
      nextTick(flushSchedulerQueue);
    }
  }
}
/*  */


var uid$1 = 0;
/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */

var Watcher = function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {
  this.vm = vm;

  if (isRenderWatcher) {
    vm._watcher = this;
  }

  vm._watchers.push(this); // options


  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }

  this.cb = cb;
  this.id = ++uid$1; // uid for batching

  this.active = true;
  this.dirty = this.lazy; // for lazy watchers

  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression =  true ? expOrFn.toString() : undefined; // parse expression for getter

  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);

    if (!this.getter) {
      this.getter = function () {};

      "development" !== 'production' && warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
    }
  }

  this.value = this.lazy ? undefined : this.get();
};
/**
 * Evaluate the getter, and re-collect dependencies.
 */


Watcher.prototype.get = function get() {
  pushTarget(this);
  var value;
  var vm = this.vm;

  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
    } else {
      throw e;
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }

    popTarget();
    this.cleanupDeps();
  }

  return value;
};
/**
 * Add a dependency to this directive.
 */


Watcher.prototype.addDep = function addDep(dep) {
  var id = dep.id;

  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);

    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};
/**
 * Clean up for dependency collection.
 */


Watcher.prototype.cleanupDeps = function cleanupDeps() {
  var this$1 = this;
  var i = this.deps.length;

  while (i--) {
    var dep = this$1.deps[i];

    if (!this$1.newDepIds.has(dep.id)) {
      dep.removeSub(this$1);
    }
  }

  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};
/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */


Watcher.prototype.update = function update() {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};
/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */


Watcher.prototype.run = function run() {
  if (this.active) {
    var value = this.get();

    if (value !== this.value || // Deep watchers and watchers on Object/Arrays should fire even
    // when the value is the same, because the value may
    // have mutated.
    isObject(value) || this.deep) {
      // set new value
      var oldValue = this.value;
      this.value = value;

      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, "callback for watcher \"" + this.expression + "\"");
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};
/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */


Watcher.prototype.evaluate = function evaluate() {
  this.value = this.get();
  this.dirty = false;
};
/**
 * Depend on all deps collected by this watcher.
 */


Watcher.prototype.depend = function depend() {
  var this$1 = this;
  var i = this.deps.length;

  while (i--) {
    this$1.deps[i].depend();
  }
};
/**
 * Remove self from all dependencies' subscriber list.
 */


Watcher.prototype.teardown = function teardown() {
  var this$1 = this;

  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }

    var i = this.deps.length;

    while (i--) {
      this$1.deps[i].removeSub(this$1);
    }

    this.active = false;
  }
};
/*  */


var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy(target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };

  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState(vm) {
  vm._watchers = [];
  var opts = vm.$options;

  if (opts.props) {
    initProps(vm, opts.props);
  }

  if (opts.methods) {
    initMethods(vm, opts.methods);
  }

  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true
    /* asRootData */
    );
  }

  if (opts.computed) {
    initComputed(vm, opts.computed);
  }

  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps(vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {}; // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.

  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent; // root instance props should be converted

  if (!isRoot) {
    toggleObserving(false);
  }

  var loop = function loop(key) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */

    if (true) {
      var hyphenatedKey = hyphenate(key);

      if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {
        warn("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop.", vm);
      }

      defineReactive(props, key, value, function () {
        if (vm.$parent && !isUpdatingChildComponent) {
          warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
        }
      });
    } else {} // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.


    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) {
    loop(key);
  }

  toggleObserving(true);
}

function initData(vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};

  if (!isPlainObject(data)) {
    data = {};
    "development" !== 'production' && warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
  } // proxy data on instance


  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;

  while (i--) {
    var key = keys[i];

    if (true) {
      if (methods && hasOwn(methods, key)) {
        warn("Method \"" + key + "\" has already been defined as a data property.", vm);
      }
    }

    if (props && hasOwn(props, key)) {
      "development" !== 'production' && warn("The data property \"" + key + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  } // observe data


  observe(data, true
  /* asRootData */
  );
}

function getData(data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();

  try {
    return data.call(vm, vm);
  } catch (e) {
    handleError(e, vm, "data()");
    return {};
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = {
  lazy: true
};

function initComputed(vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null); // computed properties are just getters during SSR

  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;

    if ("development" !== 'production' && getter == null) {
      warn("Getter is missing for computed property \"" + key + "\".", vm);
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
    } // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.


    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (true) {
      if (key in vm.$data) {
        warn("The computed property \"" + key + "\" is already defined in data.", vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
      }
    }
  }
}

function defineComputed(target, key, userDef) {
  var shouldCache = !isServerRendering();

  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : userDef;
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : userDef.get : noop;
    sharedPropertyDefinition.set = userDef.set ? userDef.set : noop;
  }

  if ("development" !== 'production' && sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn("Computed property \"" + key + "\" was assigned to but it has no setter.", this);
    };
  }

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter(key) {
  return function computedGetter() {
    var watcher = this._computedWatchers && this._computedWatchers[key];

    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }

      if (Dep.target) {
        watcher.depend();
      }

      return watcher.value;
    }
  };
}

function initMethods(vm, methods) {
  var props = vm.$options.props;

  for (var key in methods) {
    if (true) {
      if (methods[key] == null) {
        warn("Method \"" + key + "\" has an undefined value in the component definition. " + "Did you reference the function correctly?", vm);
      }

      if (props && hasOwn(props, key)) {
        warn("Method \"" + key + "\" has already been defined as a prop.", vm);
      }

      if (key in vm && isReserved(key)) {
        warn("Method \"" + key + "\" conflicts with an existing Vue instance method. " + "Avoid defining component methods that start with _ or $.");
      }
    }

    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);
  }
}

function initWatch(vm, watch) {
  for (var key in watch) {
    var handler = watch[key];

    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher(vm, expOrFn, handler, options) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }

  if (typeof handler === 'string') {
    handler = vm[handler];
  }

  return vm.$watch(expOrFn, handler, options);
}

function stateMixin(Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};

  dataDef.get = function () {
    return this._data;
  };

  var propsDef = {};

  propsDef.get = function () {
    return this._props;
  };

  if (true) {
    dataDef.set = function (newData) {
      warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
    };

    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }

  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);
  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (expOrFn, cb, options) {
    var vm = this;

    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options);
    }

    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);

    if (options.immediate) {
      cb.call(vm, watcher.value);
    }

    return function unwatchFn() {
      watcher.teardown();
    };
  };
}
/*  */


function initProvide(vm) {
  var provide = vm.$options.provide;

  if (provide) {
    vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
  }
}

function initInjections(vm) {
  var result = resolveInject(vm.$options.inject, vm);

  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (true) {
        defineReactive(vm, key, result[key], function () {
          warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
        });
      } else {}
    });
    toggleObserving(true);
  }
}

function resolveInject(inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol ? Reflect.ownKeys(inject).filter(function (key) {
      /* istanbul ignore next */
      return Object.getOwnPropertyDescriptor(inject, key).enumerable;
    }) : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var provideKey = inject[key].from;
      var source = vm;

      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break;
        }

        source = source.$parent;
      }

      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function' ? provideDefault.call(vm) : provideDefault;
        } else if (true) {
          warn("Injection \"" + key + "\" not found", vm);
        }
      }
    }

    return result;
  }
}
/*  */

/**
 * Runtime helper for rendering v-for lists.
 */


function renderList(val, render) {
  var ret, i, l, keys, key;

  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);

    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);

    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    keys = Object.keys(val);
    ret = new Array(keys.length);

    for (i = 0, l = keys.length; i < l; i++) {
      key = keys[i];
      ret[i] = render(val[key], key, i);
    }
  }

  if (isDef(ret)) {
    ret._isVList = true;
  }

  return ret;
}
/*  */

/**
 * Runtime helper for rendering <slot>
 */


function renderSlot(name, fallback, props, bindObject) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;

  if (scopedSlotFn) {
    // scoped slot
    props = props || {};

    if (bindObject) {
      if ("development" !== 'production' && !isObject(bindObject)) {
        warn('slot v-bind without argument expects an Object', this);
      }

      props = extend(extend({}, bindObject), props);
    }

    nodes = scopedSlotFn(props) || fallback;
  } else {
    var slotNodes = this.$slots[name]; // warn duplicate slot usage

    if (slotNodes) {
      if ("development" !== 'production' && slotNodes._rendered) {
        warn("Duplicate presence of slot \"" + name + "\" found in the same render tree " + "- this will likely cause render errors.", this);
      }

      slotNodes._rendered = true;
    }

    nodes = slotNodes || fallback;
  }

  var target = props && props.slot;

  if (target) {
    return this.$createElement('template', {
      slot: target
    }, nodes);
  } else {
    return nodes;
  }
}
/*  */

/**
 * Runtime helper for resolving filters
 */


function resolveFilter(id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity;
}
/*  */


function isKeyNotMatch(expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1;
  } else {
    return expect !== actual;
  }
}
/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */


function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;

  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName);
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode);
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key;
  }
}
/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */


function bindObjectProps(data, tag, value, asProp, isSync) {
  if (value) {
    if (!isObject(value)) {
      "development" !== 'production' && warn('v-bind without argument expects an Object or Array value', this);
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }

      var hash;

      var loop = function loop(key) {
        if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
        }

        if (!(key in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});

            on["update:" + key] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) {
        loop(key);
      }
    }
  }

  return data;
}
/*  */

/**
 * Runtime helper for rendering static trees.
 */


function renderStatic(index, isInFor) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index]; // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.

  if (tree && !isInFor) {
    return tree;
  } // otherwise, render a fresh tree.


  tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, null, this // for render fns generated for functional component templates
  );
  markStatic(tree, "__static__" + index, false);
  return tree;
}
/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */


function markOnce(tree, index, key) {
  markStatic(tree, "__once__" + index + (key ? "_" + key : ""), true);
  return tree;
}

function markStatic(tree, key, isOnce) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], key + "_" + i, isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}
/*  */


function bindObjectListeners(data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      "development" !== 'production' && warn('v-on without argument expects an Object value', this);
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};

      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }

  return data;
}
/*  */


function installRenderHelpers(target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
}
/*  */


function FunctionalRenderContext(data, props, children, parent, Ctor) {
  var options = Ctor.options; // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check

  var contextVm;

  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent); // $flow-disable-line

    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent; // $flow-disable-line

    parent = parent._original;
  }

  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;
  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);

  this.slots = function () {
    return resolveSlots(children, parent);
  }; // support for compiled functional template


  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options; // pre-resolve slots for renderSlot()

    this.$slots = this.slots();
    this.$scopedSlots = data.scopedSlots || emptyObject;
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);

      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }

      return vnode;
    };
  } else {
    this._c = function (a, b, c, d) {
      return createElement(contextVm, a, b, c, d, needNormalization);
    };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;

  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) {
      mergeProps(props, data.attrs);
    }

    if (isDef(data.props)) {
      mergeProps(props, data.props);
    }
  }

  var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);
  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options);
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);

    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options);
    }

    return res;
  }
}

function cloneAndMarkFunctionalResult(vnode, data, contextVm, options) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;

  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }

  return clone;
}

function mergeProps(to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}
/*  */
// Register the component hook to weex native render engine.
// The hook will be triggered by native, not javascript.
// Updates the state of the component to weex native render engine.

/*  */
// https://github.com/Hanks10100/weex-native-directive/tree/master/component
// listening on native callback

/*  */

/*  */
// inline hooks to be invoked on component VNodes during patch


var componentVNodeHooks = {
  init: function init(vnode, hydrating, parentElm, refElm) {
    if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow

      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance, parentElm, refElm);
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },
  prepatch: function prepatch(oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(child, options.propsData, // updated props
    options.listeners, // updated listeners
    vnode, // new parent vnode
    options.children // new children
    );
  },
  insert: function insert(vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }

    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  },
  destroy: function destroy(vnode) {
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  }
};
var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent(Ctor, data, context, children, tag) {
  if (isUndef(Ctor)) {
    return;
  }

  var baseCtor = context.$options._base; // plain options object: turn it into a constructor

  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  } // if at this stage it's not a constructor or an async component factory,
  // reject.


  if (typeof Ctor !== 'function') {
    if (true) {
      warn("Invalid Component definition: " + String(Ctor), context);
    }

    return;
  } // async component


  var asyncFactory;

  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);

    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
    }
  }

  data = data || {}; // resolve constructor options in case global mixins are applied after
  // component constructor creation

  resolveConstructorOptions(Ctor); // transform component v-model data into props & events

  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  } // extract props


  var propsData = extractPropsFromVNodeData(data, Ctor, tag); // functional component

  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children);
  } // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners


  var listeners = data.on; // replace with listeners with .native modifier
  // so it gets processed during parent component patch.

  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot
    // work around flow
    var slot = data.slot;
    data = {};

    if (slot) {
      data.slot = slot;
    }
  } // install component management hooks onto the placeholder node


  installComponentHooks(data); // return a placeholder vnode

  var name = Ctor.options.name || tag;
  var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, {
    Ctor: Ctor,
    propsData: propsData,
    listeners: listeners,
    tag: tag,
    children: children
  }, asyncFactory); // Weex specific: invoke recycle-list optimized @render function for
  // extracting cell-slot template.
  // https://github.com/Hanks10100/weex-native-directive/tree/master/component

  /* istanbul ignore if */

  return vnode;
}

function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't
parent, // activeInstance in lifecycle state
parentElm, refElm) {
  var options = {
    _isComponent: true,
    parent: parent,
    _parentVnode: vnode,
    _parentElm: parentElm || null,
    _refElm: refElm || null
  }; // check inline-template render functions

  var inlineTemplate = vnode.data.inlineTemplate;

  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }

  return new vnode.componentOptions.Ctor(options);
}

function installComponentHooks(data) {
  var hooks = data.hook || (data.hook = {});

  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    hooks[key] = componentVNodeHooks[key];
  }
} // transform component v-model info (value and callback) into
// prop and event handler respectively.


function transformModel(options, data) {
  var prop = options.model && options.model.prop || 'value';
  var event = options.model && options.model.event || 'input';
  (data.props || (data.props = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});

  if (isDef(on[event])) {
    on[event] = [data.model.callback].concat(on[event]);
  } else {
    on[event] = data.model.callback;
  }
}
/*  */


var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2; // wrapper function for providing a more flexible interface
// without getting yelled at by flow

function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }

  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }

  return _createElement(context, tag, data, children, normalizationType);
}

function _createElement(context, tag, data, children, normalizationType) {
  if (isDef(data) && isDef(data.__ob__)) {
    "development" !== 'production' && warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
    return createEmptyVNode();
  } // object syntax in v-bind


  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }

  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode();
  } // warn against non-primitive key


  if ("development" !== 'production' && isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
    {
      warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);
    }
  } // support single function children as default scoped slot


  if (Array.isArray(children) && typeof children[0] === 'function') {
    data = data || {};
    data.scopedSlots = {
      default: children[0]
    };
    children.length = 0;
  }

  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }

  var vnode, ns;

  if (typeof tag === 'string') {
    var Ctor;
    ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);

    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(tag, data, children, undefined, undefined, context);
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }

  if (Array.isArray(vnode)) {
    return vnode;
  } else if (isDef(vnode)) {
    if (isDef(ns)) {
      applyNS(vnode, ns);
    }

    if (isDef(data)) {
      registerDeepBindings(data);
    }

    return vnode;
  } else {
    return createEmptyVNode();
  }
}

function applyNS(vnode, ns, force) {
  vnode.ns = ns;

  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }

  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];

      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== 'svg')) {
        applyNS(child, ns, force);
      }
    }
  }
} // ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes


function registerDeepBindings(data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }

  if (isObject(data.class)) {
    traverse(data.class);
  }
}
/*  */


function initRender(vm) {
  vm._vnode = null; // the root of the child tree

  vm._staticTrees = null; // v-once cached trees

  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree

  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject; // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates

  vm._c = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, false);
  }; // normalization is always applied for the public version, used in
  // user-written render functions.


  vm.$createElement = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, true);
  }; // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated


  var parentData = parentVnode && parentVnode.data;
  /* istanbul ignore else */

  if (true) {
    defineReactive(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {}
}

function renderMixin(Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this);
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode; // reset _rendered flag on slots for duplicate slot check

    if (true) {
      for (var key in vm.$slots) {
        // $flow-disable-line
        vm.$slots[key]._rendered = false;
      }
    }

    if (_parentVnode) {
      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject;
    } // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.


    vm.$vnode = _parentVnode; // render self

    var vnode;

    try {
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render"); // return error render result,
      // or previous vnode to prevent render error causing blank component

      /* istanbul ignore else */

      if (true) {
        if (vm.$options.renderError) {
          try {
            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
          } catch (e) {
            handleError(e, vm, "renderError");
            vnode = vm._vnode;
          }
        } else {
          vnode = vm._vnode;
        }
      } else {}
    } // return empty vnode in case the render function errored out


    if (!(vnode instanceof VNode)) {
      if ("development" !== 'production' && Array.isArray(vnode)) {
        warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
      }

      vnode = createEmptyVNode();
    } // set parent


    vnode.parent = _parentVnode;
    return vnode;
  };
}
/*  */


var uid$3 = 0;

function initMixin(Vue) {
  Vue.prototype._init = function (options) {
    var vm = this; // a uid

    vm._uid = uid$3++;
    var startTag, endTag;
    /* istanbul ignore if */

    if ("development" !== 'production' && config.performance && mark) {
      startTag = "vue-perf-start:" + vm._uid;
      endTag = "vue-perf-end:" + vm._uid;
      mark(startTag);
    } // a flag to avoid this being observed


    vm._isVue = true; // merge options

    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
    }
    /* istanbul ignore else */


    if (true) {
      initProxy(vm);
    } else {} // expose real self


    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props

    initState(vm);
    initProvide(vm); // resolve provide after data/props

    callHook(vm, 'created');
    /* istanbul ignore if */

    if ("development" !== 'production' && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure("vue " + vm._name + " init", startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent(vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options); // doing this because it's faster than dynamic enumeration.

  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  opts._parentElm = options._parentElm;
  opts._refElm = options._refElm;
  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions(Ctor) {
  var options = Ctor.options;

  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;

    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions; // check if there are any late-modified/attached options (#4976)

      var modifiedOptions = resolveModifiedOptions(Ctor); // update base extend options

      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }

      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);

      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }

  return options;
}

function resolveModifiedOptions(Ctor) {
  var modified;
  var latest = Ctor.options;
  var extended = Ctor.extendOptions;
  var sealed = Ctor.sealedOptions;

  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) {
        modified = {};
      }

      modified[key] = dedupe(latest[key], extended[key], sealed[key]);
    }
  }

  return modified;
}

function dedupe(latest, extended, sealed) {
  // compare latest and sealed to ensure lifecycle hooks won't be duplicated
  // between merges
  if (Array.isArray(latest)) {
    var res = [];
    sealed = Array.isArray(sealed) ? sealed : [sealed];
    extended = Array.isArray(extended) ? extended : [extended];

    for (var i = 0; i < latest.length; i++) {
      // push original options and not sealed options to exclude duplicated options
      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {
        res.push(latest[i]);
      }
    }

    return res;
  } else {
    return latest;
  }
}

function Vue(options) {
  if ("development" !== 'production' && !(this instanceof Vue)) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }

  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);
/*  */

function initUse(Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);

    if (installedPlugins.indexOf(plugin) > -1) {
      return this;
    } // additional parameters


    var args = toArray(arguments, 1);
    args.unshift(this);

    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }

    installedPlugins.push(plugin);
    return this;
  };
}
/*  */


function initMixin$1(Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this;
  };
}
/*  */


function initExtend(Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;
  /**
   * Class inheritance
   */

  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});

    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }

    var name = extendOptions.name || Super.options.name;

    if ("development" !== 'production' && name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent(options) {
      this._init(options);
    };

    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub['super'] = Super; // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.

    if (Sub.options.props) {
      initProps$1(Sub);
    }

    if (Sub.options.computed) {
      initComputed$1(Sub);
    } // allow further extension/mixin/plugin usage


    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use; // create asset registers, so extended classes
    // can have their private assets too.

    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    }); // enable recursive self-lookup

    if (name) {
      Sub.options.components[name] = Sub;
    } // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.


    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options); // cache constructor

    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}

function initProps$1(Comp) {
  var props = Comp.options.props;

  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1(Comp) {
  var computed = Comp.options.computed;

  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}
/*  */


function initAssetRegisters(Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (id, definition) {
      if (!definition) {
        return this.options[type + 's'][id];
      } else {
        /* istanbul ignore if */
        if ("development" !== 'production' && type === 'component') {
          validateComponentName(id);
        }

        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }

        if (type === 'directive' && typeof definition === 'function') {
          definition = {
            bind: definition,
            update: definition
          };
        }

        this.options[type + 's'][id] = definition;
        return definition;
      }
    };
  });
}
/*  */


function getComponentName(opts) {
  return opts && (opts.Ctor.options.name || opts.tag);
}

function matches(pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1;
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1;
  } else if (isRegExp(pattern)) {
    return pattern.test(name);
  }
  /* istanbul ignore next */


  return false;
}

function pruneCache(keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;

  for (var key in cache) {
    var cachedNode = cache[key];

    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);

      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry(cache, key, keys, current) {
  var cached$$1 = cache[key];

  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }

  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];
var KeepAlive = {
  name: 'keep-alive',
  abstract: true,
  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },
  created: function created() {
    this.cache = Object.create(null);
    this.keys = [];
  },
  destroyed: function destroyed() {
    var this$1 = this;

    for (var key in this$1.cache) {
      pruneCacheEntry(this$1.cache, key, this$1.keys);
    }
  },
  mounted: function mounted() {
    var this$1 = this;
    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) {
        return matches(val, name);
      });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) {
        return !matches(val, name);
      });
    });
  },
  render: function render() {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;

    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;

      if ( // not included
      include && (!name || !matches(include, name)) || // excluded
      exclude && name && matches(exclude, name)) {
        return vnode;
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null // same constructor may get registered as different local components
      // so cid alone is not enough (#3269)
      ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;

      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance; // make current key freshest

        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key); // prune oldest entry

        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }

    return vnode || slot && slot[0];
  }
};
var builtInComponents = {
  KeepAlive: KeepAlive
  /*  */

};

function initGlobalAPI(Vue) {
  // config
  var configDef = {};

  configDef.get = function () {
    return config;
  };

  if (true) {
    configDef.set = function () {
      warn('Do not replace the Vue.config object, set individual fields instead.');
    };
  }

  Object.defineProperty(Vue, 'config', configDef); // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.

  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive
  };
  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;
  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  }); // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.

  Vue.options._base = Vue;
  extend(Vue.options.components, builtInComponents);
  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);
Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});
Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get() {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext;
  }
}); // expose FunctionalRenderContext for ssr runtime helper installation

Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});
Vue.version = '2.5.17';
/*  */
// these are reserved for web because they are directly compiled away
// during template compilation

var isReservedAttr = makeMap('style,class'); // attributes that should be using props for binding

var acceptValue = makeMap('input,textarea,option,select,progress');

var mustUseProp = function mustUseProp(tag, type, attr) {
  return attr === 'value' && acceptValue(tag) && type !== 'button' || attr === 'selected' && tag === 'option' || attr === 'checked' && tag === 'input' || attr === 'muted' && tag === 'video';
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');
var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');
var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function isXlink(name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';
};

var getXlinkProp = function getXlinkProp(name) {
  return isXlink(name) ? name.slice(6, name.length) : '';
};

var isFalsyAttrValue = function isFalsyAttrValue(val) {
  return val == null || val === false;
};
/*  */


function genClassForVnode(vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;

  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;

    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }

  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }

  return renderClass(data.staticClass, data.class);
}

function mergeClassData(child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class) ? [child.class, parent.class] : parent.class
  };
}

function renderClass(staticClass, dynamicClass) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  /* istanbul ignore next */


  return '';
}

function concat(a, b) {
  return a ? b ? a + ' ' + b : a : b || '';
}

function stringifyClass(value) {
  if (Array.isArray(value)) {
    return stringifyArray(value);
  }

  if (isObject(value)) {
    return stringifyObject(value);
  }

  if (typeof value === 'string') {
    return value;
  }
  /* istanbul ignore next */


  return '';
}

function stringifyArray(value) {
  var res = '';
  var stringified;

  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) {
        res += ' ';
      }

      res += stringified;
    }
  }

  return res;
}

function stringifyObject(value) {
  var res = '';

  for (var key in value) {
    if (value[key]) {
      if (res) {
        res += ' ';
      }

      res += key;
    }
  }

  return res;
}
/*  */


var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};
var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot'); // this map is intentionally selective, only covering SVG elements that may
// contain child elements.

var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);

var isReservedTag = function isReservedTag(tag) {
  return isHTMLTag(tag) || isSVG(tag);
};

function getTagNamespace(tag) {
  if (isSVG(tag)) {
    return 'svg';
  } // basic support for MathML
  // note it doesn't support other MathML elements being component roots


  if (tag === 'math') {
    return 'math';
  }
}

var unknownElementCache = Object.create(null);

function isUnknownElement(tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true;
  }

  if (isReservedTag(tag)) {
    return false;
  }

  tag = tag.toLowerCase();
  /* istanbul ignore if */

  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag];
  }

  var el = document.createElement(tag);

  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
  } else {
    return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');
/*  */

/**
 * Query an element selector if it's not an element already.
 */

function query(el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);

    if (!selected) {
      "development" !== 'production' && warn('Cannot find element: ' + el);
      return document.createElement('div');
    }

    return selected;
  } else {
    return el;
  }
}
/*  */


function createElement$1(tagName, vnode) {
  var elm = document.createElement(tagName);

  if (tagName !== 'select') {
    return elm;
  } // false or null will remove the attribute but undefined will not


  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }

  return elm;
}

function createElementNS(namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName);
}

function createTextNode(text) {
  return document.createTextNode(text);
}

function createComment(text) {
  return document.createComment(text);
}

function insertBefore(parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild(node, child) {
  node.removeChild(child);
}

function appendChild(node, child) {
  node.appendChild(child);
}

function parentNode(node) {
  return node.parentNode;
}

function nextSibling(node) {
  return node.nextSibling;
}

function tagName(node) {
  return node.tagName;
}

function setTextContent(node, text) {
  node.textContent = text;
}

function setStyleScope(node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps = Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});
/*  */

var ref = {
  create: function create(_, vnode) {
    registerRef(vnode);
  },
  update: function update(oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy(vnode) {
    registerRef(vnode, true);
  }
};

function registerRef(vnode, isRemoval) {
  var key = vnode.data.ref;

  if (!isDef(key)) {
    return;
  }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;

  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}
/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */


var emptyNode = new VNode('', {}, []);
var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode(a, b) {
  return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
}

function sameInputType(a, b) {
  if (a.tag !== 'input') {
    return true;
  }

  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
}

function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};

  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;

    if (isDef(key)) {
      map[key] = i;
    }
  }

  return map;
}

function createPatchFunction(backend) {
  var i, j;
  var cbs = {};
  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];

    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt(elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
  }

  function createRmCb(childElm, listeners) {
    function remove() {
      if (--remove.listeners === 0) {
        removeNode(childElm);
      }
    }

    remove.listeners = listeners;
    return remove;
  }

  function removeNode(el) {
    var parent = nodeOps.parentNode(el); // element may have already been removed due to v-html / v-text

    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1(vnode, inVPre) {
    return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some(function (ignore) {
      return isRegExp(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
    })) && config.isUnknownElement(vnode.tag);
  }

  var creatingElmInVPre = 0;

  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check

    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;

    if (isDef(tag)) {
      if (true) {
        if (data && data.pre) {
          creatingElmInVPre++;
        }

        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
        }
      }

      vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
      setScope(vnode);
      /* istanbul ignore if */

      {
        createChildren(vnode, children, insertedVnodeQueue);

        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }

        insert(parentElm, vnode.elm, refElm);
      }

      if ("development" !== 'production' && data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;

    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;

      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false
        /* hydrating */
        , parentElm, refElm);
      } // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.


      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);

        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }

        return true;
      }
    }
  }

  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }

    vnode.elm = vnode.componentInstance.$el;

    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode); // make sure to invoke the insert hook

      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i; // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.

    var innerNode = vnode;

    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;

      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }

        insertedVnodeQueue.push(innerNode);
        break;
      }
    } // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself


    insert(parentElm, vnode.elm, refElm);
  }

  function insert(parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (ref$$1.parentNode === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren(vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if (true) {
        checkDuplicateKeys(children);
      }

      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }

    return isDef(vnode.tag);
  }

  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }

    i = vnode.data.hook; // Reuse variable

    if (isDef(i)) {
      if (isDef(i.create)) {
        i.create(emptyNode, vnode);
      }

      if (isDef(i.insert)) {
        insertedVnodeQueue.push(vnode);
      }
    }
  } // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.


  function setScope(vnode) {
    var i;

    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;

      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }

        ancestor = ancestor.parent;
      }
    } // for slot content they should also get the scopeId from the host instance.


    if (isDef(i = activeInstance) && i !== vnode.context && i !== vnode.fnContext && isDef(i = i.$options._scopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook(vnode) {
    var i, j;
    var data = vnode.data;

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) {
        i(vnode);
      }

      for (i = 0; i < cbs.destroy.length; ++i) {
        cbs.destroy[i](vnode);
      }
    }

    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];

      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;

      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      } // recursively invoke hooks on child component root node


      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }

      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }

      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm; // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions

    var canMove = !removeOnly;

    if (true) {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) {
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        }

        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);

        if (isUndef(idxInOld)) {
          // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];

          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }

        newStartVnode = newCh[++newStartIdx];
      }
    }

    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys(children) {
    var seenKeys = {};

    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;

      if (isDef(key)) {
        if (seenKeys[key]) {
          warn("Duplicate keys detected: '" + key + "'. This may cause an update error.", vnode.context);
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld(node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];

      if (isDef(c) && sameVnode(node, c)) {
        return i;
      }
    }
  }

  function patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }

      return;
    } // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.


    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }

    var i;
    var data = vnode.data;

    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;

    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) {
        cbs.update[i](oldVnode, vnode);
      }

      if (isDef(i = data.hook) && isDef(i = i.update)) {
        i(oldVnode, vnode);
      }
    }

    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) {
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
        }
      } else if (isDef(ch)) {
        if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }

        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
        i(oldVnode, vnode);
      }
    }
  }

  function invokeInsertHook(vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false; // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).

  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key'); // Note: this is a browser-only function so we can assume elms are DOM nodes.

  function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || data && data.pre;
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true;
    } // assert node match


    if (true) {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false;
      }
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) {
        i(vnode, true
        /* hydrating */
        );
      }

      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }

    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if ("development" !== 'production' && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }

              return false;
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;

            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break;
              }

              childNode = childNode.nextSibling;
            } // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.


            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if ("development" !== 'production' && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }

              return false;
            }
          }
        }
      }

      if (isDef(data)) {
        var fullInvoke = false;

        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }

        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }

    return true;
  }

  function assertNodeMatch(node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || !isUnknownElement$$1(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3);
    }
  }

  return function patch(oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) {
        invokeDestroyHook(oldVnode);
      }

      return;
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue, parentElm, refElm);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);

      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }

          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            } else if (true) {
              warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
            }
          } // either not server-rendered, or hydration failed.
          // create an empty node and replace it


          oldVnode = emptyNodeAt(oldVnode);
        } // replacing existing element


        var oldElm = oldVnode.elm;
        var parentElm$1 = nodeOps.parentNode(oldElm); // create new node

        createElm(vnode, insertedVnodeQueue, // extremely rare edge case: do not insert if old element is in a
        // leaving transition. Only happens when combining transition +
        // keep-alive + HOCs. (#4590)
        oldElm._leaveCb ? null : parentElm$1, nodeOps.nextSibling(oldElm)); // update parent placeholder node element, recursively

        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);

          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }

            ancestor.elm = vnode.elm;

            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              } // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.


              var insert = ancestor.data.hook.insert;

              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }

            ancestor = ancestor.parent;
          }
        } // destroy old node


        if (isDef(parentElm$1)) {
          removeVnodes(parentElm$1, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}
/*  */


var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives(vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update(oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
  var dirsWithInsert = [];
  var dirsWithPostpatch = [];
  var key, oldDir, dir;

  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];

    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);

      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      callHook$1(dir, 'update', vnode, oldVnode);

      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function callInsert() {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };

    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1(dirs, vm) {
  var res = Object.create(null);

  if (!dirs) {
    // $flow-disable-line
    return res;
  }

  var i, dir;

  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];

    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }

    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  } // $flow-disable-line


  return res;
}

function getRawDirName(dir) {
  return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
}

function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];

  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
    }
  }
}

var baseModules = [ref, directives];
/*  */

function updateAttrs(oldVnode, vnode) {
  var opts = vnode.componentOptions;

  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return;
  }

  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return;
  }

  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {}; // clone observed objects, as the user probably wants to mutate it

  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];

    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  } // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max

  /* istanbul ignore if */


  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }

  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr(el, key, value) {
  if (el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED' ? 'true' : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr(el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.

    /* istanbul ignore if */
    if (isIE && !isIE9 && el.tagName === 'TEXTAREA' && key === 'placeholder' && !el.__ieph) {
      var blocker = function blocker(e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };

      el.addEventListener('input', blocker); // $flow-disable-line

      el.__ieph = true;
      /* IE placeholder patched */
    }

    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
  /*  */

};

function updateClass(oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {
    return;
  }

  var cls = genClassForVnode(vnode); // handle transition classes

  var transitionClass = el._transitionClasses;

  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  } // set the class


  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
  /*  */

  /*  */
  // add a raw attr (use this in preTransforms)
  // note: this only removes the attr from the Array (attrsList) so that it
  // doesn't get processed by processAttrs.
  // By default it does NOT remove it from the map (attrsMap) because the map is
  // needed during codegen.

  /*  */

  /**
   * Cross-platform code generation for component v-model
   */

  /**
   * Cross-platform codegen helper for generating v-model value assignment code.
   */

  /*  */
  // in some cases, the event used has to be determined at runtime
  // so we used some reserved tokens during compile.

};
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';
/*  */
// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.

function normalizeEvents(on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  } // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4

  /* istanbul ignore if */


  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler(handler, event, capture) {
  var _target = target$1; // save current target element in closure

  return function onceHandler() {
    var res = handler.apply(null, arguments);

    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  };
}

function add$1(event, handler, once$$1, capture, passive) {
  handler = withMacroTask(handler);

  if (once$$1) {
    handler = createOnceHandler(handler, event, capture);
  }

  target$1.addEventListener(event, handler, supportsPassive ? {
    capture: capture,
    passive: passive
  } : capture);
}

function remove$2(event, handler, capture, _target) {
  (_target || target$1).removeEventListener(event, handler._withTask || handler, capture);
}

function updateDOMListeners(oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return;
  }

  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
  /*  */

};

function updateDOMProps(oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return;
  }

  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {}; // clone observed objects, as the user probably wants to mutate it

  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (isUndef(props[key])) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key]; // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)

    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) {
        vnode.children.length = 0;
      }

      if (cur === oldProps[key]) {
        continue;
      } // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property


      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur; // avoid resetting cursor position when value is the same

      var strCur = isUndef(cur) ? '' : String(cur);

      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else {
      elm[key] = cur;
    }
  }
} // check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue(elm, checkVal) {
  return !elm.composing && (elm.tagName === 'OPTION' || isNotInFocusAndDirty(elm, checkVal) || isDirtyWithModifiers(elm, checkVal));
}

function isNotInFocusAndDirty(elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true; // #6157
  // work around IE bug when accessing document.activeElement in an iframe

  try {
    notInFocus = document.activeElement !== elm;
  } catch (e) {}

  return notInFocus && elm.value !== checkVal;
}

function isDirtyWithModifiers(elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime

  if (isDef(modifiers)) {
    if (modifiers.lazy) {
      // inputs with lazy should only be updated when not in focus
      return false;
    }

    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal);
    }

    if (modifiers.trim) {
      return value.trim() !== newVal.trim();
    }
  }

  return value !== newVal;
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
  /*  */

};
var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res;
}); // merge static and dynamic style data on the same vnode

function normalizeStyleData(data) {
  var style = normalizeStyleBinding(data.style); // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it

  return data.staticStyle ? extend(data.staticStyle, style) : style;
} // normalize possible array / string values into Object


function normalizeStyleBinding(bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle);
  }

  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle);
  }

  return bindingStyle;
}
/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */


function getStyle(vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;

    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;

      if (childNode && childNode.data && (styleData = normalizeStyleData(childNode.data))) {
        extend(res, styleData);
      }
    }
  }

  if (styleData = normalizeStyleData(vnode.data)) {
    extend(res, styleData);
  }

  var parentNode = vnode;

  while (parentNode = parentNode.parent) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }

  return res;
}
/*  */


var cssVarRE = /^--/;
var importantRE = /\s*!important$/;

var setProp = function setProp(el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(name, val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);

    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];
var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);

  if (prop !== 'filter' && prop in emptyStyle) {
    return prop;
  }

  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);

  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;

    if (name in emptyStyle) {
      return name;
    }
  }
});

function updateStyle(oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
    return;
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {}; // if static style exists, stylebinding already merged into it when doing normalizeStyleData

  var oldStyle = oldStaticStyle || oldStyleBinding;
  var style = normalizeStyleBinding(vnode.data.style) || {}; // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.

  vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;
  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }

  for (name in newStyle) {
    cur = newStyle[name];

    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
  /*  */

  /**
   * Add class with compatibility for SVG since classList is not supported on
   * SVG elements in IE
   */

};

function addClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";

    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}
/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */


function removeClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }

    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';

    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }

    cur = cur.trim();

    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}
/*  */


function resolveTransition(def) {
  if (!def) {
    return;
  }
  /* istanbul ignore else */


  if (_typeof(def) === 'object') {
    var res = {};

    if (def.css !== false) {
      extend(res, autoCssTransition(def.name || 'v'));
    }

    extend(res, def);
    return res;
  } else if (typeof def === 'string') {
    return autoCssTransition(def);
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: name + "-enter",
    enterToClass: name + "-enter-to",
    enterActiveClass: name + "-enter-active",
    leaveClass: name + "-leave",
    leaveToClass: name + "-leave-to",
    leaveActiveClass: name + "-leave-active"
  };
});
var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation'; // Transition property/event sniffing

var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';

if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }

  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
} // binding to window is necessary to make hot reload work in IE in strict mode


var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout :
/* istanbul ignore next */
function (fn) {
  return fn();
};

function nextFrame(fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass(el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);

  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }

  removeClass(el, cls);
}

function whenTransitionEnds(el, expectedType, cb) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;

  if (!type) {
    return cb();
  }

  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;

  var end = function end() {
    el.removeEventListener(event, onEnd);
    cb();
  };

  var onEnd = function onEnd(e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };

  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo(el, expectedType) {
  var styles = window.getComputedStyle(el);
  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');
  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = styles[animationProp + 'Delay'].split(', ');
  var animationDurations = styles[animationProp + 'Duration'].split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);
  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */

  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }

  var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  };
}

function getTimeout(delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i]);
  }));
}

function toMs(s) {
  return Number(s.slice(0, -1)) * 1000;
}
/*  */


function enter(vnode, toggleDisplay) {
  var el = vnode.elm; // call leave callback now

  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;

    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data)) {
    return;
  }
  /* istanbul ignore if */


  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration; // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.

  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;

  while (transitionNode && transitionNode.parent) {
    transitionNode = transitionNode.parent;
    context = transitionNode.context;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return;
  }

  var startClass = isAppear && appearClass ? appearClass : enterClass;
  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
  var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);

  if ("development" !== 'production' && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);
  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }

      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }

    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];

      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }

      enterHook && enterHook(el, cb);
    });
  } // start enter transition


  beforeEnterHook && beforeEnterHook(el);

  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);

      if (!cb.cancelled) {
        addTransitionClass(el, toClass);

        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave(vnode, rm) {
  var el = vnode.elm; // call enter callback now

  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;

    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data) || el.nodeType !== 1) {
    return rm();
  }
  /* istanbul ignore if */


  if (isDef(el._leaveCb)) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;
  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);
  var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);

  if ("development" !== 'production' && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }

    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }

      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }

    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave() {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return;
    } // record leaving element


    if (!vnode.data.show) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }

    beforeLeave && beforeLeave(el);

    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);

        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);

          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }

    leave && leave(el, cb);

    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
} // only used in dev mode


function checkDuration(val, name, vnode) {
  if (typeof val !== 'number') {
    warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
  } else if (isNaN(val)) {
    warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
  }
}

function isValidDuration(val) {
  return typeof val === 'number' && !isNaN(val);
}
/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */


function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }

  var invokerFns = fn.fns;

  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}

function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1(vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};
var platformModules = [attrs, klass, events, domProps, style, transition];
/*  */
// the directive module should be applied last, after all
// built-in modules have been applied.

var modules = platformModules.concat(baseModules);
var patch = createPatchFunction({
  nodeOps: nodeOps,
  modules: modules
});
/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */

if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;

    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted(el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }

      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;

      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd); // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.

        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */

        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },
  componentUpdated: function componentUpdated(el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context); // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.

      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);

      if (curOptions.some(function (o, i) {
        return !looseEqual(o, prevOptions[i]);
      })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple ? binding.value.some(function (v) {
          return hasNoMatchingOption(v, curOptions);
        }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);

        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected(el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */

  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected(el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;

  if (isMultiple && !Array.isArray(value)) {
    "development" !== 'production' && warn("<select multiple v-model=\"" + binding.expression + "\"> " + "expects an Array value for its binding, but got " + Object.prototype.toString.call(value).slice(8, -1), vm);
    return;
  }

  var selected, option;

  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];

    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;

      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }

        return;
      }
    }
  }

  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption(value, options) {
  return options.every(function (o) {
    return !looseEqual(o, value);
  });
}

function getValue(option) {
  return '_value' in option ? option._value : option.value;
}

function onCompositionStart(e) {
  e.target.composing = true;
}

function onCompositionEnd(e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) {
    return;
  }

  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger(el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}
/*  */
// recursively search for possible transition defined inside the component root


function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}

var show = {
  bind: function bind(el, ref, vnode) {
    var value = ref.value;
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay = el.style.display === 'none' ? '' : el.style.display;

    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },
  update: function update(el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;
    /* istanbul ignore if */

    if (!value === !oldValue) {
      return;
    }

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;

    if (transition$$1) {
      vnode.data.show = true;

      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },
  unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};
var platformDirectives = {
  model: directive,
  show: show
  /*  */
  // Provides transition support for a single element/component.
  // supports transition mode (out-in / in-out)

};
var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
}; // in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered

function getRealChild(vnode) {
  var compOptions = vnode && vnode.componentOptions;

  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}

function extractTransitionData(comp) {
  var data = {};
  var options = comp.$options; // props

  for (var key in options.propsData) {
    data[key] = comp[key];
  } // events.
  // extract listeners and pass them directly to the transition methods


  var listeners = options._parentListeners;

  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }

  return data;
}

function placeholder(h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    });
  }
}

function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}

function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,
  render: function render(h) {
    var this$1 = this;
    var children = this.$slots.default;

    if (!children) {
      return;
    } // filter out text nodes (possible whitespaces)


    children = children.filter(function (c) {
      return c.tag || isAsyncPlaceholder(c);
    });
    /* istanbul ignore if */

    if (!children.length) {
      return;
    } // warn multiple elements


    if ("development" !== 'production' && children.length > 1) {
      warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
    }

    var mode = this.mode; // warn invalid mode

    if ("development" !== 'production' && mode && mode !== 'in-out' && mode !== 'out-in') {
      warn('invalid <transition> mode: ' + mode, this.$parent);
    }

    var rawChild = children[0]; // if this is a component root node and the component's
    // parent container node also has transition, skip.

    if (hasParentTransition(this.$vnode)) {
      return rawChild;
    } // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive


    var child = getRealChild(rawChild);
    /* istanbul ignore if */

    if (!child) {
      return rawChild;
    }

    if (this._leaving) {
      return placeholder(h, rawChild);
    } // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.


    var id = "__transition-" + this._uid + "-";
    child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild); // mark v-show
    // so that the transition module can hand over the control to the directive

    if (child.data.directives && child.data.directives.some(function (d) {
      return d.name === 'show';
    })) {
      child.data.show = true;
    }

    if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && // #6687 component root is a comment node
    !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data); // handle transition mode

      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild);
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild;
        }

        var delayedLeave;

        var performLeave = function performLeave() {
          delayedLeave();
        };

        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) {
          delayedLeave = leave;
        });
      }
    }

    return rawChild;
  }
  /*  */
  // Provides transition support for list items.
  // supports move transitions using the FLIP technique.
  // Because the vdom's children update algorithm is "unstable" - i.e.
  // it doesn't guarantee the relative positioning of removed elements,
  // we force transition-group to update its children into two passes:
  // in the first pass, we remove all nodes that need to be removed,
  // triggering their leaving transition; in the second pass, we insert/move
  // into the final desired state. This way in the second pass removed
  // nodes will remain where they should be.

};
var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);
delete props.mode;
var TransitionGroup = {
  props: props,
  render: function render(h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];

      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c;
          (c.data || (c.data = {})).transition = transitionData;
        } else if (true) {
          var opts = c.componentOptions;
          var name = opts ? opts.Ctor.options.name || opts.tag || '' : c.tag;
          warn("<transition-group> children must be keyed: <" + name + ">");
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];

      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();

        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }

      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children);
  },
  beforeUpdate: function beforeUpdate() {
    // force removing pass
    this.__patch__(this._vnode, this.kept, false, // hydrating
    true // removeOnly (!important, avoids unnecessary moves)
    );

    this._vnode = this.kept;
  },
  updated: function updated() {
    var children = this.prevChildren;
    var moveClass = this.moveClass || (this.name || 'v') + '-move';

    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return;
    } // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.


    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation); // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line

    this._reflow = document.body.offsetHeight;
    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },
  methods: {
    hasMove: function hasMove(el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false;
      }
      /* istanbul ignore if */


      if (this._hasMove) {
        return this._hasMove;
      } // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.


      var clone = el.cloneNode();

      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) {
          removeClass(clone, cls);
        });
      }

      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return this._hasMove = info.hasTransform;
    }
  }
};

function callPendingCbs(c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */


  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition(c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation(c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;

  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
  /*  */
  // install platform specific utils

};
Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement; // install platform runtime directives & components

extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents); // install platform patch function

Vue.prototype.__patch__ = inBrowser ? patch : noop; // public mount method

Vue.prototype.$mount = function (el, hydrating) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating);
}; // devtools global hook

/* istanbul ignore next */


if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else if ("development" !== 'production' && "development" !== 'test' && isChrome) {
        console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
      }
    }

    if ("development" !== 'production' && "development" !== 'test' && config.productionTip !== false && typeof console !== 'undefined') {
      console[console.info ? 'info' : 'log']("You are running Vue in development mode.\n" + "Make sure to turn on production mode when deploying for production.\n" + "See more tips at https://vuejs.org/guide/deployment.html");
    }
  }, 0);
}
/*  */


/* harmony default export */ __webpack_exports__["default"] = (Vue);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "./node_modules/vuex-persist/dist/esm/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/vuex-persist/dist/esm/index.js ***!
  \*****************************************************/
/*! exports provided: default, VuexPersistence, MockStorage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VuexPersistence", function() { return VuexPersistence; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MockStorage", function() { return MockStorage; });
/* harmony import */ var deepmerge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! deepmerge */ "./node_modules/deepmerge/dist/es.js");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



var merge = function merge(dest, src) {
  return Object(deepmerge__WEBPACK_IMPORTED_MODULE_0__["default"])(dest, src, {
    arrayMerge: function arrayMerge(dest, src) {
      return src;
    }
  });
};
/**
 * Created by championswimmer on 22/07/17.
 */


var MockStorage; // @ts-ignore

{
  MockStorage =
  /*#__PURE__*/
  function () {
    function MockStorage() {
      _classCallCheck(this, MockStorage);
    }

    _createClass(MockStorage, [{
      key: "key",
      value: function key(index) {
        return Object.keys(this)[index];
      }
    }, {
      key: "setItem",
      value: function setItem(key, data) {
        this[key] = data.toString();
      }
    }, {
      key: "getItem",
      value: function getItem(key) {
        return this[key];
      }
    }, {
      key: "removeItem",
      value: function removeItem(key) {
        delete this[key];
      }
    }, {
      key: "clear",
      value: function clear() {
        var _arr = Object.keys(this);

        for (var _i = 0; _i < _arr.length; _i++) {
          var key = _arr[_i];
          delete this[key];
        }
      }
    }, {
      key: "length",
      get: function get() {
        return Object.keys(this).length;
      }
    }]);

    return MockStorage;
  }();
} // tslint:disable: variable-name

var SimplePromiseQueue =
/*#__PURE__*/
function () {
  function SimplePromiseQueue() {
    _classCallCheck(this, SimplePromiseQueue);

    this._queue = [];
    this._flushing = false;
  }

  _createClass(SimplePromiseQueue, [{
    key: "enqueue",
    value: function enqueue(promise) {
      this._queue.push(promise);

      if (!this._flushing) {
        return this.flushQueue();
      }

      return Promise.resolve();
    }
  }, {
    key: "flushQueue",
    value: function flushQueue() {
      var _this = this;

      this._flushing = true;

      var chain = function chain() {
        var nextTask = _this._queue.shift();

        if (nextTask) {
          return nextTask.then(chain);
        } else {
          _this._flushing = false;
        }
      };

      return Promise.resolve(chain());
    }
  }]);

  return SimplePromiseQueue;
}();
/**
 * Created by championswimmer on 18/07/17.
 */


var CircularJSON = JSON;
/**
 * A class that implements the vuex persistence.
 */

var VuexPersistence =
/**
 * Create a {@link VuexPersistence} object.
 * Use the <code>plugin</code> function of this class as a
 * Vuex plugin.
 * @param {PersistOptions} options
 */
function VuexPersistence(options) {
  var _this2 = this;

  _classCallCheck(this, VuexPersistence);

  // tslint:disable-next-line:variable-name
  this._mutex = new SimplePromiseQueue();
  /**
   * Creates a subscriber on the store. automatically is used
   * when this is used a vuex plugin. Not for manual usage.
   * @param store
   */

  this.subscriber = function (store) {
    return function (handler) {
      return store.subscribe(handler);
    };
  };

  this.key = options.key != null ? options.key : 'vuex';
  this.subscribed = false;
  this.supportCircular = options.supportCircular || false;

  if (this.supportCircular) {
    CircularJSON = __webpack_require__(/*! circular-json */ "./node_modules/circular-json/build/circular-json.node.js");
  } // @ts-ignore


  if (false) {} else {
    // @ts-ignore
    {
      this.storage = options.storage || (typeof window !== 'undefined' ? window.localStorage : new MockStorage());
    }
  }
  /**
   * How this works is -
   *  1. If there is options.reducer function, we use that, if not;
   *  2. We check options.modules;
   *    1. If there is no options.modules array, we use entire state in reducer
   *    2. Otherwise, we create a reducer that merges all those state modules that are
   *        defined in the options.modules[] array
   * @type {((state: S) => {}) | ((state: S) => S) | ((state: any) => {})}
   */


  this.reducer = options.reducer != null ? options.reducer : options.modules == null ? function (state) {
    return state;
  } : function (state) {
    return options.modules.reduce(function (a, i) {
      return merge(a, _defineProperty({}, i, state[i]) || {});
    }, {
      /* start empty accumulator*/
    });
  };

  this.filter = options.filter || function (mutation) {
    return true;
  };

  this.strictMode = options.strictMode || false;

  this.RESTORE_MUTATION = function RESTORE_MUTATION(state, savedState) {
    var mergedState = merge(state, savedState || {});

    var _arr2 = Object.keys(mergedState);

    for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
      var propertyName = _arr2[_i2];

      this._vm.$set(state, propertyName, mergedState[propertyName]);
    }
  };

  this.asyncStorage = options.asyncStorage || false;
  var storageConfig = this.storage && this.storage._config;
  this.asyncStorage = this.asyncStorage || (storageConfig && storageConfig.name) === 'localforage';

  if (this.asyncStorage) {
    /**
     * Async {@link #VuexPersistence.restoreState} implementation
     * @type {((key: string, storage?: Storage) =>
     *      (Promise<S> | S)) | ((key: string, storage: AsyncStorage) => Promise<any>)}
     */
    this.restoreState = options.restoreState != null ? options.restoreState : function (key, storage) {
      return storage.getItem(key).then(function (value) {
        return typeof value === 'string' // If string, parse, or else, just return
        ? _this2.supportCircular ? CircularJSON.parse(value || '{}') : JSON.parse(value || '{}') : value || {};
      });
    };
    /**
     * Async {@link #VuexPersistence.saveState} implementation
     * @type {((key: string, state: {}, storage?: Storage) =>
     *    (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage) => Promise<void>)}
     */

    this.saveState = options.saveState != null ? options.saveState : function (key, state, storage) {
      return storage.setItem(key, // Second argument is state _object_ if localforage, stringified otherwise
      (storage && storage._config && storage._config.name) === 'localforage' ? merge({}, state || {}) : _this2.supportCircular ? CircularJSON.stringify(state) : JSON.stringify(state));
    };
    /**
     * Async version of plugin
     * @param {Store<S>} store
     */

    this.plugin = function (store) {
      _this2.restoreState(_this2.key, _this2.storage).then(function (savedState) {
        /**
         * If in strict mode, do only via mutation
         */
        if (_this2.strictMode) {
          store.commit('RESTORE_MUTATION', savedState);
        } else {
          store.replaceState(merge(store.state, savedState || {}));
        }

        _this2.subscriber(store)(function (mutation, state) {
          if (_this2.filter(mutation)) {
            _this2._mutex.enqueue(_this2.saveState(_this2.key, _this2.reducer(state), _this2.storage));
          }
        });

        _this2.subscribed = true;
      });
    };
  } else {
    /**
     * Sync {@link #VuexPersistence.restoreState} implementation
     * @type {((key: string, storage?: Storage) =>
     *    (Promise<S> | S)) | ((key: string, storage: Storage) => (any | string | {}))}
     */
    this.restoreState = options.restoreState != null ? options.restoreState : function (key, storage) {
      var value = storage.getItem(key);

      if (typeof value === 'string') {
        // If string, parse, or else, just return
        return _this2.supportCircular ? CircularJSON.parse(value || '{}') : JSON.parse(value || '{}');
      } else {
        return value || {};
      }
    };
    /**
     * Sync {@link #VuexPersistence.saveState} implementation
     * @type {((key: string, state: {}, storage?: Storage) =>
     *     (Promise<void> | void)) | ((key: string, state: {}, storage?: Storage) => Promise<void>)}
     */

    this.saveState = options.saveState != null ? options.saveState : function (key, state, storage) {
      return storage.setItem(key, // Second argument is state _object_ if localforage, stringified otherwise
      _this2.supportCircular ? CircularJSON.stringify(state) : JSON.stringify(state));
    };
    /**
     * Sync version of plugin
     * @param {Store<S>} store
     */

    this.plugin = function (store) {
      var savedState = _this2.restoreState(_this2.key, _this2.storage);

      if (_this2.strictMode) {
        store.commit('RESTORE_MUTATION', savedState);
      } else {
        store.replaceState(merge(store.state, savedState || {}));
      }

      _this2.subscriber(store)(function (mutation, state) {
        if (_this2.filter(mutation)) {
          _this2.saveState(_this2.key, _this2.reducer(state), _this2.storage);
        }
      });

      _this2.subscribed = true;
    };
  }
};

/* harmony default export */ __webpack_exports__["default"] = (VuexPersistence);


/***/ }),

/***/ "./node_modules/vuex/dist/vuex.esm.js":
/*!********************************************!*\
  !*** ./node_modules/vuex/dist/vuex.esm.js ***!
  \********************************************/
/*! exports provided: Store, install, mapState, mapMutations, mapGetters, mapActions, createNamespacedHelpers, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Store", function() { return Store; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "install", function() { return install; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapState", function() { return mapState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapMutations", function() { return mapMutations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapGetters", function() { return mapGetters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapActions", function() { return mapActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createNamespacedHelpers", function() { return createNamespacedHelpers; });
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * vuex v3.0.1
 * (c) 2017 Evan You
 * @license MIT
 */
var applyMixin = function applyMixin(Vue) {
  var version = Number(Vue.version.split('.')[0]);

  if (version >= 2) {
    Vue.mixin({
      beforeCreate: vuexInit
    });
  } else {
    // override init and inject vuex init procedure
    // for 1.x backwards compatibility.
    var _init = Vue.prototype._init;

    Vue.prototype._init = function (options) {
      if (options === void 0) options = {};
      options.init = options.init ? [vuexInit].concat(options.init) : vuexInit;

      _init.call(this, options);
    };
  }
  /**
   * Vuex init hook, injected into each instances init hooks list.
   */


  function vuexInit() {
    var options = this.$options; // store injection

    if (options.store) {
      this.$store = typeof options.store === 'function' ? options.store() : options.store;
    } else if (options.parent && options.parent.$store) {
      this.$store = options.parent.$store;
    }
  }
};

var devtoolHook = typeof window !== 'undefined' && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

function devtoolPlugin(store) {
  if (!devtoolHook) {
    return;
  }

  store._devtoolHook = devtoolHook;
  devtoolHook.emit('vuex:init', store);
  devtoolHook.on('vuex:travel-to-state', function (targetState) {
    store.replaceState(targetState);
  });
  store.subscribe(function (mutation, state) {
    devtoolHook.emit('vuex:mutation', mutation, state);
  });
}
/**
 * Get the first item that pass the test
 * by second argument function
 *
 * @param {Array} list
 * @param {Function} f
 * @return {*}
 */

/**
 * Deep copy the given object considering circular structure.
 * This function caches all nested objects and its copies.
 * If it detects circular structure, use cached copy to avoid infinite loop.
 *
 * @param {*} obj
 * @param {Array<Object>} cache
 * @return {*}
 */

/**
 * forEach for object
 */


function forEachValue(obj, fn) {
  Object.keys(obj).forEach(function (key) {
    return fn(obj[key], key);
  });
}

function isObject(obj) {
  return obj !== null && _typeof(obj) === 'object';
}

function isPromise(val) {
  return val && typeof val.then === 'function';
}

function assert(condition, msg) {
  if (!condition) {
    throw new Error("[vuex] " + msg);
  }
}

var Module = function Module(rawModule, runtime) {
  this.runtime = runtime;
  this._children = Object.create(null);
  this._rawModule = rawModule;
  var rawState = rawModule.state;
  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};
};

var prototypeAccessors$1 = {
  namespaced: {
    configurable: true
  }
};

prototypeAccessors$1.namespaced.get = function () {
  return !!this._rawModule.namespaced;
};

Module.prototype.addChild = function addChild(key, module) {
  this._children[key] = module;
};

Module.prototype.removeChild = function removeChild(key) {
  delete this._children[key];
};

Module.prototype.getChild = function getChild(key) {
  return this._children[key];
};

Module.prototype.update = function update(rawModule) {
  this._rawModule.namespaced = rawModule.namespaced;

  if (rawModule.actions) {
    this._rawModule.actions = rawModule.actions;
  }

  if (rawModule.mutations) {
    this._rawModule.mutations = rawModule.mutations;
  }

  if (rawModule.getters) {
    this._rawModule.getters = rawModule.getters;
  }
};

Module.prototype.forEachChild = function forEachChild(fn) {
  forEachValue(this._children, fn);
};

Module.prototype.forEachGetter = function forEachGetter(fn) {
  if (this._rawModule.getters) {
    forEachValue(this._rawModule.getters, fn);
  }
};

Module.prototype.forEachAction = function forEachAction(fn) {
  if (this._rawModule.actions) {
    forEachValue(this._rawModule.actions, fn);
  }
};

Module.prototype.forEachMutation = function forEachMutation(fn) {
  if (this._rawModule.mutations) {
    forEachValue(this._rawModule.mutations, fn);
  }
};

Object.defineProperties(Module.prototype, prototypeAccessors$1);

var ModuleCollection = function ModuleCollection(rawRootModule) {
  // register root module (Vuex.Store options)
  this.register([], rawRootModule, false);
};

ModuleCollection.prototype.get = function get(path) {
  return path.reduce(function (module, key) {
    return module.getChild(key);
  }, this.root);
};

ModuleCollection.prototype.getNamespace = function getNamespace(path) {
  var module = this.root;
  return path.reduce(function (namespace, key) {
    module = module.getChild(key);
    return namespace + (module.namespaced ? key + '/' : '');
  }, '');
};

ModuleCollection.prototype.update = function update$1(rawRootModule) {
  update([], this.root, rawRootModule);
};

ModuleCollection.prototype.register = function register(path, rawModule, runtime) {
  var this$1 = this;
  if (runtime === void 0) runtime = true;

  if (true) {
    assertRawModule(path, rawModule);
  }

  var newModule = new Module(rawModule, runtime);

  if (path.length === 0) {
    this.root = newModule;
  } else {
    var parent = this.get(path.slice(0, -1));
    parent.addChild(path[path.length - 1], newModule);
  } // register nested modules


  if (rawModule.modules) {
    forEachValue(rawModule.modules, function (rawChildModule, key) {
      this$1.register(path.concat(key), rawChildModule, runtime);
    });
  }
};

ModuleCollection.prototype.unregister = function unregister(path) {
  var parent = this.get(path.slice(0, -1));
  var key = path[path.length - 1];

  if (!parent.getChild(key).runtime) {
    return;
  }

  parent.removeChild(key);
};

function update(path, targetModule, newModule) {
  if (true) {
    assertRawModule(path, newModule);
  } // update target module


  targetModule.update(newModule); // update nested modules

  if (newModule.modules) {
    for (var key in newModule.modules) {
      if (!targetModule.getChild(key)) {
        if (true) {
          console.warn("[vuex] trying to add a new module '" + key + "' on hot reloading, " + 'manual reload is needed');
        }

        return;
      }

      update(path.concat(key), targetModule.getChild(key), newModule.modules[key]);
    }
  }
}

var functionAssert = {
  assert: function assert(value) {
    return typeof value === 'function';
  },
  expected: 'function'
};
var objectAssert = {
  assert: function assert(value) {
    return typeof value === 'function' || _typeof(value) === 'object' && typeof value.handler === 'function';
  },
  expected: 'function or object with "handler" function'
};
var assertTypes = {
  getters: functionAssert,
  mutations: functionAssert,
  actions: objectAssert
};

function assertRawModule(path, rawModule) {
  Object.keys(assertTypes).forEach(function (key) {
    if (!rawModule[key]) {
      return;
    }

    var assertOptions = assertTypes[key];
    forEachValue(rawModule[key], function (value, type) {
      assert(assertOptions.assert(value), makeAssertionMessage(path, key, type, value, assertOptions.expected));
    });
  });
}

function makeAssertionMessage(path, key, type, value, expected) {
  var buf = key + " should be " + expected + " but \"" + key + "." + type + "\"";

  if (path.length > 0) {
    buf += " in module \"" + path.join('.') + "\"";
  }

  buf += " is " + JSON.stringify(value) + ".";
  return buf;
}

var Vue; // bind on install

var Store = function Store(options) {
  var this$1 = this;
  if (options === void 0) options = {}; // Auto install if it is not done yet and `window` has `Vue`.
  // To allow users to avoid auto-installation in some cases,
  // this code should be placed here. See #731

  if (!Vue && typeof window !== 'undefined' && window.Vue) {
    install(window.Vue);
  }

  if (true) {
    assert(Vue, "must call Vue.use(Vuex) before creating a store instance.");
    assert(typeof Promise !== 'undefined', "vuex requires a Promise polyfill in this browser.");
    assert(this instanceof Store, "Store must be called with the new operator.");
  }

  var plugins = options.plugins;
  if (plugins === void 0) plugins = [];
  var strict = options.strict;
  if (strict === void 0) strict = false;
  var state = options.state;
  if (state === void 0) state = {};

  if (typeof state === 'function') {
    state = state() || {};
  } // store internal state


  this._committing = false;
  this._actions = Object.create(null);
  this._actionSubscribers = [];
  this._mutations = Object.create(null);
  this._wrappedGetters = Object.create(null);
  this._modules = new ModuleCollection(options);
  this._modulesNamespaceMap = Object.create(null);
  this._subscribers = [];
  this._watcherVM = new Vue(); // bind commit and dispatch to self

  var store = this;
  var ref = this;
  var dispatch = ref.dispatch;
  var commit = ref.commit;

  this.dispatch = function boundDispatch(type, payload) {
    return dispatch.call(store, type, payload);
  };

  this.commit = function boundCommit(type, payload, options) {
    return commit.call(store, type, payload, options);
  }; // strict mode


  this.strict = strict; // init root module.
  // this also recursively registers all sub-modules
  // and collects all module getters inside this._wrappedGetters

  installModule(this, state, [], this._modules.root); // initialize the store vm, which is responsible for the reactivity
  // (also registers _wrappedGetters as computed properties)

  resetStoreVM(this, state); // apply plugins

  plugins.forEach(function (plugin) {
    return plugin(this$1);
  });

  if (Vue.config.devtools) {
    devtoolPlugin(this);
  }
};

var prototypeAccessors = {
  state: {
    configurable: true
  }
};

prototypeAccessors.state.get = function () {
  return this._vm._data.$$state;
};

prototypeAccessors.state.set = function (v) {
  if (true) {
    assert(false, "Use store.replaceState() to explicit replace store state.");
  }
};

Store.prototype.commit = function commit(_type, _payload, _options) {
  var this$1 = this; // check object-style commit

  var ref = unifyObjectStyle(_type, _payload, _options);
  var type = ref.type;
  var payload = ref.payload;
  var options = ref.options;
  var mutation = {
    type: type,
    payload: payload
  };
  var entry = this._mutations[type];

  if (!entry) {
    if (true) {
      console.error("[vuex] unknown mutation type: " + type);
    }

    return;
  }

  this._withCommit(function () {
    entry.forEach(function commitIterator(handler) {
      handler(payload);
    });
  });

  this._subscribers.forEach(function (sub) {
    return sub(mutation, this$1.state);
  });

  if ("development" !== 'production' && options && options.silent) {
    console.warn("[vuex] mutation type: " + type + ". Silent option has been removed. " + 'Use the filter functionality in the vue-devtools');
  }
};

Store.prototype.dispatch = function dispatch(_type, _payload) {
  var this$1 = this; // check object-style dispatch

  var ref = unifyObjectStyle(_type, _payload);
  var type = ref.type;
  var payload = ref.payload;
  var action = {
    type: type,
    payload: payload
  };
  var entry = this._actions[type];

  if (!entry) {
    if (true) {
      console.error("[vuex] unknown action type: " + type);
    }

    return;
  }

  this._actionSubscribers.forEach(function (sub) {
    return sub(action, this$1.state);
  });

  return entry.length > 1 ? Promise.all(entry.map(function (handler) {
    return handler(payload);
  })) : entry[0](payload);
};

Store.prototype.subscribe = function subscribe(fn) {
  return genericSubscribe(fn, this._subscribers);
};

Store.prototype.subscribeAction = function subscribeAction(fn) {
  return genericSubscribe(fn, this._actionSubscribers);
};

Store.prototype.watch = function watch(getter, cb, options) {
  var this$1 = this;

  if (true) {
    assert(typeof getter === 'function', "store.watch only accepts a function.");
  }

  return this._watcherVM.$watch(function () {
    return getter(this$1.state, this$1.getters);
  }, cb, options);
};

Store.prototype.replaceState = function replaceState(state) {
  var this$1 = this;

  this._withCommit(function () {
    this$1._vm._data.$$state = state;
  });
};

Store.prototype.registerModule = function registerModule(path, rawModule, options) {
  if (options === void 0) options = {};

  if (typeof path === 'string') {
    path = [path];
  }

  if (true) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
    assert(path.length > 0, 'cannot register the root module by using registerModule.');
  }

  this._modules.register(path, rawModule);

  installModule(this, this.state, path, this._modules.get(path), options.preserveState); // reset store to update getters...

  resetStoreVM(this, this.state);
};

Store.prototype.unregisterModule = function unregisterModule(path) {
  var this$1 = this;

  if (typeof path === 'string') {
    path = [path];
  }

  if (true) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
  }

  this._modules.unregister(path);

  this._withCommit(function () {
    var parentState = getNestedState(this$1.state, path.slice(0, -1));
    Vue.delete(parentState, path[path.length - 1]);
  });

  resetStore(this);
};

Store.prototype.hotUpdate = function hotUpdate(newOptions) {
  this._modules.update(newOptions);

  resetStore(this, true);
};

Store.prototype._withCommit = function _withCommit(fn) {
  var committing = this._committing;
  this._committing = true;
  fn();
  this._committing = committing;
};

Object.defineProperties(Store.prototype, prototypeAccessors);

function genericSubscribe(fn, subs) {
  if (subs.indexOf(fn) < 0) {
    subs.push(fn);
  }

  return function () {
    var i = subs.indexOf(fn);

    if (i > -1) {
      subs.splice(i, 1);
    }
  };
}

function resetStore(store, hot) {
  store._actions = Object.create(null);
  store._mutations = Object.create(null);
  store._wrappedGetters = Object.create(null);
  store._modulesNamespaceMap = Object.create(null);
  var state = store.state; // init all modules

  installModule(store, state, [], store._modules.root, true); // reset vm

  resetStoreVM(store, state, hot);
}

function resetStoreVM(store, state, hot) {
  var oldVm = store._vm; // bind store public getters

  store.getters = {};
  var wrappedGetters = store._wrappedGetters;
  var computed = {};
  forEachValue(wrappedGetters, function (fn, key) {
    // use computed to leverage its lazy-caching mechanism
    computed[key] = function () {
      return fn(store);
    };

    Object.defineProperty(store.getters, key, {
      get: function get() {
        return store._vm[key];
      },
      enumerable: true // for local getters

    });
  }); // use a Vue instance to store the state tree
  // suppress warnings just in case the user has added
  // some funky global mixins

  var silent = Vue.config.silent;
  Vue.config.silent = true;
  store._vm = new Vue({
    data: {
      $$state: state
    },
    computed: computed
  });
  Vue.config.silent = silent; // enable strict mode for new vm

  if (store.strict) {
    enableStrictMode(store);
  }

  if (oldVm) {
    if (hot) {
      // dispatch changes in all subscribed watchers
      // to force getter re-evaluation for hot reloading.
      store._withCommit(function () {
        oldVm._data.$$state = null;
      });
    }

    Vue.nextTick(function () {
      return oldVm.$destroy();
    });
  }
}

function installModule(store, rootState, path, module, hot) {
  var isRoot = !path.length;

  var namespace = store._modules.getNamespace(path); // register in namespace map


  if (module.namespaced) {
    store._modulesNamespaceMap[namespace] = module;
  } // set state


  if (!isRoot && !hot) {
    var parentState = getNestedState(rootState, path.slice(0, -1));
    var moduleName = path[path.length - 1];

    store._withCommit(function () {
      Vue.set(parentState, moduleName, module.state);
    });
  }

  var local = module.context = makeLocalContext(store, namespace, path);
  module.forEachMutation(function (mutation, key) {
    var namespacedType = namespace + key;
    registerMutation(store, namespacedType, mutation, local);
  });
  module.forEachAction(function (action, key) {
    var type = action.root ? key : namespace + key;
    var handler = action.handler || action;
    registerAction(store, type, handler, local);
  });
  module.forEachGetter(function (getter, key) {
    var namespacedType = namespace + key;
    registerGetter(store, namespacedType, getter, local);
  });
  module.forEachChild(function (child, key) {
    installModule(store, rootState, path.concat(key), child, hot);
  });
}
/**
 * make localized dispatch, commit, getters and state
 * if there is no namespace, just use root ones
 */


function makeLocalContext(store, namespace, path) {
  var noNamespace = namespace === '';
  var local = {
    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;

        if ("development" !== 'production' && !store._actions[type]) {
          console.error("[vuex] unknown local action type: " + args.type + ", global type: " + type);
          return;
        }
      }

      return store.dispatch(type, payload);
    },
    commit: noNamespace ? store.commit : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;

        if ("development" !== 'production' && !store._mutations[type]) {
          console.error("[vuex] unknown local mutation type: " + args.type + ", global type: " + type);
          return;
        }
      }

      store.commit(type, payload, options);
    }
  }; // getters and state object must be gotten lazily
  // because they will be changed by vm update

  Object.defineProperties(local, {
    getters: {
      get: noNamespace ? function () {
        return store.getters;
      } : function () {
        return makeLocalGetters(store, namespace);
      }
    },
    state: {
      get: function get() {
        return getNestedState(store.state, path);
      }
    }
  });
  return local;
}

function makeLocalGetters(store, namespace) {
  var gettersProxy = {};
  var splitPos = namespace.length;
  Object.keys(store.getters).forEach(function (type) {
    // skip if the target getter is not match this namespace
    if (type.slice(0, splitPos) !== namespace) {
      return;
    } // extract local getter type


    var localType = type.slice(splitPos); // Add a port to the getters proxy.
    // Define as getter property because
    // we do not want to evaluate the getters in this time.

    Object.defineProperty(gettersProxy, localType, {
      get: function get() {
        return store.getters[type];
      },
      enumerable: true
    });
  });
  return gettersProxy;
}

function registerMutation(store, type, handler, local) {
  var entry = store._mutations[type] || (store._mutations[type] = []);
  entry.push(function wrappedMutationHandler(payload) {
    handler.call(store, local.state, payload);
  });
}

function registerAction(store, type, handler, local) {
  var entry = store._actions[type] || (store._actions[type] = []);
  entry.push(function wrappedActionHandler(payload, cb) {
    var res = handler.call(store, {
      dispatch: local.dispatch,
      commit: local.commit,
      getters: local.getters,
      state: local.state,
      rootGetters: store.getters,
      rootState: store.state
    }, payload, cb);

    if (!isPromise(res)) {
      res = Promise.resolve(res);
    }

    if (store._devtoolHook) {
      return res.catch(function (err) {
        store._devtoolHook.emit('vuex:error', err);

        throw err;
      });
    } else {
      return res;
    }
  });
}

function registerGetter(store, type, rawGetter, local) {
  if (store._wrappedGetters[type]) {
    if (true) {
      console.error("[vuex] duplicate getter key: " + type);
    }

    return;
  }

  store._wrappedGetters[type] = function wrappedGetter(store) {
    return rawGetter(local.state, // local state
    local.getters, // local getters
    store.state, // root state
    store.getters // root getters
    );
  };
}

function enableStrictMode(store) {
  store._vm.$watch(function () {
    return this._data.$$state;
  }, function () {
    if (true) {
      assert(store._committing, "Do not mutate vuex store state outside mutation handlers.");
    }
  }, {
    deep: true,
    sync: true
  });
}

function getNestedState(state, path) {
  return path.length ? path.reduce(function (state, key) {
    return state[key];
  }, state) : state;
}

function unifyObjectStyle(type, payload, options) {
  if (isObject(type) && type.type) {
    options = payload;
    payload = type;
    type = type.type;
  }

  if (true) {
    assert(typeof type === 'string', "Expects string as the type, but found " + _typeof(type) + ".");
  }

  return {
    type: type,
    payload: payload,
    options: options
  };
}

function install(_Vue) {
  if (Vue && _Vue === Vue) {
    if (true) {
      console.error('[vuex] already installed. Vue.use(Vuex) should be called only once.');
    }

    return;
  }

  Vue = _Vue;
  applyMixin(Vue);
}

var mapState = normalizeNamespace(function (namespace, states) {
  var res = {};
  normalizeMap(states).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedState() {
      var state = this.$store.state;
      var getters = this.$store.getters;

      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapState', namespace);

        if (!module) {
          return;
        }

        state = module.context.state;
        getters = module.context.getters;
      }

      return typeof val === 'function' ? val.call(this, state, getters) : state[val];
    }; // mark vuex getter for devtools


    res[key].vuex = true;
  });
  return res;
});
var mapMutations = normalizeNamespace(function (namespace, mutations) {
  var res = {};
  normalizeMap(mutations).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedMutation() {
      var args = [],
          len = arguments.length;

      while (len--) {
        args[len] = arguments[len];
      }

      var commit = this.$store.commit;

      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);

        if (!module) {
          return;
        }

        commit = module.context.commit;
      }

      return typeof val === 'function' ? val.apply(this, [commit].concat(args)) : commit.apply(this.$store, [val].concat(args));
    };
  });
  return res;
});
var mapGetters = normalizeNamespace(function (namespace, getters) {
  var res = {};
  normalizeMap(getters).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;
    val = namespace + val;

    res[key] = function mappedGetter() {
      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {
        return;
      }

      if ("development" !== 'production' && !(val in this.$store.getters)) {
        console.error("[vuex] unknown getter: " + val);
        return;
      }

      return this.$store.getters[val];
    }; // mark vuex getter for devtools


    res[key].vuex = true;
  });
  return res;
});
var mapActions = normalizeNamespace(function (namespace, actions) {
  var res = {};
  normalizeMap(actions).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedAction() {
      var args = [],
          len = arguments.length;

      while (len--) {
        args[len] = arguments[len];
      }

      var dispatch = this.$store.dispatch;

      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);

        if (!module) {
          return;
        }

        dispatch = module.context.dispatch;
      }

      return typeof val === 'function' ? val.apply(this, [dispatch].concat(args)) : dispatch.apply(this.$store, [val].concat(args));
    };
  });
  return res;
});

var createNamespacedHelpers = function createNamespacedHelpers(namespace) {
  return {
    mapState: mapState.bind(null, namespace),
    mapGetters: mapGetters.bind(null, namespace),
    mapMutations: mapMutations.bind(null, namespace),
    mapActions: mapActions.bind(null, namespace)
  };
};

function normalizeMap(map) {
  return Array.isArray(map) ? map.map(function (key) {
    return {
      key: key,
      val: key
    };
  }) : Object.keys(map).map(function (key) {
    return {
      key: key,
      val: map[key]
    };
  });
}

function normalizeNamespace(fn) {
  return function (namespace, map) {
    if (typeof namespace !== 'string') {
      map = namespace;
      namespace = '';
    } else if (namespace.charAt(namespace.length - 1) !== '/') {
      namespace += '/';
    }

    return fn(namespace, map);
  };
}

function getModuleByNamespace(store, helper, namespace) {
  var module = store._modulesNamespaceMap[namespace];

  if ("development" !== 'production' && !module) {
    console.error("[vuex] module namespace not found in " + helper + "(): " + namespace);
  }

  return module;
}

var index_esm = {
  Store: Store,
  install: install,
  version: '3.0.1',
  mapState: mapState,
  mapMutations: mapMutations,
  mapGetters: mapGetters,
  mapActions: mapActions,
  createNamespacedHelpers: createNamespacedHelpers
};

/* harmony default export */ __webpack_exports__["default"] = (index_esm);

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
  // This works if the window reference is available
  if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function get() {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function get() {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ }),

/***/ "./node_modules/whatwg-fetch/fetch.js":
/*!********************************************!*\
  !*** ./node_modules/whatwg-fetch/fetch.js ***!
  \********************************************/
/*! exports provided: Headers, Request, Response, DOMException, fetch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Headers", function() { return Headers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Request", function() { return Request; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Response", function() { return Response; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOMException", function() { return DOMException; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fetch", function() { return fetch; });
var support = {
  searchParams: 'URLSearchParams' in self,
  iterable: 'Symbol' in self && 'iterator' in Symbol,
  blob: 'FileReader' in self && 'Blob' in self && function () {
    try {
      new Blob();
      return true;
    } catch (e) {
      return false;
    }
  }(),
  formData: 'FormData' in self,
  arrayBuffer: 'ArrayBuffer' in self
};

function isDataView(obj) {
  return obj && DataView.prototype.isPrototypeOf(obj);
}

if (support.arrayBuffer) {
  var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

  var isArrayBufferView = ArrayBuffer.isView || function (obj) {
    return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
  };
}

function normalizeName(name) {
  if (typeof name !== 'string') {
    name = String(name);
  }

  if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
    throw new TypeError('Invalid character in header field name');
  }

  return name.toLowerCase();
}

function normalizeValue(value) {
  if (typeof value !== 'string') {
    value = String(value);
  }

  return value;
} // Build a destructive iterator for the value list


function iteratorFor(items) {
  var iterator = {
    next: function next() {
      var value = items.shift();
      return {
        done: value === undefined,
        value: value
      };
    }
  };

  if (support.iterable) {
    iterator[Symbol.iterator] = function () {
      return iterator;
    };
  }

  return iterator;
}

function Headers(headers) {
  this.map = {};

  if (headers instanceof Headers) {
    headers.forEach(function (value, name) {
      this.append(name, value);
    }, this);
  } else if (Array.isArray(headers)) {
    headers.forEach(function (header) {
      this.append(header[0], header[1]);
    }, this);
  } else if (headers) {
    Object.getOwnPropertyNames(headers).forEach(function (name) {
      this.append(name, headers[name]);
    }, this);
  }
}

Headers.prototype.append = function (name, value) {
  name = normalizeName(name);
  value = normalizeValue(value);
  var oldValue = this.map[name];
  this.map[name] = oldValue ? oldValue + ', ' + value : value;
};

Headers.prototype['delete'] = function (name) {
  delete this.map[normalizeName(name)];
};

Headers.prototype.get = function (name) {
  name = normalizeName(name);
  return this.has(name) ? this.map[name] : null;
};

Headers.prototype.has = function (name) {
  return this.map.hasOwnProperty(normalizeName(name));
};

Headers.prototype.set = function (name, value) {
  this.map[normalizeName(name)] = normalizeValue(value);
};

Headers.prototype.forEach = function (callback, thisArg) {
  for (var name in this.map) {
    if (this.map.hasOwnProperty(name)) {
      callback.call(thisArg, this.map[name], name, this);
    }
  }
};

Headers.prototype.keys = function () {
  var items = [];
  this.forEach(function (value, name) {
    items.push(name);
  });
  return iteratorFor(items);
};

Headers.prototype.values = function () {
  var items = [];
  this.forEach(function (value) {
    items.push(value);
  });
  return iteratorFor(items);
};

Headers.prototype.entries = function () {
  var items = [];
  this.forEach(function (value, name) {
    items.push([name, value]);
  });
  return iteratorFor(items);
};

if (support.iterable) {
  Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
}

function consumed(body) {
  if (body.bodyUsed) {
    return Promise.reject(new TypeError('Already read'));
  }

  body.bodyUsed = true;
}

function fileReaderReady(reader) {
  return new Promise(function (resolve, reject) {
    reader.onload = function () {
      resolve(reader.result);
    };

    reader.onerror = function () {
      reject(reader.error);
    };
  });
}

function readBlobAsArrayBuffer(blob) {
  var reader = new FileReader();
  var promise = fileReaderReady(reader);
  reader.readAsArrayBuffer(blob);
  return promise;
}

function readBlobAsText(blob) {
  var reader = new FileReader();
  var promise = fileReaderReady(reader);
  reader.readAsText(blob);
  return promise;
}

function readArrayBufferAsText(buf) {
  var view = new Uint8Array(buf);
  var chars = new Array(view.length);

  for (var i = 0; i < view.length; i++) {
    chars[i] = String.fromCharCode(view[i]);
  }

  return chars.join('');
}

function bufferClone(buf) {
  if (buf.slice) {
    return buf.slice(0);
  } else {
    var view = new Uint8Array(buf.byteLength);
    view.set(new Uint8Array(buf));
    return view.buffer;
  }
}

function Body() {
  this.bodyUsed = false;

  this._initBody = function (body) {
    this._bodyInit = body;

    if (!body) {
      this._bodyText = '';
    } else if (typeof body === 'string') {
      this._bodyText = body;
    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
      this._bodyBlob = body;
    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
      this._bodyFormData = body;
    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
      this._bodyText = body.toString();
    } else if (support.arrayBuffer && support.blob && isDataView(body)) {
      this._bodyArrayBuffer = bufferClone(body.buffer); // IE 10-11 can't handle a DataView body.

      this._bodyInit = new Blob([this._bodyArrayBuffer]);
    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
      this._bodyArrayBuffer = bufferClone(body);
    } else {
      this._bodyText = body = Object.prototype.toString.call(body);
    }

    if (!this.headers.get('content-type')) {
      if (typeof body === 'string') {
        this.headers.set('content-type', 'text/plain;charset=UTF-8');
      } else if (this._bodyBlob && this._bodyBlob.type) {
        this.headers.set('content-type', this._bodyBlob.type);
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
      }
    }
  };

  if (support.blob) {
    this.blob = function () {
      var rejected = consumed(this);

      if (rejected) {
        return rejected;
      }

      if (this._bodyBlob) {
        return Promise.resolve(this._bodyBlob);
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(new Blob([this._bodyArrayBuffer]));
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as blob');
      } else {
        return Promise.resolve(new Blob([this._bodyText]));
      }
    };

    this.arrayBuffer = function () {
      if (this._bodyArrayBuffer) {
        return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
      } else {
        return this.blob().then(readBlobAsArrayBuffer);
      }
    };
  }

  this.text = function () {
    var rejected = consumed(this);

    if (rejected) {
      return rejected;
    }

    if (this._bodyBlob) {
      return readBlobAsText(this._bodyBlob);
    } else if (this._bodyArrayBuffer) {
      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
    } else if (this._bodyFormData) {
      throw new Error('could not read FormData body as text');
    } else {
      return Promise.resolve(this._bodyText);
    }
  };

  if (support.formData) {
    this.formData = function () {
      return this.text().then(decode);
    };
  }

  this.json = function () {
    return this.text().then(JSON.parse);
  };

  return this;
} // HTTP methods whose capitalization should be normalized


var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

function normalizeMethod(method) {
  var upcased = method.toUpperCase();
  return methods.indexOf(upcased) > -1 ? upcased : method;
}

function Request(input, options) {
  options = options || {};
  var body = options.body;

  if (input instanceof Request) {
    if (input.bodyUsed) {
      throw new TypeError('Already read');
    }

    this.url = input.url;
    this.credentials = input.credentials;

    if (!options.headers) {
      this.headers = new Headers(input.headers);
    }

    this.method = input.method;
    this.mode = input.mode;
    this.signal = input.signal;

    if (!body && input._bodyInit != null) {
      body = input._bodyInit;
      input.bodyUsed = true;
    }
  } else {
    this.url = String(input);
  }

  this.credentials = options.credentials || this.credentials || 'same-origin';

  if (options.headers || !this.headers) {
    this.headers = new Headers(options.headers);
  }

  this.method = normalizeMethod(options.method || this.method || 'GET');
  this.mode = options.mode || this.mode || null;
  this.signal = options.signal || this.signal;
  this.referrer = null;

  if ((this.method === 'GET' || this.method === 'HEAD') && body) {
    throw new TypeError('Body not allowed for GET or HEAD requests');
  }

  this._initBody(body);
}

Request.prototype.clone = function () {
  return new Request(this, {
    body: this._bodyInit
  });
};

function decode(body) {
  var form = new FormData();
  body.trim().split('&').forEach(function (bytes) {
    if (bytes) {
      var split = bytes.split('=');
      var name = split.shift().replace(/\+/g, ' ');
      var value = split.join('=').replace(/\+/g, ' ');
      form.append(decodeURIComponent(name), decodeURIComponent(value));
    }
  });
  return form;
}

function parseHeaders(rawHeaders) {
  var headers = new Headers(); // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
  // https://tools.ietf.org/html/rfc7230#section-3.2

  var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
  preProcessedHeaders.split(/\r?\n/).forEach(function (line) {
    var parts = line.split(':');
    var key = parts.shift().trim();

    if (key) {
      var value = parts.join(':').trim();
      headers.append(key, value);
    }
  });
  return headers;
}

Body.call(Request.prototype);
function Response(bodyInit, options) {
  if (!options) {
    options = {};
  }

  this.type = 'default';
  this.status = options.status === undefined ? 200 : options.status;
  this.ok = this.status >= 200 && this.status < 300;
  this.statusText = 'statusText' in options ? options.statusText : 'OK';
  this.headers = new Headers(options.headers);
  this.url = options.url || '';

  this._initBody(bodyInit);
}
Body.call(Response.prototype);

Response.prototype.clone = function () {
  return new Response(this._bodyInit, {
    status: this.status,
    statusText: this.statusText,
    headers: new Headers(this.headers),
    url: this.url
  });
};

Response.error = function () {
  var response = new Response(null, {
    status: 0,
    statusText: ''
  });
  response.type = 'error';
  return response;
};

var redirectStatuses = [301, 302, 303, 307, 308];

Response.redirect = function (url, status) {
  if (redirectStatuses.indexOf(status) === -1) {
    throw new RangeError('Invalid status code');
  }

  return new Response(null, {
    status: status,
    headers: {
      location: url
    }
  });
};

var DOMException = self.DOMException;

try {
  new DOMException();
} catch (err) {
  DOMException = function DOMException(message, name) {
    this.message = message;
    this.name = name;
    var error = Error(message);
    this.stack = error.stack;
  };

  DOMException.prototype = Object.create(Error.prototype);
  DOMException.prototype.constructor = DOMException;
}

function fetch(input, init) {
  return new Promise(function (resolve, reject) {
    var request = new Request(input, init);

    if (request.signal && request.signal.aborted) {
      return reject(new DOMException('Aborted', 'AbortError'));
    }

    var xhr = new XMLHttpRequest();

    function abortXhr() {
      xhr.abort();
    }

    xhr.onload = function () {
      var options = {
        status: xhr.status,
        statusText: xhr.statusText,
        headers: parseHeaders(xhr.getAllResponseHeaders() || '')
      };
      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
      var body = 'response' in xhr ? xhr.response : xhr.responseText;
      resolve(new Response(body, options));
    };

    xhr.onerror = function () {
      reject(new TypeError('Network request failed'));
    };

    xhr.ontimeout = function () {
      reject(new TypeError('Network request failed'));
    };

    xhr.onabort = function () {
      reject(new DOMException('Aborted', 'AbortError'));
    };

    xhr.open(request.method, request.url, true);

    if (request.credentials === 'include') {
      xhr.withCredentials = true;
    } else if (request.credentials === 'omit') {
      xhr.withCredentials = false;
    }

    if ('responseType' in xhr && support.blob) {
      xhr.responseType = 'blob';
    }

    request.headers.forEach(function (value, name) {
      xhr.setRequestHeader(name, value);
    });

    if (request.signal) {
      request.signal.addEventListener('abort', abortXhr);

      xhr.onreadystatechange = function () {
        // DONE (success or failure)
        if (xhr.readyState === 4) {
          request.signal.removeEventListener('abort', abortXhr);
        }
      };
    }

    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
  });
}
fetch.polyfill = true;

if (!self.fetch) {
  self.fetch = fetch;
  self.Headers = Headers;
  self.Request = Request;
  self.Response = Response;
}

/***/ }),

/***/ "./node_modules/window-or-global/lib/index.js":
/*!****************************************************!*\
  !*** ./node_modules/window-or-global/lib/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

module.exports = (typeof self === "undefined" ? "undefined" : _typeof(self)) === 'object' && self.self === self && self || (typeof global === "undefined" ? "undefined" : _typeof(global)) === 'object' && global.global === global && global || this;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/wrappy/wrappy.js":
/*!***************************************!*\
  !*** ./node_modules/wrappy/wrappy.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Returns a wrapper function that returns a wrapped callback
// The wrapper function should do some stuff, and return a
// presumably different callback function.
// This makes sure that own properties are retained, so that
// decorations and such are not lost along the way.
module.exports = wrappy;

function wrappy(fn, cb) {
  if (fn && cb) return wrappy(fn)(cb);
  if (typeof fn !== 'function') throw new TypeError('need wrapper function');
  Object.keys(fn).forEach(function (k) {
    wrapper[k] = fn[k];
  });
  return wrapper;

  function wrapper() {
    var args = new Array(arguments.length);

    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    var ret = fn.apply(this, args);
    var cb = args[args.length - 1];

    if (typeof ret === 'function' && ret !== cb) {
      Object.keys(cb).forEach(function (k) {
        ret[k] = cb[k];
      });
    }

    return ret;
  }
}

/***/ }),

/***/ "./src/controllers/store.js":
/*!**********************************!*\
  !*** ./src/controllers/store.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _herajs_wallet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @herajs/wallet */ "./node_modules/@herajs/wallet/dist/herajs-wallet.iife.js");
/* harmony import */ var _herajs_wallet__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_herajs_wallet__WEBPACK_IMPORTED_MODULE_0__);

var store = new _herajs_wallet__WEBPACK_IMPORTED_MODULE_0__["IndexedDbStorage"]('data', 2);
/* harmony default export */ __webpack_exports__["default"] = (store);

/***/ }),

/***/ 0:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 1:
/*!**********************!*\
  !*** util (ignored) ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 3:
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 4:
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

}]);
//# sourceMappingURL=vendor.js.map