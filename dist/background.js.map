{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/manifest.json","webpack:///./src/controllers/config.js","webpack:///./src/controllers/tx-scanner.js","webpack:///./src/controllers/state.js","webpack:///./src/controllers/background.js","webpack:///./src/background.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","config","chains","chainId","nodeUrl","tx_scanner_AergoscanTransactionScanner","AergoscanTransactionScanner","_classCallCheck","this","_createClass","wallet","next","_ref2","_asyncToGenerator","regeneratorRuntime","mark","_callee","_ref","account","blockno","limit","baseUrl","address","q","size","offset","url","response","wrap","_context","prev","spec","abrupt","herajs","console","log","concat","encodeURIComponent","fetch","sent","json","hits","total","map","tx","herajs_wallet_iife","hash","from","meta","to","ts","blockhash","amount","type","status","Status","Confirmed","stop","_x","arguments","_this","_ref3","_callee3","accountSpec","_ref4","bestHeight","_context3","accountManager","getCompleteAccountSpec","getClient","blockchain","fetchAccountTransactionsBefore","_callee2","_context2","_x2","state","State","state_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","_idleTimeout","set","events","nextState","_this2","clearTimeout","setTimeout","emit","background","BackgroundController","background_classCallCheck","background_possibleConstructorReturn","background_getPrototypeOf","id","extensionizer_default","a","runtime","requests","lastRequestId","uiState","popupOpen","_lockTimeout","appName","instanceId","use","useStorage","store","then","background_asyncToGenerator","customChains","_arr","_i","firstLoad","datastore","getIndex","keys","useChain","t0","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","iterator","done","chain","err","return","keyManager","on","unlocked","pause","transactionManager","resume","lock","getAccounts","accounts","_iterator2","_iteratorNormalCompletion2","_step2","trackAccount","passphrase","unlock","keepUnlocked","setupAndUnlock","getOrAddAccount","activeAccount","onceCb","_this3","accountTracker","removeAllListeners","senderURL","callback","cancelCallback","requestId","windows","getCurrent","left","Math","max","width","chrome","getURL","height","top","respondCancel","request","error","message","signMessage","buffer","txData","prepareTransaction","preparedTxData","signTransaction","txBody","sendTransaction","txTracker","transaction","outStream","_this4","dnode","browser_default","_unlock2","_callee10","_ref6","send","password","_context10","_x7","_x8","_lock","_callee11","_context11","_x9","setup","_setup","_callee12","_ref7","_context12","_x10","_x11","isUnlocked","_isUnlocked","_callee13","_context13","_x12","reset","_reset","_callee14","_context14","deleteAllData","_x13","addNetwork","_addNetwork","_callee15","_ref8","_context15","put","_x14","_x15","getBlockchainStatus","_getBlockchainStatus","_callee16","_ref9","_context16","blockHeight","_x16","_x17","_getAccounts","_callee17","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_context17","finish","_x18","createAccount","_createAccount","_callee18","_ref10","_context18","_x19","_x20","removeAccount","_removeAccount","_callee19","_ref11","_context19","_x21","_x22","setActiveAccount","_setActiveAccount2","_callee20","_ref12","_context20","_x23","_x24","getActiveAccount","_getActiveAccount2","_callee21","_context21","_x25","importAccount","_importAccount","_callee22","_ref13","privateKey","identity","_context22","herajs_crypto_umd","addAccount","importKey","_x26","_x27","exportAccount","_exportAccount","_callee23","_ref14","format","privkeyEncrypted","_context23","getUnlockedKey","t1","t2","JSON","t3","stringify","_x28","_x29","_sendTransaction2","_callee24","_context24","_x30","_x31","_x32","_signTransaction2","_callee25","_context25","_x33","_x34","_x35","getAccountTx","_getAccountTx","_callee26","txs","_context26","getAccountTransactions","sort","b","_x36","_x37","syncAccountState","_syncAccountState","_callee27","_context27","_x38","_x39","_signMessage2","_callee28","_ref15","signedMessage","_context28","_x40","_x41","getStaking","_getStaking","_callee29","_ref16","_context29","toString","when","_x42","_x43","getPermissionRequestData","_getPermissionRequestData","_callee30","_context30","_x44","_x45","respondToPermissionRequest","_respondToPermissionRequest","_callee31","_ref17","_context31","_x46","_x47","denyPermissionRequest","_denyPermissionRequest","_callee32","_context32","_x48","_x49","getChainInfo","_getChainInfo","_callee33","_ref18","chainInfo","_context33","parse","_x50","_x51","pump_default","remote","sendUpdate","controller","connectRemote","remotePort","processName","onMessage","addListener","src_background_asyncToGenerator","msg","port","actions","actionsToEventName","action","origin","sender","ACTIVE_ACCOUNT","SIGN","SIGN_TX","SEND_TX","indexOf","URL","permissionRequest","postMessage","eventName","portStream","extension_port_stream_default","setupCommunication","end_of_stream_default","onConnect","setupController","contextMenus","removeAll","title","contexts","onclick","tabs"],"mappings":"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","file":"background.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([329,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","module.exports = __webpack_public_path__ + \"manifest.json\";","export default {\n    chains: [\n        {\n            chainId: 'testnet.aergo.io',\n            nodeUrl: 'http://testnet.aergo.io:7845'\n        },\n        {\n            chainId: 'main.aergo.io',\n            nodeUrl: 'https://mainnet-api-http.aergo.io'\n        },\n        {\n            chainId: 'aergo.io',\n            nodeUrl: 'https://mainnet-api-http.aergo.io'\n        },\n        {\n            chainId: 'sqltestnet.aergo.io',\n            nodeUrl: 'https://sqltestnet-api-http.aergo.io'\n        },\n        {\n            chainId: 'dev.chain',\n            nodeUrl: 'http://127.0.0.1:7845'\n        }\n    ]\n};","import { Address } from '@herajs/client';\nimport { Transaction } from '@herajs/wallet';\n\n/**\n * This is a data source for transactionManager.getAccountTransactions.\n * It uses the Aergoscan API which is experimental and subject to change.\n * It is not recommended to use this data source.\n */\nexport class AergoscanTransactionScanner {\n    fetchAccountTransactionsAfter(wallet) {\n        return (next) => async ({ account, blockno, limit }) => {\n            const chainId = account.data.spec.chainId\n            if (chainId !== 'testnet.aergo.io' && chainId !== 'aergo.io') {\n                return next({ account, blockno, limit });\n            }\n            let baseUrl;\n            if (chainId == 'testnet.aergo.io') {\n                baseUrl = 'https://api.aergoscan.io/testnet';\n            }\n            if (chainId == 'aergo.io') {\n                baseUrl = 'https://api.aergoscan.io/main';\n            }\n            const address = new Address(account.data.spec.address);\n            console.log(`[track account] Fetching txs for ${address} on ${chainId} since ${blockno}...`);\n            const q = encodeURIComponent(`(from:${address} OR to:${address}) AND blockno:>${blockno}`);\n            \n            const size = 1000;\n            const offset = 0;\n            const url = `${baseUrl}/transactions?q=${q}&sort=blockno:desc&size=${size}&from=${offset}`;\n            const response = await fetch(url);\n            const data = await response.json();\n            console.log(`[track account] Got ${data.hits.length} (of ${data.total}) txs for ${address} since ${blockno}.`);\n            return data.hits.map(tx => new Transaction(tx.hash, {\n                chainId,\n                from: tx.meta.from,\n                to: tx.meta.to,\n                hash: tx.hash,\n                ts: tx.meta.ts,\n                blockhash: '', // TODO: remove or add?\n                blockno: tx.meta.blockno,\n                amount: tx.meta.amount,\n                type: tx.meta.type,\n                status: Transaction.Status.Confirmed\n            }));\n        };\n    }\n\n    fetchAccountTransactions(wallet) {\n        return () => async (account) => {\n            const accountSpec = wallet.accountManager.getCompleteAccountSpec(account.data.spec);\n            const { bestHeight } = await wallet.getClient(accountSpec.chainId).blockchain();\n            return this.fetchAccountTransactionsBefore(wallet)(async () => [])({ account, blockno: bestHeight });\n        };\n    }\n}","import {EventEmitter} from 'events';\n\nconst IDLE_TIMEOUT = 60 * 1000;\n\nclass State extends EventEmitter {\n    constructor() {\n        super();\n        this._idleTimeout = null;\n        this.set('initial');\n    }\n\n    /**\n     * App states: initial -> active -> inactive -> idle\n     * Opening UI switches state to active. Closing UI switches state to inactive.\n     * After being inactive for a certain amount of time, switch to idle.\n     * @param {string} nextState \n     */\n    set(nextState) {\n        if (nextState != 'inactive') {\n            if (this._idleTimeout) {\n                clearTimeout(this._idleTimeout);\n            }\n        }\n        if (this.state != nextState && nextState == 'inactive') {\n            if (this._idleTimeout) {\n                clearTimeout(this._idleTimeout);\n            }\n            this._idleTimeout = setTimeout(() => {\n                this.set('idle');\n            }, IDLE_TIMEOUT);\n        }\n        if (this.state != nextState) {\n            console.log(`[state] ${this.state} -> ${nextState}`);\n        }\n        this.state = nextState;\n        this.emit('change', nextState);\n        this.emit(nextState);\n    }\n}\n\nexport default State;","import extension from 'extensionizer';\nimport { EventEmitter } from 'events';\nimport pump from 'pump';\nimport Dnode from 'dnode/browser.js';\n\nimport { Wallet } from '@herajs/wallet';\nimport config from './config';\nimport store from './store';\nimport { AergoscanTransactionScanner } from './tx-scanner';\n\nimport {\n    identifyFromPrivateKey,\n    encryptPrivateKey,\n    encodePrivateKey,\n    keystoreFromPrivateKey,\n} from '@herajs/crypto';\nimport State from './state';\nimport 'whatwg-fetch';\n\nimport bs58 from 'bs58';\nimport { Buffer } from 'buffer';\n\nexport function encodeTxHash(bytes) {\n    return bs58.encode(Buffer.from(bytes));\n}\n\nexport function decodeTxHash(bs58string) {\n    return bs58.decode(bs58string);\n}\n\nconst AUTO_LOCK_TIMEOUT = 60*1000 * 3; // 3 minutes\n\nclass BackgroundController extends EventEmitter {\n    constructor() {\n        super();\n\n        this.id = extension.runtime.id;\n\n        this.requests = {};\n        this.lastRequestId = 0;\n\n        this.uiState = {\n            popupOpen: false\n        }\n        this.state = new State();\n        this._lockTimeout = null;\n\n        this.wallet = new Wallet({\n            appName: 'aergo-browser-wallet',\n            instanceId: this.id\n        });\n        this.wallet.use(AergoscanTransactionScanner);\n        this.wallet.useStorage(store).then(async () => {\n            this.firstLoad();\n            // Load custom defined chains\n            try {\n                const customChains = await this.wallet.datastore.getIndex('settings').get('customChains')\n                for (let chainId of Object.keys(customChains.data)) {\n                    this.wallet.useChain({ chainId, nodeUrl: customChains.data[chainId].nodeUrl});\n                }\n            } catch (e) {\n                // not found\n            }\n        });\n        for (let chain of config.chains) {\n            this.wallet.useChain(chain);\n        }\n\n        this.wallet.keyManager.on('lock', () => {\n            this.emit('update', { unlocked: false });\n            console.log('[lock] locked');\n        });\n        this.wallet.keyManager.on('unlock', () => {\n            this.emit('update', { unlocked: true });\n            console.log('[lock] unlocked');\n        });\n\n        this.state.on('idle', () => {\n            console.log('[state] idle, pausing trackers');\n            this.wallet.accountManager.pause();\n            this.wallet.transactionManager.pause();\n        });\n        this.state.on('active', () => {\n            console.log('[state] active, resuming trackers');\n            this.wallet.accountManager.resume();\n            this.wallet.transactionManager.resume();\n        });\n\n        this.lock();\n    }\n\n    async firstLoad() {\n        const accounts = await this.wallet.accountManager.getAccounts();\n        for (let account of accounts) {\n            this.trackAccount(account);\n        }\n    }\n\n    lock () {\n        this.wallet.lock();\n    }\n    \n    async unlock (passphrase) {\n        await this.wallet.unlock(passphrase);\n        this.keepUnlocked();\n    }\n\n    async setupAndUnlock (passphrase) {\n        await this.wallet.setupAndUnlock(passphrase);\n        this.keepUnlocked();\n    }\n\n    async setActiveAccount({ chainId, address }) {\n        const account = await this.wallet.accountManager.getOrAddAccount({ address, chainId });\n        this.activeAccount = account;\n        console.log('Active account is now', { chainId, address });\n    }\n\n    async getActiveAccount() {\n        //const accounts = await this.wallet.accountManager.getAccounts();\n        //if (!accounts) return null;\n        //return accounts[0];\n        return this.activeAccount;\n    }\n\n    keepUnlocked() {\n        if (this._lockTimeout) {\n            clearTimeout(this._lockTimeout);\n        }\n        this._lockTimeout = setTimeout(() => {\n            console.log('[lock] auto-locking...');\n            this.lock();\n        }, AUTO_LOCK_TIMEOUT);\n    }\n\n    isUiOpen() {\n        return this.uiState.popupOpen;\n    }\n\n    trackAccount(account, onceCb) {\n        const accountTracker = this.wallet.accountManager.trackAccount(account);\n        this.wallet.transactionManager.trackAccount(account);\n        accountTracker.then(t => {\n            t.removeAllListeners('update');\n            t.on('update', account => {\n                console.log('got new state', account);\n                this.emit('update', { accounts: [account] });\n                if (onceCb) {\n                    onceCb(account);\n                    onceCb = false;\n                }\n            });\n        });\n    }\n\n    permissionRequest(type, data, senderURL, callback, cancelCallback) {\n        const requestId = this.lastRequestId++;\n        this.requests[requestId] = {\n            type,\n            data,\n            senderURL,\n            callback,\n            cancelCallback,\n        };\n        extension.windows.getCurrent((window) => {\n            const left = Math.max(0, window.left + window.width - 330);\n            extension.windows.create({\n                url: chrome.runtime.getURL(`popup-request.html?request=${requestId}`),\n                type: \"popup\",\n                width: 330,\n                height: 525,\n                top: window.top,\n                left,\n            });\n        });\n    }\n\n    respondToPermissionRequest (requestId, result, respondCancel = false) {\n        const request = this.requests[requestId];\n        if (!request) return;\n        if (respondCancel) {\n            request.cancelCallback({\n                error: 'user cancelled request',\n            });\n            return;\n        }\n        request.callback(result);\n    }\n\n    async signMessage ({ address, chainId, message }) {\n        this.keepUnlocked(); \n        const account = await this.wallet.accountManager.getOrAddAccount({ address, chainId });\n        return await this.wallet.keyManager.signMessage(account, Buffer.from(message));\n    }\n\n    async signTransaction ({ address, chainId, txData }) {\n        this.keepUnlocked(); \n        const account = await this.wallet.accountManager.getOrAddAccount({ address, chainId });\n        const preparedTxData = await this.wallet.accountManager.prepareTransaction(account, txData);\n        return await this.wallet.keyManager.signTransaction(account, preparedTxData);\n    }\n\n    async sendTransaction ({ txBody, chainId }) {\n        this.keepUnlocked();\n        const txTracker = await this.wallet.sendTransaction({\n            address: txBody.from,\n            chainId: chainId\n        }, txBody);\n        console.log(txTracker, txTracker.transaction.txBody);\n        return txTracker.transaction.txBody;\n    }\n\n    setupCommunication (outStream) {\n        // Setup async rpc stream to UI\n        const dnode = Dnode({\n            unlock: async ({ password }, send) => {\n                try {\n                    await this.unlock(password);\n                } catch (e) {\n                    console.error(e);\n                    send({ error: ''+e });\n                    return;\n                }\n                send({});\n            },\n            lock: async (send) => {\n                this.lock();\n                send({});\n            },\n            setup: async ({ password }, send) => {\n                await this.setupAndUnlock(password);\n                send({});\n            },\n            isUnlocked: async (send) => {\n                send(this.wallet.unlocked);\n            },\n            reset: async (send) => {\n                await this.wallet.deleteAllData();\n                send();\n            },\n            addNetwork: async ({ chainId, nodeUrl }, send) => {\n                console.log('Adding chain', { chainId, nodeUrl });\n                this.wallet.useChain({ chainId, nodeUrl });\n                let chains = {};\n                try {\n                    chains = (await this.wallet.datastore.getIndex('settings').get('customChains')).data;\n                } catch(e) {\n                    // not found\n                }\n                chains[chainId] = { chainId, nodeUrl };\n                await this.wallet.datastore.getIndex('settings').put({\n                    key: 'customChains',\n                    data: chains\n                });\n                send({});\n            },\n            getBlockchainStatus: async ({ chainId }, send) => {\n                const status = await this.wallet.getClient(chainId).blockchain();\n                send({\n                    blockHeight: status.bestHeight,\n                    chainId\n                });\n            },\n            getAccounts: async (send) => {\n                this.keepUnlocked();\n                const accounts = await this.wallet.accountManager.getAccounts();\n                for (let account of accounts) {\n                    this.trackAccount(account);\n                }\n                send(accounts);\n            },\n            createAccount: async ({ chainId }, send) => {\n                this.keepUnlocked();\n                \n                try {\n                    const account = await this.wallet.accountManager.createAccount(chainId);\n                    this.trackAccount(account);\n                    send(account.data.spec);\n                } catch(e) {\n                    send({error: e});\n                }\n            },\n            removeAccount: async ({ chainId, address }, send) => {\n                await this.wallet.accountManager.removeAccount({ chainId, address });\n                send();\n            },\n            setActiveAccount: async ({ chainId, address }, send) => {\n                await this.setActiveAccount({ chainId, address });\n                send();\n            },\n            getActiveAccount: async (send) => {\n                const account = await this.getActiveAccount();\n                send(account);\n            },\n            importAccount: async ({ privateKey, chainId }, send) => {\n                this.keepUnlocked();\n                const identity = identifyFromPrivateKey(privateKey);\n                const address = identity.address;\n                try {\n                    const account = await this.wallet.accountManager.addAccount({ address, chainId });\n                    console.log('importAccount', account, privateKey);\n                    await this.wallet.keyManager.importKey({\n                        account: account,\n                        privateKey: privateKey\n                    });\n                    this.trackAccount(account);\n                    send(account.data.spec);\n                } catch(e) {\n                    console.error(e);\n                    send({ error: 'Could not import account. '+e });\n                }\n            },\n            exportAccount: async ({ address, chainId, password, format }, send) => {\n                this.keepUnlocked();\n                const account = await this.wallet.accountManager.getOrAddAccount({ address, chainId });\n                const key = await this.wallet.keyManager.getUnlockedKey(account);\n                console.log(account, key);\n                const privateKey = key.data.privateKey;\n                let privkeyEncrypted;\n                if (format === \"wif\") {\n                    privkeyEncrypted = encodePrivateKey(await encryptPrivateKey(privateKey, password));\n                } else {\n                    privkeyEncrypted = JSON.stringify(await keystoreFromPrivateKey(Buffer.from(privateKey), password));\n                }\n                send({privateKey: privkeyEncrypted});\n            },\n            sendTransaction: async (tx, chainId, send) => {\n                try {\n                    const txBody = await this.sendTransaction({ txBody: tx, chainId });\n                    send({ tx: txBody });\n                } catch(e) {\n                    console.error(e);\n                    send({ error: e.message || ''+e });\n                }\n            },\n            signTransaction: async (tx, chainId, send) => {\n                try {\n                    const txBody = await this.signTransaction({ txData: tx, address: tx.from, chainId });\n                    send({ tx: txBody });\n                } catch(e) {\n                    console.error(e);\n                    send({ error: e.message || ''+e });\n                }\n            },\n            getAccountTx: async (accountSpec, send) => {\n                console.log('getAccountTx', accountSpec);\n                if (!accountSpec.address) return send({});\n                const txs = await this.wallet.transactionManager.getAccountTransactions(accountSpec);\n                txs.sort((a, b) => (a.data.ts < b.data.ts ? 1 : (a.data.ts == b.data.ts ? 0 : -1)));\n                send(txs);\n            },\n            syncAccountState: async (accountSpec, send) => {\n                if (!accountSpec.address) return send({});\n                const account = await this.wallet.accountManager.getOrAddAccount(accountSpec);\n                this.trackAccount(account, send);\n            },\n            signMessage: async ({ address, chainId, message }, send) => {\n                try {\n                    const signedMessage = await this.signMessage({ address, chainId, message });\n                    send({ signedMessage });\n                } catch (e) {\n                    console.error(e);\n                    send({ error: e });\n                }\n            },\n            getStaking: async ({ address, chainId }, send) => {\n                this.keepUnlocked();\n                try {\n                    const result = await this.wallet.getClient(chainId).getStaking(address);\n                    send({\n                        amount: result.amount.toString(),\n                        when: result.when\n                    });\n                } catch(e) {\n                    send({ error: e });\n                }\n            },\n            getPermissionRequestData: async (requestId, send) => {\n                send(this.requests[requestId]);\n            },\n            respondToPermissionRequest: async ({ requestId, result }, send) =>{\n                this.respondToPermissionRequest(requestId, result);\n                send();\n            },\n            denyPermissionRequest: async (requestId, send) => {\n                if (this.requests[requestId]) {\n                    this.respondToPermissionRequest(requestId, null, true);\n                    delete this.requests[requestId];\n                }\n                send();\n            },\n            getChainInfo: async ({ chainId }, send) => {\n                const chainInfo = await this.wallet.getClient(chainId).getChainInfo();\n                send({ chainInfo: JSON.parse(JSON.stringify(chainInfo)) });\n            },\n        })\n        pump(\n            outStream,\n            dnode,\n            outStream,\n            (err) => {\n                if (err) log.error(err);\n            }\n        );\n        dnode.on('remote', (remote) => {\n            const sendUpdate = remote.sendUpdate.bind(remote);\n            this.on('update', sendUpdate)\n        });\n\n        /*setInterval(() => {\n            this.emit('update', 'something');\n        }, 1000)*/\n        this.state.on('change', (state) => {\n            this.emit('update', { state });\n        });\n    }\n}\n\nexport default BackgroundController;","import \"regenerator-runtime/runtime\";\n\nrequire('./manifest.json');\n\nimport extension from 'extensionizer';\nimport endOfStream from 'end-of-stream';\nimport PortStream from 'extension-port-stream';\n\nimport BackgroundController from './controllers/background';\n\nconsole.log('AERGO Wallet Background Script');\nconsole.log('Extension ID', extension.runtime.id);\n\nsetupController();\n\nasync function setupController() {\n    const controller = new BackgroundController();\n    extension.runtime.onConnect.addListener(connectRemote);\n    \n    function connectRemote (remotePort) {\n        const processName = remotePort.name;\n        console.log('Establishing connection with', processName);\n\n        if (processName === 'external') {\n            // Receive messages from external web pages\n            remotePort.onMessage.addListener(async (msg, port) => {\n                if (msg.type !== 'AERGO_REQUEST') return;\n                console.log('received message', msg, port.sender.url);\n\n                const actions = ['ACTIVE_ACCOUNT', 'SIGN', 'SIGN_TX', 'SEND_TX'];\n                const actionsToEventName = {\n                    'ACTIVE_ACCOUNT': 'AERGO_ACTIVE_ACCOUNT',\n                    'SIGN': 'AERGO_SIGN_RESULT',\n                    'SIGN_TX': 'AERGO_SIGN_TX_RESULT',\n                    'SEND_TX': 'AERGO_SEND_TX_RESULT',\n                }\n                const action = msg.action || '';\n                if (actions.indexOf(action) === -1) {\n                    console.log('message with invalid action type', action);\n                }\n                const origin = (new URL(port.sender.url)).origin;\n                controller.permissionRequest(action, msg.data, origin, (result) => {\n                    port.postMessage({\n                        type: 'AERGO_RESPONSE',\n                        eventName: actionsToEventName[action],\n                        result\n                    });\n                }, (result) => {\n                    port.postMessage({\n                        type: 'AERGO_CANCEL',\n                        eventName: actionsToEventName[action],\n                        result,\n                    });\n                });\n            });\n        } else {\n            const portStream = new PortStream(remotePort);\n            controller.state.set('active');\n            controller.setupCommunication(portStream);\n            controller.uiState.popupOpen = true;\n            endOfStream(portStream, () => {\n                controller.uiState.popupOpen = false;\n                console.log('Closed connection with', processName);\n                controller.state.set('inactive');\n            })\n        }\n\n        /*\n\n        const notifId = '';\n        extension.notifications.create(\n            notifId,\n            {\n                type: 'basic',\n                title: 'Aergo Wallet',\n                iconUrl: extension.extension.getURL('0da81dee4755822e45e812c8ce30d733.png'),\n                message: `Hello from the Wallet! Established connection with ${processName}. Yes.`,\n            }\n        );\n        extension.notifications.onClicked.addListener((url) => {\n            if (!txId.startsWith('http')) return;\n            console.log('clicked on', e);\n            extension.tabs.create({ url });\n        });\n\n        */\n    }\n}\n\nchrome.contextMenus.removeAll();\nchrome.contextMenus.create({\n    title: \"Open full page\",\n    contexts: [\"browser_action\"],\n    onclick: function() {\n        extension.tabs.create({url : \"tab.html\"});\n    }\n});\n\nif (process.env.NODE_ENV === 'development') {\n    extension.tabs.create({url : \"tab.html\"});\n}\n"],"sourceRoot":""}